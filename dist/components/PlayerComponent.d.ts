import { LitElement, PropertyValues } from 'lit-element';
import { Player, PlayerEvent } from '../player';
declare const PlayerComponent_base: {
    new (...args: any[]): {
        player: Player;
        readonly renderer: import("../renderers").UniversalCanvas;
        readonly audio: import("../webaudio").WebAudioPlayer;
        readonly canvasEl: HTMLCanvasElement;
        readonly note: import("../parsers").FlipnoteParserBase;
        readonly noteFormat: import("../parsers").FlipnoteFormat;
        readonly meta: import("../parsers").FlipnoteMeta;
        readonly duration: number;
        readonly layerVisibility: Record<number, boolean>;
        autoplay: boolean;
        supportedEvents: PlayerEvent[];
        _src: import("../parseSource").FlipnoteSource;
        _loop: boolean;
        _volume: number;
        _muted: boolean;
        _frame: number;
        isNoteLoaded: boolean;
        events: import("../player").PlayerEventMap;
        playbackStartTime: number;
        playbackTime: number;
        playbackLoopId: number;
        showThumbnail: boolean;
        hasPlaybackStarted: boolean;
        isPlaying: boolean;
        wasPlaying: boolean;
        isSeeking: boolean;
        src: import("../parseSource").FlipnoteSource;
        paused: boolean;
        currentFrame: number;
        currentTime: number;
        progress: number;
        volume: number;
        muted: boolean;
        loop: boolean;
        readonly framerate: number;
        readonly frameCount: number;
        readonly frameSpeed: number;
        readonly buffered: TimeRanges;
        readonly seekable: TimeRanges;
        readonly currentSrc: import("../parseSource").FlipnoteSource;
        readonly videoWidth: number;
        readonly videoHeight: number;
        load(source?: any): Promise<void>;
        closeNote(): void;
        openNote(note: import("../parsers").FlipnoteParserBase): void;
        playbackLoop: (timestamp: number) => void;
        setCurrentTime(value: number): void;
        getCurrentTime(): number;
        getTimeCounter(): string;
        getFrameCounter(): string;
        setProgress(value: number): void;
        getProgress(): number;
        play(): Promise<void>;
        pause(): void;
        togglePlay(): void;
        getPaused(): boolean;
        getDuration(): number;
        getLoop(): boolean;
        setLoop(loop: boolean): void;
        toggleLoop(): void;
        setCurrentFrame(newFrameValue: number): void;
        nextFrame(): void;
        prevFrame(): void;
        lastFrame(): void;
        firstFrame(): void;
        thumbnailFrame(): void;
        startSeek(): void;
        seek(position: number): void;
        endSeek(): void;
        drawFrame(frameIndex: number): void;
        forceUpdate(): void;
        resize(width: number, height: number): void;
        setLayerVisibility(layer: number, value: boolean): void;
        getLayerVisibility(layer: number): boolean;
        toggleLayerVisibility(layerIndex: number): void;
        playAudio(): void;
        stopAudio(): void;
        toggleAudioEq(): void;
        setAudioEq(state: boolean): void;
        mute(): void;
        unmute(): void;
        setMuted(isMute: boolean): void;
        getMuted(): boolean;
        toggleMuted(): void;
        setVolume(volume: number): void;
        getVolume(): number;
        seekToNextFrame(): void;
        fastSeek(time: number): void;
        canPlayType(mediaType: string): "" | "probably" | "maybe";
        getVideoPlaybackQuality(): VideoPlaybackQuality;
        requestPictureInPicture(): void;
        captureStream(): void;
        onplay: () => void;
        onpause: () => void;
        oncanplay: () => void;
        oncanplaythrough: () => void;
        onseeking: () => void;
        onseeked: () => void;
        ondurationchange: () => void;
        onloop: () => void;
        onended: () => void;
        onvolumechane: (volume: number) => void;
        onprogress: (progress: number) => void;
        ontimeupdate: (time: number) => void;
        onframeupdate: (frameIndex: number) => void;
        onframenext: () => void;
        onframeprev: () => void;
        onframefirst: () => void;
        onframelast: () => void;
        onready: () => void;
        onload: () => void;
        onloadstart: () => void;
        onloadeddata: () => void;
        onloadedmetadata: () => void;
        onemptied: () => void;
        onclose: () => void;
        onerror: (err?: Error) => void;
        ondestroy: () => void;
        on(eventType: PlayerEvent | PlayerEvent[], listener: Function): void;
        off(eventType: PlayerEvent | PlayerEvent[], callback: Function): void;
        emit(eventType: PlayerEvent, ...args: any): void;
        clearEvents(): void;
        destroy(): Promise<void>;
        supports(name: string): boolean;
        assertNoteLoaded(): void;
    };
} & typeof LitElement;
/**
 * @category Web Component
 * @internal
 */
export declare class PlayerComponent extends PlayerComponent_base {
    static get styles(): import("lit-element").CSSResult;
    controls: string;
    get width(): number | string;
    set width(value: number | string);
    get src(): any;
    set src(src: any);
    get autoplay(): boolean;
    set autoplay(value: boolean);
    private _width;
    private _cssWidth;
    private _progress;
    private _counter;
    private _isLoading;
    private _isError;
    private _isPlaying;
    private _isMuted;
    private _volumeLevel;
    private playerCanvasWrapper;
    private _isPlayerAvailable;
    private _playerSrc;
    private _resizeObserver;
    constructor();
    /** @internal */
    render(): import("lit-element").TemplateResult;
    /** @internal */
    renderControls(): import("lit-element").TemplateResult;
    /** @internal */
    firstUpdated(changedProperties: PropertyValues): void;
    /** @internal */
    disconnectedCallback(): void;
    private updateCanvasSize;
    private handleResize;
    private handleKeyInput;
    private handlePlayToggle;
    private handleMuteToggle;
    private handleProgressSliderChange;
    private handleProgressSliderInputStart;
    private handleProgressSliderInputEnd;
    private handleVolumeBarChange;
}
export {};

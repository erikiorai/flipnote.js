import { LitElement, PropertyValues } from 'lit-element';
import { Player, PlayerEvent } from '../player';
declare const PlayerComponent_base: {
    new (...args: any[]): {
        player: Player;
        readonly canvas: import("../webgl").WebglRenderer;
        readonly audio: import("../webaudio").WebAudioPlayer;
        readonly canvasEl: HTMLCanvasElement;
        readonly note: import("../parsers").FlipnoteParser;
        readonly noteFormat: import("../parsers").FlipnoteFormat;
        readonly meta: import("../parsers").FlipnoteMeta;
        readonly duration: number;
        readonly layerVisibility: Record<number, boolean>;
        autoplay: boolean;
        supportedEvents: PlayerEvent[];
        _src: any;
        _loop: boolean;
        _volume: number;
        _muted: boolean;
        isNoteLoaded: boolean;
        events: import("../player").PlayerEventMap;
        playbackStartTime: number;
        playbackTime: number;
        playbackLoopId: number;
        showThumbnail: boolean;
        hasPlaybackStarted: boolean;
        isPlaying: boolean;
        wasPlaying: boolean;
        isSeeking: boolean;
        src: any;
        paused: boolean;
        currentFrame: number;
        currentTime: number;
        progress: number;
        volume: number;
        muted: boolean;
        loop: boolean;
        readonly framerate: number;
        readonly frameCount: number;
        readonly frameSpeed: number;
        readonly buffered: TimeRanges;
        readonly seekable: TimeRanges;
        readonly currentSrc: any;
        readonly videoWidth: number;
        readonly videoHeight: number;
        load(source: any): Promise<void>;
        closeNote(): void;
        openNote(note: import("../parsers").FlipnoteParser): void;
        playbackLoop: (timestamp: number) => void;
        setCurrentTime(value: number): void;
        getCurrentTime(): number;
        setProgress(value: number): void;
        getProgress(): number;
        play(): Promise<void>;
        pause(): void;
        togglePlay(): void;
        getPaused(): boolean;
        getDuration(): number;
        getLoop(): boolean;
        setLoop(loop: boolean): void;
        toggleLoop(): void;
        setCurrentFrame(newFrameValue: number): void;
        nextFrame(): void;
        prevFrame(): void;
        lastFrame(): void;
        firstFrame(): void;
        thumbnailFrame(): void;
        startSeek(): void;
        seek(position: number): void;
        endSeek(): void;
        drawFrame(frameIndex: number): void;
        forceUpdate(): void;
        resize(width: number, height: number): void;
        setLayerVisibility(layer: number, value: boolean): void;
        getLayerVisibility(layer: number): boolean;
        toggleLayerVisibility(layerIndex: number): void;
        playAudio(): void;
        stopAudio(): void;
        toggleAudioEq(): void;
        setAudioEq(state: boolean): void;
        mute(): void;
        unmute(): void;
        setMuted(isMute: boolean): void;
        getMuted(): boolean;
        toggleMuted(): void;
        setVolume(volume: number): void;
        seekToNextFrame(): void;
        fastSeek(time: number): void;
        canPlayType(mediaType: string): "probably" | "maybe" | "";
        getVideoPlaybackQuality(): VideoPlaybackQuality;
        requestPictureInPicture(): void;
        captureStream(): void;
        on(eventType: PlayerEvent | PlayerEvent[], callback: Function): void;
        off(eventType: PlayerEvent | PlayerEvent[], callback: Function): void;
        emit(eventType: PlayerEvent, ...args: any): void;
        clearEvents(): void;
        destroy(): void;
        supports(name: string): boolean;
        assertNoteLoaded(): void;
        assertValueRange(value: number, min: number, max: number): void;
    };
} & typeof LitElement;
/**
 * @category Web Component
 */
export declare class PlayerComponent extends PlayerComponent_base {
    static get styles(): import("lit-element").CSSResult;
    private _progress;
    private _isPlaying;
    private playerCanvas;
    constructor();
    render(): import("lit-element").TemplateResult;
    firstUpdated(changedProperties: PropertyValues): void;
    disconnectedCallback(): void;
    private onProgressSliderChange;
    private onProgressSliderInputStart;
    private onProgressSliderInputEnd;
}
export {};

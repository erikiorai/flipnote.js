{"version":3,"sources":["webpack://flipnote/webpack/universalModuleDefinition","webpack://flipnote/webpack/bootstrap","webpack://flipnote/./utils/byteArray.ts","webpack://flipnote/./utils/index.ts","webpack://flipnote/./utils/dataStream.ts","webpack://flipnote/./loaders/urlLoader.ts","webpack://flipnote/./loaders/index.ts","webpack://flipnote/./loaders/fileLoader.ts","webpack://flipnote/./loaders/arrayBufferLoader.ts","webpack://flipnote/./parsers/adpcm.ts","webpack://flipnote/./parsers/kwzTables.ts","webpack://flipnote/./parsers/ppm.ts","webpack://flipnote/./parsers/kwz.ts","webpack://flipnote/./parsers/index.ts","webpack://flipnote/./encoders/wav.ts","webpack://flipnote/./encoders/lzw.ts","webpack://flipnote/./encoders/gif.ts","webpack://flipnote/./encoders/index.ts","webpack://flipnote/./webgl/shader.vert","webpack://flipnote/./webgl/shader.frag","webpack://flipnote/./webgl/canvas.ts","webpack://flipnote/./player/audio.ts","webpack://flipnote/./player/index.ts","webpack://flipnote/./flipnote.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ByteArray","page","pages","cursor","newPage","Uint8Array","pageSize","getData","_this","data","map","index","set","slice","getBuffer","buffer","writeByte","val","writeBytes","array","offset","length","__webpack_exports__","dataStream","SeekOrigin","DataStream","arrayBuffer","DataView","configurable","byteLength","seek","whence","End","Current","Begin","readUint8","getUint8","writeUint8","setUint8","readInt8","getInt8","writeInt8","setInt8","readUint16","littleEndian","getUint16","writeUint16","setUint16","readInt16","getInt16","writeInt16","setInt16","readUint32","getUint32","writeUint32","setUint32","readInt32","getInt32","writeInt32","setInt32","readBytes","count","bytes","forEach","byte","readHex","reverse","hex","push","toString","padStart","join","toUpperCase","readUtf8","chars","str","char","String","fromCharCode","writeUtf8","string","charCodeAt","readUtf16","Uint16Array","loaders","matches","source","load","resolve","reject","xhr","XMLHttpRequest","open","responseType","onreadystatechange","e","readyState","status","response","type","statusText","send","File","FileReader","reader_1","onload","event","result","onerror","readAsArrayBuffer","ArrayBuffer","ADPCM_INDEX_TABLE_2","Int8Array","ADPCM_INDEX_TABLE_4","ADPCM_STEP_TABLE","Int16Array","ADPCM_SAMPLE_TABLE_2","adpcm_sample","adpcm_stepIndex","adpcm_diff","step","ADPCM_SAMPLE_TABLE_4","__extends","extendStatics","b","setPrototypeOf","__proto__","Array","__","constructor","FRAMERATES","PALETTE","WHITE","BLACK","RED","BLUE","ppm_PpmParser","_super","PpmParser","width","height","palette","globalPalette","sampleRate","prevDecodedFrame","decodeHeader","decodeAnimationHeader","decodeSoundHeader","decodeMeta","layers","prevLayers","validateFSID","fsid","test","validateFilename","filename","readFilename","readLineEncoding","unpacked","byteIndex","bitOffset","frameDataLength","soundDataLength","frameCount","version","lock","thumbIndex","rootAuthorName","parentAuthorName","currentAuthorName","parentAuthorId","currentAuthorId","parentFilename","currentFilename","rootAuthorId","timestamp","Date","flags","thumbFrameIndex","meta","loop","frame_count","frame_speed","frameSpeed","bgm_speed","bgmSpeed","thumb_index","spinoff","username","parent","current","offsetTableLength","frameOffsets","Uint32Array","bgmLen","se1Len","se2Len","se3Len","framerate","bgmrate","soundMeta","bgm","se1","se2","se3","isNewFrame","frameIndex","getFramePalette","header","paperColor","pen","getLayerOrder","decodeFrame","isTranslated","translateX","translateY","fill","layerEncoding","layer","layerBitmap","line","lineType","chunkOffset","lineHeader","chunk","pixel","dest","src","y","x","getLayerPixels","layerIndex","image","layerColor","getFramePixels","useGlobalPalette","paletteMap","color","indexOf","a","hasAudioTrack","trackIndex","id","decodeAudio","track","sample","diff","stepIndex","trackMeta","adpcm","output","outputOffset","prevDiff","prevStepIndex","adpcmOffset","bitPos","Math","max","min","decodeSoundFlags","KWZ_TABLE_1","KWZ_TABLE_2","KWZ_TABLE_3","kwzTables_a","kwzTables_b","f","g","h","KWZ_LINE_TABLE","pixelValues","kwzTables_offset","kwz_extends","kwz_FRAMERATES","kwz_PALETTE","YELLOW","GREEN","NONE","kwz_KwzParser","KwzParser","bitIndex","bitValue","sections","frameMeta","fileSize","sectionCount","sectionMagic","substring","sectionLength","decodeFrameMeta","readBits","num","nextBits","mask","creationTimestamp","modifiedTimestamp","rootFilename","creation_timestamp","frame","layerSize","frameAuthor","layerDepth","soundFlags","cameraFlag","trackSizes","se4","getDiffingFlag","getLayerDepths","depths","sort","diffingFlag","isPrevFrame","skip","tileOffsetY","tileOffsetX","subTileOffsetY","subTileOffsetX","pixelOffset","pixelBuffer","lineIndex","pixels","subarray","lineValue","lineIndexA","lineIndexB","pattern","paletteOffset","pixelIndex","framePalette","parseSource","Promise","loader","loadSource","then","magic","WavEncoder","_utils_index__WEBPACK_IMPORTED_MODULE_0__","channels","bitsPerSample","headerBuffer","pcmData","writeFrames","getBlob","Blob","HSIZE","masks","LZWEncoder","colorDepth","accum","htab","Int32Array","codetab","cur_accum","cur_bits","curPixel","free_ent","clear_flg","g_init_bits","undefined","ClearCode","EOFCode","initCodeSize","a_count","remaining","maxcode","char_out","outs","flush_char","cl_block","cl_hash","hsize","compress","init_bits","fcode","ent","disp","hsize_reg","hshift","n_bits","get_maxcode","nextPixel","outer_loop","encode","code","gif_GifEncoder","GifEncoder","delay","repeat","utils","fromFlipnote","flipnote","gif","init","writeFrame","fromFlipnoteFrame","paletteSize","writeHeader","writeColorTable","writeNetscapeExt","pow","writeGraphicsControlExt","graphicsControlExt","netscapeExt","writeImageDesc","desc","writePixels","getUrl","window","URL","createObjectURL","getImage","img","Image","wav","ShaderType","TextureType","audio_AudioTrack","AudioTrack","playbackRate","channelCount","audio","document","createElement","preload","isActive","encoders_wav","url","duration","unset","revokeObjectURL","start","currentTime","play","stop","pause","WebGLRenderingContext","VERTEX_SHADER","FRAGMENT_SHADER","ALPHA","LUMINANCE_ALPHA","canvas_WebglCanvas","WebglCanvas","el","params","antialias","alpha","uniforms","refs","shaders","textures","buffers","gl","getContext","createProgram","createScreenQuad","createBitmapTexture","setCanvasSize","enable","BLEND","blendEquation","FUNC_ADD","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","program","attachShader","createShader","Vertex","shader_default","Fragment","webgl_shader_default","linkProgram","getProgramParameter","LINK_STATUS","log","getProgramInfoLog","deleteProgram","Error","useProgram","uniformCount","ACTIVE_UNIFORMS","name_1","getActiveUniform","getUniformLocation","vertBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","activeTexture","TEXTURE0","tex","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","uniform1i","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","setInputSize","uniform2f","viewport","setLayerType","textureType","toImage","toDataURL","setColor","uniform4f","setPaperColor","clearColor","drawLayer","color1","color2","texImage2D","UNSIGNED_BYTE","drawArrays","TRIANGLES","resize","clear","COLOR_BUFFER_BIT","destroy","texture","deleteTexture","deleteBuffer","canvas","__awaiter","thisArg","_arguments","P","generator","fulfilled","next","rejected","done","apply","__generator","body","_","label","sent","trys","ops","verb","throw","return","iterator","v","op","TypeError","pop","player_Player","Player","paused","isOpen","events","_frame","_time","hasPlaybackStarted","wasPlaying","isSeeking","querySelector","customPalette","audioTracks","setFrame","round","emit","progress","volume","muted","note","_a","close","parsers","catch","err","console","error","seFlags","setPalette","audiorate","layerVisibility","1","2","3","Alpha","LuminanceAlpha","currentFrame","playBgm","performance","now","stopAudio","time","requestAnimationFrame","floor","drawFrame","playFrameSe","nextFrame","prevFrame","lastFrame","firstFrame","thumbnailFrame","startSeek","endSeek","colors","layerBuffers","forceUpdate","setLayerVisibility","on","eventType","callback","off","callbackList","splice","args","_i","arguments","clearEvents","player","kwzParser","ppmParser","gifEncoder","encoders","wavEncoder"],"mappings":"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","file":"flipnote.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"flipnote\"] = factory();\n\telse\n\t\troot[\"flipnote\"] = factory();\n})(typeof self !== \"undefined\" ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","var ByteArray = /** @class */ (function () {\n    function ByteArray() {\n        this.page = -1;\n        this.pages = [];\n        this.cursor = 0;\n        this.newPage();\n    }\n    ByteArray.prototype.newPage = function () {\n        this.pages[++this.page] = new Uint8Array(ByteArray.pageSize);\n        this.cursor = 0;\n    };\n    ByteArray.prototype.getData = function () {\n        var _this = this;\n        var data = new Uint8Array((this.page) * ByteArray.pageSize + this.cursor);\n        this.pages.map(function (page, index) {\n            if (index === _this.page) {\n                data.set(page.slice(0, _this.cursor), index * ByteArray.pageSize);\n            }\n            else {\n                data.set(page, index * ByteArray.pageSize);\n            }\n        });\n        return data;\n    };\n    ByteArray.prototype.getBuffer = function () {\n        var data = this.getData();\n        return data.buffer;\n    };\n    ByteArray.prototype.writeByte = function (val) {\n        if (this.cursor >= ByteArray.pageSize)\n            this.newPage();\n        this.pages[this.page][this.cursor++] = val;\n    };\n    ByteArray.prototype.writeBytes = function (array, offset, length) {\n        for (var l = length || array.length, i = offset || 0; i < l; i++)\n            this.writeByte(array[i]);\n    };\n    ByteArray.pageSize = 4096;\n    return ByteArray;\n}());\nexport { ByteArray };\n","export * from './byteArray';\nexport * from './dataStream';\n","/** datastream serves as a wrapper around the DataView API to help keep track of the offset into the stream */\nexport var SeekOrigin;\n(function (SeekOrigin) {\n    SeekOrigin[SeekOrigin[\"Begin\"] = 0] = \"Begin\";\n    SeekOrigin[SeekOrigin[\"Current\"] = 1] = \"Current\";\n    SeekOrigin[SeekOrigin[\"End\"] = 2] = \"End\";\n})(SeekOrigin || (SeekOrigin = {}));\n;\nvar DataStream = /** @class */ (function () {\n    function DataStream(arrayBuffer) {\n        this.buffer = arrayBuffer;\n        this.data = new DataView(arrayBuffer);\n        this.cursor = 0;\n    }\n    Object.defineProperty(DataStream.prototype, \"bytes\", {\n        get: function () {\n            return new Uint8Array(this.buffer);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataStream.prototype, \"byteLength\", {\n        get: function () {\n            return this.data.byteLength;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DataStream.prototype.seek = function (offset, whence) {\n        switch (whence) {\n            case SeekOrigin.End:\n                this.cursor = this.data.byteLength + offset;\n                break;\n            case SeekOrigin.Current:\n                this.cursor += offset;\n                break;\n            case SeekOrigin.Begin:\n            default:\n                this.cursor = offset;\n                break;\n        }\n    };\n    DataStream.prototype.readUint8 = function () {\n        var val = this.data.getUint8(this.cursor);\n        this.cursor += 1;\n        return val;\n    };\n    DataStream.prototype.writeUint8 = function (value) {\n        this.data.setUint8(this.cursor, value);\n        this.cursor += 1;\n    };\n    DataStream.prototype.readInt8 = function () {\n        var val = this.data.getInt8(this.cursor);\n        this.cursor += 1;\n        return val;\n    };\n    DataStream.prototype.writeInt8 = function (value) {\n        this.data.setInt8(this.cursor, value);\n        this.cursor += 1;\n    };\n    DataStream.prototype.readUint16 = function (littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        var val = this.data.getUint16(this.cursor, littleEndian);\n        this.cursor += 2;\n        return val;\n    };\n    DataStream.prototype.writeUint16 = function (value, littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        this.data.setUint16(this.cursor, value, littleEndian);\n        this.cursor += 2;\n    };\n    DataStream.prototype.readInt16 = function (littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        var val = this.data.getInt16(this.cursor, littleEndian);\n        this.cursor += 2;\n        return val;\n    };\n    DataStream.prototype.writeInt16 = function (value, littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        this.data.setInt16(this.cursor, value, littleEndian);\n        this.cursor += 2;\n    };\n    DataStream.prototype.readUint32 = function (littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        var val = this.data.getUint32(this.cursor, littleEndian);\n        this.cursor += 4;\n        return val;\n    };\n    DataStream.prototype.writeUint32 = function (value, littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        this.data.setUint32(this.cursor, value, littleEndian);\n        this.cursor += 4;\n    };\n    DataStream.prototype.readInt32 = function (littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        var val = this.data.getInt32(this.cursor, littleEndian);\n        this.cursor += 4;\n        return val;\n    };\n    DataStream.prototype.writeInt32 = function (value, littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        this.data.setInt32(this.cursor, value, littleEndian);\n        this.cursor += 4;\n    };\n    DataStream.prototype.readBytes = function (count) {\n        var bytes = new Uint8Array(this.data.buffer, this.cursor, count);\n        this.cursor += bytes.byteLength;\n        return bytes;\n    };\n    DataStream.prototype.writeBytes = function (bytes) {\n        var _this = this;\n        bytes.forEach(function (byte) { return _this.writeUint8(byte); });\n    };\n    DataStream.prototype.readHex = function (count, reverse) {\n        if (reverse === void 0) { reverse = false; }\n        var bytes = this.readBytes(count);\n        var hex = [];\n        for (var i = 0; i < bytes.length; i++) {\n            hex.push(bytes[i].toString(16).padStart(2, '0'));\n        }\n        if (reverse)\n            hex.reverse();\n        return hex.join('').toUpperCase();\n    };\n    DataStream.prototype.readUtf8 = function (count) {\n        var chars = this.readBytes(count);\n        var str = '';\n        for (var i = 0; i < chars.length; i++) {\n            var char = chars[i];\n            if (char === 0)\n                break;\n            str += String.fromCharCode(char);\n        }\n        return str;\n    };\n    DataStream.prototype.writeUtf8 = function (string) {\n        for (var i = 0; i < string.length; i++) {\n            var char = string.charCodeAt(i);\n            this.writeUint8(char);\n        }\n    };\n    DataStream.prototype.readUtf16 = function (count) {\n        var chars = new Uint16Array(this.data.buffer, this.cursor, count);\n        var str = '';\n        for (var i = 0; i < chars.length; i++) {\n            var char = chars[i];\n            if (char == 0)\n                break;\n            str += String.fromCharCode(char);\n        }\n        this.cursor += chars.byteLength;\n        return str;\n    };\n    return DataStream;\n}());\nexport { DataStream };\n","export default {\n    matches: function (source) {\n        return typeof source === 'string';\n    },\n    load: function (source, resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', source, true);\n        xhr.responseType = 'arraybuffer';\n        xhr.onreadystatechange = function (e) {\n            if (xhr.readyState === 4) {\n                if (xhr.status >= 200 && xhr.status < 300) {\n                    resolve(xhr.response);\n                }\n                else {\n                    reject({\n                        type: 'httpError',\n                        status: xhr.status,\n                        statusText: xhr.statusText\n                    });\n                }\n            }\n        };\n        xhr.send(null);\n    }\n};\n","import urlLoader from './urlLoader';\nimport fileLoader from './fileLoader';\nimport arrayBufferLoader from './arrayBufferLoader';\nvar loaders = [\n    urlLoader,\n    fileLoader,\n    arrayBufferLoader\n];\nexport function loadSource(source) {\n    return new Promise(function (resolve, reject) {\n        loaders.forEach(function (loader) {\n            if (loader.matches(source)) {\n                loader.load(source, resolve, reject);\n            }\n        });\n    });\n}\n","export default {\n    matches: function (source) {\n        return (typeof File !== 'undefined' && source instanceof File);\n    },\n    load: function (source, resolve, reject) {\n        if (typeof FileReader !== 'undefined') {\n            var reader_1 = new FileReader();\n            reader_1.onload = function (event) {\n                resolve(reader_1.result);\n            };\n            reader_1.onerror = function (event) {\n                reject({ type: 'fileReadError' });\n            };\n            reader_1.readAsArrayBuffer(source);\n        }\n        else {\n            reject();\n        }\n    }\n};\n","export default {\n    matches: function (source) {\n        return (source instanceof ArrayBuffer);\n    },\n    load: function (source, resolve, reject) {\n        resolve(source);\n    }\n};\n","export var ADPCM_INDEX_TABLE_2 = new Int8Array([\n    -1, 2, -1, 2\n]);\nexport var ADPCM_INDEX_TABLE_4 = new Int8Array([\n    -1, -1, -1, -1, 2, 4, 6, 8,\n    -1, -1, -1, -1, 2, 4, 6, 8\n]);\n// note that this is a slight deviation from the normal adpcm table\nexport var ADPCM_STEP_TABLE = new Int16Array([\n    7, 8, 9, 10, 11, 12, 13, 14, 16, 17,\n    19, 21, 23, 25, 28, 31, 34, 37, 41, 45,\n    50, 55, 60, 66, 73, 80, 88, 97, 107, 118,\n    130, 143, 157, 173, 190, 209, 230, 253, 279, 307,\n    337, 371, 408, 449, 494, 544, 598, 658, 724, 796,\n    876, 963, 1060, 1166, 1282, 1411, 1552, 1707, 1878, 2066,\n    2272, 2499, 2749, 3024, 3327, 3660, 4026, 4428, 4871, 5358,\n    5894, 6484, 7132, 7845, 8630, 9493, 10442, 11487, 12635, 13899,\n    15289, 16818, 18500, 20350, 22385, 24623, 27086, 29794, 32767, 0\n]);\nexport var ADPCM_SAMPLE_TABLE_2 = new Int16Array(90 * 4);\nfor (var sample = 0; sample < 4; sample++) {\n    for (var stepIndex = 0; stepIndex < 90; stepIndex++) {\n        var step = ADPCM_STEP_TABLE[stepIndex];\n        var diff = step >> 3;\n        if (sample & 1)\n            diff += step;\n        if (sample & 2)\n            diff = -diff;\n        ADPCM_SAMPLE_TABLE_2[sample + 4 * stepIndex] = diff;\n    }\n}\nexport var ADPCM_SAMPLE_TABLE_4 = new Int16Array(90 * 16);\nfor (var sample = 0; sample < 16; sample++) {\n    for (var stepIndex = 0; stepIndex < 90; stepIndex++) {\n        var step = ADPCM_STEP_TABLE[stepIndex];\n        var diff = step >> 3;\n        if (sample & 4)\n            diff += step;\n        if (sample & 2)\n            diff += step >> 1;\n        if (sample & 1)\n            diff += step >> 2;\n        if (sample & 8)\n            diff = -diff;\n        ADPCM_SAMPLE_TABLE_4[sample + 16 * stepIndex] = diff;\n    }\n}\n","// table1 - commonly occuring line offsets\nexport var KWZ_TABLE_1 = new Uint16Array([\n    0x0000, 0x0CD0, 0x19A0, 0x02D9, 0x088B, 0x0051, 0x00F3, 0x0009,\n    0x001B, 0x0001, 0x0003, 0x05B2, 0x1116, 0x00A2, 0x01E6, 0x0012,\n    0x0036, 0x0002, 0x0006, 0x0B64, 0x08DC, 0x0144, 0x00FC, 0x0024,\n    0x001C, 0x0004, 0x0334, 0x099C, 0x0668, 0x1338, 0x1004, 0x166C\n]);\n// table2 - commonly occuring line offsets, but the lines are shifted to the left by one pixel\nexport var KWZ_TABLE_2 = new Uint16Array([\n    0x0000, 0x0CD0, 0x19A0, 0x0003, 0x02D9, 0x088B, 0x0051, 0x00F3,\n    0x0009, 0x001B, 0x0001, 0x0006, 0x05B2, 0x1116, 0x00A2, 0x01E6,\n    0x0012, 0x0036, 0x0002, 0x02DC, 0x0B64, 0x08DC, 0x0144, 0x00FC,\n    0x0024, 0x001C, 0x099C, 0x0334, 0x1338, 0x0668, 0x166C, 0x1004\n]);\n// table3 - line offsets, but the lines are shifted to the left by one pixel\nexport var KWZ_TABLE_3 = new Uint16Array(6561);\nvar index = 0;\nfor (var a = 0; a < 2187; a += 729)\n    for (var b = 0; b < 729; b += 243)\n        for (var c = 0; c < 243; c += 81)\n            for (var d = 0; d < 81; d += 27)\n                for (var e = 0; e < 27; e += 9)\n                    for (var f = 0; f < 9; f += 3)\n                        for (var g = 0; g < 3; g += 1)\n                            for (var h = 0; h < 6561; h += 2187) {\n                                KWZ_TABLE_3[index] = a + b + c + d + e + f + g + h;\n                                index += 1;\n                            }\n// linetable - contains every possible sequence of pixels for each tile line\nexport var KWZ_LINE_TABLE = new Uint16Array(6561 * 8);\nvar pixelValues = [0x0000, 0xFF00, 0x00FF];\nvar offset = 0;\nfor (var a = 0; a < 3; a++)\n    for (var b = 0; b < 3; b++)\n        for (var c = 0; c < 3; c++)\n            for (var d = 0; d < 3; d++)\n                for (var e = 0; e < 3; e++)\n                    for (var f = 0; f < 3; f++)\n                        for (var g = 0; g < 3; g++)\n                            for (var h = 0; h < 3; h++) {\n                                KWZ_LINE_TABLE.set([\n                                    pixelValues[b],\n                                    pixelValues[a],\n                                    pixelValues[d],\n                                    pixelValues[c],\n                                    pixelValues[f],\n                                    pixelValues[e],\n                                    pixelValues[h],\n                                    pixelValues[g]\n                                ], offset);\n                                offset += 8;\n                            }\n","/**\n * PPM decoder\n * Reads frames, audio, and metadata from Flipnote Studio PPM files\n * Based on my Python PPM decoder implementation (https://github.com/jaames/flipnote-tools)\n *\n * Credits:\n *  PPM format reverse-engineering and documentation:\n *   - bricklife (http://ugomemo.g.hatena.ne.jp/bricklife/20090307/1236391313)\n *   - mirai-iro (http://mirai-iro.hatenablog.jp/entry/20090116/ugomemo_ppm)\n *   - harimau_tigris (http://ugomemo.g.hatena.ne.jp/harimau_tigris)\n *   - steven (http://www.dsibrew.org/wiki/User:Steven)\n *   - yellows8 (http://www.dsibrew.org/wiki/User:Yellows8)\n *   - PBSDS (https://github.com/pbsds)\n *   - jaames (https://github.com/jaames)\n *  Identifying the PPM sound codec:\n *   - Midmad from Hatena Haiku\n *   - WDLMaster from hcs64.com\n *  Helping me to identify issues with the Python decoder that this is based on:\n *   - Austin Burk (https://sudomemo.net)\n *\n *  Lastly, a huge thanks goes to Nintendo for creating Flipnote Studio,\n *  and to Hatena for providing the Flipnote Hatena online service, both of which inspired so many c:\n*/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { DataStream } from '../utils/dataStream';\nimport { ADPCM_INDEX_TABLE_4, ADPCM_SAMPLE_TABLE_4 } from './adpcm';\n// internal frame speed value -> FPS table\nvar FRAMERATES = [\n    null,\n    0.5,\n    1,\n    2,\n    4,\n    6,\n    12,\n    20,\n    30,\n];\nvar PALETTE = {\n    WHITE: [0xff, 0xff, 0xff],\n    BLACK: [0x0e, 0x0e, 0x0e],\n    RED: [0xff, 0x2a, 0x2a],\n    BLUE: [0x0a, 0x39, 0xff],\n};\n;\nvar PpmParser = /** @class */ (function (_super) {\n    __extends(PpmParser, _super);\n    function PpmParser(arrayBuffer) {\n        var _this = _super.call(this, arrayBuffer) || this;\n        _this.type = PpmParser.type;\n        _this.width = PpmParser.width;\n        _this.height = PpmParser.height;\n        _this.palette = PALETTE;\n        _this.globalPalette = PpmParser.globalPalette;\n        _this.sampleRate = PpmParser.sampleRate;\n        _this.prevDecodedFrame = null;\n        _this.decodeHeader();\n        _this.decodeAnimationHeader();\n        _this.decodeSoundHeader();\n        _this.decodeMeta();\n        // create image buffers\n        _this.layers = [\n            new Uint8Array(PpmParser.width * PpmParser.height),\n            new Uint8Array(PpmParser.width * PpmParser.height)\n        ];\n        _this.prevLayers = [\n            new Uint8Array(PpmParser.width * PpmParser.height),\n            new Uint8Array(PpmParser.width * PpmParser.height)\n        ];\n        _this.prevDecodedFrame = null;\n        return _this;\n    }\n    PpmParser.validateFSID = function (fsid) {\n        return /[0159]{1}[0-9A-F]{6}0[0-9A-F]{8}/.test(fsid);\n    };\n    PpmParser.validateFilename = function (filename) {\n        return /[0-9A-F]{6}_[0-9A-F]{13}_[0-9]{3}/.test(filename);\n    };\n    PpmParser.prototype.readFilename = function () {\n        return [\n            this.readHex(3),\n            this.readUtf8(13),\n            this.readUint16().toString().padStart(3, '0')\n        ].join('_');\n    };\n    PpmParser.prototype.readLineEncoding = function () {\n        var unpacked = new Uint8Array(PpmParser.height);\n        for (var byteIndex = 0; byteIndex < 48; byteIndex++) {\n            var byte = this.readUint8();\n            // each line's encoding type is stored as a 2-bit value\n            for (var bitOffset = 0; bitOffset < 8; bitOffset += 2) {\n                unpacked[byteIndex * 4 + bitOffset / 2] = (byte >> bitOffset) & 0x03;\n            }\n        }\n        return unpacked;\n    };\n    PpmParser.prototype.decodeHeader = function () {\n        this.seek(0);\n        // decode header\n        // https://github.com/pbsds/hatena-server/wiki/PPM-format#file-header\n        var magic = this.readUint32();\n        this.frameDataLength = this.readUint32();\n        this.soundDataLength = this.readUint32();\n        this.frameCount = this.readUint16() + 1;\n        this.version = this.readUint16();\n    };\n    PpmParser.prototype.decodeMeta = function () {\n        // https://github.com/pbsds/hatena-server/wiki/PPM-format#file-header\n        this.seek(0x10);\n        var lock = this.readUint16(), thumbIndex = this.readInt16(), rootAuthorName = this.readUtf16(11), parentAuthorName = this.readUtf16(11), currentAuthorName = this.readUtf16(11), parentAuthorId = this.readHex(8, true), currentAuthorId = this.readHex(8, true), parentFilename = this.readFilename(), currentFilename = this.readFilename(), rootAuthorId = this.readHex(8, true);\n        this.seek(0x9A);\n        var timestamp = new Date((this.readUint32() + 946684800) * 1000);\n        this.seek(0x06A6);\n        var flags = this.readUint16();\n        this.thumbFrameIndex = thumbIndex;\n        this.meta = {\n            lock: lock === 1,\n            loop: (flags >> 1 & 0x01) === 1,\n            frame_count: this.frameCount,\n            frame_speed: this.frameSpeed,\n            bgm_speed: this.bgmSpeed,\n            thumb_index: thumbIndex,\n            timestamp: timestamp,\n            spinoff: (currentAuthorId !== parentAuthorId) || (currentAuthorId !== rootAuthorId),\n            root: {\n                filename: null,\n                username: rootAuthorName,\n                fsid: rootAuthorId,\n            },\n            parent: {\n                username: parentAuthorName,\n                fsid: parentAuthorId,\n                filename: parentFilename\n            },\n            current: {\n                username: currentAuthorName,\n                fsid: currentAuthorId,\n                filename: currentFilename\n            },\n        };\n    };\n    PpmParser.prototype.decodeAnimationHeader = function () {\n        var _this = this;\n        // jump to the start of the animation data section\n        // https://github.com/pbsds/hatena-server/wiki/PPM-format#animation-data-section\n        this.seek(0x06A0);\n        var offsetTableLength = this.readUint16();\n        // skip padding + flags\n        this.seek(0x06A8);\n        // read frame offsets and build them into a table\n        this.frameOffsets = new Uint32Array(offsetTableLength / 4).map(function (value) {\n            return 0x06A8 + offsetTableLength + _this.readUint32();\n        });\n    };\n    PpmParser.prototype.decodeSoundHeader = function () {\n        // https://github.com/pbsds/hatena-server/wiki/PPM-format#sound-data-section\n        // offset = frame data offset + frame data length + sound effect flags\n        var offset = 0x06A0 + this.frameDataLength + this.frameCount;\n        // account for multiple-of-4 padding\n        if (offset % 4 != 0)\n            offset += 4 - (offset % 4);\n        this.seek(offset);\n        var bgmLen = this.readUint32();\n        var se1Len = this.readUint32();\n        var se2Len = this.readUint32();\n        var se3Len = this.readUint32();\n        this.frameSpeed = 8 - this.readUint8();\n        this.bgmSpeed = 8 - this.readUint8();\n        offset += 32;\n        this.framerate = FRAMERATES[this.frameSpeed];\n        this.bgmrate = FRAMERATES[this.bgmSpeed];\n        this.soundMeta = {\n            bgm: { offset: offset, length: bgmLen },\n            se1: { offset: offset += bgmLen, length: se1Len },\n            se2: { offset: offset += se1Len, length: se2Len },\n            se3: { offset: offset += se2Len, length: se3Len },\n        };\n    };\n    PpmParser.prototype.isNewFrame = function (frameIndex) {\n        this.seek(this.frameOffsets[frameIndex]);\n        var header = this.readUint8();\n        return (header >> 7) & 0x1;\n    };\n    PpmParser.prototype.getFramePalette = function (frameIndex) {\n        this.seek(this.frameOffsets[frameIndex]);\n        var palette = this.palette;\n        var header = this.readUint8();\n        var paperColor = header & 0x1;\n        var pen = [\n            palette.BLACK,\n            paperColor == 1 ? palette.BLACK : palette.WHITE,\n            palette.RED,\n            palette.BLUE,\n        ];\n        return [\n            paperColor == 1 ? palette.WHITE : palette.BLACK,\n            pen[(header >> 1) & 0x3],\n            pen[(header >> 3) & 0x3],\n        ];\n    };\n    PpmParser.prototype.getLayerOrder = function (frameIndex) {\n        return [0, 1];\n    };\n    PpmParser.prototype.decodeFrame = function (frameIndex) {\n        if ((frameIndex !== 0) && (this.prevDecodedFrame !== frameIndex - 1) && (!this.isNewFrame(frameIndex)))\n            this.decodeFrame(frameIndex - 1);\n        // https://github.com/pbsds/hatena-server/wiki/PPM-format#animation-frame\n        this.seek(this.frameOffsets[frameIndex]);\n        var header = this.readUint8();\n        var isNewFrame = (header >> 7) & 0x1;\n        var isTranslated = (header >> 5) & 0x3;\n        var translateX = 0;\n        var translateY = 0;\n        // copy the current layer buffers to the previous ones\n        this.prevLayers[0].set(this.layers[0]);\n        this.prevLayers[1].set(this.layers[1]);\n        this.prevDecodedFrame = frameIndex;\n        // reset current layer buffers\n        this.layers[0].fill(0);\n        this.layers[1].fill(0);\n        if (isTranslated) {\n            translateX = this.readInt8();\n            translateY = this.readInt8();\n        }\n        var layerEncoding = [\n            this.readLineEncoding(),\n            this.readLineEncoding(),\n        ];\n        // start decoding layer bitmaps\n        for (var layer = 0; layer < 2; layer++) {\n            var layerBitmap = this.layers[layer];\n            for (var line = 0; line < PpmParser.height; line++) {\n                var lineType = layerEncoding[layer][line];\n                var chunkOffset = line * PpmParser.width;\n                switch (lineType) {\n                    // line type 0 = blank line, decode nothing\n                    case 0:\n                        break;\n                    // line types 1 + 2 = compressed bitmap line\n                    case 1:\n                    case 2:\n                        var lineHeader = this.readUint32(false);\n                        // line type 2 starts as an inverted line\n                        if (lineType == 2)\n                            layerBitmap.fill(0xFF, chunkOffset, chunkOffset + PpmParser.width);\n                        // loop through each bit in the line header\n                        while (lineHeader & 0xFFFFFFFF) {\n                            // if the bit is set, this 8-pix wide chunk is stored\n                            // else we can just leave it blank and move on to the next chunk\n                            if (lineHeader & 0x80000000) {\n                                var chunk = this.readUint8();\n                                // unpack chunk bits\n                                for (var pixel = 0; pixel < 8; pixel++) {\n                                    layerBitmap[chunkOffset + pixel] = (chunk >> pixel & 0x1) ? 0xFF : 0x00;\n                                }\n                            }\n                            chunkOffset += 8;\n                            // shift lineheader to the left by 1 bit, now on the next loop cycle the next bit will be checked\n                            lineHeader <<= 1;\n                        }\n                        break;\n                    // line type 3 = raw bitmap line\n                    case 3:\n                        while (chunkOffset < (line + 1) * PpmParser.width) {\n                            var chunk = this.readUint8();\n                            for (var pixel = 0; pixel < 8; pixel++) {\n                                layerBitmap[chunkOffset + pixel] = (chunk >> pixel & 0x1) ? 0xFF : 0x00;\n                            }\n                            chunkOffset += 8;\n                        }\n                        break;\n                }\n            }\n        }\n        // if the current frame is based on changes from the preivous one, merge them by XORing their values\n        if (!isNewFrame) {\n            var dest = void 0, src = void 0;\n            // loop through each line\n            for (var y = 0; y < PpmParser.height; y++) {\n                // skip to next line if this one falls off the top edge of the screen\n                if (y - translateY < 0)\n                    continue;\n                // stop once the bottom screen edge has been reached\n                if (y - translateY >= PpmParser.height)\n                    break;\n                // loop through each pixel in the line\n                for (var x = 0; x < PpmParser.width; x++) {\n                    // skip to the next pixel if this one falls off the left edge of the screen\n                    if (x - translateX < 0)\n                        continue;\n                    // stop diffing this line once the right screen edge has been reached\n                    if (x - translateX >= PpmParser.width)\n                        break;\n                    dest = x + y * PpmParser.width;\n                    src = dest - (translateX + translateY * PpmParser.width);\n                    // diff pixels with a binary XOR\n                    this.layers[0][dest] ^= this.prevLayers[0][src];\n                    this.layers[1][dest] ^= this.prevLayers[1][src];\n                }\n            }\n        }\n        return this.layers;\n    };\n    // retuns an uint8 array where each item is a pixel's palette index\n    PpmParser.prototype.getLayerPixels = function (frameIndex, layerIndex) {\n        if (this.prevDecodedFrame !== frameIndex) {\n            this.decodeFrame(frameIndex);\n        }\n        var layer = this.layers[layerIndex];\n        var image = new Uint8Array(PpmParser.width * PpmParser.height);\n        var layerColor = layerIndex + 1;\n        for (var pixel = 0; pixel < image.length; pixel++) {\n            if (layer[pixel] !== 0) {\n                image[pixel] = layerColor;\n            }\n        }\n        return image;\n    };\n    // retuns an uint8 array where each item is a pixel's palette index\n    PpmParser.prototype.getFramePixels = function (frameIndex, useGlobalPalette) {\n        if (useGlobalPalette === void 0) { useGlobalPalette = false; }\n        var paletteMap;\n        if (useGlobalPalette) {\n            var framePalette = this.getFramePalette(frameIndex);\n            paletteMap = framePalette.map(function (color) { return PpmParser.globalPalette.indexOf(color); });\n        }\n        else {\n            paletteMap = [0, 1, 2];\n        }\n        var layers = this.decodeFrame(frameIndex);\n        var image = new Uint8Array(PpmParser.width * PpmParser.height);\n        image.fill(paletteMap[0]);\n        for (var pixel = 0; pixel < image.length; pixel++) {\n            var a = layers[0][pixel];\n            var b = layers[1][pixel];\n            if (b)\n                image[pixel] = paletteMap[2];\n            if (a)\n                image[pixel] = paletteMap[1];\n        }\n        return image;\n    };\n    PpmParser.prototype.hasAudioTrack = function (trackIndex) {\n        var keys = ['bgm', 'se1', 'se2', 'se3'];\n        var id = keys[trackIndex];\n        return this.soundMeta[id].length > 0;\n    };\n    PpmParser.prototype.decodeAudio = function (track) {\n        var trackMeta = this.soundMeta[track];\n        var adpcm = new Uint8Array(this.buffer, trackMeta.offset, trackMeta.length);\n        var output = new Int16Array(adpcm.length * 2);\n        var outputOffset = 0;\n        // initial decoder state\n        var prevDiff = 0;\n        var prevStepIndex = 0;\n        var sample;\n        var diff;\n        var stepIndex;\n        // loop through each byte in the raw adpcm data\n        for (var adpcmOffset = 0; adpcmOffset < adpcm.length; adpcmOffset++) {\n            var byte = adpcm[adpcmOffset];\n            var bitPos = 0;\n            while (bitPos < 8) {\n                // isolate 4-bit sample\n                sample = (byte >> bitPos) & 0xF;\n                // get diff\n                diff = prevDiff + ADPCM_SAMPLE_TABLE_4[sample + 16 * prevStepIndex];\n                // get step index\n                stepIndex = prevStepIndex + ADPCM_INDEX_TABLE_4[sample];\n                // clamp step index and diff\n                stepIndex = Math.max(0, Math.min(stepIndex, 79));\n                diff = Math.max(-32767, Math.min(diff, 32767));\n                // add result to output buffer\n                output[outputOffset] = (diff);\n                outputOffset += 1;\n                // set prev decoder state\n                prevStepIndex = stepIndex;\n                prevDiff = diff;\n                // move to next sample\n                bitPos += 4;\n            }\n        }\n        return output;\n    };\n    PpmParser.prototype.decodeSoundFlags = function () {\n        var _this = this;\n        this.seek(0x06A0 + this.frameDataLength);\n        // per msdn docs - the array map callback is only invoked for array indicies that have assigned values\n        // so when we create an array, we need to fill it with something before we can map over it\n        var arr = new Array(this.frameCount).fill([]);\n        return arr.map(function (value) {\n            var byte = _this.readUint8();\n            return [byte & 0x1, (byte >> 1) & 0x1, (byte >> 2) & 0x1];\n        });\n    };\n    PpmParser.type = 'PPM';\n    PpmParser.sampleRate = 8192;\n    PpmParser.width = 256;\n    PpmParser.height = 192;\n    PpmParser.globalPalette = [\n        PALETTE.BLACK,\n        PALETTE.WHITE,\n        PALETTE.RED,\n        PALETTE.BLUE\n    ];\n    return PpmParser;\n}(DataStream));\nexport { PpmParser };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { DataStream } from '../utils/dataStream';\nimport { ADPCM_INDEX_TABLE_2, ADPCM_INDEX_TABLE_4, ADPCM_SAMPLE_TABLE_2, ADPCM_SAMPLE_TABLE_4 } from './adpcm';\nimport { KWZ_TABLE_1, KWZ_TABLE_2, KWZ_TABLE_3, KWZ_LINE_TABLE } from './kwzTables';\nvar FRAMERATES = [\n    0.2,\n    0.5,\n    1,\n    2,\n    4,\n    6,\n    8,\n    12,\n    20,\n    24,\n    30\n];\nvar PALETTE = {\n    WHITE: [0xff, 0xff, 0xff],\n    BLACK: [0x10, 0x10, 0x10],\n    RED: [0xff, 0x10, 0x10],\n    YELLOW: [0xff, 0xe7, 0x00],\n    GREEN: [0x00, 0x86, 0x31],\n    BLUE: [0x00, 0x38, 0xce],\n    NONE: [0xff, 0xff, 0xff]\n};\n;\n;\nvar KwzParser = /** @class */ (function (_super) {\n    __extends(KwzParser, _super);\n    function KwzParser(arrayBuffer) {\n        var _this = _super.call(this, arrayBuffer) || this;\n        _this.type = KwzParser.type;\n        _this.width = KwzParser.width;\n        _this.height = KwzParser.height;\n        _this.palette = PALETTE;\n        _this.globalPalette = KwzParser.globalPalette;\n        _this.sampleRate = KwzParser.sampleRate;\n        _this.prevDecodedFrame = null;\n        _this.bitIndex = 0;\n        _this.bitValue = 0;\n        _this.layers = [\n            new Uint16Array(KwzParser.width * KwzParser.height),\n            new Uint16Array(KwzParser.width * KwzParser.height),\n            new Uint16Array(KwzParser.width * KwzParser.height),\n        ];\n        _this.bitIndex = 0;\n        _this.bitValue = 0;\n        _this.load();\n        return _this;\n    }\n    KwzParser.prototype.load = function () {\n        this.seek(0);\n        this.sections = {};\n        this.frameMeta = [];\n        var fileSize = this.byteLength - 256;\n        var offset = 0;\n        var sectionCount = 0;\n        // counting sections should mitigate against one of mrnbayoh's notehax exploits\n        while ((offset < fileSize) && (sectionCount < 6)) {\n            this.seek(offset);\n            var sectionMagic = this.readUtf8(4).substring(0, 3);\n            var sectionLength = this.readUint32();\n            this.sections[sectionMagic] = {\n                offset: offset,\n                length: sectionLength\n            };\n            offset += sectionLength + 8;\n            sectionCount += 1;\n        }\n        this.decodeMeta();\n        this.decodeFrameMeta();\n        this.decodeSoundHeader();\n    };\n    KwzParser.prototype.readBits = function (num) {\n        if (this.bitIndex + num > 16) {\n            var nextBits = this.readUint16();\n            this.bitValue |= nextBits << (16 - this.bitIndex);\n            this.bitIndex -= 16;\n        }\n        var mask = (1 << num) - 1;\n        var result = this.bitValue & mask;\n        this.bitValue >>= num;\n        this.bitIndex += num;\n        return result;\n    };\n    KwzParser.prototype.decodeMeta = function () {\n        this.seek(this.sections['KFH'].offset + 12);\n        var creationTimestamp = new Date((this.readUint32() + 946684800) * 1000), modifiedTimestamp = new Date((this.readUint32() + 946684800) * 1000), appVersion = this.readUint32(), rootAuthorId = this.readHex(10), parentAuthorId = this.readHex(10), currentAuthorId = this.readHex(10), rootAuthorName = this.readUtf16(11), parentAuthorName = this.readUtf16(11), currentAuthorName = this.readUtf16(11), rootFilename = this.readUtf8(28), parentFilename = this.readUtf8(28), currentFilename = this.readUtf8(28), frameCount = this.readUint16(), thumbIndex = this.readUint16(), flags = this.readUint16(), frameSpeed = this.readUint8(), layerFlags = this.readUint8();\n        this.frameCount = frameCount;\n        this.thumbFrameIndex = thumbIndex;\n        this.frameSpeed = frameSpeed;\n        this.framerate = FRAMERATES[frameSpeed];\n        this.meta = {\n            lock: (flags & 0x1) === 1,\n            loop: ((flags >> 1) & 0x01) === 1,\n            frame_count: frameCount,\n            frame_speed: frameSpeed,\n            thumb_index: thumbIndex,\n            timestamp: modifiedTimestamp,\n            creation_timestamp: creationTimestamp,\n            root: {\n                username: rootAuthorName,\n                fsid: rootAuthorId,\n                filename: rootFilename,\n            },\n            parent: {\n                username: parentAuthorName,\n                fsid: parentAuthorId,\n                filename: parentFilename,\n            },\n            current: {\n                username: currentAuthorName,\n                fsid: currentAuthorId,\n                filename: currentFilename,\n            },\n        };\n    };\n    KwzParser.prototype.decodeFrameMeta = function () {\n        this.frameOffsets = new Uint32Array(this.frameCount);\n        this.seek(this.sections['KMI'].offset + 8);\n        var offset = this.sections['KMC'].offset + 12;\n        for (var i = 0; i < this.frameCount; i++) {\n            var frame = {\n                flags: this.readUint32(),\n                layerSize: [\n                    this.readUint16(),\n                    this.readUint16(),\n                    this.readUint16()\n                ],\n                frameAuthor: this.readHex(10),\n                layerDepth: [\n                    this.readUint8(),\n                    this.readUint8(),\n                    this.readUint8(),\n                ],\n                soundFlags: this.readUint8(),\n                cameraFlag: this.readUint32(),\n            };\n            this.frameMeta.push(frame);\n            this.frameOffsets[i] = offset;\n            offset += frame.layerSize[0] + frame.layerSize[1] + frame.layerSize[2];\n        }\n    };\n    KwzParser.prototype.decodeSoundHeader = function () {\n        if (this.sections.hasOwnProperty('KSN')) {\n            var offset = this.sections['KSN'].offset + 8;\n            this.seek(offset);\n            var bgmSpeed = this.readUint32();\n            this.bgmSpeed = bgmSpeed;\n            this.bgmrate = FRAMERATES[bgmSpeed];\n            var trackSizes = new Uint32Array(this.buffer, offset + 4, 20);\n            this.soundMeta = {\n                'bgm': { offset: offset += 28, length: trackSizes[0] },\n                'se1': { offset: offset += trackSizes[0], length: trackSizes[1] },\n                'se2': { offset: offset += trackSizes[1], length: trackSizes[2] },\n                'se3': { offset: offset += trackSizes[2], length: trackSizes[3] },\n                'se4': { offset: offset += trackSizes[3], length: trackSizes[4] },\n            };\n        }\n    };\n    KwzParser.prototype.getDiffingFlag = function (frameIndex) {\n        return ~(this.frameMeta[frameIndex].flags >> 4) & 0x07;\n    };\n    KwzParser.prototype.getLayerDepths = function (frameIndex) {\n        return this.frameMeta[frameIndex].layerDepth;\n    };\n    // sort layer indices sorted by depth, drom bottom to top\n    KwzParser.prototype.getLayerOrder = function (frameIndex) {\n        var depths = this.getLayerDepths(frameIndex);\n        return [2, 1, 0].sort(function (a, b) { return depths[b] - depths[a]; });\n    };\n    KwzParser.prototype.decodeFrame = function (frameIndex, diffingFlag, isPrevFrame) {\n        if (diffingFlag === void 0) { diffingFlag = 0x7; }\n        if (isPrevFrame === void 0) { isPrevFrame = false; }\n        // if this frame is being decoded as a prev frame, then we only want to decode the layers necessary\n        if (isPrevFrame)\n            diffingFlag &= this.getDiffingFlag(frameIndex + 1);\n        // the prevDecodedFrame check is an optimisation for decoding frames in full sequence\n        if ((frameIndex !== 0) && (this.prevDecodedFrame !== frameIndex - 1) && (diffingFlag))\n            this.decodeFrame(frameIndex - 1, diffingFlag = diffingFlag, isPrevFrame = true);\n        var meta = this.frameMeta[frameIndex];\n        var offset = this.frameOffsets[frameIndex];\n        for (var layerIndex = 0; layerIndex < 3; layerIndex++) {\n            this.seek(offset);\n            var layerSize = meta.layerSize[layerIndex];\n            offset += layerSize;\n            // if the layer is 38 bytes then it hasn't changed at all since the previous frame, so we can skip it\n            if (layerSize === 38)\n                continue;\n            if (((diffingFlag >> layerIndex) & 0x1) === 0)\n                continue;\n            this.bitIndex = 16;\n            this.bitValue = 0;\n            var skip = 0;\n            for (var tileOffsetY = 0; tileOffsetY < KwzParser.height; tileOffsetY += 128) {\n                for (var tileOffsetX = 0; tileOffsetX < KwzParser.width; tileOffsetX += 128) {\n                    for (var subTileOffsetY = 0; subTileOffsetY < 128; subTileOffsetY += 8) {\n                        var y = tileOffsetY + subTileOffsetY;\n                        if (y >= KwzParser.height)\n                            break;\n                        for (var subTileOffsetX = 0; subTileOffsetX < 128; subTileOffsetX += 8) {\n                            var x = tileOffsetX + subTileOffsetX;\n                            if (x >= KwzParser.width)\n                                break;\n                            if (skip) {\n                                skip -= 1;\n                                continue;\n                            }\n                            var pixelOffset = y * KwzParser.width + x;\n                            var pixelBuffer = this.layers[layerIndex];\n                            var type = this.readBits(3);\n                            if (type == 0) {\n                                var lineIndex = KWZ_TABLE_1[this.readBits(5)];\n                                var pixels = KWZ_LINE_TABLE.subarray(lineIndex * 8, lineIndex * 8 + 8);\n                                pixelBuffer.set(pixels, pixelOffset);\n                                pixelBuffer.set(pixels, pixelOffset + 320);\n                                pixelBuffer.set(pixels, pixelOffset + 640);\n                                pixelBuffer.set(pixels, pixelOffset + 960);\n                                pixelBuffer.set(pixels, pixelOffset + 1280);\n                                pixelBuffer.set(pixels, pixelOffset + 1600);\n                                pixelBuffer.set(pixels, pixelOffset + 1920);\n                                pixelBuffer.set(pixels, pixelOffset + 2240);\n                            }\n                            else if (type == 1) {\n                                var lineIndex = this.readBits(13);\n                                var pixels = KWZ_LINE_TABLE.subarray(lineIndex * 8, lineIndex * 8 + 8);\n                                pixelBuffer.set(pixels, pixelOffset);\n                                pixelBuffer.set(pixels, pixelOffset + 320);\n                                pixelBuffer.set(pixels, pixelOffset + 640);\n                                pixelBuffer.set(pixels, pixelOffset + 960);\n                                pixelBuffer.set(pixels, pixelOffset + 1280);\n                                pixelBuffer.set(pixels, pixelOffset + 1600);\n                                pixelBuffer.set(pixels, pixelOffset + 1920);\n                                pixelBuffer.set(pixels, pixelOffset + 2240);\n                            }\n                            else if (type == 2) {\n                                var lineValue = this.readBits(5);\n                                var lineIndexA = KWZ_TABLE_1[lineValue];\n                                var lineIndexB = KWZ_TABLE_2[lineValue];\n                                var a = KWZ_LINE_TABLE.subarray(lineIndexA * 8, lineIndexA * 8 + 8);\n                                var b = KWZ_LINE_TABLE.subarray(lineIndexB * 8, lineIndexB * 8 + 8);\n                                pixelBuffer.set(a, pixelOffset);\n                                pixelBuffer.set(b, pixelOffset + 320);\n                                pixelBuffer.set(a, pixelOffset + 640);\n                                pixelBuffer.set(b, pixelOffset + 960);\n                                pixelBuffer.set(a, pixelOffset + 1280);\n                                pixelBuffer.set(b, pixelOffset + 1600);\n                                pixelBuffer.set(a, pixelOffset + 1920);\n                                pixelBuffer.set(b, pixelOffset + 2240);\n                            }\n                            else if (type == 3) {\n                                var lineIndexA = this.readBits(13);\n                                var lineIndexB = KWZ_TABLE_3[lineIndexA];\n                                var a = KWZ_LINE_TABLE.subarray(lineIndexA * 8, lineIndexA * 8 + 8);\n                                var b = KWZ_LINE_TABLE.subarray(lineIndexB * 8, lineIndexB * 8 + 8);\n                                pixelBuffer.set(a, pixelOffset);\n                                pixelBuffer.set(b, pixelOffset + 320);\n                                pixelBuffer.set(a, pixelOffset + 640);\n                                pixelBuffer.set(b, pixelOffset + 960);\n                                pixelBuffer.set(a, pixelOffset + 1280);\n                                pixelBuffer.set(b, pixelOffset + 1600);\n                                pixelBuffer.set(a, pixelOffset + 1920);\n                                pixelBuffer.set(b, pixelOffset + 2240);\n                            }\n                            else if (type == 4) {\n                                var mask = this.readBits(8);\n                                for (var line = 0; line < 8; line++) {\n                                    var lineIndex = 0;\n                                    if (mask & (1 << line)) {\n                                        lineIndex = KWZ_TABLE_1[this.readBits(5)];\n                                    }\n                                    else {\n                                        lineIndex = this.readBits(13);\n                                    }\n                                    var pixels = KWZ_LINE_TABLE.subarray(lineIndex * 8, lineIndex * 8 + 8);\n                                    pixelBuffer.set(pixels, pixelOffset + line * 320);\n                                }\n                            }\n                            else if (type == 5) {\n                                skip = this.readBits(5);\n                                continue;\n                            }\n                            // type 6 doesnt exist\n                            else if (type == 7) {\n                                var pattern = this.readBits(2);\n                                var useTable = this.readBits(1);\n                                var lineIndexA = 0;\n                                var lineIndexB = 0;\n                                if (useTable) {\n                                    lineIndexA = KWZ_TABLE_1[this.readBits(5)];\n                                    lineIndexB = KWZ_TABLE_1[this.readBits(5)];\n                                    pattern = (pattern + 1) % 4;\n                                }\n                                else {\n                                    lineIndexA = this.readBits(13);\n                                    lineIndexB = this.readBits(13);\n                                }\n                                var a = KWZ_LINE_TABLE.subarray(lineIndexA * 8, lineIndexA * 8 + 8);\n                                var b = KWZ_LINE_TABLE.subarray(lineIndexB * 8, lineIndexB * 8 + 8);\n                                if (pattern == 0) {\n                                    pixelBuffer.set(a, pixelOffset);\n                                    pixelBuffer.set(b, pixelOffset + 320);\n                                    pixelBuffer.set(a, pixelOffset + 640);\n                                    pixelBuffer.set(b, pixelOffset + 960);\n                                    pixelBuffer.set(a, pixelOffset + 1280);\n                                    pixelBuffer.set(b, pixelOffset + 1600);\n                                    pixelBuffer.set(a, pixelOffset + 1920);\n                                    pixelBuffer.set(b, pixelOffset + 2240);\n                                }\n                                else if (pattern == 1) {\n                                    pixelBuffer.set(a, pixelOffset);\n                                    pixelBuffer.set(a, pixelOffset + 320);\n                                    pixelBuffer.set(b, pixelOffset + 640);\n                                    pixelBuffer.set(a, pixelOffset + 960);\n                                    pixelBuffer.set(a, pixelOffset + 1280);\n                                    pixelBuffer.set(b, pixelOffset + 1600);\n                                    pixelBuffer.set(a, pixelOffset + 1920);\n                                    pixelBuffer.set(a, pixelOffset + 2240);\n                                }\n                                else if (pattern == 2) {\n                                    pixelBuffer.set(a, pixelOffset);\n                                    pixelBuffer.set(b, pixelOffset + 320);\n                                    pixelBuffer.set(a, pixelOffset + 640);\n                                    pixelBuffer.set(a, pixelOffset + 960);\n                                    pixelBuffer.set(b, pixelOffset + 1280);\n                                    pixelBuffer.set(a, pixelOffset + 1600);\n                                    pixelBuffer.set(a, pixelOffset + 1920);\n                                    pixelBuffer.set(b, pixelOffset + 2240);\n                                }\n                                else if (pattern == 3) {\n                                    pixelBuffer.set(a, pixelOffset);\n                                    pixelBuffer.set(b, pixelOffset + 320);\n                                    pixelBuffer.set(b, pixelOffset + 640);\n                                    pixelBuffer.set(a, pixelOffset + 960);\n                                    pixelBuffer.set(b, pixelOffset + 1280);\n                                    pixelBuffer.set(b, pixelOffset + 1600);\n                                    pixelBuffer.set(a, pixelOffset + 1920);\n                                    pixelBuffer.set(b, pixelOffset + 2240);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        this.prevDecodedFrame = frameIndex;\n        // return this._layers;\n        return [\n            new Uint8Array(this.layers[0].buffer),\n            new Uint8Array(this.layers[1].buffer),\n            new Uint8Array(this.layers[2].buffer),\n        ];\n    };\n    KwzParser.prototype.getFramePalette = function (frameIndex) {\n        var flags = this.frameMeta[frameIndex].flags;\n        var paletteMap = [\n            this.palette.WHITE,\n            this.palette.BLACK,\n            this.palette.RED,\n            this.palette.YELLOW,\n            this.palette.GREEN,\n            this.palette.BLUE,\n            this.palette.NONE\n        ];\n        return [\n            paletteMap[flags & 0xF],\n            paletteMap[(flags >> 8) & 0xF],\n            paletteMap[(flags >> 12) & 0xF],\n            paletteMap[(flags >> 16) & 0xF],\n            paletteMap[(flags >> 20) & 0xF],\n            paletteMap[(flags >> 24) & 0xF],\n            paletteMap[(flags >> 28) & 0xF],\n        ];\n    };\n    // retuns an uint8 array where each item is a pixel's palette index\n    KwzParser.prototype.getLayerPixels = function (frameIndex, layerIndex) {\n        if (this.prevDecodedFrame !== frameIndex) {\n            this.decodeFrame(frameIndex);\n        }\n        var layers = this.layers[layerIndex];\n        var image = new Uint8Array((KwzParser.width * KwzParser.height));\n        var paletteOffset = layerIndex * 2 + 1;\n        for (var pixelIndex = 0; pixelIndex < layers.length; pixelIndex++) {\n            var pixel = layers[pixelIndex];\n            if (pixel & 0xff00) {\n                image[pixelIndex] = paletteOffset;\n            }\n            else if (pixel & 0x00ff) {\n                image[pixelIndex] = paletteOffset + 1;\n            }\n        }\n        return image;\n    };\n    // retuns an uint8 array where each item is a pixel's palette index\n    KwzParser.prototype.getFramePixels = function (frameIndex, useGlobalPalette) {\n        var _this = this;\n        if (useGlobalPalette === void 0) { useGlobalPalette = false; }\n        var paletteMap;\n        if (useGlobalPalette) {\n            var framePalette = this.getFramePalette(frameIndex);\n            paletteMap = framePalette.map(function (color) { return KwzParser.globalPalette.indexOf(color); });\n        }\n        else {\n            paletteMap = [0, 1, 2, 3, 4, 5, 6];\n        }\n        var image = new Uint8Array((KwzParser.width * KwzParser.height));\n        image.fill(paletteMap[0]);\n        var layerOrder = this.getLayerOrder(frameIndex);\n        layerOrder.forEach(function (layerIndex) {\n            var layer = _this.getLayerPixels(frameIndex, layerIndex);\n            // merge layer into image result\n            for (var pixelIndex = 0; pixelIndex < layer.length; pixelIndex++) {\n                var pixel = layer[pixelIndex];\n                if (pixel !== 0) {\n                    image[pixelIndex] = paletteMap[pixel];\n                }\n            }\n        });\n        return image;\n    };\n    KwzParser.prototype.decodeSoundFlags = function () {\n        return this.frameMeta.map(function (frame) {\n            var soundFlags = frame.soundFlags;\n            return [\n                soundFlags & 0x1,\n                (soundFlags >> 1) & 0x1,\n                (soundFlags >> 2) & 0x1,\n                (soundFlags >> 3) & 0x1,\n            ];\n        });\n    };\n    KwzParser.prototype.hasAudioTrack = function (trackIndex) {\n        var keys = ['bgm', 'se1', 'se2', 'se3', 'se4'];\n        var id = keys[trackIndex];\n        return this.soundMeta[id].length > 0;\n    };\n    KwzParser.prototype.decodeAudio = function (track) {\n        var trackMeta = this.soundMeta[track];\n        var adpcm = new Uint8Array(this.buffer, trackMeta.offset, trackMeta.length);\n        var output = new Int16Array(16364 * 60);\n        var outputOffset = 0;\n        // initial decoder state\n        var prevDiff = 0;\n        var prevStepIndex = 40;\n        var sample;\n        var diff;\n        var stepIndex;\n        // loop through each byte in the raw adpcm data\n        for (var adpcmOffset = 0; adpcmOffset < adpcm.length; adpcmOffset++) {\n            var byte = adpcm[adpcmOffset];\n            var bitPos = 0;\n            while (bitPos < 8) {\n                if (prevStepIndex < 18 || bitPos == 6) {\n                    // isolate 2-bit sample\n                    sample = (byte >> bitPos) & 0x3;\n                    // get diff\n                    diff = prevDiff + ADPCM_SAMPLE_TABLE_2[sample + 4 * prevStepIndex];\n                    // get step index\n                    stepIndex = prevStepIndex + ADPCM_INDEX_TABLE_2[sample];\n                    bitPos += 2;\n                }\n                else {\n                    // isolate 4-bit sample\n                    sample = (byte >> bitPos) & 0xF;\n                    // get diff\n                    diff = prevDiff + ADPCM_SAMPLE_TABLE_4[sample + 16 * prevStepIndex];\n                    // get step index\n                    stepIndex = prevStepIndex + ADPCM_INDEX_TABLE_4[sample];\n                    bitPos += 4;\n                }\n                // clamp step index and diff\n                stepIndex = Math.max(0, Math.min(stepIndex, 79));\n                diff = Math.max(-2048, Math.min(diff, 2048));\n                // add result to output buffer\n                output[outputOffset] = (diff * 16);\n                outputOffset += 1;\n                // set prev decoder state\n                prevStepIndex = stepIndex;\n                prevDiff = diff;\n            }\n        }\n        return output.slice(0, outputOffset);\n    };\n    KwzParser.type = 'KWZ';\n    KwzParser.sampleRate = 16364;\n    KwzParser.width = 320;\n    KwzParser.height = 240;\n    KwzParser.globalPalette = [\n        PALETTE.BLACK,\n        PALETTE.WHITE,\n        PALETTE.RED,\n        PALETTE.YELLOW,\n        PALETTE.GREEN,\n        PALETTE.BLUE,\n        PALETTE.NONE,\n    ];\n    return KwzParser;\n}(DataStream));\nexport { KwzParser };\n","import { loadSource } from '../loaders/index';\nimport { PpmParser } from './ppm';\nimport { KwzParser } from './kwz';\nexport function parseSource(source) {\n    return loadSource(source)\n        .then(function (arrayBuffer) {\n        return new Promise(function (resolve, reject) {\n            // check the buffer's magic to identify which format it uses\n            var data = new DataView(arrayBuffer, 0, 4);\n            var magic = data.getUint32(0);\n            if (magic === 0x50415241) { // check if magic is PARA (ppm magic)\n                resolve(new PpmParser(arrayBuffer));\n            }\n            else if ((magic & 0xFFFFFF00) === 0x4B464800) { // check if magic is KFH (kwz magic)\n                resolve(new KwzParser(arrayBuffer));\n            }\n            else {\n                reject();\n            }\n        });\n    });\n}\nexport * from './ppm';\nexport * from './kwz';\n","import { DataStream } from '../utils/index';\nvar WavEncoder = /** @class */ (function () {\n    function WavEncoder(sampleRate, channels, bitsPerSample) {\n        if (channels === void 0) { channels = 1; }\n        if (bitsPerSample === void 0) { bitsPerSample = 16; }\n        this.sampleRate = sampleRate;\n        this.channels = channels;\n        this.bitsPerSample = bitsPerSample;\n        // Write WAV file header\n        // Reference: http://www.topherlee.com/software/pcm-tut-wavformat.html\n        var headerBuffer = new ArrayBuffer(44);\n        var header = new DataStream(headerBuffer);\n        // 'RIFF' indent\n        header.writeUtf8('RIFF');\n        // filesize (set later)\n        header.writeUint32(0);\n        // 'WAVE' indent\n        header.writeUtf8('WAVE');\n        // 'fmt ' section header\n        header.writeUtf8('fmt ');\n        // fmt section length\n        header.writeUint32(16);\n        // specify audio format is pcm (type 1)\n        header.writeUint16(1);\n        // number of audio channels\n        header.writeUint16(this.channels);\n        // audio sample rate\n        header.writeUint32(this.sampleRate);\n        // byterate = (sampleRate * bitsPerSample * channelCount) / 8\n        header.writeUint32((this.sampleRate * this.bitsPerSample * this.channels) / 8);\n        // blockalign = (bitsPerSample * channels) / 8\n        header.writeUint16((this.bitsPerSample * this.channels) / 8);\n        // bits per sample\n        header.writeUint16(this.bitsPerSample);\n        // 'data' section header\n        header.writeUtf8('data');\n        // data section length (set later)\n        header.writeUint32(0);\n        this.header = header;\n        this.pcmData = null;\n    }\n    WavEncoder.prototype.writeFrames = function (pcmData) {\n        var header = this.header;\n        // fill in filesize\n        header.seek(4);\n        header.writeUint32(header.byteLength + pcmData.byteLength);\n        // fill in data section length\n        header.seek(40);\n        header.writeUint32(pcmData.byteLength);\n        this.pcmData = pcmData;\n    };\n    WavEncoder.prototype.getBlob = function () {\n        return new Blob([this.header.buffer, this.pcmData.buffer], { type: 'audio/wav' });\n    };\n    return WavEncoder;\n}());\nexport { WavEncoder };\n","/*\n  LZWEncoder.js\n\n  Authors\n  Kevin Weiner (original Java version - kweiner@fmsware.com)\n  Thibault Imbert (AS3 version - bytearray.org)\n  Johan Nordberg (JS version - code@johan-nordberg.com)\n  James Daniel (ES6/TS version)\n\n  Acknowledgements\n  GIFCOMPR.C - GIF Image compression routines\n  Lempel-Ziv compression based on 'compress'. GIF modifications by\n  David Rowley (mgardi@watdcsu.waterloo.edu)\n  GIF Image compression - modified 'compress'\n  Based on: compress.c - File compression ala IEEE Computer, June 1984.\n  By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\n  Jim McKie (decvax!mcvax!jim)\n  Steve Davies (decvax!vax135!petsd!peora!srd)\n  Ken Turkowski (decvax!decwrl!turtlevax!ken)\n  James A. Woods (decvax!ihnp4!ames!jaw)\n  Joe Orost (decvax!vax135!petsd!joe)\n*/\nvar EOF = -1;\nvar BITS = 12;\nvar HSIZE = 5003; // 80% occupancy\nvar masks = [\n    0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F,\n    0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF,\n    0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF\n];\nvar LZWEncoder = /** @class */ (function () {\n    function LZWEncoder(width, height, pixels, colorDepth) {\n        this.accum = new Uint8Array(256);\n        this.htab = new Int32Array(HSIZE);\n        this.codetab = new Int32Array(HSIZE);\n        this.cur_accum = 0;\n        this.cur_bits = 0;\n        this.curPixel = 0;\n        this.free_ent = 0; // first unused entry\n        // block compression parameters -- after all codes are used up,\n        // and compression rate changes, start over.\n        this.clear_flg = false;\n        // Algorithm: use open addressing double hashing (no chaining) on the\n        // prefix code / next character combination. We do a variant of Knuth's\n        // algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\n        // secondary probe. Here, the modular division first probe is gives way\n        // to a faster exclusive-or manipulation. Also do block compression with\n        // an adaptive reset, whereby the code table is cleared when the compression\n        // ratio decreases, but after the table fills. The variable-length output\n        // codes are re-sized at this point, and a special CLEAR code is generated\n        // for the decompressor. Late addition: construct the table according to\n        // file size for noticeable speed improvement on small files. Please direct\n        // questions about this implementation to ames!jaw.\n        this.g_init_bits = undefined;\n        this.ClearCode = undefined;\n        this.EOFCode = undefined;\n        this.width = width;\n        this.height = height;\n        this.pixels = pixels;\n        this.colorDepth = colorDepth;\n        this.initCodeSize = Math.max(2, this.colorDepth);\n        this.accum = new Uint8Array(256);\n        this.htab = new Int32Array(HSIZE);\n        this.codetab = new Int32Array(HSIZE);\n        this.cur_accum = 0;\n        this.cur_bits = 0;\n        this.a_count;\n        this.remaining;\n        this.curPixel = 0;\n        this.free_ent = 0; // first unused entry\n        this.maxcode;\n        // block compression parameters -- after all codes are used up,\n        // and compression rate changes, start over.\n        this.clear_flg = false;\n        // Algorithm: use open addressing double hashing (no chaining) on the\n        // prefix code / next character combination. We do a variant of Knuth's\n        // algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\n        // secondary probe. Here, the modular division first probe is gives way\n        // to a faster exclusive-or manipulation. Also do block compression with\n        // an adaptive reset, whereby the code table is cleared when the compression\n        // ratio decreases, but after the table fills. The variable-length output\n        // codes are re-sized at this point, and a special CLEAR code is generated\n        // for the decompressor. Late addition: construct the table according to\n        // file size for noticeable speed improvement on small files. Please direct\n        // questions about this implementation to ames!jaw.\n        this.g_init_bits = undefined;\n        this.ClearCode = undefined;\n        this.EOFCode = undefined;\n    }\n    // Add a character to the end of the current packet, and if it is 254\n    // characters, flush the packet to disk.\n    LZWEncoder.prototype.char_out = function (c, outs) {\n        this.accum[this.a_count++] = c;\n        if (this.a_count >= 254)\n            this.flush_char(outs);\n    };\n    // Clear out the hash table\n    // table clear for block compress\n    LZWEncoder.prototype.cl_block = function (outs) {\n        this.cl_hash(HSIZE);\n        this.free_ent = this.ClearCode + 2;\n        this.clear_flg = true;\n        this.output(this.ClearCode, outs);\n    };\n    // Reset code table\n    LZWEncoder.prototype.cl_hash = function (hsize) {\n        for (var i = 0; i < hsize; ++i)\n            this.htab[i] = -1;\n    };\n    LZWEncoder.prototype.compress = function (init_bits, outs) {\n        var fcode, c, i, ent, disp, hsize_reg, hshift;\n        // Set up the globals: this.g_init_bits - initial number of bits\n        this.g_init_bits = init_bits;\n        // Set up the necessary values\n        this.clear_flg = false;\n        this.n_bits = this.g_init_bits;\n        this.maxcode = this.get_maxcode(this.n_bits);\n        this.ClearCode = 1 << (init_bits - 1);\n        this.EOFCode = this.ClearCode + 1;\n        this.free_ent = this.ClearCode + 2;\n        this.a_count = 0; // clear packet\n        ent = this.nextPixel();\n        hshift = 0;\n        for (fcode = HSIZE; fcode < 65536; fcode *= 2)\n            ++hshift;\n        hshift = 8 - hshift; // set hash code range bound\n        hsize_reg = HSIZE;\n        this.cl_hash(hsize_reg); // clear hash table\n        this.output(this.ClearCode, outs);\n        outer_loop: while ((c = this.nextPixel()) != EOF) {\n            fcode = (c << BITS) + ent;\n            i = (c << hshift) ^ ent; // xor hashing\n            if (this.htab[i] === fcode) {\n                ent = this.codetab[i];\n                continue;\n            }\n            else if (this.htab[i] >= 0) { // non-empty slot\n                disp = hsize_reg - i; // secondary hash (after G. Knott)\n                if (i === 0)\n                    disp = 1;\n                do {\n                    if ((i -= disp) < 0)\n                        i += hsize_reg;\n                    if (this.htab[i] === fcode) {\n                        ent = this.codetab[i];\n                        continue outer_loop;\n                    }\n                } while (this.htab[i] >= 0);\n            }\n            this.output(ent, outs);\n            ent = c;\n            if (this.free_ent < 1 << BITS) {\n                this.codetab[i] = this.free_ent++; // code -> hasthis.htable\n                this.htab[i] = fcode;\n            }\n            else {\n                this.cl_block(outs);\n            }\n        }\n        // Put out the final code.\n        this.output(ent, outs);\n        this.output(this.EOFCode, outs);\n    };\n    LZWEncoder.prototype.encode = function (outs) {\n        outs.writeByte(this.initCodeSize); // write 'initial code size' byte\n        this.remaining = this.width * this.height; // reset navigation variables\n        this.curPixel = 0;\n        this.compress(this.initCodeSize + 1, outs); // compress and write the pixel data\n        outs.writeByte(0); // write block terminator\n    };\n    // Flush the packet to disk, and reset the this.accumulator\n    LZWEncoder.prototype.flush_char = function (outs) {\n        if (this.a_count > 0) {\n            outs.writeByte(this.a_count);\n            outs.writeBytes(this.accum, 0, this.a_count);\n            this.a_count = 0;\n        }\n    };\n    LZWEncoder.prototype.get_maxcode = function (n_bits) {\n        return (1 << n_bits) - 1;\n    };\n    // Return the next pixel from the image\n    LZWEncoder.prototype.nextPixel = function () {\n        if (this.remaining === 0)\n            return EOF;\n        --this.remaining;\n        var pix = this.pixels[this.curPixel++];\n        return pix & 0xff;\n    };\n    LZWEncoder.prototype.output = function (code, outs) {\n        this.cur_accum &= masks[this.cur_bits];\n        if (this.cur_bits > 0)\n            this.cur_accum |= (code << this.cur_bits);\n        else\n            this.cur_accum = code;\n        this.cur_bits += this.n_bits;\n        while (this.cur_bits >= 8) {\n            this.char_out((this.cur_accum & 0xff), outs);\n            this.cur_accum >>= 8;\n            this.cur_bits -= 8;\n        }\n        // If the next entry is going to be too big for the code size,\n        // then increase it, if possible.\n        if (this.free_ent > this.maxcode || this.clear_flg) {\n            if (this.clear_flg) {\n                this.maxcode = this.get_maxcode(this.n_bits = this.g_init_bits);\n                this.clear_flg = false;\n            }\n            else {\n                ++this.n_bits;\n                if (this.n_bits == BITS)\n                    this.maxcode = 1 << BITS;\n                else\n                    this.maxcode = this.get_maxcode(this.n_bits);\n            }\n        }\n        if (code == this.EOFCode) {\n            // At EOF, write the rest of the buffer.\n            while (this.cur_bits > 0) {\n                this.char_out((this.cur_accum & 0xff), outs);\n                this.cur_accum >>= 8;\n                this.cur_bits -= 8;\n            }\n            this.flush_char(outs);\n        }\n    };\n    return LZWEncoder;\n}());\nexport { LZWEncoder };\n","import { DataStream, ByteArray } from '../utils/index';\nimport { LZWEncoder } from './lzw';\nvar GifEncoder = /** @class */ (function () {\n    function GifEncoder(width, height) {\n        this.delay = 100;\n        // -1 = no repeat, 0 = forever. anything else is repeat count\n        this.repeat = -1;\n        this.colorDepth = 8;\n        this.palette = [];\n        this.width = width;\n        this.height = height;\n        this.data = new ByteArray();\n    }\n    GifEncoder.fromFlipnote = function (flipnote) {\n        var gif = new GifEncoder(flipnote.width, flipnote.height);\n        gif.palette = flipnote.globalPalette;\n        gif.delay = 100 / flipnote.framerate;\n        gif.repeat = flipnote.meta.loop ? -1 : 0;\n        gif.init();\n        for (var frameIndex = 0; frameIndex < flipnote.frameCount; frameIndex++) {\n            gif.writeFrame(flipnote.getFramePixels(frameIndex, true));\n        }\n        return gif;\n    };\n    GifEncoder.fromFlipnoteFrame = function (flipnote, frameIndex) {\n        var gif = new GifEncoder(flipnote.width, flipnote.height);\n        gif.palette = flipnote.globalPalette;\n        gif.delay = 100 / flipnote.framerate;\n        gif.repeat = flipnote.meta.loop ? -1 : 0;\n        gif.init();\n        gif.writeFrame(flipnote.getFramePixels(frameIndex, true));\n        return gif;\n    };\n    GifEncoder.prototype.init = function () {\n        var paletteSize = this.palette.length;\n        for (var p = 1; 1 << p < paletteSize; p += 1) {\n            continue;\n        }\n        this.colorDepth = p;\n        this.writeHeader();\n        this.writeColorTable();\n        this.writeNetscapeExt();\n    };\n    GifEncoder.prototype.writeHeader = function () {\n        var header = new DataStream(new ArrayBuffer(13));\n        header.writeUtf8('GIF89a');\n        // Logical Screen Descriptor\n        header.writeUint16(this.width);\n        header.writeUint16(this.height);\n        header.writeUint8(0x80 | // 1 : global color table flag = 1 (gct used)\n            (this.colorDepth - 1) // 6-8 : gct size\n        );\n        header.writeUint8(0);\n        header.writeUint8(0);\n        this.data.writeBytes(new Uint8Array(header.buffer));\n    };\n    GifEncoder.prototype.writeColorTable = function () {\n        var palette = new Uint8Array(3 * Math.pow(2, this.colorDepth));\n        for (var index = 0, offset = 0; index < this.palette.length; index += 1, offset += 3) {\n            palette.set(this.palette[index], offset);\n        }\n        this.data.writeBytes(palette);\n    };\n    GifEncoder.prototype.writeGraphicsControlExt = function () {\n        var graphicsControlExt = new DataStream(new ArrayBuffer(8));\n        graphicsControlExt.writeBytes([\n            0x21,\n            0xF9,\n            4,\n            0 // bitfield\n        ]);\n        graphicsControlExt.writeUint16(this.delay); // loop flag\n        graphicsControlExt.writeBytes([\n            0,\n            0\n        ]);\n        this.data.writeBytes(new Uint8Array(graphicsControlExt.buffer));\n    };\n    GifEncoder.prototype.writeNetscapeExt = function () {\n        var netscapeExt = new DataStream(new ArrayBuffer(19));\n        netscapeExt.writeBytes([\n            0x21,\n            0xFF,\n            11,\n        ]);\n        netscapeExt.writeUtf8('NETSCAPE2.0');\n        netscapeExt.writeUint8(3); // subblock size\n        netscapeExt.writeUint8(1); // loop subblock id\n        netscapeExt.writeUint16(this.repeat); // loop flag\n        this.data.writeBytes(new Uint8Array(netscapeExt.buffer));\n    };\n    GifEncoder.prototype.writeImageDesc = function () {\n        var desc = new DataStream(new ArrayBuffer(10));\n        desc.writeUint8(0x2C);\n        desc.writeUint16(0); // image left\n        desc.writeUint16(0); // image top\n        desc.writeUint16(this.width);\n        desc.writeUint16(this.height);\n        desc.writeUint8(0);\n        this.data.writeBytes(new Uint8Array(desc.buffer));\n    };\n    GifEncoder.prototype.writePixels = function (pixels) {\n        var lzw = new LZWEncoder(this.width, this.height, pixels, this.colorDepth);\n        lzw.encode(this.data);\n    };\n    GifEncoder.prototype.writeFrame = function (pixels) {\n        this.writeGraphicsControlExt();\n        this.writeImageDesc();\n        this.writePixels(pixels);\n    };\n    GifEncoder.prototype.getBuffer = function () {\n        return this.data.getBuffer();\n    };\n    GifEncoder.prototype.getBlob = function () {\n        return new Blob([this.getBuffer()], { type: 'image/gif' });\n    };\n    GifEncoder.prototype.getUrl = function () {\n        return window.URL.createObjectURL(this.getBlob());\n    };\n    GifEncoder.prototype.getImage = function () {\n        var img = new Image(this.width, this.height);\n        img.src = this.getUrl();\n        return img;\n    };\n    return GifEncoder;\n}());\nexport { GifEncoder };\n","export * from './gif';\nexport * from './wav';\n// bmp encoder is deprecated in favor of gif\n// export * from './bmp';\n","module.exports = \"#define GLSLIFY 1\\nattribute vec4 a_position;\\nvarying vec2 v_texel;\\nvarying float v_scale;\\nuniform vec2 u_textureSize;\\nuniform vec2 u_screenSize;\\n\\nvoid main() {\\n  gl_Position = a_position;\\n  vec2 uv = a_position.xy * vec2(0.5, -0.5) + 0.5;\\n  v_texel = uv * u_textureSize;\\n  v_scale = floor(u_screenSize.y / u_textureSize.y + 0.01);\\n}\"","module.exports = \"precision highp float;\\n#define GLSLIFY 1\\nvarying vec2 v_texel;\\nvarying float v_scale;\\nuniform vec4 u_color1;\\nuniform vec4 u_color2;\\nuniform sampler2D u_bitmap;\\nuniform bool u_isSmooth;\\nuniform vec2 u_textureSize;\\nuniform vec2 u_screenSize;\\n\\nvoid main() {\\n  vec2 texel_floored = floor(v_texel);\\n  vec2 s = fract(v_texel);\\n  float region_range = 0.5 - 0.5 / v_scale;\\n  vec2 center_dist = s - 0.5;\\n  vec2 f = (center_dist - clamp(center_dist, -region_range, region_range)) * v_scale + 0.5;\\n  vec2 mod_texel = texel_floored + f;\\n  vec2 coord = mod_texel.xy / u_textureSize.xy;\\n  vec2 colorWeights = texture2D(u_bitmap, coord).ra;\\n  gl_FragColor = vec4(u_color1.rgb, 1.0) * colorWeights.y + vec4(u_color2.rgb, 1.0) * colorWeights.x;\\n}\"","import vertexShader from './shader.vert';\nimport fragmentShader from './shader.frag';\n;\nvar ShaderType;\n(function (ShaderType) {\n    ShaderType[ShaderType[\"Vertex\"] = WebGLRenderingContext.VERTEX_SHADER] = \"Vertex\";\n    ShaderType[ShaderType[\"Fragment\"] = WebGLRenderingContext.FRAGMENT_SHADER] = \"Fragment\";\n})(ShaderType || (ShaderType = {}));\n;\nexport var TextureType;\n(function (TextureType) {\n    TextureType[TextureType[\"Alpha\"] = WebGLRenderingContext.ALPHA] = \"Alpha\";\n    TextureType[TextureType[\"LuminanceAlpha\"] = WebGLRenderingContext.LUMINANCE_ALPHA] = \"LuminanceAlpha\";\n})(TextureType || (TextureType = {}));\n;\n/** webgl canvas wrapper class */\nvar WebglCanvas = /** @class */ (function () {\n    function WebglCanvas(el, width, height, params) {\n        if (width === void 0) { width = 640; }\n        if (height === void 0) { height = 480; }\n        if (params === void 0) { params = { antialias: false, alpha: false }; }\n        this.uniforms = {};\n        this.refs = {\n            shaders: [],\n            textures: [],\n            buffers: []\n        };\n        var gl = el.getContext('webgl', params);\n        this.el = el;\n        this.gl = gl;\n        this.width = el.width = width;\n        this.height = el.height = height;\n        this.createProgram();\n        this.createScreenQuad();\n        this.createBitmapTexture();\n        this.setCanvasSize(this.width, this.height);\n        gl.enable(gl.BLEND);\n        gl.blendEquation(gl.FUNC_ADD);\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    }\n    WebglCanvas.prototype.createProgram = function () {\n        var gl = this.gl;\n        var program = gl.createProgram();\n        // set up shaders\n        gl.attachShader(program, this.createShader(ShaderType.Vertex, vertexShader));\n        gl.attachShader(program, this.createShader(ShaderType.Fragment, fragmentShader));\n        // link program\n        gl.linkProgram(program);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n            var log = gl.getProgramInfoLog(program);\n            gl.deleteProgram(program);\n            throw new Error(log);\n        }\n        // activate the program\n        gl.useProgram(program);\n        // map uniform locations\n        var uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n        for (var index = 0; index < uniformCount; index++) {\n            var name_1 = gl.getActiveUniform(program, index).name;\n            this.uniforms[name_1] = gl.getUniformLocation(program, name_1);\n        }\n        this.program = program;\n    };\n    WebglCanvas.prototype.createScreenQuad = function () {\n        var gl = this.gl;\n        // create quad that fills the screen, this will be our drawing surface\n        var vertBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, vertBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1]), gl.STATIC_DRAW);\n        gl.enableVertexAttribArray(0);\n        gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n        this.refs.buffers.push(vertBuffer);\n    };\n    WebglCanvas.prototype.createBitmapTexture = function () {\n        var gl = this.gl;\n        // create texture to use as the layer bitmap\n        gl.activeTexture(gl.TEXTURE0);\n        var tex = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, tex);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.uniform1i(this.uniforms['u_bitmap'], 0);\n        this.refs.textures.push(tex);\n    };\n    WebglCanvas.prototype.createShader = function (type, source) {\n        var gl = this.gl;\n        var shader = gl.createShader(type);\n        gl.shaderSource(shader, source);\n        gl.compileShader(shader);\n        // test if shader compilation was successful\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n            var log = gl.getShaderInfoLog(shader);\n            gl.deleteShader(shader);\n            throw new Error(log);\n        }\n        this.refs.shaders.push(shader);\n        return shader;\n    };\n    WebglCanvas.prototype.setInputSize = function (width, height) {\n        this.gl.uniform2f(this.uniforms['u_textureSize'], width, height);\n    };\n    WebglCanvas.prototype.setCanvasSize = function (width, height) {\n        this.gl.uniform2f(this.uniforms['u_screenSize'], width, height);\n        this.el.width = width;\n        this.el.height = height;\n        this.width = width;\n        this.height = height;\n        this.gl.viewport(0, 0, width, height);\n    };\n    WebglCanvas.prototype.setLayerType = function (textureType) {\n        this.textureType = textureType;\n    };\n    WebglCanvas.prototype.toImage = function (type) {\n        return this.el.toDataURL(type);\n    };\n    WebglCanvas.prototype.setColor = function (color, value) {\n        this.gl.uniform4f(this.uniforms[color], value[0] / 255, value[1] / 255, value[2] / 255, 1);\n    };\n    WebglCanvas.prototype.setPaperColor = function (value) {\n        this.gl.clearColor(value[0] / 255, value[1] / 255, value[2] / 255, 1);\n    };\n    WebglCanvas.prototype.drawLayer = function (buffer, width, height, color1, color2) {\n        var gl = this.gl;\n        // gl.activeTexture(gl.TEXTURE0);\n        gl.texImage2D(gl.TEXTURE_2D, 0, this.textureType, width, height, 0, this.textureType, gl.UNSIGNED_BYTE, buffer);\n        this.setColor('u_color1', color1);\n        this.setColor('u_color2', color2);\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    };\n    WebglCanvas.prototype.resize = function (width, height) {\n        if (width === void 0) { width = 640; }\n        if (height === void 0) { height = 480; }\n        this.setCanvasSize(width, height);\n    };\n    WebglCanvas.prototype.clear = function () {\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n    };\n    WebglCanvas.prototype.destroy = function () {\n        // free resources\n        var refs = this.refs;\n        var gl = this.gl;\n        refs.shaders.forEach(function (shader) {\n            gl.deleteShader(shader);\n        });\n        refs.shaders = [];\n        refs.textures.forEach(function (texture) {\n            gl.deleteTexture(texture);\n        });\n        refs.textures = [];\n        refs.buffers.forEach(function (buffer) {\n            gl.deleteBuffer(buffer);\n        });\n        refs.buffers = [];\n        gl.deleteProgram(this.program);\n        // shrink the canvas to reduce memory usage until it is garbage collected\n        gl.canvas.width = 1;\n        gl.canvas.height = 1;\n    };\n    return WebglCanvas;\n}());\nexport { WebglCanvas };\n","import { WavEncoder } from '../encoders/wav';\nvar AudioTrack = /** @class */ (function () {\n    function AudioTrack(id) {\n        this.playbackRate = 1;\n        this.id = id;\n        this.channelCount = 1;\n        this.bitsPerSample = 16;\n        this.sampleRate = 0;\n        this.audio = document.createElement('audio');\n        this.audio.preload = 'auto';\n        this.isActive = false;\n    }\n    AudioTrack.prototype.set = function (pcmData, playbackRate) {\n        // the HTML5 audio element supports PCM audio if it's in a WAV wrapper\n        var wav = new WavEncoder(this.sampleRate * playbackRate, this.channelCount, this.bitsPerSample);\n        wav.writeFrames(pcmData);\n        this.url = window.URL.createObjectURL(wav.getBlob());\n        // use the blob url for the audio element\n        this.audio.src = this.url;\n        this.isActive = true;\n        this.playbackRate = playbackRate;\n        this.length = pcmData.length;\n    };\n    Object.defineProperty(AudioTrack.prototype, \"duration\", {\n        get: function () {\n            return this.audio.duration;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AudioTrack.prototype.unset = function () {\n        if (this.isActive) {\n            window.URL.revokeObjectURL(this.url);\n            this.audio.src = '';\n            this.audio.load();\n            this.isActive = false;\n            this.playbackRate = 1;\n            this.length = null;\n        }\n    };\n    AudioTrack.prototype.start = function (offset) {\n        if (offset === void 0) { offset = 0; }\n        if (this.isActive) {\n            this.audio.currentTime = offset;\n            this.audio.play();\n        }\n    };\n    AudioTrack.prototype.stop = function () {\n        if (this.isActive) {\n            this.audio.pause();\n        }\n    };\n    return AudioTrack;\n}());\nexport { AudioTrack };\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { parseSource } from '../parsers/index';\nimport { AudioTrack } from './audio';\nimport { WebglCanvas, TextureType } from '../webgl/index';\n/** flipnote player API, based on HTMLMediaElement (https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement) */\nvar Player = /** @class */ (function () {\n    function Player(el, width, height) {\n        this.loop = false;\n        this.paused = true;\n        this.duration = 0;\n        this.isOpen = false;\n        this.events = {};\n        this._frame = -1;\n        this._time = 0;\n        this.hasPlaybackStarted = false;\n        this.wasPlaying = false;\n        this.isSeeking = false;\n        // if `el` is a string, use it to select an Element, else assume it's an element\n        el = ('string' == typeof el) ? document.querySelector(el) : el;\n        this.canvas = new WebglCanvas(el, width, height);\n        this.el = this.canvas.el;\n        this.customPalette = null;\n        this.audioTracks = [\n            new AudioTrack('se1'),\n            new AudioTrack('se2'),\n            new AudioTrack('se3'),\n            new AudioTrack('se4'),\n            new AudioTrack('bgm'),\n        ];\n    }\n    Object.defineProperty(Player.prototype, \"currentFrame\", {\n        get: function () {\n            return this._frame;\n        },\n        set: function (frameIndex) {\n            this.setFrame(frameIndex);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"currentTime\", {\n        get: function () {\n            return this.isOpen ? this._time : null;\n        },\n        set: function (value) {\n            if ((this.isOpen) && (value <= this.duration) && (value >= 0)) {\n                this.setFrame(Math.round(value / (1 / this.framerate)));\n                this._time = value;\n                this.emit('progress', this.progress);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"progress\", {\n        get: function () {\n            return this.isOpen ? (this.currentTime / this.duration) * 100 : 0;\n        },\n        set: function (value) {\n            this.currentTime = this.duration * (value / 100);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"volume\", {\n        get: function () {\n            return this.audioTracks[3].audio.volume;\n        },\n        set: function (value) {\n            for (var i = 0; i < this.audioTracks.length; i++) {\n                this.audioTracks[i].audio.volume = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"muted\", {\n        get: function () {\n            return this.audioTracks[3].audio.muted;\n        },\n        set: function (value) {\n            for (var i = 0; i < this.audioTracks.length; i++) {\n                this.audioTracks[i].audio.muted = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"framerate\", {\n        get: function () {\n            return this.note.framerate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"frameCount\", {\n        get: function () {\n            return this.note.frameCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"frameSpeed\", {\n        get: function () {\n            return this.note.frameSpeed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"audiorate\", {\n        get: function () {\n            return (1 / this.note.bgmrate) / (1 / this.note.framerate);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Player.prototype.open = function (source) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (this.isOpen)\n                    this.close();\n                return [2 /*return*/, parseSource(source)\n                        .then(function (note) {\n                        _this.load(note);\n                    })\n                        .catch(function (err) {\n                        _this.emit('error', err);\n                        console.error('Error loading Flipnote:', err);\n                    })];\n            });\n        });\n    };\n    Player.prototype.close = function () {\n        this.pause();\n        this.note = null;\n        this.isOpen = false;\n        this.paused = true;\n        this.loop = null;\n        this.meta = null;\n        this._frame = null;\n        this._time = null;\n        this.duration = null;\n        this.loop = null;\n        for (var i = 0; i < this.audioTracks.length; i++) {\n            this.audioTracks[i].unset();\n        }\n        this.seFlags = null;\n        this.hasPlaybackStarted = null;\n        this.canvas.clear();\n    };\n    Player.prototype.load = function (note) {\n        this.note = note;\n        this.meta = note.meta;\n        this.type = note.type;\n        this.loop = note.meta.loop;\n        this.duration = (this.note.frameCount) * (1 / this.note.framerate);\n        this.paused = true;\n        this.isOpen = true;\n        this.audioTracks.forEach(function (track) {\n            track.sampleRate = note.sampleRate;\n        });\n        if (this.customPalette) {\n            this.setPalette(this.customPalette);\n        }\n        if (this.note.hasAudioTrack(1))\n            this.audioTracks[0].set(this.note.decodeAudio('se1'), 1);\n        if (this.note.hasAudioTrack(2))\n            this.audioTracks[1].set(this.note.decodeAudio('se2'), 1);\n        if (this.note.hasAudioTrack(3))\n            this.audioTracks[2].set(this.note.decodeAudio('se3'), 1);\n        if (this.type === 'KWZ' && this.note.hasAudioTrack(4))\n            this.audioTracks[3].set(this.note.decodeAudio('se4'), 1);\n        if (this.note.hasAudioTrack(0))\n            this.audioTracks[4].set(this.note.decodeAudio('bgm'), this.audiorate);\n        this.seFlags = this.note.decodeSoundFlags();\n        this.hasPlaybackStarted = false;\n        this.layerVisibility = {\n            1: true,\n            2: true,\n            3: true\n        };\n        this.canvas.setInputSize(note.width, note.height);\n        this.canvas.setLayerType(this.type === 'PPM' ? TextureType.Alpha : TextureType.LuminanceAlpha);\n        this.setFrame(this.note.thumbFrameIndex);\n        this._time = 0;\n        this.emit('load');\n    };\n    Player.prototype.play = function () {\n        var _this = this;\n        if ((!this.isOpen) || (!this.paused))\n            return null;\n        if ((!this.hasPlaybackStarted) || ((!this.loop) && (this.currentFrame == this.frameCount - 1))) {\n            this._time = 0;\n        }\n        this.paused = false;\n        this.playBgm();\n        var start = (performance.now() / 1000) - this.currentTime;\n        var loop = function (timestamp) {\n            if (_this.paused) { // break loop if paused is set to true\n                _this.stopAudio();\n                return null;\n            }\n            var time = timestamp / 1000;\n            var progress = time - start;\n            if (progress > _this.duration) {\n                if (_this.loop) {\n                    _this.currentTime = 0;\n                    _this.playBgm();\n                    start = time;\n                    _this.emit('playback:loop');\n                }\n                else {\n                    _this.pause();\n                    _this.emit('playback:end');\n                }\n            }\n            else {\n                _this.currentTime = progress;\n            }\n            requestAnimationFrame(loop);\n        };\n        requestAnimationFrame(loop);\n        this.hasPlaybackStarted = true;\n        this.emit('playback:start');\n    };\n    Player.prototype.pause = function () {\n        if ((!this.isOpen) || (this.paused))\n            return null;\n        this.paused = true;\n        this.stopAudio();\n        this.emit('playback:stop');\n    };\n    Player.prototype.setFrame = function (frameIndex) {\n        if ((this.isOpen) && (frameIndex !== this.currentFrame)) {\n            // clamp frame index\n            frameIndex = Math.max(0, Math.min(Math.floor(frameIndex), this.frameCount - 1));\n            this.drawFrame(frameIndex);\n            this._frame = frameIndex;\n            if (this.paused) {\n                this._time = frameIndex * (1 / this.framerate);\n                this.emit('progress', this.progress);\n            }\n            else {\n                this.playFrameSe(frameIndex);\n            }\n            this.emit('frame:update', this.currentFrame);\n        }\n    };\n    Player.prototype.nextFrame = function () {\n        if ((this.loop) && (this.currentFrame >= this.frameCount - 1)) {\n            this.currentFrame = 0;\n        }\n        else {\n            this.currentFrame += 1;\n        }\n    };\n    Player.prototype.prevFrame = function () {\n        if ((this.loop) && (this.currentFrame <= 0)) {\n            this.currentFrame = this.frameCount - 1;\n        }\n        else {\n            this.currentFrame -= 1;\n        }\n    };\n    Player.prototype.lastFrame = function () {\n        this.currentFrame = this.frameCount - 1;\n    };\n    Player.prototype.firstFrame = function () {\n        this.currentFrame = 0;\n    };\n    Player.prototype.thumbnailFrame = function () {\n        this.currentFrame = this.note.thumbFrameIndex;\n    };\n    Player.prototype.startSeek = function () {\n        if (!this.isSeeking) {\n            this.wasPlaying = !this.paused;\n            this.pause();\n            this.isSeeking = true;\n        }\n    };\n    Player.prototype.seek = function (progress) {\n        if (this.isSeeking) {\n            this.progress = progress;\n        }\n    };\n    Player.prototype.endSeek = function () {\n        if ((this.isSeeking) && (this.wasPlaying === true)) {\n            this.play();\n        }\n        this.wasPlaying = false;\n        this.isSeeking = false;\n    };\n    Player.prototype.drawFrame = function (frameIndex) {\n        var _this = this;\n        var width = this.note.width;\n        var height = this.note.height;\n        var colors = this.note.getFramePalette(frameIndex);\n        var layerBuffers = this.note.decodeFrame(frameIndex);\n        this.canvas.setPaperColor(colors[0]);\n        this.canvas.clear();\n        if (this.note.type === 'PPM') {\n            if (this.layerVisibility[2]) {\n                this.canvas.drawLayer(layerBuffers[1], width, height, colors[2], [0, 0, 0, 0]);\n            }\n            if (this.layerVisibility[1]) {\n                this.canvas.drawLayer(layerBuffers[0], width, height, colors[1], [0, 0, 0, 0]);\n            }\n        }\n        else if (this.note.type === 'KWZ') {\n            // loop through each layer\n            this.note.getLayerOrder(frameIndex).forEach(function (layerIndex) {\n                // only draw layer if it's visible\n                if (_this.layerVisibility[layerIndex + 1]) {\n                    _this.canvas.drawLayer(layerBuffers[layerIndex], width, height, colors[layerIndex * 2 + 1], colors[layerIndex * 2 + 2]);\n                }\n            });\n        }\n    };\n    Player.prototype.forceUpdate = function () {\n        if (this.isOpen) {\n            this.drawFrame(this.currentFrame);\n        }\n    };\n    Player.prototype.playFrameSe = function (frameIndex) {\n        var flags = this.seFlags[frameIndex];\n        for (var i = 0; i < flags.length; i++) {\n            if (flags[i] && this.audioTracks[i].isActive)\n                this.audioTracks[i].start();\n        }\n    };\n    Player.prototype.playBgm = function () {\n        this.audioTracks[4].start(this.currentTime);\n    };\n    Player.prototype.stopAudio = function () {\n        for (var i = 0; i < this.audioTracks.length; i++) {\n            this.audioTracks[i].stop();\n        }\n    };\n    Player.prototype.resize = function (width, height) {\n        this.canvas.resize(width, height);\n        this.forceUpdate();\n    };\n    Player.prototype.setLayerVisibility = function (frameIndex, value) {\n        this.layerVisibility[frameIndex] = value;\n        this.forceUpdate();\n    };\n    Player.prototype.setPalette = function (palette) {\n        this.customPalette = palette;\n        this.note.palette = palette;\n        this.forceUpdate();\n    };\n    Player.prototype.on = function (eventType, callback) {\n        var events = this.events;\n        (events[eventType] || (events[eventType] = [])).push(callback);\n    };\n    Player.prototype.off = function (eventType, callback) {\n        var callbackList = this.events[eventType];\n        if (callbackList)\n            callbackList.splice(callbackList.indexOf(callback), 1);\n    };\n    Player.prototype.emit = function (eventType) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var callbackList = this.events[eventType] || [];\n        for (var i = 0; i < callbackList.length; i++) {\n            callbackList[i].apply(null, args);\n        }\n    };\n    Player.prototype.clearEvents = function () {\n        this.events = {};\n    };\n    Player.prototype.destroy = function () {\n        this.close();\n        this.canvas.destroy();\n    };\n    return Player;\n}());\nexport { Player };\n","import * as utils from './utils/index';\nimport { parseSource, KwzParser, PpmParser } from './parsers/index';\nimport { Player } from './player/index';\nimport { GifEncoder, WavEncoder } from './encoders/index';\n// bitmap encoder is deprecated in favor of gif\n// import { BitmapEncoder } from './encoders';\nexport default {\n    version: VERSION,\n    player: Player,\n    parseSource: parseSource,\n    kwzParser: KwzParser,\n    ppmParser: PpmParser,\n    // bitmapEncoder: BitmapEncoder,\n    gifEncoder: GifEncoder,\n    wavEncoder: WavEncoder,\n    utils: utils,\n};\n"],"sourceRoot":""}
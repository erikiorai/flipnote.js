{"version":3,"sources":["webpack://flipnote/webpack/universalModuleDefinition","webpack://flipnote/webpack/bootstrap","webpack://flipnote/./webgl/shader.vert","webpack://flipnote/./webgl/shader.frag","webpack://flipnote/./utils/dataStream.ts","webpack://flipnote/./loader/index.ts","webpack://flipnote/./loader/urlLoader.ts","webpack://flipnote/./loader/fileLoader.ts","webpack://flipnote/./loader/arrayBufferLoader.ts","webpack://flipnote/./parser/adpcm.ts","webpack://flipnote/./parser/kwzTables.ts","webpack://flipnote/./parser/ppm.ts","webpack://flipnote/./parser/kwz.ts","webpack://flipnote/./parser/index.ts","webpack://flipnote/./webgl/canvas.ts","webpack://flipnote/./player/index.ts","webpack://flipnote/./flipnote.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","SeekOrigin","DataStream","arrayBuffer","buffer","data","DataView","cursor","Uint8Array","configurable","byteLength","seek","offset","whence","End","Current","Begin","readUint8","val","getUint8","writeUint8","setUint8","readInt8","getInt8","writeInt8","setInt8","readUint16","littleEndian","getUint16","writeUint16","setUint16","readInt16","getInt16","writeInt16","setInt16","readUint32","getUint32","writeUint32","setUint32","readInt32","getInt32","writeInt32","setInt32","readBytes","count","bytes","writeBytes","_this","forEach","byte","readHex","reverse","hex","length","push","toString","padStart","join","toUpperCase","readUtf8","chars","str","char","String","fromCharCode","writeUtf8","string","charCodeAt","readUtf16","Uint16Array","loaders","matches","source","load","resolve","reject","xhr","XMLHttpRequest","open","responseType","onreadystatechange","e","readyState","status","response","type","statusText","send","File","reader","FileReader","onload","event","result","onerror","readAsArrayBuffer","ArrayBuffer","ADPCM_INDEX_TABLE_2","Int8Array","ADPCM_INDEX_TABLE_4","ADPCM_STEP_TABLE","Int16Array","ADPCM_SAMPLE_TABLE_2","adpcm_sample","adpcm_stepIndex","adpcm_diff","step","ADPCM_SAMPLE_TABLE_4","__extends","extendStatics","b","setPrototypeOf","__proto__","Array","__","constructor","FRAMERATES","PALETTE","WHITE","BLACK","RED","BLUE","ppm_PpmParser","_super","PpmParser","palette","prevDecodedFrame","decodeHeader","decodeAnimationHeader","decodeSoundHeader","decodeMeta","layers","width","height","prevLayers","validateFSID","fsid","test","validateFilename","filename","readFilename","readLineEncoding","unpacked","byteOffset","bitOffset","frameDataLength","soundDataLength","frameCount","version","lock","thumbIndex","rootAuthorName","parentAuthorName","currentAuthorName","parentAuthorId","currentAuthorId","parentFilename","currentFilename","rootAuthorId","timestamp","Date","flags","thumbFrameIndex","meta","loop","frame_count","frame_speed","frameSpeed","bgm_speed","bgmSpeed","thumb_index","spinoff","username","parent","current","offsetTableLength","frameOffsets","Uint32Array","map","bgmLen","se1Len","se2Len","se3Len","framerate","bgmrate","soundMeta","bgm","se1","se2","se3","isNewFrame","frameIndex","getFramePalette","header","paperColor","pen","getLayerOrder","decodeFrame","isTranslated","translateX","translateY","set","fill","layerEncoding","layer","layerBitmap","line","lineType","chunkOffset","lineHeader","chunk","pixel","dest","src","y","x","getLayerPixels","layerIndex","image","layerColor","getFramePixels","useGlobalPalette","paletteMap","color","globalPalette","indexOf","a","hasAudioTrack","trackIndex","id","decodeAudio","track","sample","diff","stepIndex","adpcm","output","outputOffset","prevDiff","prevStepIndex","index","bitPos","Math","max","min","decodeSoundFlags","sampleRate","KWZ_TABLE_1","KWZ_TABLE_2","KWZ_TABLE_3","values","kwzTables_index","kwzTables_a","kwzTables_b","KWZ_LINE_TABLE","kwzTables_offset","f","g","h","kwz_extends","kwz_FRAMERATES","kwz_PALETTE","YELLOW","GREEN","NONE","kwz_KwzParser","KwzParser","bitIndex","bitValue","size","sectionCount","sectionMagic","substring","sectionLength","sections","decodeFrameMeta","readBits","num","nextBits","mask","creationTimestamp","modifiedTimestamp","rootFilename","creation_timestamp","frame","layerSize","frameAuthor","layerDepth","soundFlags","cameraFlag","frameMeta","trackSizes","se4","getDiffingFlag","getLayerDepths","depths","sort","diffingFlag","isPrevFrame","skip","tileOffsetY","tileOffsetX","subTileOffsetY","subTileOffsetX","pixelOffset","pixelBuffer","lineIndex","pixels","subarray","lineValue","lineIndexA","lineIndexB","pattern","paletteOffset","framePalette","slice","parseSource","Promise","loader","loadSource","then","magic","ShaderType","TextureType","FilterType","DisplayMode","WebGLRenderingContext","VERTEX_SHADER","FRAGMENT_SHADER","ALPHA","LUMINANCE_ALPHA","LINEAR","NEAREST","canvas_WebglCanvas","WebglCanvas","el","params","antialias","alpha","uniforms","refs","shaders","textures","buffers","gl","getContext","program","createProgram","vShader","createShader","Vertex","shader_default","fShader","Fragment","webgl_shader_default","attachShader","linkProgram","getProgramParameter","LINK_STATUS","log","getProgramInfoLog","deleteProgram","Error","useProgram","vertBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","activeTexture","TEXTURE0","tex","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","uniformCount","ACTIVE_UNIFORMS","name_1","getActiveUniform","getUniformLocation","uniform1i","setFilter","Linear","setMode","PPM","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","textureType","Alpha","KWZ","LuminanceAlpha","toImage","toDataURL","filter","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","setColor","uniform4f","setPaperColor","clearColor","drawLayer","color1","color2","texImage2D","UNSIGNED_BYTE","drawArrays","TRIANGLES","resize","viewport","clear","COLOR_BUFFER_BIT","destroy","texture","deleteTexture","deleteBuffer","canvas","__awaiter","thisArg","_arguments","P","generator","fulfilled","next","rejected","done","apply","__generator","body","_","label","sent","trys","ops","verb","throw","return","iterator","v","op","TypeError","pop","player_Player","Player","paused","smoothRendering","isOpen","playbackLoop","hasPlaybackStarted","document","querySelector","setFrame","currentFrame","duration","round","note","_a","close","catch","err","console","error","layerVisibility","1","2","3","emit","pause","play","window","setInterval","clearInterval","firstFrame","nextFrame","setPalette","forceUpdate","floor","drawFrame","colors","layerBuffers","thumbnailFrame","prevFrame","lastFrame","setLayerVisibility","setSmoothRendering","Nearest","on","eventType","callback","events","off","callbackList","splice","args","_i","arguments","__webpack_exports__"],"mappings":"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","file":"flipnote.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"flipnote\"] = factory();\n\telse\n\t\troot[\"flipnote\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = \"#define GLSLIFY 1\\nattribute vec4 a_position;\\nvarying vec2 v_texcoord;\\nvoid main() {\\n  gl_Position = a_position;\\n  v_texcoord = a_position.xy * vec2(0.5, -0.5) + 0.5;\\n}\"","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\nvarying vec2 v_texcoord;\\nuniform vec4 u_color1;\\nuniform vec4 u_color2;\\nuniform sampler2D u_bitmap;\\nuniform bool u_isSmooth;\\nvoid main() {\\n  float weightColor1 = texture2D(u_bitmap, v_texcoord).a;\\n  float weightColor2 = texture2D(u_bitmap, v_texcoord).r;\\n  float alpha = 1.0;\\n  if (u_isSmooth) {\\n    weightColor1 = smoothstep(0.0, .9, weightColor1);\\n    weightColor2 = smoothstep(0.0, .9, weightColor2);\\n    float alpha = weightColor1 + weightColor2;\\n  }\\n  gl_FragColor = vec4(u_color1.rgb, alpha) * weightColor1 + vec4(u_color2.rgb, alpha) * weightColor2;\\n}\\n\"","/** datastream serves as a wrapper around the DataView API to help keep track of the offset into the stream */\nexport var SeekOrigin;\n(function (SeekOrigin) {\n    SeekOrigin[SeekOrigin[\"Begin\"] = 0] = \"Begin\";\n    SeekOrigin[SeekOrigin[\"Current\"] = 1] = \"Current\";\n    SeekOrigin[SeekOrigin[\"End\"] = 2] = \"End\";\n})(SeekOrigin || (SeekOrigin = {}));\nvar DataStream = /** @class */ (function () {\n    function DataStream(arrayBuffer) {\n        this.buffer = arrayBuffer;\n        this.data = new DataView(arrayBuffer);\n        this.cursor = 0;\n    }\n    Object.defineProperty(DataStream.prototype, \"bytes\", {\n        get: function () {\n            return new Uint8Array(this.buffer);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataStream.prototype, \"byteLength\", {\n        get: function () {\n            return this.data.byteLength;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DataStream.prototype.seek = function (offset, whence) {\n        switch (whence) {\n            case SeekOrigin.End:\n                this.cursor = this.data.byteLength + offset;\n                break;\n            case SeekOrigin.Current:\n                this.cursor += offset;\n                break;\n            case SeekOrigin.Begin:\n            default:\n                this.cursor = offset;\n                break;\n        }\n    };\n    DataStream.prototype.readUint8 = function () {\n        var val = this.data.getUint8(this.cursor);\n        this.cursor += 1;\n        return val;\n    };\n    DataStream.prototype.writeUint8 = function (value) {\n        this.data.setUint8(this.cursor, value);\n        this.cursor += 1;\n    };\n    DataStream.prototype.readInt8 = function () {\n        var val = this.data.getInt8(this.cursor);\n        this.cursor += 1;\n        return val;\n    };\n    DataStream.prototype.writeInt8 = function (value) {\n        this.data.setInt8(this.cursor, value);\n        this.cursor += 1;\n    };\n    DataStream.prototype.readUint16 = function (littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        var val = this.data.getUint16(this.cursor, littleEndian);\n        this.cursor += 2;\n        return val;\n    };\n    DataStream.prototype.writeUint16 = function (value, littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        this.data.setUint16(this.cursor, value, littleEndian);\n        this.cursor += 2;\n    };\n    DataStream.prototype.readInt16 = function (littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        var val = this.data.getInt16(this.cursor, littleEndian);\n        this.cursor += 2;\n        return val;\n    };\n    DataStream.prototype.writeInt16 = function (value, littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        this.data.setInt16(this.cursor, value, littleEndian);\n        this.cursor += 2;\n    };\n    DataStream.prototype.readUint32 = function (littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        var val = this.data.getUint32(this.cursor, littleEndian);\n        this.cursor += 4;\n        return val;\n    };\n    DataStream.prototype.writeUint32 = function (value, littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        this.data.setUint32(this.cursor, value, littleEndian);\n        this.cursor += 4;\n    };\n    DataStream.prototype.readInt32 = function (littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        var val = this.data.getInt32(this.cursor, littleEndian);\n        this.cursor += 4;\n        return val;\n    };\n    DataStream.prototype.writeInt32 = function (value, littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        this.data.setInt32(this.cursor, value, littleEndian);\n        this.cursor += 4;\n    };\n    DataStream.prototype.readBytes = function (count) {\n        var bytes = new Uint8Array(this.data.buffer, this.cursor, count);\n        this.cursor += bytes.byteLength;\n        return bytes;\n    };\n    DataStream.prototype.writeBytes = function (bytes) {\n        var _this = this;\n        bytes.forEach(function (byte) { return _this.writeUint8(byte); });\n    };\n    DataStream.prototype.readHex = function (count, reverse) {\n        if (reverse === void 0) { reverse = false; }\n        var bytes = this.readBytes(count);\n        var hex = [];\n        for (var i = 0; i < bytes.length; i++) {\n            hex.push(bytes[i].toString(16).padStart(2, '0'));\n        }\n        if (reverse)\n            hex.reverse();\n        return hex.join('').toUpperCase();\n    };\n    DataStream.prototype.readUtf8 = function (count) {\n        var chars = this.readBytes(count);\n        var str = '';\n        for (var i = 0; i < chars.length; i++) {\n            var char = chars[i];\n            if (char == 0)\n                break;\n            str += String.fromCharCode(char);\n        }\n        return str;\n    };\n    DataStream.prototype.writeUtf8 = function (string) {\n        for (var i = 0; i < string.length; i++) {\n            var char = string.charCodeAt(i);\n            this.writeUint8(char);\n        }\n    };\n    DataStream.prototype.readUtf16 = function (count) {\n        var chars = new Uint16Array(this.data.buffer, this.cursor, count);\n        this.cursor += chars.byteLength;\n        var str = '';\n        for (var i = 0; i < chars.length; i++) {\n            var char = chars[i];\n            if (char == 0)\n                break;\n            str += String.fromCharCode(char);\n        }\n        return str;\n    };\n    return DataStream;\n}());\nexport { DataStream };\n","import urlLoader from './urlLoader';\nimport fileLoader from './fileLoader';\nimport arrayBufferLoader from './arrayBufferLoader';\nvar loaders = [\n    urlLoader,\n    fileLoader,\n    arrayBufferLoader\n];\nexport function loadSource(source) {\n    return new Promise(function (resolve, reject) {\n        for (var i = 0; i < loaders.length; i++) {\n            var loader = loaders[i];\n            if (loader.matches(source)) {\n                loader.load(source, resolve, reject);\n                break;\n            }\n        }\n    });\n}\n","export default {\n    matches: function (source) {\n        return typeof source === 'string';\n    },\n    load: function (source, resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', source, true);\n        xhr.responseType = 'arraybuffer';\n        xhr.onreadystatechange = function (e) {\n            if (xhr.readyState === 4) {\n                if (xhr.status >= 200 && xhr.status < 300) {\n                    resolve(xhr.response);\n                }\n                else {\n                    reject({\n                        type: 'httpError',\n                        status: xhr.status,\n                        statusText: xhr.statusText\n                    });\n                }\n            }\n        };\n        xhr.send(null);\n    }\n};\n","export default {\n    matches: function (source) {\n        return (source instanceof File);\n    },\n    load: function (source, resolve, reject) {\n        var reader = new FileReader();\n        reader.onload = function (event) {\n            resolve(reader.result);\n        };\n        reader.onerror = function (event) {\n            reject({ type: 'fileReadError' });\n        };\n        reader.readAsArrayBuffer(source);\n    }\n};\n","export default {\n    matches: function (source) {\n        return (source instanceof ArrayBuffer);\n    },\n    load: function (source, resolve, reject) {\n        resolve(source);\n    }\n};\n","export var ADPCM_INDEX_TABLE_2 = new Int8Array([\n    -1, 2, -1, 2\n]);\nexport var ADPCM_INDEX_TABLE_4 = new Int8Array([\n    -1, -1, -1, -1, 2, 4, 6, 8,\n    -1, -1, -1, -1, 2, 4, 6, 8\n]);\n// note that this is a slight deviation from the normal adpcm table\nexport var ADPCM_STEP_TABLE = new Int16Array([\n    7, 8, 9, 10, 11, 12, 13, 14, 16, 17,\n    19, 21, 23, 25, 28, 31, 34, 37, 41, 45,\n    50, 55, 60, 66, 73, 80, 88, 97, 107, 118,\n    130, 143, 157, 173, 190, 209, 230, 253, 279, 307,\n    337, 371, 408, 449, 494, 544, 598, 658, 724, 796,\n    876, 963, 1060, 1166, 1282, 1411, 1552, 1707, 1878, 2066,\n    2272, 2499, 2749, 3024, 3327, 3660, 4026, 4428, 4871, 5358,\n    5894, 6484, 7132, 7845, 8630, 9493, 10442, 11487, 12635, 13899,\n    15289, 16818, 18500, 20350, 22385, 24623, 27086, 29794, 32767, 0\n]);\nexport var ADPCM_SAMPLE_TABLE_2 = new Int16Array(90 * 4);\nfor (var sample = 0; sample < 4; sample++) {\n    for (var stepIndex = 0; stepIndex < 90; stepIndex++) {\n        var step = ADPCM_STEP_TABLE[stepIndex];\n        var diff = step >> 3;\n        if (sample & 1)\n            diff += step;\n        if (sample & 2)\n            diff = -diff;\n        ADPCM_SAMPLE_TABLE_2[sample + 4 * stepIndex] = diff;\n    }\n}\nexport var ADPCM_SAMPLE_TABLE_4 = new Int16Array(90 * 16);\nfor (var sample = 0; sample < 16; sample++) {\n    for (var stepIndex = 0; stepIndex < 90; stepIndex++) {\n        var step = ADPCM_STEP_TABLE[stepIndex];\n        var diff = step >> 3;\n        if (sample & 4)\n            diff += step;\n        if (sample & 2)\n            diff += step >> 1;\n        if (sample & 1)\n            diff += step >> 2;\n        if (sample & 8)\n            diff = -diff;\n        ADPCM_SAMPLE_TABLE_4[sample + 16 * stepIndex] = diff;\n    }\n}\n","// table1 - commonly occuring line offsets\nexport var KWZ_TABLE_1 = new Uint16Array([\n    0x0000, 0x0CD0, 0x19A0, 0x02D9, 0x088B, 0x0051, 0x00F3, 0x0009,\n    0x001B, 0x0001, 0x0003, 0x05B2, 0x1116, 0x00A2, 0x01E6, 0x0012,\n    0x0036, 0x0002, 0x0006, 0x0B64, 0x08DC, 0x0144, 0x00FC, 0x0024,\n    0x001C, 0x0004, 0x0334, 0x099C, 0x0668, 0x1338, 0x1004, 0x166C\n]);\n// table2 - commonly occuring line offsets, but the lines are shifted to the left by one pixel\nexport var KWZ_TABLE_2 = new Uint16Array([\n    0x0000, 0x0CD0, 0x19A0, 0x0003, 0x02D9, 0x088B, 0x0051, 0x00F3,\n    0x0009, 0x001B, 0x0001, 0x0006, 0x05B2, 0x1116, 0x00A2, 0x01E6,\n    0x0012, 0x0036, 0x0002, 0x02DC, 0x0B64, 0x08DC, 0x0144, 0x00FC,\n    0x0024, 0x001C, 0x099C, 0x0334, 0x1338, 0x0668, 0x166C, 0x1004\n]);\n// table3 - line offsets, but the lines are shifted to the left by one pixel\nexport var KWZ_TABLE_3 = new Uint16Array(6561);\nvar values = [0, 3, 7, 1, 4, 8, 2, 5, 6];\nvar index = 0;\nfor (var a = 0; a < 9; a++)\n    for (var b = 0; b < 9; b++)\n        for (var c = 0; c < 9; c++)\n            for (var d = 0; d < 9; d++) {\n                KWZ_TABLE_3[index] = ((values[a] * 9 + values[b]) * 9 + values[c]) * 9 + values[d];\n                index++;\n            }\n// linetable - contains every possible sequence of pixels for each tile line\nexport var KWZ_LINE_TABLE = new Uint16Array(6561 * 8);\nvar values = [0x0000, 0xFF00, 0x00FF];\nvar offset = 0;\nfor (var a = 0; a < 3; a++)\n    for (var b = 0; b < 3; b++)\n        for (var c = 0; c < 3; c++)\n            for (var d = 0; d < 3; d++)\n                for (var e = 0; e < 3; e++)\n                    for (var f = 0; f < 3; f++)\n                        for (var g = 0; g < 3; g++)\n                            for (var h = 0; h < 3; h++) {\n                                KWZ_LINE_TABLE.set([\n                                    values[b],\n                                    values[a],\n                                    values[d],\n                                    values[c],\n                                    values[f],\n                                    values[e],\n                                    values[h],\n                                    values[g]\n                                ], offset);\n                                offset += 8;\n                            }\n","/**\n * PPM decoder\n * Reads frames, audio, and metadata from Flipnote Studio PPM files\n * Based on my Python PPM decoder implementation (https://github.com/jaames/flipnote-tools)\n *\n * Credits:\n *  PPM format reverse-engineering and documentation:\n *   - bricklife (http://ugomemo.g.hatena.ne.jp/bricklife/20090307/1236391313)\n *   - mirai-iro (http://mirai-iro.hatenablog.jp/entry/20090116/ugomemo_ppm)\n *   - harimau_tigris (http://ugomemo.g.hatena.ne.jp/harimau_tigris)\n *   - steven (http://www.dsibrew.org/wiki/User:Steven)\n *   - yellows8 (http://www.dsibrew.org/wiki/User:Yellows8)\n *   - PBSDS (https://github.com/pbsds)\n *   - jaames (https://github.com/jaames)\n *  Identifying the PPM sound codec:\n *   - Midmad from Hatena Haiku\n *   - WDLMaster from hcs64.com\n *  Helping me to identify issues with the Python decoder that this is based on:\n *   - Austin Burk (https://sudomemo.net)\n *\n *  Lastly, a huge thanks goes to Nintendo for creating Flipnote Studio,\n *  and to Hatena for providing the Flipnote Hatena online service, both of which inspired so many c:\n*/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { DataStream } from '../utils/dataStream';\nimport { ADPCM_INDEX_TABLE_4, ADPCM_SAMPLE_TABLE_4 } from './adpcm';\n// internal frame speed value -> FPS table\nvar FRAMERATES = [\n    null,\n    0.5,\n    1,\n    2,\n    4,\n    6,\n    12,\n    20,\n    30,\n];\nvar PALETTE = {\n    WHITE: [0xff, 0xff, 0xff],\n    BLACK: [0x0e, 0x0e, 0x0e],\n    RED: [0xff, 0x2a, 0x2a],\n    BLUE: [0x0a, 0x39, 0xff],\n};\n;\nvar PpmParser = /** @class */ (function (_super) {\n    __extends(PpmParser, _super);\n    function PpmParser(arrayBuffer) {\n        var _this = _super.call(this, arrayBuffer) || this;\n        _this.type = PpmParser.type;\n        _this.palette = PALETTE;\n        _this.prevDecodedFrame = null;\n        _this.decodeHeader();\n        _this.decodeAnimationHeader();\n        _this.decodeSoundHeader();\n        _this.decodeMeta();\n        // create image buffers\n        _this.layers = [\n            new Uint8Array(PpmParser.width * PpmParser.height),\n            new Uint8Array(PpmParser.width * PpmParser.height)\n        ];\n        _this.prevLayers = [\n            new Uint8Array(PpmParser.width * PpmParser.height),\n            new Uint8Array(PpmParser.width * PpmParser.height)\n        ];\n        _this.prevDecodedFrame = null;\n        return _this;\n    }\n    PpmParser.validateFSID = function (fsid) {\n        return /[0159]{1}[0-9A-F]{6}0[0-9A-F]{8}/.test(fsid);\n    };\n    PpmParser.validateFilename = function (filename) {\n        return /[0-9A-F]{6}_[0-9A-F]{13}_[0-9]{3}/.test(filename);\n    };\n    PpmParser.prototype.readFilename = function () {\n        return [\n            this.readHex(3),\n            this.readUtf8(13),\n            this.readUint16().toString().padStart(3, '0')\n        ].join('_');\n    };\n    PpmParser.prototype.readLineEncoding = function () {\n        var unpacked = new Uint8Array(PpmParser.height);\n        for (var byteOffset = 0; byteOffset < 48; byteOffset++) {\n            var byte = this.readUint8();\n            // each line's encoding type is stored as a 2-bit value\n            for (var bitOffset = 0; bitOffset < 8; bitOffset += 2) {\n                unpacked[byteOffset * 4 + bitOffset / 2] = (byte >> bitOffset) & 0x03;\n            }\n        }\n        return unpacked;\n    };\n    PpmParser.prototype.decodeHeader = function () {\n        this.seek(0);\n        // decode header\n        // https://github.com/pbsds/hatena-server/wiki/PPM-format#file-header\n        var magic = this.readUint32();\n        this.frameDataLength = this.readUint32();\n        this.soundDataLength = this.readUint32();\n        this.frameCount = this.readUint16() + 1;\n        this.version = this.readUint16();\n    };\n    PpmParser.prototype.decodeMeta = function () {\n        // https://github.com/pbsds/hatena-server/wiki/PPM-format#file-header\n        this.seek(0x10);\n        var lock = this.readUint16(), thumbIndex = this.readInt16(), rootAuthorName = this.readUtf16(11), parentAuthorName = this.readUtf16(11), currentAuthorName = this.readUtf16(11), parentAuthorId = this.readHex(8, true), currentAuthorId = this.readHex(8, true), parentFilename = this.readFilename(), currentFilename = this.readFilename(), rootAuthorId = this.readHex(8, true);\n        this.seek(0x9A);\n        var timestamp = new Date((this.readUint32() + 946684800) * 1000);\n        this.seek(0x06A6);\n        var flags = this.readUint16();\n        this.thumbFrameIndex = thumbIndex;\n        this.meta = {\n            lock: lock === 1,\n            loop: (flags >> 1 & 0x01) === 1,\n            frame_count: this.frameCount,\n            frame_speed: this.frameSpeed,\n            bgm_speed: this.bgmSpeed,\n            thumb_index: thumbIndex,\n            timestamp: timestamp,\n            spinoff: (currentAuthorId !== parentAuthorId) || (currentAuthorId !== rootAuthorId),\n            root: {\n                filename: null,\n                username: rootAuthorName,\n                fsid: rootAuthorId,\n            },\n            parent: {\n                username: parentAuthorName,\n                fsid: parentAuthorId,\n                filename: parentFilename\n            },\n            current: {\n                username: currentAuthorName,\n                fsid: currentAuthorId,\n                filename: currentFilename\n            },\n        };\n    };\n    PpmParser.prototype.decodeAnimationHeader = function () {\n        var _this = this;\n        // jump to the start of the animation data section\n        // https://github.com/pbsds/hatena-server/wiki/PPM-format#animation-data-section\n        this.seek(0x06A0);\n        var offsetTableLength = this.readUint16();\n        // skip padding + flags\n        this.seek(0x06A8);\n        // read frame offsets and build them into a table\n        this.frameOffsets = new Uint32Array(offsetTableLength / 4).map(function (value) {\n            return 0x06A8 + offsetTableLength + _this.readUint32();\n        });\n    };\n    PpmParser.prototype.decodeSoundHeader = function () {\n        // https://github.com/pbsds/hatena-server/wiki/PPM-format#sound-data-section\n        // offset = frame data offset + frame data length + sound effect flags\n        var offset = 0x06A0 + this.frameDataLength + this.frameCount;\n        // account for multiple-of-4 padding\n        if (offset % 2 != 0)\n            offset += 4 - (offset % 4);\n        this.seek(offset);\n        var bgmLen = this.readUint32();\n        var se1Len = this.readUint32();\n        var se2Len = this.readUint32();\n        var se3Len = this.readUint32();\n        this.frameSpeed = 8 - this.readUint8();\n        this.bgmSpeed = 8 - this.readUint8();\n        offset += 32;\n        this.framerate = FRAMERATES[this.frameSpeed];\n        this.bgmrate = FRAMERATES[this.bgmSpeed];\n        this.soundMeta = {\n            bgm: { offset: offset, length: bgmLen },\n            se1: { offset: offset += bgmLen, length: se1Len },\n            se2: { offset: offset += se1Len, length: se2Len },\n            se3: { offset: offset += se2Len, length: se3Len },\n        };\n    };\n    PpmParser.prototype.isNewFrame = function (frameIndex) {\n        this.seek(this.frameOffsets[frameIndex]);\n        var header = this.readUint8();\n        return (header >> 7) & 0x1;\n    };\n    PpmParser.prototype.getFramePalette = function (frameIndex) {\n        this.seek(this.frameOffsets[frameIndex]);\n        var palette = this.palette;\n        var header = this.readUint8();\n        var paperColor = header & 0x1;\n        var pen = [\n            palette.BLACK,\n            paperColor == 1 ? palette.BLACK : palette.WHITE,\n            palette.RED,\n            palette.BLUE,\n        ];\n        return [\n            paperColor == 1 ? palette.WHITE : palette.BLACK,\n            pen[(header >> 1) & 0x3],\n            pen[(header >> 3) & 0x3],\n        ];\n    };\n    PpmParser.prototype.getLayerOrder = function (frameIndex) {\n        return [0, 1];\n    };\n    PpmParser.prototype.decodeFrame = function (frameIndex) {\n        if ((frameIndex !== 0) && (this.prevDecodedFrame !== frameIndex - 1) && (!this.isNewFrame(frameIndex)))\n            this.decodeFrame(frameIndex - 1);\n        // https://github.com/pbsds/hatena-server/wiki/PPM-format#animation-frame\n        this.seek(this.frameOffsets[frameIndex]);\n        var header = this.readUint8();\n        var isNewFrame = (header >> 7) & 0x1;\n        var isTranslated = (header >> 5) & 0x3;\n        var translateX = 0;\n        var translateY = 0;\n        // copy the current layer buffers to the previous ones\n        this.prevLayers[0].set(this.layers[0]);\n        this.prevLayers[1].set(this.layers[1]);\n        this.prevDecodedFrame = frameIndex;\n        // reset current layer buffers\n        this.layers[0].fill(0);\n        this.layers[1].fill(0);\n        if (isTranslated) {\n            translateX = this.readInt8();\n            translateY = this.readInt8();\n        }\n        var layerEncoding = [\n            this.readLineEncoding(),\n            this.readLineEncoding(),\n        ];\n        // start decoding layer bitmaps\n        for (var layer = 0; layer < 2; layer++) {\n            var layerBitmap = this.layers[layer];\n            for (var line = 0; line < PpmParser.height; line++) {\n                var lineType = layerEncoding[layer][line];\n                var chunkOffset = line * PpmParser.width;\n                switch (lineType) {\n                    // line type 0 = blank line, decode nothing\n                    case 0:\n                        break;\n                    // line types 1 + 2 = compressed bitmap line\n                    case 1:\n                    case 2:\n                        var lineHeader = this.readUint32(false);\n                        // line type 2 starts as an inverted line\n                        if (lineType == 2)\n                            layerBitmap.fill(0xFF, chunkOffset, chunkOffset + PpmParser.width);\n                        // loop through each bit in the line header\n                        while (lineHeader & 0xFFFFFFFF) {\n                            // if the bit is set, this 8-pix wide chunk is stored\n                            // else we can just leave it blank and move on to the next chunk\n                            if (lineHeader & 0x80000000) {\n                                var chunk = this.readUint8();\n                                // unpack chunk bits\n                                for (var pixel = 0; pixel < 8; pixel++) {\n                                    layerBitmap[chunkOffset + pixel] = (chunk >> pixel & 0x1) ? 0xFF : 0x00;\n                                }\n                            }\n                            chunkOffset += 8;\n                            // shift lineheader to the left by 1 bit, now on the next loop cycle the next bit will be checked\n                            lineHeader <<= 1;\n                        }\n                        break;\n                    // line type 3 = raw bitmap line\n                    case 3:\n                        while (chunkOffset < (line + 1) * PpmParser.width) {\n                            var chunk = this.readUint8();\n                            for (var pixel = 0; pixel < 8; pixel++) {\n                                layerBitmap[chunkOffset + pixel] = (chunk >> pixel & 0x1) ? 0xFF : 0x00;\n                            }\n                            chunkOffset += 8;\n                        }\n                        break;\n                }\n            }\n        }\n        // if the current frame is based on changes from the preivous one, merge them by XORing their values\n        if (!isNewFrame) {\n            var dest = void 0, src = void 0;\n            // loop through each line\n            for (var y = 0; y < PpmParser.height; y++) {\n                // skip to next line if this one falls off the top edge of the screen\n                if (y - translateY < 0)\n                    continue;\n                // stop once the bottom screen edge has been reached\n                if (y - translateY >= PpmParser.height)\n                    break;\n                // loop through each pixel in the line\n                for (var x = 0; x < PpmParser.width; x++) {\n                    // skip to the next pixel if this one falls off the left edge of the screen\n                    if (x - translateX < 0)\n                        continue;\n                    // stop diffing this line once the right screen edge has been reached\n                    if (x - translateX >= PpmParser.width)\n                        break;\n                    dest = x + y * PpmParser.width;\n                    src = dest - (translateX + translateY * PpmParser.width);\n                    // diff pixels with a binary XOR\n                    this.layers[0][dest] ^= this.prevLayers[0][src];\n                    this.layers[1][dest] ^= this.prevLayers[1][src];\n                }\n            }\n        }\n        return this.layers;\n    };\n    // retuns an uint8 array where each item is a pixel's palette index\n    PpmParser.prototype.getLayerPixels = function (frameIndex, layerIndex) {\n        if (this.prevDecodedFrame !== frameIndex) {\n            this.decodeFrame(frameIndex);\n        }\n        var layer = this.layers[layerIndex];\n        var image = new Uint8Array(PpmParser.width * PpmParser.height);\n        var layerColor = layerIndex + 1;\n        for (var pixel = 0; pixel < image.length; pixel++) {\n            if (layer[pixel] !== 0) {\n                image[pixel] = layerColor;\n            }\n        }\n        return image;\n    };\n    // retuns an uint8 array where each item is a pixel's palette index\n    PpmParser.prototype.getFramePixels = function (frameIndex, useGlobalPalette) {\n        if (useGlobalPalette === void 0) { useGlobalPalette = false; }\n        var paletteMap;\n        if (useGlobalPalette) {\n            var framePalette = this.getFramePalette(frameIndex);\n            paletteMap = framePalette.map(function (color) { return PpmParser.globalPalette.indexOf(color); });\n        }\n        else {\n            paletteMap = [0, 1, 2];\n        }\n        var layers = this.decodeFrame(frameIndex);\n        var image = new Uint8Array(PpmParser.width * PpmParser.height);\n        image.fill(paletteMap[0]);\n        for (var pixel = 0; pixel < image.length; pixel++) {\n            var a = layers[0][pixel];\n            var b = layers[1][pixel];\n            if (b)\n                image[pixel] = paletteMap[2];\n            if (a)\n                image[pixel] = paletteMap[1];\n        }\n        return image;\n    };\n    PpmParser.prototype.hasAudioTrack = function (trackIndex) {\n        var keys = ['bgm', 'se1', 'se2', 'se3'];\n        var id = keys[trackIndex];\n        return this.soundMeta[id].length > 0;\n    };\n    PpmParser.prototype.decodeAudio = function (track) {\n        var meta = this.soundMeta[track];\n        var adpcm = new Uint8Array(this.buffer, meta.offset, meta.length);\n        var output = new Int16Array(adpcm.length * 2);\n        var outputOffset = 0;\n        // initial decoder state\n        var prevDiff = 0;\n        var prevStepIndex = 0;\n        var sample, diff, stepIndex;\n        // loop through each byte in the raw adpcm data\n        for (var index = 0; index < adpcm.length; index++) {\n            var byte = adpcm[index];\n            var bitPos = 0;\n            while (bitPos < 8) {\n                // isolate 4-bit sample\n                sample = (byte >> bitPos) & 0xF;\n                // get diff\n                diff = prevDiff + ADPCM_SAMPLE_TABLE_4[sample + 16 * prevStepIndex];\n                // get step index\n                stepIndex = prevStepIndex + ADPCM_INDEX_TABLE_4[sample];\n                // clamp step index and diff\n                stepIndex = Math.max(0, Math.min(stepIndex, 79));\n                diff = Math.max(-32767, Math.min(diff, 32767));\n                // add result to output buffer\n                output[outputOffset] = (diff);\n                outputOffset += 1;\n                // set prev decoder state\n                prevStepIndex = stepIndex;\n                prevDiff = diff;\n                // move to next sample\n                bitPos += 4;\n            }\n        }\n        return output;\n    };\n    PpmParser.prototype.decodeSoundFlags = function () {\n        var _this = this;\n        this.seek(0x06A0 + this.frameDataLength);\n        // per msdn docs - the array map callback is only invoked for array indicies that have assigned values\n        // so when we create an array, we need to fill it with something before we can map over it\n        var arr = new Array(this.frameCount).fill([]);\n        return arr.map(function (value) {\n            var byte = _this.readUint8();\n            return [byte & 0x1, (byte >> 1) & 0x1, (byte >> 2) & 0x1];\n        });\n    };\n    PpmParser.type = 'PPM';\n    PpmParser.sampleRate = 8192;\n    PpmParser.width = 256;\n    PpmParser.height = 192;\n    PpmParser.globalPalette = [\n        PALETTE.BLACK,\n        PALETTE.WHITE,\n        PALETTE.RED,\n        PALETTE.BLUE\n    ];\n    return PpmParser;\n}(DataStream));\nexport { PpmParser };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { DataStream } from '../utils/dataStream';\nimport { ADPCM_INDEX_TABLE_2, ADPCM_INDEX_TABLE_4, ADPCM_SAMPLE_TABLE_2, ADPCM_SAMPLE_TABLE_4 } from './adpcm';\nimport { KWZ_TABLE_1, KWZ_TABLE_2, KWZ_TABLE_3, KWZ_LINE_TABLE } from './kwzTables';\nvar FRAMERATES = [\n    0.2,\n    0.5,\n    1,\n    2,\n    4,\n    6,\n    8,\n    12,\n    20,\n    24,\n    30\n];\nvar PALETTE = {\n    WHITE: [0xff, 0xff, 0xff],\n    BLACK: [0x10, 0x10, 0x10],\n    RED: [0xff, 0x10, 0x10],\n    YELLOW: [0xff, 0xe7, 0x00],\n    GREEN: [0x00, 0x86, 0x31],\n    BLUE: [0x00, 0x38, 0xce],\n    NONE: [0xff, 0xff, 0xff]\n};\n;\n;\nvar KwzParser = /** @class */ (function (_super) {\n    __extends(KwzParser, _super);\n    function KwzParser(arrayBuffer) {\n        var _this = _super.call(this, arrayBuffer) || this;\n        _this.type = KwzParser.type;\n        _this.palette = PALETTE;\n        _this.prevDecodedFrame = null;\n        _this.bitIndex = 0;\n        _this.bitValue = 0;\n        _this.layers = [\n            new Uint16Array(KwzParser.width * KwzParser.height),\n            new Uint16Array(KwzParser.width * KwzParser.height),\n            new Uint16Array(KwzParser.width * KwzParser.height),\n        ];\n        _this.bitIndex = 0;\n        _this.bitValue = 0;\n        _this.load();\n        return _this;\n    }\n    KwzParser.prototype.load = function () {\n        this.seek(0);\n        var size = this.byteLength - 256;\n        var offset = 0;\n        var sectionCount = 0;\n        // counting sections should mitigate against one of mrnbayoh's notehax exploits\n        while ((offset < size) && (sectionCount < 6)) {\n            this.seek(offset);\n            var sectionMagic = this.readUtf8(4).substring(0, 3);\n            var sectionLength = this.readUint32();\n            this.sections[sectionMagic] = {\n                offset: offset,\n                length: sectionLength\n            };\n            offset += sectionLength + 8;\n            sectionCount += 1;\n        }\n        this.decodeMeta();\n        this.decodeFrameMeta();\n        this.decodeSoundHeader();\n    };\n    KwzParser.prototype.readBits = function (num) {\n        if (this.bitIndex + num > 16) {\n            var nextBits = this.readUint16();\n            this.bitValue |= nextBits << (16 - this.bitIndex);\n            this.bitIndex -= 16;\n        }\n        var mask = (1 << num) - 1;\n        var result = this.bitValue & mask;\n        this.bitValue >>= num;\n        this.bitIndex += num;\n        return result;\n    };\n    KwzParser.prototype.decodeMeta = function () {\n        this.seek(this.sections['KFH'].offset + 12);\n        var creationTimestamp = new Date((this.readUint32() + 946684800) * 1000), modifiedTimestamp = new Date((this.readUint32() + 946684800) * 1000), appVersion = this.readUint32(), rootAuthorId = this.readHex(10), parentAuthorId = this.readHex(10), currentAuthorId = this.readHex(10), rootAuthorName = this.readUtf16(11), parentAuthorName = this.readUtf16(11), currentAuthorName = this.readUtf16(11), rootFilename = this.readUtf8(28), parentFilename = this.readUtf8(28), currentFilename = this.readUtf8(28), frameCount = this.readUint16(), thumbIndex = this.readUint16(), flags = this.readUint16(), frameSpeed = this.readUint8(), layerFlags = this.readUint8();\n        this.frameCount = frameCount;\n        this.thumbFrameIndex = thumbIndex;\n        this.frameSpeed = frameSpeed;\n        this.framerate = FRAMERATES[frameSpeed];\n        this.meta = {\n            lock: (flags & 0x1) === 1,\n            loop: ((flags >> 1) & 0x01) === 1,\n            frame_count: frameCount,\n            frame_speed: frameSpeed,\n            thumb_index: thumbIndex,\n            timestamp: modifiedTimestamp,\n            creation_timestamp: creationTimestamp,\n            root: {\n                username: rootAuthorName,\n                fsid: rootAuthorId,\n                filename: rootFilename,\n            },\n            parent: {\n                username: parentAuthorName,\n                fsid: parentAuthorId,\n                filename: parentFilename,\n            },\n            current: {\n                username: currentAuthorName,\n                fsid: currentAuthorId,\n                filename: currentFilename,\n            },\n        };\n    };\n    KwzParser.prototype.decodeFrameMeta = function () {\n        this.frameOffsets = new Uint32Array(this.frameCount);\n        this.seek(this.sections['KMI'].offset + 8);\n        var offset = this.sections['KMC'].offset + 12;\n        for (var i = 0; i < this.frameCount; i++) {\n            var frame = {\n                flags: this.readUint32(),\n                layerSize: [\n                    this.readUint16(),\n                    this.readUint16(),\n                    this.readUint16()\n                ],\n                frameAuthor: this.readHex(10),\n                layerDepth: [\n                    this.readUint8(),\n                    this.readUint8(),\n                    this.readUint8(),\n                ],\n                soundFlags: this.readUint8(),\n                cameraFlag: this.readUint32(),\n            };\n            this.frameMeta.push(frame);\n            this.frameOffsets[i] = offset;\n            offset += frame.layerSize[0] + frame.layerSize[1] + frame.layerSize[2];\n        }\n    };\n    KwzParser.prototype.decodeSoundHeader = function () {\n        var offset = this.sections['KSN'].offset + 8;\n        this.seek(offset);\n        var bgmSpeed = this.readUint32();\n        this.bgmSpeed = bgmSpeed;\n        this.bgmrate = FRAMERATES[bgmSpeed];\n        var trackSizes = new Uint32Array(this.buffer, offset + 4, 20);\n        this.soundMeta = {\n            'bgm': { offset: offset += 28, length: trackSizes[0] },\n            'se1': { offset: offset += trackSizes[0], length: trackSizes[1] },\n            'se2': { offset: offset += trackSizes[1], length: trackSizes[2] },\n            'se3': { offset: offset += trackSizes[2], length: trackSizes[3] },\n            'se4': { offset: offset += trackSizes[3], length: trackSizes[4] },\n        };\n    };\n    KwzParser.prototype.getDiffingFlag = function (frameIndex) {\n        return ~(this.frameMeta[frameIndex].flags >> 4) & 0x07;\n    };\n    KwzParser.prototype.getLayerDepths = function (frameIndex) {\n        return this.frameMeta[frameIndex].layerDepth;\n    };\n    // sort layer indices sorted by depth, drom bottom to top\n    KwzParser.prototype.getLayerOrder = function (frameIndex) {\n        var depths = this.getLayerDepths(frameIndex);\n        return [2, 1, 0].sort(function (a, b) { return depths[b] - depths[a]; });\n    };\n    KwzParser.prototype.decodeFrame = function (frameIndex, diffingFlag, isPrevFrame) {\n        if (diffingFlag === void 0) { diffingFlag = 0x7; }\n        if (isPrevFrame === void 0) { isPrevFrame = false; }\n        // if this frame is being decoded as a prev frame, then we only want to decode the layers necessary\n        if (isPrevFrame)\n            diffingFlag &= this.getDiffingFlag(frameIndex + 1);\n        // the prevDecodedFrame check is an optimisation for decoding frames in full sequence\n        if ((frameIndex !== 0) && (this.prevDecodedFrame !== frameIndex - 1) && (diffingFlag))\n            this.decodeFrame(frameIndex - 1, diffingFlag = diffingFlag, isPrevFrame = true);\n        var meta = this.frameMeta[frameIndex];\n        var offset = this.frameOffsets[frameIndex];\n        for (var layerIndex = 0; layerIndex < 3; layerIndex++) {\n            this.seek(offset);\n            var layerSize = meta.layerSize[layerIndex];\n            offset += layerSize;\n            // if the layer is 38 bytes then it hasn't changed at all since the previous frame, so we can skip it\n            if (layerSize === 38)\n                continue;\n            if (((diffingFlag >> layerIndex) & 0x1) === 0)\n                continue;\n            this.bitIndex = 16;\n            this.bitValue = 0;\n            var skip = 0;\n            for (var tileOffsetY = 0; tileOffsetY < KwzParser.height; tileOffsetY += 128) {\n                for (var tileOffsetX = 0; tileOffsetX < KwzParser.width; tileOffsetX += 128) {\n                    for (var subTileOffsetY = 0; subTileOffsetY < 128; subTileOffsetY += 8) {\n                        var y = tileOffsetY + subTileOffsetY;\n                        if (y >= KwzParser.height)\n                            break;\n                        for (var subTileOffsetX = 0; subTileOffsetX < 128; subTileOffsetX += 8) {\n                            var x = tileOffsetX + subTileOffsetX;\n                            if (x >= KwzParser.width)\n                                break;\n                            if (skip) {\n                                skip -= 1;\n                                continue;\n                            }\n                            var pixelOffset = y * KwzParser.width + x;\n                            var pixelBuffer = this.layers[layerIndex];\n                            var type = this.readBits(3);\n                            if (type == 0) {\n                                var lineIndex = KWZ_TABLE_1[this.readBits(5)];\n                                var pixels = KWZ_LINE_TABLE.subarray(lineIndex * 8, lineIndex * 8 + 8);\n                                pixelBuffer.set(pixels, pixelOffset);\n                                pixelBuffer.set(pixels, pixelOffset + 320);\n                                pixelBuffer.set(pixels, pixelOffset + 640);\n                                pixelBuffer.set(pixels, pixelOffset + 960);\n                                pixelBuffer.set(pixels, pixelOffset + 1280);\n                                pixelBuffer.set(pixels, pixelOffset + 1600);\n                                pixelBuffer.set(pixels, pixelOffset + 1920);\n                                pixelBuffer.set(pixels, pixelOffset + 2240);\n                            }\n                            else if (type == 1) {\n                                var lineIndex = this.readBits(13);\n                                var pixels = KWZ_LINE_TABLE.subarray(lineIndex * 8, lineIndex * 8 + 8);\n                                pixelBuffer.set(pixels, pixelOffset);\n                                pixelBuffer.set(pixels, pixelOffset + 320);\n                                pixelBuffer.set(pixels, pixelOffset + 640);\n                                pixelBuffer.set(pixels, pixelOffset + 960);\n                                pixelBuffer.set(pixels, pixelOffset + 1280);\n                                pixelBuffer.set(pixels, pixelOffset + 1600);\n                                pixelBuffer.set(pixels, pixelOffset + 1920);\n                                pixelBuffer.set(pixels, pixelOffset + 2240);\n                            }\n                            else if (type == 2) {\n                                var lineValue = this.readBits(5);\n                                var lineIndexA = KWZ_TABLE_1[lineValue];\n                                var lineIndexB = KWZ_TABLE_2[lineValue];\n                                var a = KWZ_LINE_TABLE.subarray(lineIndexA * 8, lineIndexA * 8 + 8);\n                                var b = KWZ_LINE_TABLE.subarray(lineIndexB * 8, lineIndexB * 8 + 8);\n                                pixelBuffer.set(a, pixelOffset);\n                                pixelBuffer.set(b, pixelOffset + 320);\n                                pixelBuffer.set(a, pixelOffset + 640);\n                                pixelBuffer.set(b, pixelOffset + 960);\n                                pixelBuffer.set(a, pixelOffset + 1280);\n                                pixelBuffer.set(b, pixelOffset + 1600);\n                                pixelBuffer.set(a, pixelOffset + 1920);\n                                pixelBuffer.set(b, pixelOffset + 2240);\n                            }\n                            else if (type == 3) {\n                                var lineIndexA = this.readBits(13);\n                                var lineIndexB = KWZ_TABLE_3[lineIndexA];\n                                var a = KWZ_LINE_TABLE.subarray(lineIndexA * 8, lineIndexA * 8 + 8);\n                                var b = KWZ_LINE_TABLE.subarray(lineIndexB * 8, lineIndexB * 8 + 8);\n                                pixelBuffer.set(a, pixelOffset);\n                                pixelBuffer.set(b, pixelOffset + 320);\n                                pixelBuffer.set(a, pixelOffset + 640);\n                                pixelBuffer.set(b, pixelOffset + 960);\n                                pixelBuffer.set(a, pixelOffset + 1280);\n                                pixelBuffer.set(b, pixelOffset + 1600);\n                                pixelBuffer.set(a, pixelOffset + 1920);\n                                pixelBuffer.set(b, pixelOffset + 2240);\n                            }\n                            else if (type == 4) {\n                                var mask = this.readBits(8);\n                                for (var line = 0; line < 8; line++) {\n                                    var lineIndex = 0;\n                                    if (mask & (1 << line)) {\n                                        lineIndex = KWZ_TABLE_1[this.readBits(5)];\n                                    }\n                                    else {\n                                        lineIndex = this.readBits(13);\n                                    }\n                                    var pixels = KWZ_LINE_TABLE.subarray(lineIndex * 8, lineIndex * 8 + 8);\n                                    pixelBuffer.set(pixels, pixelOffset + line * 320);\n                                }\n                            }\n                            else if (type == 5) {\n                                skip = this.readBits(5);\n                                continue;\n                            }\n                            // type 6 doesnt exist\n                            else if (type == 7) {\n                                var pattern = this.readBits(2);\n                                var useTable = this.readBits(1);\n                                var lineIndexA = 0;\n                                var lineIndexB = 0;\n                                if (useTable) {\n                                    lineIndexA = KWZ_TABLE_1[this.readBits(5)];\n                                    lineIndexB = KWZ_TABLE_1[this.readBits(5)];\n                                    pattern = (pattern + 1) % 4;\n                                }\n                                else {\n                                    lineIndexA = this.readBits(13);\n                                    lineIndexB = this.readBits(13);\n                                }\n                                var a = KWZ_LINE_TABLE.subarray(lineIndexA * 8, lineIndexA * 8 + 8);\n                                var b = KWZ_LINE_TABLE.subarray(lineIndexB * 8, lineIndexB * 8 + 8);\n                                if (pattern == 0) {\n                                    pixelBuffer.set(a, pixelOffset);\n                                    pixelBuffer.set(b, pixelOffset + 320);\n                                    pixelBuffer.set(a, pixelOffset + 640);\n                                    pixelBuffer.set(b, pixelOffset + 960);\n                                    pixelBuffer.set(a, pixelOffset + 1280);\n                                    pixelBuffer.set(b, pixelOffset + 1600);\n                                    pixelBuffer.set(a, pixelOffset + 1920);\n                                    pixelBuffer.set(b, pixelOffset + 2240);\n                                }\n                                else if (pattern == 1) {\n                                    pixelBuffer.set(a, pixelOffset);\n                                    pixelBuffer.set(a, pixelOffset + 320);\n                                    pixelBuffer.set(b, pixelOffset + 640);\n                                    pixelBuffer.set(a, pixelOffset + 960);\n                                    pixelBuffer.set(a, pixelOffset + 1280);\n                                    pixelBuffer.set(b, pixelOffset + 1600);\n                                    pixelBuffer.set(a, pixelOffset + 1920);\n                                    pixelBuffer.set(a, pixelOffset + 2240);\n                                }\n                                else if (pattern == 2) {\n                                    pixelBuffer.set(a, pixelOffset);\n                                    pixelBuffer.set(b, pixelOffset + 320);\n                                    pixelBuffer.set(a, pixelOffset + 640);\n                                    pixelBuffer.set(a, pixelOffset + 960);\n                                    pixelBuffer.set(b, pixelOffset + 1280);\n                                    pixelBuffer.set(a, pixelOffset + 1600);\n                                    pixelBuffer.set(a, pixelOffset + 1920);\n                                    pixelBuffer.set(b, pixelOffset + 2240);\n                                }\n                                else if (pattern == 3) {\n                                    pixelBuffer.set(a, pixelOffset);\n                                    pixelBuffer.set(b, pixelOffset + 320);\n                                    pixelBuffer.set(b, pixelOffset + 640);\n                                    pixelBuffer.set(a, pixelOffset + 960);\n                                    pixelBuffer.set(b, pixelOffset + 1280);\n                                    pixelBuffer.set(b, pixelOffset + 1600);\n                                    pixelBuffer.set(a, pixelOffset + 1920);\n                                    pixelBuffer.set(b, pixelOffset + 2240);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        this.prevDecodedFrame = frameIndex;\n        // return this._layers;\n        return [\n            new Uint8Array(this.layers[0].buffer),\n            new Uint8Array(this.layers[1].buffer),\n            new Uint8Array(this.layers[2].buffer),\n        ];\n    };\n    KwzParser.prototype.getFramePalette = function (frameIndex) {\n        var flags = this.frameMeta[frameIndex].flags;\n        var paletteMap = [\n            this.palette.WHITE,\n            this.palette.BLACK,\n            this.palette.RED,\n            this.palette.YELLOW,\n            this.palette.GREEN,\n            this.palette.BLUE,\n            this.palette.NONE\n        ];\n        return [\n            paletteMap[flags & 0xF],\n            paletteMap[(flags >> 8) & 0xF],\n            paletteMap[(flags >> 12) & 0xF],\n            paletteMap[(flags >> 16) & 0xF],\n            paletteMap[(flags >> 20) & 0xF],\n            paletteMap[(flags >> 24) & 0xF],\n            paletteMap[(flags >> 28) & 0xF],\n        ];\n    };\n    // retuns an uint8 array where each item is a pixel's palette index\n    KwzParser.prototype.getLayerPixels = function (frameIndex, layerIndex) {\n        if (this.prevDecodedFrame !== frameIndex) {\n            this.decodeFrame(frameIndex);\n        }\n        var layer = this.layers[layerIndex];\n        var image = new Uint8Array((KwzParser.width * KwzParser.height));\n        var paletteOffset = layerIndex * 2 + 1;\n        for (var index = 0; index < layer.length; index++) {\n            var pixel = layer[index];\n            if (pixel & 0xff00) {\n                image[index] = paletteOffset;\n            }\n            else if (pixel & 0x00ff) {\n                image[index] = paletteOffset + 1;\n            }\n        }\n        return image;\n    };\n    // retuns an uint8 array where each item is a pixel's palette index\n    KwzParser.prototype.getFramePixels = function (frameIndex, useGlobalPalette) {\n        var _this = this;\n        if (useGlobalPalette === void 0) { useGlobalPalette = false; }\n        var paletteMap;\n        if (useGlobalPalette) {\n            var framePalette = this.getFramePalette(frameIndex);\n            paletteMap = framePalette.map(function (color) { return KwzParser.globalPalette.indexOf(color); });\n        }\n        else {\n            paletteMap = [0, 1, 2, 3, 4, 5, 6];\n        }\n        var image = new Uint8Array((KwzParser.width * KwzParser.height));\n        image.fill(paletteMap[0]);\n        var layerOrder = this.getLayerOrder(frameIndex);\n        layerOrder.forEach(function (layerIndex) {\n            var layer = _this.getLayerPixels(frameIndex, layerIndex);\n            // merge layer into image result\n            for (var index = 0; index < layer.length; index++) {\n                var pixel = layer[index];\n                if (pixel !== 0) {\n                    image[index] = paletteMap[pixel];\n                }\n            }\n        });\n        return image;\n    };\n    KwzParser.prototype.decodeSoundFlags = function () {\n        return this.frameMeta.map(function (frame) {\n            var soundFlags = frame.soundFlags;\n            return [\n                soundFlags & 0x1,\n                (soundFlags >> 1) & 0x1,\n                (soundFlags >> 2) & 0x1,\n                (soundFlags >> 3) & 0x1,\n            ];\n        });\n    };\n    KwzParser.prototype.hasAudioTrack = function (trackIndex) {\n        var keys = ['bgm', 'se1', 'se2', 'se3', 'se4'];\n        var id = keys[trackIndex];\n        return this.soundMeta[id].length > 0;\n    };\n    KwzParser.prototype.decodeAudio = function (track) {\n        var meta = this.soundMeta[track];\n        var output = new Int16Array(16364 * 60);\n        var outputOffset = 0;\n        var adpcm = new Uint8Array(this.buffer, meta.offset, meta.length);\n        // initial decoder state\n        var prevDiff = 0;\n        var prevStepIndex = 40;\n        var sample, diff, stepIndex;\n        // loop through each byte in the raw adpcm data\n        for (var index = 0; index < adpcm.length; index++) {\n            var byte = adpcm[index];\n            var bitPos = 0;\n            while (bitPos < 8) {\n                if (prevStepIndex < 18 || bitPos == 6) {\n                    // isolate 2-bit sample\n                    sample = (byte >> bitPos) & 0x3;\n                    // get diff\n                    diff = prevDiff + ADPCM_SAMPLE_TABLE_2[sample + 4 * prevStepIndex];\n                    // get step index\n                    stepIndex = prevStepIndex + ADPCM_INDEX_TABLE_2[sample];\n                    bitPos += 2;\n                }\n                else {\n                    // isolate 4-bit sample\n                    sample = (byte >> bitPos) & 0xF;\n                    // get diff\n                    diff = prevDiff + ADPCM_SAMPLE_TABLE_4[sample + 16 * prevStepIndex];\n                    // get step index\n                    stepIndex = prevStepIndex + ADPCM_INDEX_TABLE_4[sample];\n                    bitPos += 4;\n                }\n                // clamp step index and diff\n                stepIndex = Math.max(0, Math.min(stepIndex, 79));\n                diff = Math.max(-2048, Math.min(diff, 2048));\n                // add result to output buffer\n                output[outputOffset] = (diff * 16);\n                outputOffset += 1;\n                // set prev decoder state\n                prevStepIndex = stepIndex;\n                prevDiff = diff;\n            }\n        }\n        return output.slice(0, outputOffset);\n    };\n    KwzParser.type = 'KWZ';\n    KwzParser.sampleRate = 16364;\n    KwzParser.width = 320;\n    KwzParser.height = 240;\n    KwzParser.globalPalette = [\n        PALETTE.BLACK,\n        PALETTE.WHITE,\n        PALETTE.RED,\n        PALETTE.YELLOW,\n        PALETTE.GREEN,\n        PALETTE.BLUE,\n        PALETTE.NONE,\n    ];\n    return KwzParser;\n}(DataStream));\nexport { KwzParser };\n","import { loadSource } from '../loader';\nimport { PpmParser } from './ppm';\nimport { KwzParser } from './kwz';\nexport function parseSource(source) {\n    return loadSource(source).then(function (arrayBuffer) {\n        // check the buffer's magic to identify which format it uses\n        var data = new DataView(arrayBuffer, 0, 4);\n        var magic = data.getUint32(0);\n        // check if magic is PARA (ppm magic)\n        if (magic === 0x50415241) {\n            return new PpmParser(arrayBuffer);\n        }\n        // check if magic is KFH (kwz magic)\n        else if ((magic & 0xFFFFFF00) === 0x4B464800) {\n            return new KwzParser(arrayBuffer);\n        }\n        return null;\n    });\n}\nexport * from './ppm';\nexport * from './kwz';\n","import vertexShader from './shader.vert';\nimport fragmentShader from './shader.frag';\n;\nvar ShaderType;\n(function (ShaderType) {\n    ShaderType[ShaderType[\"Vertex\"] = WebGLRenderingContext.VERTEX_SHADER] = \"Vertex\";\n    ShaderType[ShaderType[\"Fragment\"] = WebGLRenderingContext.FRAGMENT_SHADER] = \"Fragment\";\n})(ShaderType || (ShaderType = {}));\n;\nvar TextureType;\n(function (TextureType) {\n    TextureType[TextureType[\"Alpha\"] = WebGLRenderingContext.ALPHA] = \"Alpha\";\n    TextureType[TextureType[\"LuminanceAlpha\"] = WebGLRenderingContext.LUMINANCE_ALPHA] = \"LuminanceAlpha\";\n})(TextureType || (TextureType = {}));\n;\nexport var FilterType;\n(function (FilterType) {\n    FilterType[FilterType[\"Linear\"] = WebGLRenderingContext.LINEAR] = \"Linear\";\n    FilterType[FilterType[\"Nearest\"] = WebGLRenderingContext.NEAREST] = \"Nearest\";\n})(FilterType || (FilterType = {}));\n;\nexport var DisplayMode;\n(function (DisplayMode) {\n    DisplayMode[DisplayMode[\"PPM\"] = 0] = \"PPM\";\n    DisplayMode[DisplayMode[\"KWZ\"] = 1] = \"KWZ\";\n})(DisplayMode || (DisplayMode = {}));\n;\n/** webgl canvas wrapper class */\nvar WebglCanvas = /** @class */ (function () {\n    function WebglCanvas(el, width, height, params) {\n        if (width === void 0) { width = 640; }\n        if (height === void 0) { height = 480; }\n        if (params === void 0) { params = { antialias: false, alpha: false }; }\n        this.uniforms = {};\n        this.refs = {\n            shaders: [],\n            textures: [],\n            buffers: []\n        };\n        this.width = el.width = width;\n        this.height = el.height = height;\n        var gl = el.getContext('webgl', params);\n        var program = gl.createProgram();\n        this.el = el;\n        this.gl = gl;\n        this.program = program;\n        // set up shaders\n        var vShader = this.createShader(ShaderType.Vertex, vertexShader);\n        var fShader = this.createShader(ShaderType.Fragment, fragmentShader);\n        gl.attachShader(program, vShader);\n        gl.attachShader(program, fShader);\n        // link program\n        gl.linkProgram(program);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n            var log = gl.getProgramInfoLog(program);\n            gl.deleteProgram(program);\n            throw new Error(log);\n        }\n        // activate the program\n        gl.useProgram(program);\n        // create quad that fills the screen, this will be our drawing surface\n        var vertBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, vertBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1]), gl.STATIC_DRAW);\n        gl.enableVertexAttribArray(0);\n        gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n        this.refs.buffers.push(vertBuffer);\n        // create texture to use as the layer bitmap\n        gl.activeTexture(gl.TEXTURE0);\n        var tex = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, tex);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        // get uniform locations\n        var uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n        for (var i = 0; i < uniformCount; i++) {\n            var name_1 = gl.getActiveUniform(program, i).name;\n            this.uniforms[name_1] = gl.getUniformLocation(program, name_1);\n        }\n        gl.uniform1i(this.uniforms['u_bitmap'], 0);\n        this.setFilter(FilterType.Linear);\n        this.setMode(DisplayMode.PPM);\n        this.refs.textures.push(tex);\n        gl.enable(gl.BLEND);\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    }\n    WebglCanvas.prototype.createShader = function (type, source) {\n        var gl = this.gl;\n        var shader = gl.createShader(type);\n        gl.shaderSource(shader, source);\n        gl.compileShader(shader);\n        // test if shader compilation was successful\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n            var log = gl.getShaderInfoLog(shader);\n            gl.deleteShader(shader);\n            throw new Error(log);\n        }\n        this.refs.shaders.push(shader);\n        return shader;\n    };\n    WebglCanvas.prototype.setMode = function (mode) {\n        if (mode === DisplayMode.PPM) {\n            this.textureType = TextureType.Alpha;\n        }\n        else if (DisplayMode.KWZ) {\n            this.textureType = TextureType.LuminanceAlpha;\n        }\n    };\n    WebglCanvas.prototype.toImage = function (type) {\n        return this.el.toDataURL(type);\n    };\n    WebglCanvas.prototype.setFilter = function (filter) {\n        var gl = this.gl;\n        gl.uniform1i(this.uniforms['u_isSmooth'], filter === FilterType.Linear ? 0 : 1);\n        gl.activeTexture(gl.TEXTURE0);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);\n    };\n    WebglCanvas.prototype.setColor = function (color, value) {\n        this.gl.uniform4f(this.uniforms[color], value[0] / 255, value[1] / 255, value[2] / 255, 1);\n    };\n    WebglCanvas.prototype.setPaperColor = function (value) {\n        this.gl.clearColor(value[0] / 255, value[1] / 255, value[2] / 255, 1);\n    };\n    WebglCanvas.prototype.drawLayer = function (buffer, width, height, color1, color2) {\n        var gl = this.gl;\n        gl.activeTexture(gl.TEXTURE0);\n        gl.texImage2D(gl.TEXTURE_2D, 0, this.textureType, width, height, 0, this.textureType, gl.UNSIGNED_BYTE, buffer);\n        this.setColor('u_color1', color1);\n        this.setColor('u_color2', color2);\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    };\n    WebglCanvas.prototype.resize = function (width, height) {\n        if (width === void 0) { width = 640; }\n        if (height === void 0) { height = 480; }\n        this.el.width = width;\n        this.el.height = height;\n        this.width = width;\n        this.height = height;\n        this.gl.viewport(0, 0, width, height);\n    };\n    WebglCanvas.prototype.clear = function () {\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n    };\n    WebglCanvas.prototype.destroy = function () {\n        // free resources\n        var refs = this.refs;\n        var gl = this.gl;\n        refs.shaders.forEach(function (shader) {\n            gl.deleteShader(shader);\n        });\n        refs.shaders = [];\n        refs.textures.forEach(function (texture) {\n            gl.deleteTexture(texture);\n        });\n        refs.textures = [];\n        refs.buffers.forEach(function (buffer) {\n            gl.deleteBuffer(buffer);\n        });\n        refs.buffers = [];\n        gl.deleteProgram(this.program);\n        // shrink the canvas to reduce memory usage until it is garbage collected\n        gl.canvas.width = 1;\n        gl.canvas.height = 1;\n    };\n    return WebglCanvas;\n}());\nexport { WebglCanvas };\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { parseSource } from '../parser';\n// import canvas from '../webgl/canvas';\n// import audioTrack from './audio';\nimport { WebglCanvas, FilterType, DisplayMode } from '../webgl/canvas';\n/** flipnote player API, based on HTMLMediaElement (https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement) */\nvar Player = /** @class */ (function () {\n    function Player(el, width, height) {\n        this.loop = false;\n        this.paused = true;\n        this.smoothRendering = false;\n        this.isOpen = false;\n        this.frame = 0;\n        this.playbackLoop = null;\n        this.hasPlaybackStarted = false;\n        // if `el` is a string, use it to select an Element, else assume it's an element\n        el = ('string' == typeof el) ? document.querySelector(el) : el;\n        this.canvas = new WebglCanvas(el, width, height);\n        // this.customPalette = null;\n        // this.audioTracks = [\n        //   new audioTrack('se1'),\n        //   new audioTrack('se2'),\n        //   new audioTrack('se3'),\n        //   new audioTrack('se4'),\n        //   new audioTrack('bgm'),\n        // ];\n    }\n    Object.defineProperty(Player.prototype, \"currentFrame\", {\n        get: function () {\n            return this.frame;\n        },\n        set: function (index) {\n            this.setFrame(index);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"currentTime\", {\n        get: function () {\n            return this.isOpen ? this.currentFrame * (1 / this.framerate) : null;\n        },\n        set: function (value) {\n            if ((this.isOpen) && (value < this.duration) && (value > 0)) {\n                this.setFrame(Math.round(value / (1 / this.framerate)));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"duration\", {\n        // get volume() {\n        //   return this.audioTracks[3].audio.volume;\n        // }\n        // set volume(value) {\n        //   for (let i = 0; i < this.audioTracks.length; i++) {\n        //     this.audioTracks[i].audio.volume = value;\n        //   }\n        // }\n        // get muted() {\n        //   return this.audioTracks[3].audio.muted;\n        // }\n        // set muted(value) {\n        //   for (let i = 0; i < this.audioTracks.length; i++) {\n        //     this.audioTracks[i].audio.muted = value;\n        //   }\n        // }\n        get: function () {\n            return this.isOpen ? this.frameCount * (1 / this.framerate) : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"framerate\", {\n        get: function () {\n            return this.note.framerate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"frameCount\", {\n        get: function () {\n            return this.note.frameCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"frameSpeed\", {\n        get: function () {\n            return this.note.frameSpeed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"audiorate\", {\n        get: function () {\n            return (1 / this.note.bgmrate) / (1 / this.note.framerate);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Player.prototype.open = function (source) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (this.isOpen)\n                    this.close();\n                return [2 /*return*/, parseSource(source)\n                        .then(function (note) {\n                        _this.load(note);\n                    })\n                        .catch(function (err) {\n                        console.error('Error loading Flipnote:', err);\n                    })];\n            });\n        });\n    };\n    Player.prototype.load = function (note) {\n        this.note = note;\n        this.meta = note.meta;\n        this.type = note.type;\n        this.loop = note.meta.loop;\n        this.paused = true;\n        this.isOpen = true;\n        // this.audioTracks.forEach(track => {\n        //   track.sampleRate = note.sampleRate;\n        // });\n        // if (this.customPalette) {\n        //   this.setPalette(this.customPalette);\n        // }\n        // if (this.note.hasAudioTrack(1)) this.audioTracks[0].set(this.note.decodeAudio('se1'), 1);\n        // if (this.note.hasAudioTrack(2)) this.audioTracks[1].set(this.note.decodeAudio('se2'), 1);\n        // if (this.note.hasAudioTrack(3)) this.audioTracks[2].set(this.note.decodeAudio('se3'), 1);\n        // if (this.type === 'KWZ' && this.note.hasAudioTrack(4)) this.audioTracks[3].set(this.note.decodeAudio('se4'), 1);\n        // if (this.note.hasAudioTrack(0)) this.audioTracks[4].set(this.note.decodeAudio('bgm'), this._audiorate);\n        // this._seFlags = this.note.decodeSoundFlags();\n        this.playbackLoop = null;\n        this.hasPlaybackStarted = false;\n        this.layerVisibility = {\n            1: true,\n            2: true,\n            3: true\n        };\n        this.setMode(this.type === 'PPM' ? DisplayMode.PPM : DisplayMode.KWZ);\n        this.setFrame(this.note.thumbFrameIndex);\n        this.emit('load');\n    };\n    /**\n    * Close the currently loaded Flipnote and clear the player canvas\n    */\n    Player.prototype.close = function () {\n        this.pause();\n        this.note = null;\n        this.isOpen = false;\n        this.paused = true;\n        this.loop = null;\n        this.meta = null;\n        this.frame = 0;\n        // for (let i = 0; i < this.audioTracks.length; i++) {\n        //   this.audioTracks[i].unset();\n        // }\n        // this._seFlags = null;\n        this.hasPlaybackStarted = null;\n        this.canvas.clear();\n        // this._imgCanvas.clear();\n    };\n    /**\n    * Destroy this player instance cleanly\n    */\n    Player.prototype.destroy = function () {\n        this.close();\n        this.canvas.destroy();\n        // this._imgCanvas.destroy();\n    };\n    /**\n    * Play the sound effects for a given frame\n    * @param {number} index - zero-based frame index\n    * @access protected\n    */\n    // _playFrameSe(index) {\n    //   var flags = this._seFlags[index];\n    //   for (let i = 0; i < flags.length; i++) {\n    //     if (flags[i] && this.audioTracks[i].active) this.audioTracks[i].start();\n    //   }\n    // }\n    /**\n    * Play the Flipnote BGM\n    * @access protected\n    */\n    // _playBgm() {\n    //   this.audioTracks[4].start(this.currentTime);\n    // }\n    /**\n    * Stop all audio tracks\n    * @access protected\n    */\n    // _stopAudio() {\n    //   for (let i = 0; i < this.audioTracks.length; i++) {\n    //     this.audioTracks[i].stop();\n    //   }\n    // }\n    Player.prototype.play = function () {\n        var _this = this;\n        if ((!this.isOpen) || (!this.paused))\n            return null;\n        this.paused = false;\n        if ((!this.hasPlaybackStarted) || ((!this.loop) && (this.currentFrame == this.frameCount - 1)))\n            this.frame = 0;\n        // this._playBgm();\n        this.playbackLoop = window.setInterval(function () {\n            if (_this.paused)\n                clearInterval(_this.playbackLoop);\n            // if the end of the flipnote has been reached\n            if (_this.currentFrame >= _this.frameCount - 1) {\n                // this._stopAudio();\n                if (_this.loop) {\n                    _this.firstFrame();\n                    // this._playBgm(0);\n                    _this.emit('playback:loop');\n                }\n                else {\n                    _this.pause();\n                    _this.emit('playback:end');\n                }\n            }\n            else {\n                // this._playFrameSe(this.currentFrame);\n                _this.nextFrame();\n            }\n        }, 1000 / this.framerate);\n        this.hasPlaybackStarted = true;\n        this.emit('playback:start');\n    };\n    Player.prototype.pause = function () {\n        if ((!this.isOpen) || (this.paused))\n            return null;\n        // break the playback loop\n        window.clearInterval(this.playbackLoop);\n        this.paused = true;\n        // this._stopAudio();\n        this.emit('playback:stop');\n    };\n    // getFrameImage(index, width, height, type, encoderOptions) {\n    //   if (!this._isOpen) return null;\n    //   var canvas = this._imgCanvas;\n    //   if (canvas.width !== width || canvas.height !== height) canvas.resize(width, height);\n    //   // clamp frame index\n    //   index = (index == 'thumb') ? (this.note.thumbFrameIndex) : (Math.max(0, Math.min(index, this.frameCount - 1)));\n    //   this.drawFrame(index, canvas);\n    //   return canvas.toImage(type, encoderOptions);\n    // }\n    Player.prototype.setPalette = function (palette) {\n        // this.customPalette = palette;\n        this.note.palette = palette;\n        this.forceUpdate();\n    };\n    Player.prototype.setFrame = function (index) {\n        if ((!this.isOpen) || (index === this.currentFrame))\n            return null;\n        // clamp frame index\n        index = Math.max(0, Math.min(Math.floor(index), this.frameCount - 1));\n        this.frame = index;\n        this.drawFrame(index, this.canvas);\n        this.emit('frame:update', this.currentFrame);\n    };\n    Player.prototype.drawFrame = function (frameIndex, canvas) {\n        var _this = this;\n        var colors = this.note.getFramePalette(frameIndex);\n        var layerBuffers = this.note.decodeFrame(frameIndex);\n        canvas.setPaperColor(colors[0]);\n        canvas.clear();\n        if (this.note.type === 'PPM') {\n            if (this.layerVisibility[2])\n                canvas.drawLayer(layerBuffers[1], 256, 192, colors[2], [0, 0, 0, 0]);\n            if (this.layerVisibility[1])\n                canvas.drawLayer(layerBuffers[0], 256, 192, colors[1], [0, 0, 0, 0]);\n        }\n        else if (this.note.type === 'KWZ') {\n            // loop through each layer\n            this.note.getLayerOrder(frameIndex).forEach(function (layerIndex) {\n                // only draw layer if it's visible\n                if (_this.layerVisibility[layerIndex + 1]) {\n                    canvas.drawLayer(layerBuffers[layerIndex], 320, 240, colors[layerIndex * 2 + 1], colors[layerIndex * 2 + 2]);\n                }\n            });\n        }\n    };\n    Player.prototype.thumbnailFrame = function () {\n        this.currentFrame = this.note.thumbFrameIndex;\n    };\n    Player.prototype.nextFrame = function () {\n        if ((this.loop) && (this.currentFrame >= this.frameCount - 1)) {\n            this.currentFrame = 0;\n        }\n        else {\n            this.currentFrame += 1;\n        }\n    };\n    Player.prototype.prevFrame = function () {\n        if ((this.loop) && (this.currentFrame <= 0)) {\n            this.currentFrame = this.frameCount - 1;\n        }\n        else {\n            this.currentFrame -= 1;\n        }\n    };\n    Player.prototype.lastFrame = function () {\n        this.currentFrame = this.frameCount - 1;\n    };\n    Player.prototype.firstFrame = function () {\n        this.currentFrame = 0;\n    };\n    Player.prototype.resize = function (width, height) {\n        this.canvas.resize(width, height);\n        this.forceUpdate();\n    };\n    Player.prototype.setLayerVisibility = function (index, value) {\n        this.layerVisibility[index] = value;\n        this.forceUpdate();\n    };\n    Player.prototype.setSmoothRendering = function (value) {\n        this.canvas.setFilter(value ? FilterType.Linear : FilterType.Nearest);\n        this.forceUpdate();\n        this.smoothRendering = value;\n    };\n    Player.prototype.setMode = function (mode) {\n        this.canvas.setMode(mode);\n        // this._imgCanvas.setMode(mode);\n    };\n    Player.prototype.forceUpdate = function () {\n        if (this.isOpen) {\n            this.drawFrame(this.currentFrame, this.canvas);\n        }\n    };\n    Player.prototype.on = function (eventType, callback) {\n        var events = this.events;\n        (events[eventType] || (events[eventType] = [])).push(callback);\n    };\n    Player.prototype.off = function (eventType, callback) {\n        var callbackList = this.events[eventType];\n        if (callbackList)\n            callbackList.splice(callbackList.indexOf(callback), 1);\n    };\n    Player.prototype.emit = function (eventType) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var callbackList = this.events[eventType] || [];\n        for (var i = 0; i < callbackList.length; i++) {\n            callbackList[i].apply(null, args);\n        }\n    };\n    return Player;\n}());\nexport { Player };\n","import { DataStream } from './utils/dataStream';\nimport { parseSource, KwzParser, PpmParser } from './parser';\nimport { Player } from './player';\nexport default {\n    DataStream: DataStream,\n    KwzParser: KwzParser,\n    PpmParser: PpmParser,\n    parseSource: parseSource,\n    Player: Player,\n};\n"],"sourceRoot":""}
{"version":3,"sources":["webpack://flipnote/webpack/universalModuleDefinition","webpack://flipnote/webpack/bootstrap","webpack://flipnote/./webgl/shader.vert","webpack://flipnote/./webgl/shader.frag","webpack://flipnote/./utils/dataStream.ts","webpack://flipnote/./loader/index.ts","webpack://flipnote/./loader/urlLoader.ts","webpack://flipnote/./loader/fileLoader.ts","webpack://flipnote/./loader/arrayBufferLoader.ts","webpack://flipnote/./parser/adpcm.ts","webpack://flipnote/./parser/kwzTables.ts","webpack://flipnote/./parser/ppm.ts","webpack://flipnote/./parser/kwz.ts","webpack://flipnote/./parser/index.ts","webpack://flipnote/./encoders/wav.ts","webpack://flipnote/./webgl/canvas.ts","webpack://flipnote/./player/audio.ts","webpack://flipnote/./player/index.ts","webpack://flipnote/./encoders/bmp.ts","webpack://flipnote/./utils/byteArray.ts","webpack://flipnote/./encoders/lzw.ts","webpack://flipnote/./encoders/gif.ts","webpack://flipnote/./flipnote.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","SeekOrigin","DataStream","arrayBuffer","buffer","data","DataView","cursor","Uint8Array","configurable","byteLength","seek","offset","whence","End","Current","Begin","readUint8","val","getUint8","writeUint8","setUint8","readInt8","getInt8","writeInt8","setInt8","readUint16","littleEndian","getUint16","writeUint16","setUint16","readInt16","getInt16","writeInt16","setInt16","readUint32","getUint32","writeUint32","setUint32","readInt32","getInt32","writeInt32","setInt32","readBytes","count","bytes","writeBytes","_this","forEach","byte","readHex","reverse","hex","length","push","toString","padStart","join","toUpperCase","readUtf8","chars","str","char","String","fromCharCode","writeUtf8","string","charCodeAt","readUtf16","Uint16Array","loaders","matches","source","load","resolve","reject","xhr","XMLHttpRequest","open","responseType","onreadystatechange","e","readyState","status","response","type","statusText","send","File","reader","FileReader","onload","event","result","onerror","readAsArrayBuffer","ArrayBuffer","ADPCM_INDEX_TABLE_2","Int8Array","ADPCM_INDEX_TABLE_4","ADPCM_STEP_TABLE","Int16Array","ADPCM_SAMPLE_TABLE_2","adpcm_sample","adpcm_stepIndex","adpcm_diff","step","ADPCM_SAMPLE_TABLE_4","__extends","extendStatics","b","setPrototypeOf","__proto__","Array","__","constructor","FRAMERATES","PALETTE","WHITE","BLACK","RED","BLUE","ppm_PpmParser","_super","PpmParser","width","height","palette","globalPalette","sampleRate","prevDecodedFrame","decodeHeader","decodeAnimationHeader","decodeSoundHeader","decodeMeta","layers","prevLayers","validateFSID","fsid","test","validateFilename","filename","readFilename","readLineEncoding","unpacked","byteOffset","bitOffset","frameDataLength","soundDataLength","frameCount","version","lock","thumbIndex","rootAuthorName","parentAuthorName","currentAuthorName","parentAuthorId","currentAuthorId","parentFilename","currentFilename","rootAuthorId","timestamp","Date","flags","thumbFrameIndex","meta","loop","frame_count","frame_speed","frameSpeed","bgm_speed","bgmSpeed","thumb_index","spinoff","username","parent","current","offsetTableLength","frameOffsets","Uint32Array","map","bgmLen","se1Len","se2Len","se3Len","framerate","bgmrate","soundMeta","bgm","se1","se2","se3","isNewFrame","frameIndex","getFramePalette","header","paperColor","pen","getLayerOrder","decodeFrame","isTranslated","translateX","translateY","set","fill","layerEncoding","layer","layerBitmap","line","lineType","chunkOffset","lineHeader","chunk","pixel","dest","src","y","x","getLayerPixels","layerIndex","image","layerColor","getFramePixels","useGlobalPalette","paletteMap","color","indexOf","a","hasAudioTrack","trackIndex","id","decodeAudio","track","sample","diff","stepIndex","adpcm","output","outputOffset","prevDiff","prevStepIndex","index","bitPos","Math","max","min","decodeSoundFlags","KWZ_TABLE_1","KWZ_TABLE_2","KWZ_TABLE_3","values","kwzTables_index","kwzTables_a","kwzTables_b","KWZ_LINE_TABLE","kwzTables_offset","f","g","h","kwz_extends","kwz_FRAMERATES","kwz_PALETTE","YELLOW","GREEN","NONE","kwz_KwzParser","KwzParser","bitIndex","bitValue","sections","frameMeta","size","sectionCount","sectionMagic","substring","sectionLength","decodeFrameMeta","readBits","num","nextBits","mask","creationTimestamp","modifiedTimestamp","rootFilename","creation_timestamp","frame","layerSize","frameAuthor","layerDepth","soundFlags","cameraFlag","trackSizes","se4","getDiffingFlag","getLayerDepths","depths","sort","diffingFlag","isPrevFrame","skip","tileOffsetY","tileOffsetX","subTileOffsetY","subTileOffsetX","pixelOffset","pixelBuffer","lineIndex","pixels","subarray","lineValue","lineIndexA","lineIndexB","pattern","paletteOffset","framePalette","slice","parseSource","Promise","loader","loadSource","then","magic","ShaderType","TextureType","wav_WavEncoder","WavEncoder","channels","bitsPerSample","headerBuffer","pcmData","writeFrames","getBlob","Blob","audio_AudioTrack","AudioTrack","playbackRate","channelCount","audio","document","createElement","preload","isActive","wav","url","window","URL","createObjectURL","duration","unset","revokeObjectURL","start","currentTime","play","stop","pause","WebGLRenderingContext","VERTEX_SHADER","FRAGMENT_SHADER","ALPHA","LUMINANCE_ALPHA","canvas_WebglCanvas","WebglCanvas","el","params","antialias","alpha","uniforms","refs","shaders","textures","buffers","gl","getContext","program","createProgram","vShader","createShader","Vertex","shader_default","fShader","Fragment","webgl_shader_default","attachShader","linkProgram","getProgramParameter","LINK_STATUS","log","getProgramInfoLog","deleteProgram","Error","useProgram","vertBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","activeTexture","TEXTURE0","tex","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","uniformCount","ACTIVE_UNIFORMS","name_1","getActiveUniform","getUniformLocation","uniform1i","setCanvasSize","pixelStorei","UNPACK_FLIP_Y_WEBGL","enable","BLEND","blendEquation","FUNC_ADD","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","setInputSize","uniform2f","viewport","setLayerType","textureType","toImage","toDataURL","setColor","uniform4f","setPaperColor","clearColor","drawLayer","color1","color2","texImage2D","UNSIGNED_BYTE","drawArrays","TRIANGLES","resize","clear","COLOR_BUFFER_BIT","destroy","texture","deleteTexture","deleteBuffer","canvas","__awaiter","thisArg","_arguments","P","generator","fulfilled","next","rejected","done","apply","__generator","body","_","label","sent","trys","ops","verb","throw","return","iterator","v","op","TypeError","pop","player_Player","Player","paused","smoothRendering","isOpen","events","playbackLoop","hasPlaybackStarted","querySelector","audioTracks","setFrame","currentFrame","round","volume","muted","note","_a","close","catch","err","console","error","audiorate","seFlags","layerVisibility","1","2","3","Alpha","LuminanceAlpha","emit","playFrameSe","playBgm","stopAudio","setInterval","clearInterval","firstFrame","nextFrame","setPalette","forceUpdate","floor","drawFrame","colors","layerBuffers","thumbnailFrame","prevFrame","lastFrame","setLayerVisibility","on","eventType","callback","off","callbackList","splice","args","_i","arguments","roundToNearest","ceil","bmp_BitmapEncoder","BitmapEncoder","bpp","vWidth","vHeight","fileHeader","dibHeader","fromFlipnoteFrame","flipnote","bmp","setPixels","setFilelength","setPixelOffset","setCompression","setPaletteCount","pow","pixelData","pixelsLength","w","srcOffset","destOffset","headerByteLength","concat","getUrl","getImage","img","Image","ByteArray","page","pages","newPage","pageSize","getData","getBuffer","writeByte","array","HSIZE","masks","LZWEncoder","colorDepth","accum","htab","Int32Array","codetab","cur_accum","cur_bits","curPixel","free_ent","clear_flg","g_init_bits","undefined","ClearCode","EOFCode","initCodeSize","a_count","remaining","maxcode","char_out","outs","flush_char","cl_block","cl_hash","hsize","compress","init_bits","fcode","ent","disp","hsize_reg","hshift","n_bits","get_maxcode","nextPixel","outer_loop","encode","code","gif_GifEncoder","GifEncoder","delay","repeat","fromFlipnote","gif","init","writeFrame","paletteSize","writeHeader","writeColorTable","writeNetscapeExt","writeGraphicsControlExt","graphicsControlExt","netscapeExt","writeImageDesc","desc","writePixels","__webpack_exports__","dataStream","kwzParser","ppmParser","player","bitmapEncoder","gifEncoder"],"mappings":"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","file":"flipnote.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"flipnote\"] = factory();\n\telse\n\t\troot[\"flipnote\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = \"#define GLSLIFY 1\\nattribute vec4 a_position;\\nvarying vec2 v_texel;\\nvarying float v_scale;\\nuniform vec2 u_textureSize;\\nuniform vec2 u_screenSize;\\n\\nvoid main() {\\n  gl_Position = a_position;\\n  vec2 uv = a_position.xy * 0.5 + 0.5;\\n  v_texel = uv * u_textureSize;\\n  v_scale = floor(u_screenSize.y / u_textureSize.y + 0.01);\\n}\"","module.exports = \"precision highp float;\\n#define GLSLIFY 1\\nvarying vec2 v_texel;\\nvarying float v_scale;\\nuniform vec4 u_color1;\\nuniform vec4 u_color2;\\nuniform sampler2D u_bitmap;\\nuniform bool u_isSmooth;\\nuniform vec2 u_textureSize;\\nuniform vec2 u_screenSize;\\n\\nvoid main() {\\n  vec2 texel_floored = floor(v_texel);\\n  vec2 s = fract(v_texel);\\n  float region_range = 0.5 - 0.5 / v_scale;\\n  vec2 center_dist = s - 0.5;\\n  vec2 f = (center_dist - clamp(center_dist, -region_range, region_range)) * v_scale + 0.5;\\n  vec2 mod_texel = texel_floored + f;\\n  vec2 coord = mod_texel.xy / u_textureSize.xy;\\n  vec2 colorWeights = texture2D(u_bitmap, coord).ra;\\n  gl_FragColor = vec4(u_color1.rgb, 1.0) * colorWeights.y + vec4(u_color2.rgb, 1.0) * colorWeights.x;\\n}\"","/** datastream serves as a wrapper around the DataView API to help keep track of the offset into the stream */\nexport var SeekOrigin;\n(function (SeekOrigin) {\n    SeekOrigin[SeekOrigin[\"Begin\"] = 0] = \"Begin\";\n    SeekOrigin[SeekOrigin[\"Current\"] = 1] = \"Current\";\n    SeekOrigin[SeekOrigin[\"End\"] = 2] = \"End\";\n})(SeekOrigin || (SeekOrigin = {}));\nvar DataStream = /** @class */ (function () {\n    function DataStream(arrayBuffer) {\n        this.buffer = arrayBuffer;\n        this.data = new DataView(arrayBuffer);\n        this.cursor = 0;\n    }\n    Object.defineProperty(DataStream.prototype, \"bytes\", {\n        get: function () {\n            return new Uint8Array(this.buffer);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataStream.prototype, \"byteLength\", {\n        get: function () {\n            return this.data.byteLength;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DataStream.prototype.seek = function (offset, whence) {\n        switch (whence) {\n            case SeekOrigin.End:\n                this.cursor = this.data.byteLength + offset;\n                break;\n            case SeekOrigin.Current:\n                this.cursor += offset;\n                break;\n            case SeekOrigin.Begin:\n            default:\n                this.cursor = offset;\n                break;\n        }\n    };\n    DataStream.prototype.readUint8 = function () {\n        var val = this.data.getUint8(this.cursor);\n        this.cursor += 1;\n        return val;\n    };\n    DataStream.prototype.writeUint8 = function (value) {\n        this.data.setUint8(this.cursor, value);\n        this.cursor += 1;\n    };\n    DataStream.prototype.readInt8 = function () {\n        var val = this.data.getInt8(this.cursor);\n        this.cursor += 1;\n        return val;\n    };\n    DataStream.prototype.writeInt8 = function (value) {\n        this.data.setInt8(this.cursor, value);\n        this.cursor += 1;\n    };\n    DataStream.prototype.readUint16 = function (littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        var val = this.data.getUint16(this.cursor, littleEndian);\n        this.cursor += 2;\n        return val;\n    };\n    DataStream.prototype.writeUint16 = function (value, littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        this.data.setUint16(this.cursor, value, littleEndian);\n        this.cursor += 2;\n    };\n    DataStream.prototype.readInt16 = function (littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        var val = this.data.getInt16(this.cursor, littleEndian);\n        this.cursor += 2;\n        return val;\n    };\n    DataStream.prototype.writeInt16 = function (value, littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        this.data.setInt16(this.cursor, value, littleEndian);\n        this.cursor += 2;\n    };\n    DataStream.prototype.readUint32 = function (littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        var val = this.data.getUint32(this.cursor, littleEndian);\n        this.cursor += 4;\n        return val;\n    };\n    DataStream.prototype.writeUint32 = function (value, littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        this.data.setUint32(this.cursor, value, littleEndian);\n        this.cursor += 4;\n    };\n    DataStream.prototype.readInt32 = function (littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        var val = this.data.getInt32(this.cursor, littleEndian);\n        this.cursor += 4;\n        return val;\n    };\n    DataStream.prototype.writeInt32 = function (value, littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        this.data.setInt32(this.cursor, value, littleEndian);\n        this.cursor += 4;\n    };\n    DataStream.prototype.readBytes = function (count) {\n        var bytes = new Uint8Array(this.data.buffer, this.cursor, count);\n        this.cursor += bytes.byteLength;\n        return bytes;\n    };\n    DataStream.prototype.writeBytes = function (bytes) {\n        var _this = this;\n        bytes.forEach(function (byte) { return _this.writeUint8(byte); });\n    };\n    DataStream.prototype.readHex = function (count, reverse) {\n        if (reverse === void 0) { reverse = false; }\n        var bytes = this.readBytes(count);\n        var hex = [];\n        for (var i = 0; i < bytes.length; i++) {\n            hex.push(bytes[i].toString(16).padStart(2, '0'));\n        }\n        if (reverse)\n            hex.reverse();\n        return hex.join('').toUpperCase();\n    };\n    DataStream.prototype.readUtf8 = function (count) {\n        var chars = this.readBytes(count);\n        var str = '';\n        for (var i = 0; i < chars.length; i++) {\n            var char = chars[i];\n            if (char == 0)\n                break;\n            str += String.fromCharCode(char);\n        }\n        return str;\n    };\n    DataStream.prototype.writeUtf8 = function (string) {\n        for (var i = 0; i < string.length; i++) {\n            var char = string.charCodeAt(i);\n            this.writeUint8(char);\n        }\n    };\n    DataStream.prototype.readUtf16 = function (count) {\n        var chars = new Uint16Array(this.data.buffer, this.cursor, count);\n        this.cursor += chars.byteLength;\n        var str = '';\n        for (var i = 0; i < chars.length; i++) {\n            var char = chars[i];\n            if (char == 0)\n                break;\n            str += String.fromCharCode(char);\n        }\n        return str;\n    };\n    return DataStream;\n}());\nexport { DataStream };\n","import urlLoader from './urlLoader';\nimport fileLoader from './fileLoader';\nimport arrayBufferLoader from './arrayBufferLoader';\nvar loaders = [\n    urlLoader,\n    fileLoader,\n    arrayBufferLoader\n];\nexport function loadSource(source) {\n    return new Promise(function (resolve, reject) {\n        for (var i = 0; i < loaders.length; i++) {\n            var loader = loaders[i];\n            if (loader.matches(source)) {\n                loader.load(source, resolve, reject);\n                break;\n            }\n        }\n    });\n}\n","export default {\n    matches: function (source) {\n        return typeof source === 'string';\n    },\n    load: function (source, resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', source, true);\n        xhr.responseType = 'arraybuffer';\n        xhr.onreadystatechange = function (e) {\n            if (xhr.readyState === 4) {\n                if (xhr.status >= 200 && xhr.status < 300) {\n                    resolve(xhr.response);\n                }\n                else {\n                    reject({\n                        type: 'httpError',\n                        status: xhr.status,\n                        statusText: xhr.statusText\n                    });\n                }\n            }\n        };\n        xhr.send(null);\n    }\n};\n","export default {\n    matches: function (source) {\n        return (source instanceof File);\n    },\n    load: function (source, resolve, reject) {\n        var reader = new FileReader();\n        reader.onload = function (event) {\n            resolve(reader.result);\n        };\n        reader.onerror = function (event) {\n            reject({ type: 'fileReadError' });\n        };\n        reader.readAsArrayBuffer(source);\n    }\n};\n","export default {\n    matches: function (source) {\n        return (source instanceof ArrayBuffer);\n    },\n    load: function (source, resolve, reject) {\n        resolve(source);\n    }\n};\n","export var ADPCM_INDEX_TABLE_2 = new Int8Array([\n    -1, 2, -1, 2\n]);\nexport var ADPCM_INDEX_TABLE_4 = new Int8Array([\n    -1, -1, -1, -1, 2, 4, 6, 8,\n    -1, -1, -1, -1, 2, 4, 6, 8\n]);\n// note that this is a slight deviation from the normal adpcm table\nexport var ADPCM_STEP_TABLE = new Int16Array([\n    7, 8, 9, 10, 11, 12, 13, 14, 16, 17,\n    19, 21, 23, 25, 28, 31, 34, 37, 41, 45,\n    50, 55, 60, 66, 73, 80, 88, 97, 107, 118,\n    130, 143, 157, 173, 190, 209, 230, 253, 279, 307,\n    337, 371, 408, 449, 494, 544, 598, 658, 724, 796,\n    876, 963, 1060, 1166, 1282, 1411, 1552, 1707, 1878, 2066,\n    2272, 2499, 2749, 3024, 3327, 3660, 4026, 4428, 4871, 5358,\n    5894, 6484, 7132, 7845, 8630, 9493, 10442, 11487, 12635, 13899,\n    15289, 16818, 18500, 20350, 22385, 24623, 27086, 29794, 32767, 0\n]);\nexport var ADPCM_SAMPLE_TABLE_2 = new Int16Array(90 * 4);\nfor (var sample = 0; sample < 4; sample++) {\n    for (var stepIndex = 0; stepIndex < 90; stepIndex++) {\n        var step = ADPCM_STEP_TABLE[stepIndex];\n        var diff = step >> 3;\n        if (sample & 1)\n            diff += step;\n        if (sample & 2)\n            diff = -diff;\n        ADPCM_SAMPLE_TABLE_2[sample + 4 * stepIndex] = diff;\n    }\n}\nexport var ADPCM_SAMPLE_TABLE_4 = new Int16Array(90 * 16);\nfor (var sample = 0; sample < 16; sample++) {\n    for (var stepIndex = 0; stepIndex < 90; stepIndex++) {\n        var step = ADPCM_STEP_TABLE[stepIndex];\n        var diff = step >> 3;\n        if (sample & 4)\n            diff += step;\n        if (sample & 2)\n            diff += step >> 1;\n        if (sample & 1)\n            diff += step >> 2;\n        if (sample & 8)\n            diff = -diff;\n        ADPCM_SAMPLE_TABLE_4[sample + 16 * stepIndex] = diff;\n    }\n}\n","// table1 - commonly occuring line offsets\nexport var KWZ_TABLE_1 = new Uint16Array([\n    0x0000, 0x0CD0, 0x19A0, 0x02D9, 0x088B, 0x0051, 0x00F3, 0x0009,\n    0x001B, 0x0001, 0x0003, 0x05B2, 0x1116, 0x00A2, 0x01E6, 0x0012,\n    0x0036, 0x0002, 0x0006, 0x0B64, 0x08DC, 0x0144, 0x00FC, 0x0024,\n    0x001C, 0x0004, 0x0334, 0x099C, 0x0668, 0x1338, 0x1004, 0x166C\n]);\n// table2 - commonly occuring line offsets, but the lines are shifted to the left by one pixel\nexport var KWZ_TABLE_2 = new Uint16Array([\n    0x0000, 0x0CD0, 0x19A0, 0x0003, 0x02D9, 0x088B, 0x0051, 0x00F3,\n    0x0009, 0x001B, 0x0001, 0x0006, 0x05B2, 0x1116, 0x00A2, 0x01E6,\n    0x0012, 0x0036, 0x0002, 0x02DC, 0x0B64, 0x08DC, 0x0144, 0x00FC,\n    0x0024, 0x001C, 0x099C, 0x0334, 0x1338, 0x0668, 0x166C, 0x1004\n]);\n// table3 - line offsets, but the lines are shifted to the left by one pixel\nexport var KWZ_TABLE_3 = new Uint16Array(6561);\nvar values = [0, 3, 7, 1, 4, 8, 2, 5, 6];\nvar index = 0;\nfor (var a = 0; a < 9; a++)\n    for (var b = 0; b < 9; b++)\n        for (var c = 0; c < 9; c++)\n            for (var d = 0; d < 9; d++) {\n                KWZ_TABLE_3[index] = ((values[a] * 9 + values[b]) * 9 + values[c]) * 9 + values[d];\n                index++;\n            }\n// linetable - contains every possible sequence of pixels for each tile line\nexport var KWZ_LINE_TABLE = new Uint16Array(6561 * 8);\nvar values = [0x0000, 0xFF00, 0x00FF];\nvar offset = 0;\nfor (var a = 0; a < 3; a++)\n    for (var b = 0; b < 3; b++)\n        for (var c = 0; c < 3; c++)\n            for (var d = 0; d < 3; d++)\n                for (var e = 0; e < 3; e++)\n                    for (var f = 0; f < 3; f++)\n                        for (var g = 0; g < 3; g++)\n                            for (var h = 0; h < 3; h++) {\n                                KWZ_LINE_TABLE.set([\n                                    values[b],\n                                    values[a],\n                                    values[d],\n                                    values[c],\n                                    values[f],\n                                    values[e],\n                                    values[h],\n                                    values[g]\n                                ], offset);\n                                offset += 8;\n                            }\n","/**\n * PPM decoder\n * Reads frames, audio, and metadata from Flipnote Studio PPM files\n * Based on my Python PPM decoder implementation (https://github.com/jaames/flipnote-tools)\n *\n * Credits:\n *  PPM format reverse-engineering and documentation:\n *   - bricklife (http://ugomemo.g.hatena.ne.jp/bricklife/20090307/1236391313)\n *   - mirai-iro (http://mirai-iro.hatenablog.jp/entry/20090116/ugomemo_ppm)\n *   - harimau_tigris (http://ugomemo.g.hatena.ne.jp/harimau_tigris)\n *   - steven (http://www.dsibrew.org/wiki/User:Steven)\n *   - yellows8 (http://www.dsibrew.org/wiki/User:Yellows8)\n *   - PBSDS (https://github.com/pbsds)\n *   - jaames (https://github.com/jaames)\n *  Identifying the PPM sound codec:\n *   - Midmad from Hatena Haiku\n *   - WDLMaster from hcs64.com\n *  Helping me to identify issues with the Python decoder that this is based on:\n *   - Austin Burk (https://sudomemo.net)\n *\n *  Lastly, a huge thanks goes to Nintendo for creating Flipnote Studio,\n *  and to Hatena for providing the Flipnote Hatena online service, both of which inspired so many c:\n*/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { DataStream } from '../utils/dataStream';\nimport { ADPCM_INDEX_TABLE_4, ADPCM_SAMPLE_TABLE_4 } from './adpcm';\n// internal frame speed value -> FPS table\nvar FRAMERATES = [\n    null,\n    0.5,\n    1,\n    2,\n    4,\n    6,\n    12,\n    20,\n    30,\n];\nvar PALETTE = {\n    WHITE: [0xff, 0xff, 0xff],\n    BLACK: [0x0e, 0x0e, 0x0e],\n    RED: [0xff, 0x2a, 0x2a],\n    BLUE: [0x0a, 0x39, 0xff],\n};\n;\nvar PpmParser = /** @class */ (function (_super) {\n    __extends(PpmParser, _super);\n    function PpmParser(arrayBuffer) {\n        var _this = _super.call(this, arrayBuffer) || this;\n        _this.type = PpmParser.type;\n        _this.width = PpmParser.width;\n        _this.height = PpmParser.height;\n        _this.palette = PALETTE;\n        _this.globalPalette = PpmParser.globalPalette;\n        _this.sampleRate = PpmParser.sampleRate;\n        _this.prevDecodedFrame = null;\n        _this.decodeHeader();\n        _this.decodeAnimationHeader();\n        _this.decodeSoundHeader();\n        _this.decodeMeta();\n        // create image buffers\n        _this.layers = [\n            new Uint8Array(PpmParser.width * PpmParser.height),\n            new Uint8Array(PpmParser.width * PpmParser.height)\n        ];\n        _this.prevLayers = [\n            new Uint8Array(PpmParser.width * PpmParser.height),\n            new Uint8Array(PpmParser.width * PpmParser.height)\n        ];\n        _this.prevDecodedFrame = null;\n        return _this;\n    }\n    PpmParser.validateFSID = function (fsid) {\n        return /[0159]{1}[0-9A-F]{6}0[0-9A-F]{8}/.test(fsid);\n    };\n    PpmParser.validateFilename = function (filename) {\n        return /[0-9A-F]{6}_[0-9A-F]{13}_[0-9]{3}/.test(filename);\n    };\n    PpmParser.prototype.readFilename = function () {\n        return [\n            this.readHex(3),\n            this.readUtf8(13),\n            this.readUint16().toString().padStart(3, '0')\n        ].join('_');\n    };\n    PpmParser.prototype.readLineEncoding = function () {\n        var unpacked = new Uint8Array(PpmParser.height);\n        for (var byteOffset = 0; byteOffset < 48; byteOffset++) {\n            var byte = this.readUint8();\n            // each line's encoding type is stored as a 2-bit value\n            for (var bitOffset = 0; bitOffset < 8; bitOffset += 2) {\n                unpacked[byteOffset * 4 + bitOffset / 2] = (byte >> bitOffset) & 0x03;\n            }\n        }\n        return unpacked;\n    };\n    PpmParser.prototype.decodeHeader = function () {\n        this.seek(0);\n        // decode header\n        // https://github.com/pbsds/hatena-server/wiki/PPM-format#file-header\n        var magic = this.readUint32();\n        this.frameDataLength = this.readUint32();\n        this.soundDataLength = this.readUint32();\n        this.frameCount = this.readUint16() + 1;\n        this.version = this.readUint16();\n    };\n    PpmParser.prototype.decodeMeta = function () {\n        // https://github.com/pbsds/hatena-server/wiki/PPM-format#file-header\n        this.seek(0x10);\n        var lock = this.readUint16(), thumbIndex = this.readInt16(), rootAuthorName = this.readUtf16(11), parentAuthorName = this.readUtf16(11), currentAuthorName = this.readUtf16(11), parentAuthorId = this.readHex(8, true), currentAuthorId = this.readHex(8, true), parentFilename = this.readFilename(), currentFilename = this.readFilename(), rootAuthorId = this.readHex(8, true);\n        this.seek(0x9A);\n        var timestamp = new Date((this.readUint32() + 946684800) * 1000);\n        this.seek(0x06A6);\n        var flags = this.readUint16();\n        this.thumbFrameIndex = thumbIndex;\n        this.meta = {\n            lock: lock === 1,\n            loop: (flags >> 1 & 0x01) === 1,\n            frame_count: this.frameCount,\n            frame_speed: this.frameSpeed,\n            bgm_speed: this.bgmSpeed,\n            thumb_index: thumbIndex,\n            timestamp: timestamp,\n            spinoff: (currentAuthorId !== parentAuthorId) || (currentAuthorId !== rootAuthorId),\n            root: {\n                filename: null,\n                username: rootAuthorName,\n                fsid: rootAuthorId,\n            },\n            parent: {\n                username: parentAuthorName,\n                fsid: parentAuthorId,\n                filename: parentFilename\n            },\n            current: {\n                username: currentAuthorName,\n                fsid: currentAuthorId,\n                filename: currentFilename\n            },\n        };\n    };\n    PpmParser.prototype.decodeAnimationHeader = function () {\n        var _this = this;\n        // jump to the start of the animation data section\n        // https://github.com/pbsds/hatena-server/wiki/PPM-format#animation-data-section\n        this.seek(0x06A0);\n        var offsetTableLength = this.readUint16();\n        // skip padding + flags\n        this.seek(0x06A8);\n        // read frame offsets and build them into a table\n        this.frameOffsets = new Uint32Array(offsetTableLength / 4).map(function (value) {\n            return 0x06A8 + offsetTableLength + _this.readUint32();\n        });\n    };\n    PpmParser.prototype.decodeSoundHeader = function () {\n        // https://github.com/pbsds/hatena-server/wiki/PPM-format#sound-data-section\n        // offset = frame data offset + frame data length + sound effect flags\n        var offset = 0x06A0 + this.frameDataLength + this.frameCount;\n        // account for multiple-of-4 padding\n        if (offset % 2 != 0)\n            offset += 4 - (offset % 4);\n        this.seek(offset);\n        var bgmLen = this.readUint32();\n        var se1Len = this.readUint32();\n        var se2Len = this.readUint32();\n        var se3Len = this.readUint32();\n        this.frameSpeed = 8 - this.readUint8();\n        this.bgmSpeed = 8 - this.readUint8();\n        offset += 32;\n        this.framerate = FRAMERATES[this.frameSpeed];\n        this.bgmrate = FRAMERATES[this.bgmSpeed];\n        this.soundMeta = {\n            bgm: { offset: offset, length: bgmLen },\n            se1: { offset: offset += bgmLen, length: se1Len },\n            se2: { offset: offset += se1Len, length: se2Len },\n            se3: { offset: offset += se2Len, length: se3Len },\n        };\n    };\n    PpmParser.prototype.isNewFrame = function (frameIndex) {\n        this.seek(this.frameOffsets[frameIndex]);\n        var header = this.readUint8();\n        return (header >> 7) & 0x1;\n    };\n    PpmParser.prototype.getFramePalette = function (frameIndex) {\n        this.seek(this.frameOffsets[frameIndex]);\n        var palette = this.palette;\n        var header = this.readUint8();\n        var paperColor = header & 0x1;\n        var pen = [\n            palette.BLACK,\n            paperColor == 1 ? palette.BLACK : palette.WHITE,\n            palette.RED,\n            palette.BLUE,\n        ];\n        return [\n            paperColor == 1 ? palette.WHITE : palette.BLACK,\n            pen[(header >> 1) & 0x3],\n            pen[(header >> 3) & 0x3],\n        ];\n    };\n    PpmParser.prototype.getLayerOrder = function (frameIndex) {\n        return [0, 1];\n    };\n    PpmParser.prototype.decodeFrame = function (frameIndex) {\n        if ((frameIndex !== 0) && (this.prevDecodedFrame !== frameIndex - 1) && (!this.isNewFrame(frameIndex)))\n            this.decodeFrame(frameIndex - 1);\n        // https://github.com/pbsds/hatena-server/wiki/PPM-format#animation-frame\n        this.seek(this.frameOffsets[frameIndex]);\n        var header = this.readUint8();\n        var isNewFrame = (header >> 7) & 0x1;\n        var isTranslated = (header >> 5) & 0x3;\n        var translateX = 0;\n        var translateY = 0;\n        // copy the current layer buffers to the previous ones\n        this.prevLayers[0].set(this.layers[0]);\n        this.prevLayers[1].set(this.layers[1]);\n        this.prevDecodedFrame = frameIndex;\n        // reset current layer buffers\n        this.layers[0].fill(0);\n        this.layers[1].fill(0);\n        if (isTranslated) {\n            translateX = this.readInt8();\n            translateY = this.readInt8();\n        }\n        var layerEncoding = [\n            this.readLineEncoding(),\n            this.readLineEncoding(),\n        ];\n        // start decoding layer bitmaps\n        for (var layer = 0; layer < 2; layer++) {\n            var layerBitmap = this.layers[layer];\n            for (var line = 0; line < PpmParser.height; line++) {\n                var lineType = layerEncoding[layer][line];\n                var chunkOffset = line * PpmParser.width;\n                switch (lineType) {\n                    // line type 0 = blank line, decode nothing\n                    case 0:\n                        break;\n                    // line types 1 + 2 = compressed bitmap line\n                    case 1:\n                    case 2:\n                        var lineHeader = this.readUint32(false);\n                        // line type 2 starts as an inverted line\n                        if (lineType == 2)\n                            layerBitmap.fill(0xFF, chunkOffset, chunkOffset + PpmParser.width);\n                        // loop through each bit in the line header\n                        while (lineHeader & 0xFFFFFFFF) {\n                            // if the bit is set, this 8-pix wide chunk is stored\n                            // else we can just leave it blank and move on to the next chunk\n                            if (lineHeader & 0x80000000) {\n                                var chunk = this.readUint8();\n                                // unpack chunk bits\n                                for (var pixel = 0; pixel < 8; pixel++) {\n                                    layerBitmap[chunkOffset + pixel] = (chunk >> pixel & 0x1) ? 0xFF : 0x00;\n                                }\n                            }\n                            chunkOffset += 8;\n                            // shift lineheader to the left by 1 bit, now on the next loop cycle the next bit will be checked\n                            lineHeader <<= 1;\n                        }\n                        break;\n                    // line type 3 = raw bitmap line\n                    case 3:\n                        while (chunkOffset < (line + 1) * PpmParser.width) {\n                            var chunk = this.readUint8();\n                            for (var pixel = 0; pixel < 8; pixel++) {\n                                layerBitmap[chunkOffset + pixel] = (chunk >> pixel & 0x1) ? 0xFF : 0x00;\n                            }\n                            chunkOffset += 8;\n                        }\n                        break;\n                }\n            }\n        }\n        // if the current frame is based on changes from the preivous one, merge them by XORing their values\n        if (!isNewFrame) {\n            var dest = void 0, src = void 0;\n            // loop through each line\n            for (var y = 0; y < PpmParser.height; y++) {\n                // skip to next line if this one falls off the top edge of the screen\n                if (y - translateY < 0)\n                    continue;\n                // stop once the bottom screen edge has been reached\n                if (y - translateY >= PpmParser.height)\n                    break;\n                // loop through each pixel in the line\n                for (var x = 0; x < PpmParser.width; x++) {\n                    // skip to the next pixel if this one falls off the left edge of the screen\n                    if (x - translateX < 0)\n                        continue;\n                    // stop diffing this line once the right screen edge has been reached\n                    if (x - translateX >= PpmParser.width)\n                        break;\n                    dest = x + y * PpmParser.width;\n                    src = dest - (translateX + translateY * PpmParser.width);\n                    // diff pixels with a binary XOR\n                    this.layers[0][dest] ^= this.prevLayers[0][src];\n                    this.layers[1][dest] ^= this.prevLayers[1][src];\n                }\n            }\n        }\n        return this.layers;\n    };\n    // retuns an uint8 array where each item is a pixel's palette index\n    PpmParser.prototype.getLayerPixels = function (frameIndex, layerIndex) {\n        if (this.prevDecodedFrame !== frameIndex) {\n            this.decodeFrame(frameIndex);\n        }\n        var layer = this.layers[layerIndex];\n        var image = new Uint8Array(PpmParser.width * PpmParser.height);\n        var layerColor = layerIndex + 1;\n        for (var pixel = 0; pixel < image.length; pixel++) {\n            if (layer[pixel] !== 0) {\n                image[pixel] = layerColor;\n            }\n        }\n        return image;\n    };\n    // retuns an uint8 array where each item is a pixel's palette index\n    PpmParser.prototype.getFramePixels = function (frameIndex, useGlobalPalette) {\n        if (useGlobalPalette === void 0) { useGlobalPalette = false; }\n        var paletteMap;\n        if (useGlobalPalette) {\n            var framePalette = this.getFramePalette(frameIndex);\n            paletteMap = framePalette.map(function (color) { return PpmParser.globalPalette.indexOf(color); });\n        }\n        else {\n            paletteMap = [0, 1, 2];\n        }\n        var layers = this.decodeFrame(frameIndex);\n        var image = new Uint8Array(PpmParser.width * PpmParser.height);\n        image.fill(paletteMap[0]);\n        for (var pixel = 0; pixel < image.length; pixel++) {\n            var a = layers[0][pixel];\n            var b = layers[1][pixel];\n            if (b)\n                image[pixel] = paletteMap[2];\n            if (a)\n                image[pixel] = paletteMap[1];\n        }\n        return image;\n    };\n    PpmParser.prototype.hasAudioTrack = function (trackIndex) {\n        var keys = ['bgm', 'se1', 'se2', 'se3'];\n        var id = keys[trackIndex];\n        return this.soundMeta[id].length > 0;\n    };\n    PpmParser.prototype.decodeAudio = function (track) {\n        var meta = this.soundMeta[track];\n        var adpcm = new Uint8Array(this.buffer, meta.offset, meta.length);\n        var output = new Int16Array(adpcm.length * 2);\n        var outputOffset = 0;\n        // initial decoder state\n        var prevDiff = 0;\n        var prevStepIndex = 0;\n        var sample, diff, stepIndex;\n        // loop through each byte in the raw adpcm data\n        for (var index = 0; index < adpcm.length; index++) {\n            var byte = adpcm[index];\n            var bitPos = 0;\n            while (bitPos < 8) {\n                // isolate 4-bit sample\n                sample = (byte >> bitPos) & 0xF;\n                // get diff\n                diff = prevDiff + ADPCM_SAMPLE_TABLE_4[sample + 16 * prevStepIndex];\n                // get step index\n                stepIndex = prevStepIndex + ADPCM_INDEX_TABLE_4[sample];\n                // clamp step index and diff\n                stepIndex = Math.max(0, Math.min(stepIndex, 79));\n                diff = Math.max(-32767, Math.min(diff, 32767));\n                // add result to output buffer\n                output[outputOffset] = (diff);\n                outputOffset += 1;\n                // set prev decoder state\n                prevStepIndex = stepIndex;\n                prevDiff = diff;\n                // move to next sample\n                bitPos += 4;\n            }\n        }\n        return output;\n    };\n    PpmParser.prototype.decodeSoundFlags = function () {\n        var _this = this;\n        this.seek(0x06A0 + this.frameDataLength);\n        // per msdn docs - the array map callback is only invoked for array indicies that have assigned values\n        // so when we create an array, we need to fill it with something before we can map over it\n        var arr = new Array(this.frameCount).fill([]);\n        return arr.map(function (value) {\n            var byte = _this.readUint8();\n            return [byte & 0x1, (byte >> 1) & 0x1, (byte >> 2) & 0x1];\n        });\n    };\n    PpmParser.type = 'PPM';\n    PpmParser.sampleRate = 8192;\n    PpmParser.width = 256;\n    PpmParser.height = 192;\n    PpmParser.globalPalette = [\n        PALETTE.BLACK,\n        PALETTE.WHITE,\n        PALETTE.RED,\n        PALETTE.BLUE\n    ];\n    return PpmParser;\n}(DataStream));\nexport { PpmParser };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { DataStream } from '../utils/dataStream';\nimport { ADPCM_INDEX_TABLE_2, ADPCM_INDEX_TABLE_4, ADPCM_SAMPLE_TABLE_2, ADPCM_SAMPLE_TABLE_4 } from './adpcm';\nimport { KWZ_TABLE_1, KWZ_TABLE_2, KWZ_TABLE_3, KWZ_LINE_TABLE } from './kwzTables';\nvar FRAMERATES = [\n    0.2,\n    0.5,\n    1,\n    2,\n    4,\n    6,\n    8,\n    12,\n    20,\n    24,\n    30\n];\nvar PALETTE = {\n    WHITE: [0xff, 0xff, 0xff],\n    BLACK: [0x10, 0x10, 0x10],\n    RED: [0xff, 0x10, 0x10],\n    YELLOW: [0xff, 0xe7, 0x00],\n    GREEN: [0x00, 0x86, 0x31],\n    BLUE: [0x00, 0x38, 0xce],\n    NONE: [0xff, 0xff, 0xff]\n};\n;\n;\nvar KwzParser = /** @class */ (function (_super) {\n    __extends(KwzParser, _super);\n    function KwzParser(arrayBuffer) {\n        var _this = _super.call(this, arrayBuffer) || this;\n        _this.type = KwzParser.type;\n        _this.width = KwzParser.width;\n        _this.height = KwzParser.height;\n        _this.palette = PALETTE;\n        _this.globalPalette = KwzParser.globalPalette;\n        _this.sampleRate = KwzParser.sampleRate;\n        _this.prevDecodedFrame = null;\n        _this.bitIndex = 0;\n        _this.bitValue = 0;\n        _this.layers = [\n            new Uint16Array(KwzParser.width * KwzParser.height),\n            new Uint16Array(KwzParser.width * KwzParser.height),\n            new Uint16Array(KwzParser.width * KwzParser.height),\n        ];\n        _this.bitIndex = 0;\n        _this.bitValue = 0;\n        _this.load();\n        return _this;\n    }\n    KwzParser.prototype.load = function () {\n        this.seek(0);\n        this.sections = {};\n        this.frameMeta = [];\n        var size = this.byteLength - 256;\n        var offset = 0;\n        var sectionCount = 0;\n        // counting sections should mitigate against one of mrnbayoh's notehax exploits\n        while ((offset < size) && (sectionCount < 6)) {\n            this.seek(offset);\n            var sectionMagic = this.readUtf8(4).substring(0, 3);\n            var sectionLength = this.readUint32();\n            this.sections[sectionMagic] = {\n                offset: offset,\n                length: sectionLength\n            };\n            offset += sectionLength + 8;\n            sectionCount += 1;\n        }\n        this.decodeMeta();\n        this.decodeFrameMeta();\n        this.decodeSoundHeader();\n    };\n    KwzParser.prototype.readBits = function (num) {\n        if (this.bitIndex + num > 16) {\n            var nextBits = this.readUint16();\n            this.bitValue |= nextBits << (16 - this.bitIndex);\n            this.bitIndex -= 16;\n        }\n        var mask = (1 << num) - 1;\n        var result = this.bitValue & mask;\n        this.bitValue >>= num;\n        this.bitIndex += num;\n        return result;\n    };\n    KwzParser.prototype.decodeMeta = function () {\n        this.seek(this.sections['KFH'].offset + 12);\n        var creationTimestamp = new Date((this.readUint32() + 946684800) * 1000), modifiedTimestamp = new Date((this.readUint32() + 946684800) * 1000), appVersion = this.readUint32(), rootAuthorId = this.readHex(10), parentAuthorId = this.readHex(10), currentAuthorId = this.readHex(10), rootAuthorName = this.readUtf16(11), parentAuthorName = this.readUtf16(11), currentAuthorName = this.readUtf16(11), rootFilename = this.readUtf8(28), parentFilename = this.readUtf8(28), currentFilename = this.readUtf8(28), frameCount = this.readUint16(), thumbIndex = this.readUint16(), flags = this.readUint16(), frameSpeed = this.readUint8(), layerFlags = this.readUint8();\n        this.frameCount = frameCount;\n        this.thumbFrameIndex = thumbIndex;\n        this.frameSpeed = frameSpeed;\n        this.framerate = FRAMERATES[frameSpeed];\n        this.meta = {\n            lock: (flags & 0x1) === 1,\n            loop: ((flags >> 1) & 0x01) === 1,\n            frame_count: frameCount,\n            frame_speed: frameSpeed,\n            thumb_index: thumbIndex,\n            timestamp: modifiedTimestamp,\n            creation_timestamp: creationTimestamp,\n            root: {\n                username: rootAuthorName,\n                fsid: rootAuthorId,\n                filename: rootFilename,\n            },\n            parent: {\n                username: parentAuthorName,\n                fsid: parentAuthorId,\n                filename: parentFilename,\n            },\n            current: {\n                username: currentAuthorName,\n                fsid: currentAuthorId,\n                filename: currentFilename,\n            },\n        };\n    };\n    KwzParser.prototype.decodeFrameMeta = function () {\n        this.frameOffsets = new Uint32Array(this.frameCount);\n        this.seek(this.sections['KMI'].offset + 8);\n        var offset = this.sections['KMC'].offset + 12;\n        for (var i = 0; i < this.frameCount; i++) {\n            var frame = {\n                flags: this.readUint32(),\n                layerSize: [\n                    this.readUint16(),\n                    this.readUint16(),\n                    this.readUint16()\n                ],\n                frameAuthor: this.readHex(10),\n                layerDepth: [\n                    this.readUint8(),\n                    this.readUint8(),\n                    this.readUint8(),\n                ],\n                soundFlags: this.readUint8(),\n                cameraFlag: this.readUint32(),\n            };\n            this.frameMeta.push(frame);\n            this.frameOffsets[i] = offset;\n            offset += frame.layerSize[0] + frame.layerSize[1] + frame.layerSize[2];\n        }\n    };\n    KwzParser.prototype.decodeSoundHeader = function () {\n        var offset = this.sections['KSN'].offset + 8;\n        this.seek(offset);\n        var bgmSpeed = this.readUint32();\n        this.bgmSpeed = bgmSpeed;\n        this.bgmrate = FRAMERATES[bgmSpeed];\n        var trackSizes = new Uint32Array(this.buffer, offset + 4, 20);\n        this.soundMeta = {\n            'bgm': { offset: offset += 28, length: trackSizes[0] },\n            'se1': { offset: offset += trackSizes[0], length: trackSizes[1] },\n            'se2': { offset: offset += trackSizes[1], length: trackSizes[2] },\n            'se3': { offset: offset += trackSizes[2], length: trackSizes[3] },\n            'se4': { offset: offset += trackSizes[3], length: trackSizes[4] },\n        };\n    };\n    KwzParser.prototype.getDiffingFlag = function (frameIndex) {\n        return ~(this.frameMeta[frameIndex].flags >> 4) & 0x07;\n    };\n    KwzParser.prototype.getLayerDepths = function (frameIndex) {\n        return this.frameMeta[frameIndex].layerDepth;\n    };\n    // sort layer indices sorted by depth, drom bottom to top\n    KwzParser.prototype.getLayerOrder = function (frameIndex) {\n        var depths = this.getLayerDepths(frameIndex);\n        return [2, 1, 0].sort(function (a, b) { return depths[b] - depths[a]; });\n    };\n    KwzParser.prototype.decodeFrame = function (frameIndex, diffingFlag, isPrevFrame) {\n        if (diffingFlag === void 0) { diffingFlag = 0x7; }\n        if (isPrevFrame === void 0) { isPrevFrame = false; }\n        // if this frame is being decoded as a prev frame, then we only want to decode the layers necessary\n        if (isPrevFrame)\n            diffingFlag &= this.getDiffingFlag(frameIndex + 1);\n        // the prevDecodedFrame check is an optimisation for decoding frames in full sequence\n        if ((frameIndex !== 0) && (this.prevDecodedFrame !== frameIndex - 1) && (diffingFlag))\n            this.decodeFrame(frameIndex - 1, diffingFlag = diffingFlag, isPrevFrame = true);\n        var meta = this.frameMeta[frameIndex];\n        var offset = this.frameOffsets[frameIndex];\n        for (var layerIndex = 0; layerIndex < 3; layerIndex++) {\n            this.seek(offset);\n            var layerSize = meta.layerSize[layerIndex];\n            offset += layerSize;\n            // if the layer is 38 bytes then it hasn't changed at all since the previous frame, so we can skip it\n            if (layerSize === 38)\n                continue;\n            if (((diffingFlag >> layerIndex) & 0x1) === 0)\n                continue;\n            this.bitIndex = 16;\n            this.bitValue = 0;\n            var skip = 0;\n            for (var tileOffsetY = 0; tileOffsetY < KwzParser.height; tileOffsetY += 128) {\n                for (var tileOffsetX = 0; tileOffsetX < KwzParser.width; tileOffsetX += 128) {\n                    for (var subTileOffsetY = 0; subTileOffsetY < 128; subTileOffsetY += 8) {\n                        var y = tileOffsetY + subTileOffsetY;\n                        if (y >= KwzParser.height)\n                            break;\n                        for (var subTileOffsetX = 0; subTileOffsetX < 128; subTileOffsetX += 8) {\n                            var x = tileOffsetX + subTileOffsetX;\n                            if (x >= KwzParser.width)\n                                break;\n                            if (skip) {\n                                skip -= 1;\n                                continue;\n                            }\n                            var pixelOffset = y * KwzParser.width + x;\n                            var pixelBuffer = this.layers[layerIndex];\n                            var type = this.readBits(3);\n                            if (type == 0) {\n                                var lineIndex = KWZ_TABLE_1[this.readBits(5)];\n                                var pixels = KWZ_LINE_TABLE.subarray(lineIndex * 8, lineIndex * 8 + 8);\n                                pixelBuffer.set(pixels, pixelOffset);\n                                pixelBuffer.set(pixels, pixelOffset + 320);\n                                pixelBuffer.set(pixels, pixelOffset + 640);\n                                pixelBuffer.set(pixels, pixelOffset + 960);\n                                pixelBuffer.set(pixels, pixelOffset + 1280);\n                                pixelBuffer.set(pixels, pixelOffset + 1600);\n                                pixelBuffer.set(pixels, pixelOffset + 1920);\n                                pixelBuffer.set(pixels, pixelOffset + 2240);\n                            }\n                            else if (type == 1) {\n                                var lineIndex = this.readBits(13);\n                                var pixels = KWZ_LINE_TABLE.subarray(lineIndex * 8, lineIndex * 8 + 8);\n                                pixelBuffer.set(pixels, pixelOffset);\n                                pixelBuffer.set(pixels, pixelOffset + 320);\n                                pixelBuffer.set(pixels, pixelOffset + 640);\n                                pixelBuffer.set(pixels, pixelOffset + 960);\n                                pixelBuffer.set(pixels, pixelOffset + 1280);\n                                pixelBuffer.set(pixels, pixelOffset + 1600);\n                                pixelBuffer.set(pixels, pixelOffset + 1920);\n                                pixelBuffer.set(pixels, pixelOffset + 2240);\n                            }\n                            else if (type == 2) {\n                                var lineValue = this.readBits(5);\n                                var lineIndexA = KWZ_TABLE_1[lineValue];\n                                var lineIndexB = KWZ_TABLE_2[lineValue];\n                                var a = KWZ_LINE_TABLE.subarray(lineIndexA * 8, lineIndexA * 8 + 8);\n                                var b = KWZ_LINE_TABLE.subarray(lineIndexB * 8, lineIndexB * 8 + 8);\n                                pixelBuffer.set(a, pixelOffset);\n                                pixelBuffer.set(b, pixelOffset + 320);\n                                pixelBuffer.set(a, pixelOffset + 640);\n                                pixelBuffer.set(b, pixelOffset + 960);\n                                pixelBuffer.set(a, pixelOffset + 1280);\n                                pixelBuffer.set(b, pixelOffset + 1600);\n                                pixelBuffer.set(a, pixelOffset + 1920);\n                                pixelBuffer.set(b, pixelOffset + 2240);\n                            }\n                            else if (type == 3) {\n                                var lineIndexA = this.readBits(13);\n                                var lineIndexB = KWZ_TABLE_3[lineIndexA];\n                                var a = KWZ_LINE_TABLE.subarray(lineIndexA * 8, lineIndexA * 8 + 8);\n                                var b = KWZ_LINE_TABLE.subarray(lineIndexB * 8, lineIndexB * 8 + 8);\n                                pixelBuffer.set(a, pixelOffset);\n                                pixelBuffer.set(b, pixelOffset + 320);\n                                pixelBuffer.set(a, pixelOffset + 640);\n                                pixelBuffer.set(b, pixelOffset + 960);\n                                pixelBuffer.set(a, pixelOffset + 1280);\n                                pixelBuffer.set(b, pixelOffset + 1600);\n                                pixelBuffer.set(a, pixelOffset + 1920);\n                                pixelBuffer.set(b, pixelOffset + 2240);\n                            }\n                            else if (type == 4) {\n                                var mask = this.readBits(8);\n                                for (var line = 0; line < 8; line++) {\n                                    var lineIndex = 0;\n                                    if (mask & (1 << line)) {\n                                        lineIndex = KWZ_TABLE_1[this.readBits(5)];\n                                    }\n                                    else {\n                                        lineIndex = this.readBits(13);\n                                    }\n                                    var pixels = KWZ_LINE_TABLE.subarray(lineIndex * 8, lineIndex * 8 + 8);\n                                    pixelBuffer.set(pixels, pixelOffset + line * 320);\n                                }\n                            }\n                            else if (type == 5) {\n                                skip = this.readBits(5);\n                                continue;\n                            }\n                            // type 6 doesnt exist\n                            else if (type == 7) {\n                                var pattern = this.readBits(2);\n                                var useTable = this.readBits(1);\n                                var lineIndexA = 0;\n                                var lineIndexB = 0;\n                                if (useTable) {\n                                    lineIndexA = KWZ_TABLE_1[this.readBits(5)];\n                                    lineIndexB = KWZ_TABLE_1[this.readBits(5)];\n                                    pattern = (pattern + 1) % 4;\n                                }\n                                else {\n                                    lineIndexA = this.readBits(13);\n                                    lineIndexB = this.readBits(13);\n                                }\n                                var a = KWZ_LINE_TABLE.subarray(lineIndexA * 8, lineIndexA * 8 + 8);\n                                var b = KWZ_LINE_TABLE.subarray(lineIndexB * 8, lineIndexB * 8 + 8);\n                                if (pattern == 0) {\n                                    pixelBuffer.set(a, pixelOffset);\n                                    pixelBuffer.set(b, pixelOffset + 320);\n                                    pixelBuffer.set(a, pixelOffset + 640);\n                                    pixelBuffer.set(b, pixelOffset + 960);\n                                    pixelBuffer.set(a, pixelOffset + 1280);\n                                    pixelBuffer.set(b, pixelOffset + 1600);\n                                    pixelBuffer.set(a, pixelOffset + 1920);\n                                    pixelBuffer.set(b, pixelOffset + 2240);\n                                }\n                                else if (pattern == 1) {\n                                    pixelBuffer.set(a, pixelOffset);\n                                    pixelBuffer.set(a, pixelOffset + 320);\n                                    pixelBuffer.set(b, pixelOffset + 640);\n                                    pixelBuffer.set(a, pixelOffset + 960);\n                                    pixelBuffer.set(a, pixelOffset + 1280);\n                                    pixelBuffer.set(b, pixelOffset + 1600);\n                                    pixelBuffer.set(a, pixelOffset + 1920);\n                                    pixelBuffer.set(a, pixelOffset + 2240);\n                                }\n                                else if (pattern == 2) {\n                                    pixelBuffer.set(a, pixelOffset);\n                                    pixelBuffer.set(b, pixelOffset + 320);\n                                    pixelBuffer.set(a, pixelOffset + 640);\n                                    pixelBuffer.set(a, pixelOffset + 960);\n                                    pixelBuffer.set(b, pixelOffset + 1280);\n                                    pixelBuffer.set(a, pixelOffset + 1600);\n                                    pixelBuffer.set(a, pixelOffset + 1920);\n                                    pixelBuffer.set(b, pixelOffset + 2240);\n                                }\n                                else if (pattern == 3) {\n                                    pixelBuffer.set(a, pixelOffset);\n                                    pixelBuffer.set(b, pixelOffset + 320);\n                                    pixelBuffer.set(b, pixelOffset + 640);\n                                    pixelBuffer.set(a, pixelOffset + 960);\n                                    pixelBuffer.set(b, pixelOffset + 1280);\n                                    pixelBuffer.set(b, pixelOffset + 1600);\n                                    pixelBuffer.set(a, pixelOffset + 1920);\n                                    pixelBuffer.set(b, pixelOffset + 2240);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        this.prevDecodedFrame = frameIndex;\n        // return this._layers;\n        return [\n            new Uint8Array(this.layers[0].buffer),\n            new Uint8Array(this.layers[1].buffer),\n            new Uint8Array(this.layers[2].buffer),\n        ];\n    };\n    KwzParser.prototype.getFramePalette = function (frameIndex) {\n        var flags = this.frameMeta[frameIndex].flags;\n        var paletteMap = [\n            this.palette.WHITE,\n            this.palette.BLACK,\n            this.palette.RED,\n            this.palette.YELLOW,\n            this.palette.GREEN,\n            this.palette.BLUE,\n            this.palette.NONE\n        ];\n        return [\n            paletteMap[flags & 0xF],\n            paletteMap[(flags >> 8) & 0xF],\n            paletteMap[(flags >> 12) & 0xF],\n            paletteMap[(flags >> 16) & 0xF],\n            paletteMap[(flags >> 20) & 0xF],\n            paletteMap[(flags >> 24) & 0xF],\n            paletteMap[(flags >> 28) & 0xF],\n        ];\n    };\n    // retuns an uint8 array where each item is a pixel's palette index\n    KwzParser.prototype.getLayerPixels = function (frameIndex, layerIndex) {\n        if (this.prevDecodedFrame !== frameIndex) {\n            this.decodeFrame(frameIndex);\n        }\n        var layer = this.layers[layerIndex];\n        var image = new Uint8Array((KwzParser.width * KwzParser.height));\n        var paletteOffset = layerIndex * 2 + 1;\n        for (var index = 0; index < layer.length; index++) {\n            var pixel = layer[index];\n            if (pixel & 0xff00) {\n                image[index] = paletteOffset;\n            }\n            else if (pixel & 0x00ff) {\n                image[index] = paletteOffset + 1;\n            }\n        }\n        return image;\n    };\n    // retuns an uint8 array where each item is a pixel's palette index\n    KwzParser.prototype.getFramePixels = function (frameIndex, useGlobalPalette) {\n        var _this = this;\n        if (useGlobalPalette === void 0) { useGlobalPalette = false; }\n        var paletteMap;\n        if (useGlobalPalette) {\n            var framePalette = this.getFramePalette(frameIndex);\n            paletteMap = framePalette.map(function (color) { return KwzParser.globalPalette.indexOf(color); });\n        }\n        else {\n            paletteMap = [0, 1, 2, 3, 4, 5, 6];\n        }\n        var image = new Uint8Array((KwzParser.width * KwzParser.height));\n        image.fill(paletteMap[0]);\n        var layerOrder = this.getLayerOrder(frameIndex);\n        layerOrder.forEach(function (layerIndex) {\n            var layer = _this.getLayerPixels(frameIndex, layerIndex);\n            // merge layer into image result\n            for (var index = 0; index < layer.length; index++) {\n                var pixel = layer[index];\n                if (pixel !== 0) {\n                    image[index] = paletteMap[pixel];\n                }\n            }\n        });\n        return image;\n    };\n    KwzParser.prototype.decodeSoundFlags = function () {\n        return this.frameMeta.map(function (frame) {\n            var soundFlags = frame.soundFlags;\n            return [\n                soundFlags & 0x1,\n                (soundFlags >> 1) & 0x1,\n                (soundFlags >> 2) & 0x1,\n                (soundFlags >> 3) & 0x1,\n            ];\n        });\n    };\n    KwzParser.prototype.hasAudioTrack = function (trackIndex) {\n        var keys = ['bgm', 'se1', 'se2', 'se3', 'se4'];\n        var id = keys[trackIndex];\n        return this.soundMeta[id].length > 0;\n    };\n    KwzParser.prototype.decodeAudio = function (track) {\n        var meta = this.soundMeta[track];\n        var output = new Int16Array(16364 * 60);\n        var outputOffset = 0;\n        var adpcm = new Uint8Array(this.buffer, meta.offset, meta.length);\n        // initial decoder state\n        var prevDiff = 0;\n        var prevStepIndex = 40;\n        var sample, diff, stepIndex;\n        // loop through each byte in the raw adpcm data\n        for (var index = 0; index < adpcm.length; index++) {\n            var byte = adpcm[index];\n            var bitPos = 0;\n            while (bitPos < 8) {\n                if (prevStepIndex < 18 || bitPos == 6) {\n                    // isolate 2-bit sample\n                    sample = (byte >> bitPos) & 0x3;\n                    // get diff\n                    diff = prevDiff + ADPCM_SAMPLE_TABLE_2[sample + 4 * prevStepIndex];\n                    // get step index\n                    stepIndex = prevStepIndex + ADPCM_INDEX_TABLE_2[sample];\n                    bitPos += 2;\n                }\n                else {\n                    // isolate 4-bit sample\n                    sample = (byte >> bitPos) & 0xF;\n                    // get diff\n                    diff = prevDiff + ADPCM_SAMPLE_TABLE_4[sample + 16 * prevStepIndex];\n                    // get step index\n                    stepIndex = prevStepIndex + ADPCM_INDEX_TABLE_4[sample];\n                    bitPos += 4;\n                }\n                // clamp step index and diff\n                stepIndex = Math.max(0, Math.min(stepIndex, 79));\n                diff = Math.max(-2048, Math.min(diff, 2048));\n                // add result to output buffer\n                output[outputOffset] = (diff * 16);\n                outputOffset += 1;\n                // set prev decoder state\n                prevStepIndex = stepIndex;\n                prevDiff = diff;\n            }\n        }\n        return output.slice(0, outputOffset);\n    };\n    KwzParser.type = 'KWZ';\n    KwzParser.sampleRate = 16364;\n    KwzParser.width = 320;\n    KwzParser.height = 240;\n    KwzParser.globalPalette = [\n        PALETTE.BLACK,\n        PALETTE.WHITE,\n        PALETTE.RED,\n        PALETTE.YELLOW,\n        PALETTE.GREEN,\n        PALETTE.BLUE,\n        PALETTE.NONE,\n    ];\n    return KwzParser;\n}(DataStream));\nexport { KwzParser };\n","import { loadSource } from '../loader';\nimport { PpmParser } from './ppm';\nimport { KwzParser } from './kwz';\nexport function parseSource(source) {\n    return loadSource(source).then(function (arrayBuffer) {\n        // check the buffer's magic to identify which format it uses\n        var data = new DataView(arrayBuffer, 0, 4);\n        var magic = data.getUint32(0);\n        // check if magic is PARA (ppm magic)\n        if (magic === 0x50415241) {\n            return new PpmParser(arrayBuffer);\n        }\n        // check if magic is KFH (kwz magic)\n        else if ((magic & 0xFFFFFF00) === 0x4B464800) {\n            return new KwzParser(arrayBuffer);\n        }\n        return null;\n    });\n}\nexport * from './ppm';\nexport * from './kwz';\n","import { DataStream } from '../utils/dataStream';\nvar WavEncoder = /** @class */ (function () {\n    function WavEncoder(sampleRate, channels, bitsPerSample) {\n        if (channels === void 0) { channels = 1; }\n        if (bitsPerSample === void 0) { bitsPerSample = 16; }\n        this.sampleRate = sampleRate;\n        this.channels = channels;\n        this.bitsPerSample = bitsPerSample;\n        // Write WAV file header\n        // Reference: http://www.topherlee.com/software/pcm-tut-wavformat.html\n        var headerBuffer = new ArrayBuffer(44);\n        var header = new DataStream(headerBuffer);\n        // 'RIFF' indent\n        header.writeUtf8('RIFF');\n        // filesize (set later)\n        header.writeUint32(0);\n        // 'WAVE' indent\n        header.writeUtf8('WAVE');\n        // 'fmt ' section header\n        header.writeUtf8('fmt ');\n        // fmt section length\n        header.writeUint32(16);\n        // specify audio format is pcm (type 1)\n        header.writeUint16(1);\n        // number of audio channels\n        header.writeUint16(this.channels);\n        // audio sample rate\n        header.writeUint32(this.sampleRate);\n        // byterate = (sampleRate * bitsPerSample * channelCount) / 8\n        header.writeUint32((this.sampleRate * this.bitsPerSample * this.channels) / 8);\n        // blockalign = (bitsPerSample * channels) / 8\n        header.writeUint16((this.bitsPerSample * this.channels) / 8);\n        // bits per sample\n        header.writeUint16(this.bitsPerSample);\n        // 'data' section header\n        header.writeUtf8('data');\n        // data section length (set later)\n        header.writeUint32(0);\n        this.header = header;\n        this.pcmData = null;\n    }\n    WavEncoder.prototype.writeFrames = function (pcmData) {\n        var header = this.header;\n        // fill in filesize\n        header.seek(4);\n        header.writeUint32(header.byteLength + pcmData.byteLength);\n        // fill in data section length\n        header.seek(40);\n        header.writeUint32(pcmData.byteLength);\n        this.pcmData = pcmData;\n    };\n    WavEncoder.prototype.getBlob = function () {\n        return new Blob([this.header.buffer, this.pcmData.buffer], { type: 'audio/wav' });\n    };\n    return WavEncoder;\n}());\nexport { WavEncoder };\n","import vertexShader from './shader.vert';\nimport fragmentShader from './shader.frag';\n;\nvar ShaderType;\n(function (ShaderType) {\n    ShaderType[ShaderType[\"Vertex\"] = WebGLRenderingContext.VERTEX_SHADER] = \"Vertex\";\n    ShaderType[ShaderType[\"Fragment\"] = WebGLRenderingContext.FRAGMENT_SHADER] = \"Fragment\";\n})(ShaderType || (ShaderType = {}));\n;\nexport var TextureType;\n(function (TextureType) {\n    TextureType[TextureType[\"Alpha\"] = WebGLRenderingContext.ALPHA] = \"Alpha\";\n    TextureType[TextureType[\"LuminanceAlpha\"] = WebGLRenderingContext.LUMINANCE_ALPHA] = \"LuminanceAlpha\";\n})(TextureType || (TextureType = {}));\n;\n/** webgl canvas wrapper class */\nvar WebglCanvas = /** @class */ (function () {\n    function WebglCanvas(el, width, height, params) {\n        if (width === void 0) { width = 640; }\n        if (height === void 0) { height = 480; }\n        if (params === void 0) { params = { antialias: false, alpha: false }; }\n        this.uniforms = {};\n        this.refs = {\n            shaders: [],\n            textures: [],\n            buffers: []\n        };\n        this.width = el.width = width;\n        this.height = el.height = height;\n        var gl = el.getContext('webgl', params);\n        var program = gl.createProgram();\n        this.el = el;\n        this.gl = gl;\n        this.program = program;\n        // set up shaders\n        var vShader = this.createShader(ShaderType.Vertex, vertexShader);\n        var fShader = this.createShader(ShaderType.Fragment, fragmentShader);\n        gl.attachShader(program, vShader);\n        gl.attachShader(program, fShader);\n        // link program\n        gl.linkProgram(program);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n            var log = gl.getProgramInfoLog(program);\n            gl.deleteProgram(program);\n            throw new Error(log);\n        }\n        // activate the program\n        gl.useProgram(program);\n        // create quad that fills the screen, this will be our drawing surface\n        var vertBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, vertBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1]), gl.STATIC_DRAW);\n        gl.enableVertexAttribArray(0);\n        gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n        this.refs.buffers.push(vertBuffer);\n        // create texture to use as the layer bitmap\n        gl.activeTexture(gl.TEXTURE0);\n        var tex = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, tex);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        // get uniform locations\n        var uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n        for (var i = 0; i < uniformCount; i++) {\n            var name_1 = gl.getActiveUniform(program, i).name;\n            this.uniforms[name_1] = gl.getUniformLocation(program, name_1);\n        }\n        gl.uniform1i(this.uniforms['u_bitmap'], 0);\n        this.setCanvasSize(this.width, this.height);\n        this.refs.textures.push(tex);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        gl.enable(gl.BLEND);\n        gl.blendEquation(gl.FUNC_ADD);\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    }\n    WebglCanvas.prototype.createShader = function (type, source) {\n        var gl = this.gl;\n        var shader = gl.createShader(type);\n        gl.shaderSource(shader, source);\n        gl.compileShader(shader);\n        // test if shader compilation was successful\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n            var log = gl.getShaderInfoLog(shader);\n            gl.deleteShader(shader);\n            throw new Error(log);\n        }\n        this.refs.shaders.push(shader);\n        return shader;\n    };\n    WebglCanvas.prototype.setInputSize = function (width, height) {\n        this.gl.uniform2f(this.uniforms['u_textureSize'], width, height);\n    };\n    WebglCanvas.prototype.setCanvasSize = function (width, height) {\n        this.gl.uniform2f(this.uniforms['u_screenSize'], width, height);\n        this.el.width = width;\n        this.el.height = height;\n        this.width = width;\n        this.height = height;\n        this.gl.viewport(0, 0, width, height);\n    };\n    WebglCanvas.prototype.setLayerType = function (textureType) {\n        this.textureType = textureType;\n    };\n    WebglCanvas.prototype.toImage = function (type) {\n        return this.el.toDataURL(type);\n    };\n    WebglCanvas.prototype.setColor = function (color, value) {\n        this.gl.uniform4f(this.uniforms[color], value[0] / 255, value[1] / 255, value[2] / 255, 1);\n    };\n    WebglCanvas.prototype.setPaperColor = function (value) {\n        this.gl.clearColor(value[0] / 255, value[1] / 255, value[2] / 255, 1);\n    };\n    WebglCanvas.prototype.drawLayer = function (buffer, width, height, color1, color2) {\n        var gl = this.gl;\n        gl.activeTexture(gl.TEXTURE0);\n        gl.texImage2D(gl.TEXTURE_2D, 0, this.textureType, width, height, 0, this.textureType, gl.UNSIGNED_BYTE, buffer);\n        this.setColor('u_color1', color1);\n        this.setColor('u_color2', color2);\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    };\n    WebglCanvas.prototype.resize = function (width, height) {\n        if (width === void 0) { width = 640; }\n        if (height === void 0) { height = 480; }\n        this.setCanvasSize(width, height);\n    };\n    WebglCanvas.prototype.clear = function () {\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n    };\n    WebglCanvas.prototype.destroy = function () {\n        // free resources\n        var refs = this.refs;\n        var gl = this.gl;\n        refs.shaders.forEach(function (shader) {\n            gl.deleteShader(shader);\n        });\n        refs.shaders = [];\n        refs.textures.forEach(function (texture) {\n            gl.deleteTexture(texture);\n        });\n        refs.textures = [];\n        refs.buffers.forEach(function (buffer) {\n            gl.deleteBuffer(buffer);\n        });\n        refs.buffers = [];\n        gl.deleteProgram(this.program);\n        // shrink the canvas to reduce memory usage until it is garbage collected\n        gl.canvas.width = 1;\n        gl.canvas.height = 1;\n    };\n    return WebglCanvas;\n}());\nexport { WebglCanvas };\n","import { WavEncoder } from '../encoders/wav';\nvar AudioTrack = /** @class */ (function () {\n    function AudioTrack(id) {\n        this.playbackRate = 1;\n        this.id = id;\n        this.channelCount = 1;\n        this.bitsPerSample = 16;\n        this.sampleRate = 0;\n        this.audio = document.createElement('audio');\n        this.audio.preload = 'auto';\n        this.isActive = false;\n    }\n    AudioTrack.prototype.set = function (pcmData, playbackRate) {\n        // the HTML5 audio element supports PCM audio if it's in a WAV wrapper\n        var wav = new WavEncoder(this.sampleRate * playbackRate, this.channelCount, this.bitsPerSample);\n        wav.writeFrames(pcmData);\n        this.url = window.URL.createObjectURL(wav.getBlob());\n        // use the blob url for the audio element\n        this.audio.src = this.url;\n        this.isActive = true;\n        this.playbackRate = playbackRate;\n        this.length = pcmData.length;\n    };\n    Object.defineProperty(AudioTrack.prototype, \"duration\", {\n        get: function () {\n            return this.audio.duration;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AudioTrack.prototype.unset = function () {\n        if (this.isActive) {\n            window.URL.revokeObjectURL(this.url);\n            this.audio.src = '';\n            this.audio.load();\n            this.isActive = false;\n            this.playbackRate = 1;\n            this.length = null;\n        }\n    };\n    AudioTrack.prototype.start = function (offset) {\n        if (offset === void 0) { offset = 0; }\n        if (this.isActive) {\n            this.audio.currentTime = offset;\n            this.audio.play();\n        }\n    };\n    AudioTrack.prototype.stop = function () {\n        if (this.isActive) {\n            this.audio.pause();\n        }\n    };\n    return AudioTrack;\n}());\nexport { AudioTrack };\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { parseSource } from '../parser';\nimport { AudioTrack } from './audio';\nimport { WebglCanvas, TextureType } from '../webgl/canvas';\n/** flipnote player API, based on HTMLMediaElement (https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement) */\nvar Player = /** @class */ (function () {\n    function Player(el, width, height) {\n        this.loop = false;\n        this.paused = true;\n        this.smoothRendering = false;\n        this.isOpen = false;\n        this.events = {};\n        this.frame = -1;\n        this.playbackLoop = null;\n        this.hasPlaybackStarted = false;\n        // if `el` is a string, use it to select an Element, else assume it's an element\n        el = ('string' == typeof el) ? document.querySelector(el) : el;\n        this.canvas = new WebglCanvas(el, width, height);\n        // this.customPalette = null;\n        this.audioTracks = [\n            new AudioTrack('se1'),\n            new AudioTrack('se2'),\n            new AudioTrack('se3'),\n            new AudioTrack('se4'),\n            new AudioTrack('bgm'),\n        ];\n    }\n    Object.defineProperty(Player.prototype, \"currentFrame\", {\n        get: function () {\n            return this.frame;\n        },\n        set: function (index) {\n            this.setFrame(index);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"currentTime\", {\n        get: function () {\n            return this.isOpen ? this.currentFrame * (1 / this.framerate) : null;\n        },\n        set: function (value) {\n            if ((this.isOpen) && (value < this.duration) && (value > 0)) {\n                this.setFrame(Math.round(value / (1 / this.framerate)));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"volume\", {\n        get: function () {\n            return this.audioTracks[3].audio.volume;\n        },\n        set: function (value) {\n            for (var i = 0; i < this.audioTracks.length; i++) {\n                this.audioTracks[i].audio.volume = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"muted\", {\n        get: function () {\n            return this.audioTracks[3].audio.muted;\n        },\n        set: function (value) {\n            for (var i = 0; i < this.audioTracks.length; i++) {\n                this.audioTracks[i].audio.muted = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"duration\", {\n        get: function () {\n            return this.isOpen ? this.frameCount * (1 / this.framerate) : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"framerate\", {\n        get: function () {\n            return this.note.framerate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"frameCount\", {\n        get: function () {\n            return this.note.frameCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"frameSpeed\", {\n        get: function () {\n            return this.note.frameSpeed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"audiorate\", {\n        get: function () {\n            return (1 / this.note.bgmrate) / (1 / this.note.framerate);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Player.prototype.open = function (source) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (this.isOpen)\n                    this.close();\n                return [2 /*return*/, parseSource(source)\n                        .then(function (note) {\n                        _this.load(note);\n                    })\n                        .catch(function (err) {\n                        console.error('Error loading Flipnote:', err);\n                    })];\n            });\n        });\n    };\n    Player.prototype.load = function (note) {\n        this.note = note;\n        this.meta = note.meta;\n        this.type = note.type;\n        this.loop = note.meta.loop;\n        this.paused = true;\n        this.isOpen = true;\n        this.audioTracks.forEach(function (track) {\n            track.sampleRate = note.sampleRate;\n        });\n        // if (this.customPalette) {\n        //   this.setPalette(this.customPalette);\n        // }\n        if (this.note.hasAudioTrack(1))\n            this.audioTracks[0].set(this.note.decodeAudio('se1'), 1);\n        if (this.note.hasAudioTrack(2))\n            this.audioTracks[1].set(this.note.decodeAudio('se2'), 1);\n        if (this.note.hasAudioTrack(3))\n            this.audioTracks[2].set(this.note.decodeAudio('se3'), 1);\n        if (this.type === 'KWZ' && this.note.hasAudioTrack(4))\n            this.audioTracks[3].set(this.note.decodeAudio('se4'), 1);\n        if (this.note.hasAudioTrack(0))\n            this.audioTracks[4].set(this.note.decodeAudio('bgm'), this.audiorate);\n        this.seFlags = this.note.decodeSoundFlags();\n        this.playbackLoop = null;\n        this.hasPlaybackStarted = false;\n        this.layerVisibility = {\n            1: true,\n            2: true,\n            3: true\n        };\n        this.canvas.setInputSize(note.width, note.height);\n        this.canvas.setLayerType(this.type === 'PPM' ? TextureType.Alpha : TextureType.LuminanceAlpha);\n        this.setFrame(this.note.thumbFrameIndex);\n        this.emit('load');\n    };\n    Player.prototype.close = function () {\n        this.pause();\n        this.note = null;\n        this.isOpen = false;\n        this.paused = true;\n        this.loop = null;\n        this.meta = null;\n        this.frame = 0;\n        for (var i = 0; i < this.audioTracks.length; i++) {\n            this.audioTracks[i].unset();\n        }\n        // this._seFlags = null;\n        this.hasPlaybackStarted = null;\n        this.canvas.clear();\n        // this._imgCanvas.clear();\n    };\n    Player.prototype.destroy = function () {\n        this.close();\n        this.canvas.destroy();\n        // this._imgCanvas.destroy();\n    };\n    Player.prototype.playFrameSe = function (index) {\n        var flags = this.seFlags[index];\n        for (var i = 0; i < flags.length; i++) {\n            if (flags[i] && this.audioTracks[i].isActive)\n                this.audioTracks[i].start();\n        }\n    };\n    Player.prototype.playBgm = function () {\n        this.audioTracks[4].start(this.currentTime);\n    };\n    Player.prototype.stopAudio = function () {\n        for (var i = 0; i < this.audioTracks.length; i++) {\n            this.audioTracks[i].stop();\n        }\n    };\n    Player.prototype.play = function () {\n        var _this = this;\n        if ((!this.isOpen) || (!this.paused))\n            return null;\n        this.paused = false;\n        if ((!this.hasPlaybackStarted) || ((!this.loop) && (this.currentFrame == this.frameCount - 1)))\n            this.frame = 0;\n        this.playBgm();\n        this.playbackLoop = window.setInterval(function () {\n            if (_this.paused)\n                clearInterval(_this.playbackLoop);\n            // if the end of the flipnote has been reached\n            if (_this.currentFrame >= _this.frameCount - 1) {\n                _this.stopAudio();\n                if (_this.loop) {\n                    _this.firstFrame();\n                    _this.playBgm();\n                    _this.emit('playback:loop');\n                }\n                else {\n                    _this.pause();\n                    _this.emit('playback:end');\n                }\n            }\n            else {\n                _this.playFrameSe(_this.currentFrame);\n                _this.nextFrame();\n            }\n        }, 1000 / this.framerate);\n        this.hasPlaybackStarted = true;\n        this.emit('playback:start');\n    };\n    Player.prototype.pause = function () {\n        if ((!this.isOpen) || (this.paused))\n            return null;\n        // break the playback loop\n        window.clearInterval(this.playbackLoop);\n        this.paused = true;\n        this.stopAudio();\n        this.emit('playback:stop');\n    };\n    // getFrameImage(index, width, height, type, encoderOptions) {\n    //   if (!this._isOpen) return null;\n    //   var canvas = this._imgCanvas;\n    //   if (canvas.width !== width || canvas.height !== height) canvas.resize(width, height);\n    //   // clamp frame index\n    //   index = (index == 'thumb') ? (this.note.thumbFrameIndex) : (Math.max(0, Math.min(index, this.frameCount - 1)));\n    //   this.drawFrame(index, canvas);\n    //   return canvas.toImage(type, encoderOptions);\n    // }\n    Player.prototype.setPalette = function (palette) {\n        // this.customPalette = palette;\n        this.note.palette = palette;\n        this.forceUpdate();\n    };\n    Player.prototype.setFrame = function (index) {\n        if ((!this.isOpen) || (index === this.currentFrame))\n            return null;\n        // clamp frame index\n        index = Math.max(0, Math.min(Math.floor(index), this.frameCount - 1));\n        this.frame = index;\n        this.drawFrame(index, this.canvas);\n        this.emit('frame:update', this.currentFrame);\n    };\n    Player.prototype.drawFrame = function (frameIndex, canvas) {\n        var _this = this;\n        var colors = this.note.getFramePalette(frameIndex);\n        var layerBuffers = this.note.decodeFrame(frameIndex);\n        canvas.setPaperColor(colors[0]);\n        canvas.clear();\n        if (this.note.type === 'PPM') {\n            if (this.layerVisibility[2])\n                canvas.drawLayer(layerBuffers[1], 256, 192, colors[2], [0, 0, 0, 0]);\n            if (this.layerVisibility[1])\n                canvas.drawLayer(layerBuffers[0], 256, 192, colors[1], [0, 0, 0, 0]);\n        }\n        else if (this.note.type === 'KWZ') {\n            // loop through each layer\n            this.note.getLayerOrder(frameIndex).forEach(function (layerIndex) {\n                // only draw layer if it's visible\n                if (_this.layerVisibility[layerIndex + 1]) {\n                    canvas.drawLayer(layerBuffers[layerIndex], 320, 240, colors[layerIndex * 2 + 1], colors[layerIndex * 2 + 2]);\n                }\n            });\n        }\n    };\n    Player.prototype.thumbnailFrame = function () {\n        this.currentFrame = this.note.thumbFrameIndex;\n    };\n    Player.prototype.nextFrame = function () {\n        if ((this.loop) && (this.currentFrame >= this.frameCount - 1)) {\n            this.currentFrame = 0;\n        }\n        else {\n            this.currentFrame += 1;\n        }\n    };\n    Player.prototype.prevFrame = function () {\n        if ((this.loop) && (this.currentFrame <= 0)) {\n            this.currentFrame = this.frameCount - 1;\n        }\n        else {\n            this.currentFrame -= 1;\n        }\n    };\n    Player.prototype.lastFrame = function () {\n        this.currentFrame = this.frameCount - 1;\n    };\n    Player.prototype.firstFrame = function () {\n        this.currentFrame = 0;\n    };\n    Player.prototype.resize = function (width, height) {\n        this.canvas.resize(width, height);\n        this.forceUpdate();\n    };\n    Player.prototype.setLayerVisibility = function (index, value) {\n        this.layerVisibility[index] = value;\n        this.forceUpdate();\n    };\n    Player.prototype.forceUpdate = function () {\n        if (this.isOpen) {\n            this.drawFrame(this.currentFrame, this.canvas);\n        }\n    };\n    Player.prototype.on = function (eventType, callback) {\n        var events = this.events;\n        (events[eventType] || (events[eventType] = [])).push(callback);\n    };\n    Player.prototype.off = function (eventType, callback) {\n        var callbackList = this.events[eventType];\n        if (callbackList)\n            callbackList.splice(callbackList.indexOf(callback), 1);\n    };\n    Player.prototype.emit = function (eventType) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var callbackList = this.events[eventType] || [];\n        for (var i = 0; i < callbackList.length; i++) {\n            callbackList[i].apply(null, args);\n        }\n    };\n    return Player;\n}());\nexport { Player };\n","import { DataStream } from '../utils/dataStream';\n// round number to nearest multiple of n\nexport function roundToNearest(value, n) {\n    return Math.ceil(value / n) * n;\n}\n// simple bitmap class for rendering images\n// https://en.wikipedia.org/wiki/BMP_file_format\nvar BitmapEncoder = /** @class */ (function () {\n    function BitmapEncoder(width, height, bpp) {\n        this.width = width;\n        this.height = height;\n        this.vWidth = roundToNearest(width, 4);\n        this.vHeight = roundToNearest(height, 4);\n        this.bpp = bpp;\n        this.fileHeader = new DataStream(new ArrayBuffer(14));\n        this.fileHeader.writeUtf8('BM'); // 'BM' file magic\n        // using BITMAPV4HEADER dib header variant:\n        this.dibHeader = new DataStream(new ArrayBuffer(108));\n        this.dibHeader.writeUint32(108); // DIB header length\n        this.dibHeader.writeInt32(width); // width\n        this.dibHeader.writeInt32(height); // height\n        this.dibHeader.writeUint16(1); // color panes (always 1)\n        this.dibHeader.writeUint16(bpp); // bits per pixel\n        this.dibHeader.writeUint32(3); // compression method (3 = BI_BITFIELDS for rgba, 0 = no compression for 8 bit)\n        this.dibHeader.writeUint32((this.vWidth * this.height) / (bpp / 8)); // image data size, (width * height) / bits per pixel\n        this.dibHeader.writeUint32(3780); // x res, pixel per meter\n        this.dibHeader.writeUint32(3780); // y res, pixel per meter\n        this.dibHeader.writeUint32(0); // the number of colors in the color palette, set by setPalette() method\n        this.dibHeader.writeUint32(0); // the number of important colors used, or 0 when every color is important; generally ignored\n        this.dibHeader.writeUint32(0x00FF0000); // red channel bitmask\n        this.dibHeader.writeUint32(0x0000FF00); // green channel bitmask\n        this.dibHeader.writeUint32(0x000000FF); // blue channel bitmask\n        this.dibHeader.writeUint32(0xFF000000); // alpha channel bitmask\n        this.dibHeader.writeUtf8('Win '); // LCS_WINDOWS_COLOR_SPACE 'Win '\n        /// rest can be left as nulls\n    }\n    BitmapEncoder.fromFlipnoteFrame = function (flipnote, frameIndex) {\n        var bmp = new BitmapEncoder(flipnote.width, flipnote.height, 8);\n        bmp.setPixels(flipnote.getFramePixels(frameIndex));\n        bmp.setPalette(flipnote.getFramePalette(frameIndex));\n        return bmp;\n    };\n    BitmapEncoder.prototype.setFilelength = function (value) {\n        this.fileHeader.seek(2);\n        this.fileHeader.writeUint32(value);\n    };\n    BitmapEncoder.prototype.setPixelOffset = function (value) {\n        this.fileHeader.seek(10);\n        this.fileHeader.writeUint32(value);\n    };\n    BitmapEncoder.prototype.setCompression = function (value) {\n        this.dibHeader.seek(16);\n        this.dibHeader.writeUint32(value);\n    };\n    BitmapEncoder.prototype.setPaletteCount = function (value) {\n        this.dibHeader.seek(32);\n        this.dibHeader.writeUint32(value);\n    };\n    BitmapEncoder.prototype.setPalette = function (colors) {\n        var palette = new Uint32Array(Math.pow(2, this.bpp));\n        for (var index = 0; index < colors.length; index++) {\n            var color = colors[index % colors.length];\n            // bmp color order is ARGB\n            palette[index] = 0xFF000000 | (color[0] << 16) | (color[1] << 8) | (color[2]);\n        }\n        this.setPaletteCount(palette.length); // set number of colors in DIB header\n        this.setCompression(0); // set compression to 0 so we're not using 32 bit\n        this.palette = palette;\n    };\n    BitmapEncoder.prototype.setPixels = function (pixelData) {\n        var pixels;\n        var pixelsLength = this.vWidth * this.height;\n        switch (this.bpp) {\n            case 8:\n                pixels = new Uint8Array(pixelsLength);\n                break;\n            case 32:\n                pixels = new Uint32Array(pixelsLength);\n                break;\n        }\n        // pixel rows are stored 'upside down' in bmps\n        var w = this.width;\n        for (var y = 0; y < this.height; y++) {\n            var srcOffset = (w * this.height) - ((y + 1) * w);\n            var destOffset = (y * this.width);\n            pixels.set(pixelData.slice(srcOffset, srcOffset + this.width), destOffset);\n        }\n        this.pixels = pixels;\n    };\n    BitmapEncoder.prototype.getBlob = function () {\n        var sections = [this.fileHeader.buffer, this.dibHeader.buffer];\n        var headerByteLength = this.fileHeader.byteLength + this.dibHeader.byteLength;\n        switch (this.bpp) {\n            case 1:\n            case 4:\n            case 8:\n                this.setFilelength(headerByteLength + this.pixels.byteLength + this.palette.byteLength);\n                this.setPixelOffset(headerByteLength + this.palette.byteLength);\n                sections = sections.concat([this.palette.buffer, this.pixels.buffer]);\n                break;\n            case 16:\n            case 32:\n                this.setFilelength(headerByteLength + this.pixels.byteLength);\n                this.setPixelOffset(headerByteLength);\n                sections = sections.concat([this.pixels.buffer]);\n                break;\n        }\n        return new Blob(sections, { type: 'image/bitmap' });\n    };\n    BitmapEncoder.prototype.getUrl = function () {\n        return window.URL.createObjectURL(this.getBlob());\n    };\n    BitmapEncoder.prototype.getImage = function () {\n        var img = new Image(this.width, this.height);\n        img.src = this.getUrl();\n        return img;\n    };\n    return BitmapEncoder;\n}());\nexport { BitmapEncoder };\n","var ByteArray = /** @class */ (function () {\n    function ByteArray() {\n        this.page = -1;\n        this.pages = [];\n        this.cursor = 0;\n        this.newPage();\n    }\n    ByteArray.prototype.newPage = function () {\n        this.pages[++this.page] = new Uint8Array(ByteArray.pageSize);\n        this.cursor = 0;\n    };\n    ByteArray.prototype.getData = function () {\n        var _this = this;\n        var data = new Uint8Array((this.page) * ByteArray.pageSize + this.cursor);\n        this.pages.map(function (page, index) {\n            if (index === _this.page) {\n                data.set(page.slice(0, _this.cursor), index * ByteArray.pageSize);\n            }\n            else {\n                data.set(page, index * ByteArray.pageSize);\n            }\n        });\n        return data;\n    };\n    ByteArray.prototype.getBuffer = function () {\n        var data = this.getData();\n        return data.buffer;\n    };\n    ByteArray.prototype.writeByte = function (val) {\n        if (this.cursor >= ByteArray.pageSize)\n            this.newPage();\n        this.pages[this.page][this.cursor++] = val;\n    };\n    ByteArray.prototype.writeBytes = function (array, offset, length) {\n        for (var l = length || array.length, i = offset || 0; i < l; i++)\n            this.writeByte(array[i]);\n    };\n    ByteArray.pageSize = 4096;\n    return ByteArray;\n}());\nexport { ByteArray };\n","/*\n  LZWEncoder.js\n\n  Authors\n  Kevin Weiner (original Java version - kweiner@fmsware.com)\n  Thibault Imbert (AS3 version - bytearray.org)\n  Johan Nordberg (JS version - code@johan-nordberg.com)\n  James Daniel (ES6/TS version)\n\n  Acknowledgements\n  GIFCOMPR.C - GIF Image compression routines\n  Lempel-Ziv compression based on 'compress'. GIF modifications by\n  David Rowley (mgardi@watdcsu.waterloo.edu)\n  GIF Image compression - modified 'compress'\n  Based on: compress.c - File compression ala IEEE Computer, June 1984.\n  By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\n  Jim McKie (decvax!mcvax!jim)\n  Steve Davies (decvax!vax135!petsd!peora!srd)\n  Ken Turkowski (decvax!decwrl!turtlevax!ken)\n  James A. Woods (decvax!ihnp4!ames!jaw)\n  Joe Orost (decvax!vax135!petsd!joe)\n*/\nvar EOF = -1;\nvar BITS = 12;\nvar HSIZE = 5003; // 80% occupancy\nvar masks = [\n    0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F,\n    0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF,\n    0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF\n];\nvar LZWEncoder = /** @class */ (function () {\n    function LZWEncoder(width, height, pixels, colorDepth) {\n        this.accum = new Uint8Array(256);\n        this.htab = new Int32Array(HSIZE);\n        this.codetab = new Int32Array(HSIZE);\n        this.cur_accum = 0;\n        this.cur_bits = 0;\n        this.curPixel = 0;\n        this.free_ent = 0; // first unused entry\n        // block compression parameters -- after all codes are used up,\n        // and compression rate changes, start over.\n        this.clear_flg = false;\n        // Algorithm: use open addressing double hashing (no chaining) on the\n        // prefix code / next character combination. We do a variant of Knuth's\n        // algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\n        // secondary probe. Here, the modular division first probe is gives way\n        // to a faster exclusive-or manipulation. Also do block compression with\n        // an adaptive reset, whereby the code table is cleared when the compression\n        // ratio decreases, but after the table fills. The variable-length output\n        // codes are re-sized at this point, and a special CLEAR code is generated\n        // for the decompressor. Late addition: construct the table according to\n        // file size for noticeable speed improvement on small files. Please direct\n        // questions about this implementation to ames!jaw.\n        this.g_init_bits = undefined;\n        this.ClearCode = undefined;\n        this.EOFCode = undefined;\n        this.width = width;\n        this.height = height;\n        this.pixels = pixels;\n        this.colorDepth = colorDepth;\n        this.initCodeSize = Math.max(2, this.colorDepth);\n        this.accum = new Uint8Array(256);\n        this.htab = new Int32Array(HSIZE);\n        this.codetab = new Int32Array(HSIZE);\n        this.cur_accum = 0;\n        this.cur_bits = 0;\n        this.a_count;\n        this.remaining;\n        this.curPixel = 0;\n        this.free_ent = 0; // first unused entry\n        this.maxcode;\n        // block compression parameters -- after all codes are used up,\n        // and compression rate changes, start over.\n        this.clear_flg = false;\n        // Algorithm: use open addressing double hashing (no chaining) on the\n        // prefix code / next character combination. We do a variant of Knuth's\n        // algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\n        // secondary probe. Here, the modular division first probe is gives way\n        // to a faster exclusive-or manipulation. Also do block compression with\n        // an adaptive reset, whereby the code table is cleared when the compression\n        // ratio decreases, but after the table fills. The variable-length output\n        // codes are re-sized at this point, and a special CLEAR code is generated\n        // for the decompressor. Late addition: construct the table according to\n        // file size for noticeable speed improvement on small files. Please direct\n        // questions about this implementation to ames!jaw.\n        this.g_init_bits = undefined;\n        this.ClearCode = undefined;\n        this.EOFCode = undefined;\n    }\n    // Add a character to the end of the current packet, and if it is 254\n    // characters, flush the packet to disk.\n    LZWEncoder.prototype.char_out = function (c, outs) {\n        this.accum[this.a_count++] = c;\n        if (this.a_count >= 254)\n            this.flush_char(outs);\n    };\n    // Clear out the hash table\n    // table clear for block compress\n    LZWEncoder.prototype.cl_block = function (outs) {\n        this.cl_hash(HSIZE);\n        this.free_ent = this.ClearCode + 2;\n        this.clear_flg = true;\n        this.output(this.ClearCode, outs);\n    };\n    // Reset code table\n    LZWEncoder.prototype.cl_hash = function (hsize) {\n        for (var i = 0; i < hsize; ++i)\n            this.htab[i] = -1;\n    };\n    LZWEncoder.prototype.compress = function (init_bits, outs) {\n        var fcode, c, i, ent, disp, hsize_reg, hshift;\n        // Set up the globals: this.g_init_bits - initial number of bits\n        this.g_init_bits = init_bits;\n        // Set up the necessary values\n        this.clear_flg = false;\n        this.n_bits = this.g_init_bits;\n        this.maxcode = this.get_maxcode(this.n_bits);\n        this.ClearCode = 1 << (init_bits - 1);\n        this.EOFCode = this.ClearCode + 1;\n        this.free_ent = this.ClearCode + 2;\n        this.a_count = 0; // clear packet\n        ent = this.nextPixel();\n        hshift = 0;\n        for (fcode = HSIZE; fcode < 65536; fcode *= 2)\n            ++hshift;\n        hshift = 8 - hshift; // set hash code range bound\n        hsize_reg = HSIZE;\n        this.cl_hash(hsize_reg); // clear hash table\n        this.output(this.ClearCode, outs);\n        outer_loop: while ((c = this.nextPixel()) != EOF) {\n            fcode = (c << BITS) + ent;\n            i = (c << hshift) ^ ent; // xor hashing\n            if (this.htab[i] === fcode) {\n                ent = this.codetab[i];\n                continue;\n            }\n            else if (this.htab[i] >= 0) { // non-empty slot\n                disp = hsize_reg - i; // secondary hash (after G. Knott)\n                if (i === 0)\n                    disp = 1;\n                do {\n                    if ((i -= disp) < 0)\n                        i += hsize_reg;\n                    if (this.htab[i] === fcode) {\n                        ent = this.codetab[i];\n                        continue outer_loop;\n                    }\n                } while (this.htab[i] >= 0);\n            }\n            this.output(ent, outs);\n            ent = c;\n            if (this.free_ent < 1 << BITS) {\n                this.codetab[i] = this.free_ent++; // code -> hasthis.htable\n                this.htab[i] = fcode;\n            }\n            else {\n                this.cl_block(outs);\n            }\n        }\n        // Put out the final code.\n        this.output(ent, outs);\n        this.output(this.EOFCode, outs);\n    };\n    LZWEncoder.prototype.encode = function (outs) {\n        outs.writeByte(this.initCodeSize); // write 'initial code size' byte\n        this.remaining = this.width * this.height; // reset navigation variables\n        this.curPixel = 0;\n        this.compress(this.initCodeSize + 1, outs); // compress and write the pixel data\n        outs.writeByte(0); // write block terminator\n    };\n    // Flush the packet to disk, and reset the this.accumulator\n    LZWEncoder.prototype.flush_char = function (outs) {\n        if (this.a_count > 0) {\n            outs.writeByte(this.a_count);\n            outs.writeBytes(this.accum, 0, this.a_count);\n            this.a_count = 0;\n        }\n    };\n    LZWEncoder.prototype.get_maxcode = function (n_bits) {\n        return (1 << n_bits) - 1;\n    };\n    // Return the next pixel from the image\n    LZWEncoder.prototype.nextPixel = function () {\n        if (this.remaining === 0)\n            return EOF;\n        --this.remaining;\n        var pix = this.pixels[this.curPixel++];\n        return pix & 0xff;\n    };\n    LZWEncoder.prototype.output = function (code, outs) {\n        this.cur_accum &= masks[this.cur_bits];\n        if (this.cur_bits > 0)\n            this.cur_accum |= (code << this.cur_bits);\n        else\n            this.cur_accum = code;\n        this.cur_bits += this.n_bits;\n        while (this.cur_bits >= 8) {\n            this.char_out((this.cur_accum & 0xff), outs);\n            this.cur_accum >>= 8;\n            this.cur_bits -= 8;\n        }\n        // If the next entry is going to be too big for the code size,\n        // then increase it, if possible.\n        if (this.free_ent > this.maxcode || this.clear_flg) {\n            if (this.clear_flg) {\n                this.maxcode = this.get_maxcode(this.n_bits = this.g_init_bits);\n                this.clear_flg = false;\n            }\n            else {\n                ++this.n_bits;\n                if (this.n_bits == BITS)\n                    this.maxcode = 1 << BITS;\n                else\n                    this.maxcode = this.get_maxcode(this.n_bits);\n            }\n        }\n        if (code == this.EOFCode) {\n            // At EOF, write the rest of the buffer.\n            while (this.cur_bits > 0) {\n                this.char_out((this.cur_accum & 0xff), outs);\n                this.cur_accum >>= 8;\n                this.cur_bits -= 8;\n            }\n            this.flush_char(outs);\n        }\n    };\n    return LZWEncoder;\n}());\nexport { LZWEncoder };\n","import { DataStream } from '../utils/dataStream';\nimport { ByteArray } from '../utils/byteArray';\nimport { LZWEncoder } from './lzw';\nvar GifEncoder = /** @class */ (function () {\n    function GifEncoder(width, height) {\n        this.delay = 100;\n        // -1 = no repeat, 0 = forever. anything else is repeat count\n        this.repeat = -1;\n        this.colorDepth = 8;\n        this.palette = [];\n        this.width = width;\n        this.height = height;\n        this.data = new ByteArray();\n    }\n    GifEncoder.fromFlipnote = function (flipnote) {\n        var gif = new GifEncoder(flipnote.width, flipnote.height);\n        gif.palette = flipnote.globalPalette;\n        gif.delay = 100 / flipnote.framerate;\n        gif.repeat = flipnote.meta.loop ? -1 : 0;\n        gif.init();\n        for (var frameIndex = 0; frameIndex < flipnote.frameCount; frameIndex++) {\n            gif.writeFrame(flipnote.getFramePixels(frameIndex, true));\n        }\n        return gif;\n    };\n    GifEncoder.fromFlipnoteFrame = function (flipnote, frameIndex) {\n        var gif = new GifEncoder(flipnote.width, flipnote.height);\n        gif.palette = flipnote.globalPalette;\n        gif.delay = 100 / flipnote.framerate;\n        gif.repeat = flipnote.meta.loop ? -1 : 0;\n        gif.init();\n        gif.writeFrame(flipnote.getFramePixels(frameIndex, true));\n        return gif;\n    };\n    GifEncoder.prototype.init = function () {\n        var paletteSize = this.palette.length;\n        for (var p = 1; 1 << p < paletteSize; p += 1) {\n            continue;\n        }\n        this.colorDepth = p;\n        this.writeHeader();\n        this.writeColorTable();\n        this.writeNetscapeExt();\n    };\n    GifEncoder.prototype.writeHeader = function () {\n        var header = new DataStream(new ArrayBuffer(13));\n        header.writeUtf8('GIF89a');\n        // Logical Screen Descriptor\n        header.writeUint16(this.width);\n        header.writeUint16(this.height);\n        header.writeUint8(0x80 | // 1 : global color table flag = 1 (gct used)\n            (this.colorDepth - 1) // 6-8 : gct size\n        );\n        header.writeUint8(0);\n        header.writeUint8(0);\n        this.data.writeBytes(new Uint8Array(header.buffer));\n    };\n    GifEncoder.prototype.writeColorTable = function () {\n        var palette = new Uint8Array(3 * Math.pow(2, this.colorDepth));\n        for (var index = 0, offset = 0; offset < palette.length; index += 1, offset += 3) {\n            palette.set(this.palette[index], offset);\n        }\n        this.data.writeBytes(palette);\n    };\n    GifEncoder.prototype.writeGraphicsControlExt = function () {\n        var graphicsControlExt = new DataStream(new ArrayBuffer(8));\n        graphicsControlExt.writeBytes([\n            0x21,\n            0xF9,\n            4,\n            0 // bitfield\n        ]);\n        graphicsControlExt.writeUint16(this.delay); // loop flag\n        graphicsControlExt.writeBytes([\n            0,\n            0\n        ]);\n        this.data.writeBytes(new Uint8Array(graphicsControlExt.buffer));\n    };\n    GifEncoder.prototype.writeNetscapeExt = function () {\n        var netscapeExt = new DataStream(new ArrayBuffer(19));\n        netscapeExt.writeBytes([\n            0x21,\n            0xFF,\n            11,\n        ]);\n        netscapeExt.writeUtf8('NETSCAPE2.0');\n        netscapeExt.writeUint8(3); // subblock size\n        netscapeExt.writeUint8(1); // loop subblock id\n        netscapeExt.writeUint16(this.repeat); // loop flag\n        this.data.writeBytes(new Uint8Array(netscapeExt.buffer));\n    };\n    GifEncoder.prototype.writeImageDesc = function () {\n        var desc = new DataStream(new ArrayBuffer(10));\n        desc.writeUint8(0x2C);\n        desc.writeUint16(0); // image left\n        desc.writeUint16(0); // image top\n        desc.writeUint16(this.width);\n        desc.writeUint16(this.height);\n        desc.writeUint8(0);\n        this.data.writeBytes(new Uint8Array(desc.buffer));\n    };\n    GifEncoder.prototype.writePixels = function (pixels) {\n        var lzw = new LZWEncoder(this.width, this.height, pixels, this.colorDepth);\n        lzw.encode(this.data);\n    };\n    GifEncoder.prototype.writeFrame = function (pixels) {\n        this.writeGraphicsControlExt();\n        this.writeImageDesc();\n        this.writePixels(pixels);\n    };\n    GifEncoder.prototype.getBuffer = function () {\n        return this.data.getBuffer();\n    };\n    GifEncoder.prototype.getBlob = function () {\n        return new Blob([this.getBuffer()], { type: 'image/gif' });\n    };\n    GifEncoder.prototype.getUrl = function () {\n        return window.URL.createObjectURL(this.getBlob());\n    };\n    GifEncoder.prototype.getImage = function () {\n        var img = new Image(this.width, this.height);\n        img.src = this.getUrl();\n        return img;\n    };\n    return GifEncoder;\n}());\nexport { GifEncoder };\n","import { DataStream } from './utils/dataStream';\nimport { parseSource, KwzParser, PpmParser } from './parser';\nimport { Player } from './player';\nimport { BitmapEncoder } from './encoders/bmp';\nimport { GifEncoder } from './encoders/gif';\nexport default {\n    dataStream: DataStream,\n    kwzParser: KwzParser,\n    ppmParser: PpmParser,\n    player: Player,\n    bitmapEncoder: BitmapEncoder,\n    gifEncoder: GifEncoder,\n    parseSource: parseSource,\n};\n"],"sourceRoot":""}
{"version":3,"file":"flipnote.min.js.map","sources":["../src/parsers/types.ts","../src/utils/ByteArray.ts","../src/utils/DataStream.ts","../src/utils/math.ts","../src/utils/err.ts","../src/utils/env.ts","../src/utils/saveData.ts","../src/parsers/BaseParser.ts","../src/parsers/flipnoteStudioId/ppm.ts","../src/parsers/common/audio.ts","../src/parsers/common/datetime.ts","../src/parsers/common/rsa.ts","../src/parsers/PpmParser.ts","../src/parsers/flipnoteStudioId/kwz.ts","../src/parsers/KwzParser.ts","../src/loaders/urlLoader.ts","../src/loaders/fileLoader.ts","../src/loaders/blobLoader.ts","../src/loaders/nodeBufferLoader.ts","../src/loaders/arrayBufferLoader.ts","../src/loaders/index.ts","../src/parseSource.ts","../src/player/PlayerEvent.ts","../src/player/playerUtils.ts","../src/renderers/CanvasInterface.ts","../node_modules/twgl.js/dist/5.x/twgl-full.module.js","../src/renderers/WebGlCanvas.ts","../src/renderers/Html5Canvas.ts","../src/renderers/UniversalCanvas.ts","../src/webaudio/WebAudioPlayer.ts","../src/player/Player.ts","../src/utils/promises.ts","../src/encoders/EncoderBase.ts","../src/encoders/LwzCompressor.ts","../src/encoders/GifImage.ts","../src/encoders/WavAudio.ts","../src/parsers/flipnoteStudioId/common.ts","../src/components/PlayerMixin.ts","../src/flipnote.ts"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/* @license twgl.js 5.5.4 Copyright (c) 2015, Gregg Tavares All Rights Reserved.\nAvailable via the MIT license.\nsee: http://github.com/greggman/twgl.js for details */\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n *\n * Vec3 math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new Vec3. In other words you can do this\n *\n *     var v = v3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.\n *\n * or\n *\n *     var v = v3.create();\n *     v3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any vector as the destination. So for example\n *\n *     v3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n * @module twgl/v3\n */\n\nlet VecType = Float32Array;\n\n/**\n * A JavaScript array with 3 values or a Float32Array with 3 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/v3.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Vec3\n * @memberOf module:twgl/v3\n */\n\n/**\n * Sets the type this library creates for a Vec3\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Vec3\n * @memberOf module:twgl/v3\n */\nfunction setDefaultType$1(ctor) {\n  const oldType = VecType;\n  VecType = ctor;\n  return oldType;\n}\n\n/**\n * Creates a vec3; may be called with x, y, z to set initial values.\n * @param {number} [x] Initial x value.\n * @param {number} [y] Initial y value.\n * @param {number} [z] Initial z value.\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\nfunction create$1(x, y, z) {\n  const dst = new VecType(3);\n  if (x) {\n    dst[0] = x;\n  }\n  if (y) {\n    dst[1] = y;\n  }\n  if (z) {\n    dst[2] = z;\n  }\n  return dst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector tha tis the sum of a and b.\n * @memberOf module:twgl/v3\n */\nfunction add(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + b[0];\n  dst[1] = a[1] + b[1];\n  dst[2] = a[2] + b[2];\n\n  return dst;\n}\n\n/**\n * Subtracts two vectors.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector that is the difference of a and b.\n * @memberOf module:twgl/v3\n */\nfunction subtract(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] - b[0];\n  dst[1] = a[1] - b[1];\n  dst[2] = a[2] - b[2];\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {number} t Interpolation coefficient.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The linear interpolated result.\n * @memberOf module:twgl/v3\n */\nfunction lerp(a, b, t, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t * (b[0] - a[0]);\n  dst[1] = a[1] + t * (b[1] - a[1]);\n  dst[2] = a[2] + t * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} t Interpolation coefficients vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} the linear interpolated result.\n * @memberOf module:twgl/v3\n */\nfunction lerpV(a, b, t, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t[0] * (b[0] - a[0]);\n  dst[1] = a[1] + t[1] * (b[1] - a[1]);\n  dst[2] = a[2] + t[2] * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The max components vector.\n * @memberOf module:twgl/v3\n */\nfunction max(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.max(a[0], b[0]);\n  dst[1] = Math.max(a[1], b[1]);\n  dst[2] = Math.max(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The min components vector.\n * @memberOf module:twgl/v3\n */\nfunction min(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.min(a[0], b[0]);\n  dst[1] = Math.min(a[1], b[1]);\n  dst[2] = Math.min(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\nfunction mulScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] * k;\n  dst[1] = v[1] * k;\n  dst[2] = v[2] * k;\n\n  return dst;\n}\n\n/**\n * Divides a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\nfunction divScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] / k;\n  dst[1] = v[1] / k;\n  dst[2] = v[2] / k;\n\n  return dst;\n}\n\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of a cross b.\n * @memberOf module:twgl/v3\n */\nfunction cross(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  const t1 = a[2] * b[0] - a[0] * b[2];\n  const t2 = a[0] * b[1] - a[1] * b[0];\n  dst[0] = a[1] * b[2] - a[2] * b[1];\n  dst[1] = t1;\n  dst[2] = t2;\n\n  return dst;\n}\n\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @return {number} dot product\n * @memberOf module:twgl/v3\n */\nfunction dot(a, b) {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n}\n\n/**\n * Computes the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} length of vector.\n * @memberOf module:twgl/v3\n */\nfunction length$1(v) {\n  return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n}\n\n/**\n * Computes the square of the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} square of the length of vector.\n * @memberOf module:twgl/v3\n */\nfunction lengthSq(v) {\n  return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\n}\n\n/**\n * Computes the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} distance between a and b\n * @memberOf module:twgl/v3\n */\nfunction distance(a, b) {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n\n/**\n * Computes the square of the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} square of the distance between a and b\n * @memberOf module:twgl/v3\n */\nfunction distanceSq(a, b) {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return dx * dx + dy * dy + dz * dz;\n}\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param {module:twgl/v3.Vec3} a The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The normalized vector.\n * @memberOf module:twgl/v3\n */\nfunction normalize(a, dst) {\n  dst = dst || new VecType(3);\n\n  const lenSq = a[0] * a[0] + a[1] * a[1] + a[2] * a[2];\n  const len = Math.sqrt(lenSq);\n  if (len > 0.00001) {\n    dst[0] = a[0] / len;\n    dst[1] = a[1] / len;\n    dst[2] = a[2] / len;\n  } else {\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n  }\n\n  return dst;\n}\n\n/**\n * Negates a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} -v.\n * @memberOf module:twgl/v3\n */\nfunction negate$1(v, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = -v[0];\n  dst[1] = -v[1];\n  dst[2] = -v[2];\n\n  return dst;\n}\n\n/**\n * Copies a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A copy of v.\n * @memberOf module:twgl/v3\n */\nfunction copy$1(v, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0];\n  dst[1] = v[1];\n  dst[2] = v[2];\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of products of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\nfunction multiply$1(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] * b[0];\n  dst[1] = a[1] * b[1];\n  dst[2] = a[2] * b[2];\n\n  return dst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of quotients of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\nfunction divide(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] / b[0];\n  dst[1] = a[1] / b[1];\n  dst[2] = a[2] / b[2];\n\n  return dst;\n}\n\nvar v3 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  add: add,\n  copy: copy$1,\n  create: create$1,\n  cross: cross,\n  distance: distance,\n  distanceSq: distanceSq,\n  divide: divide,\n  divScalar: divScalar,\n  dot: dot,\n  lerp: lerp,\n  lerpV: lerpV,\n  length: length$1,\n  lengthSq: lengthSq,\n  max: max,\n  min: min,\n  mulScalar: mulScalar,\n  multiply: multiply$1,\n  negate: negate$1,\n  normalize: normalize,\n  setDefaultType: setDefaultType$1,\n  subtract: subtract\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * 4x4 Matrix math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = m4.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = m4.create();\n *     m4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = m4.identity();\n *     const trans = m4.translation([1, 2, 3]);\n *     m4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n * @module twgl/m4\n */\nlet MatType = Float32Array;\n\n/**\n * A JavaScript array with 16 values or a Float32Array with 16 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/m4.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Mat4\n * @memberOf module:twgl/m4\n */\n\n/**\n * Sets the type this library creates for a Mat4\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Mat4\n * @memberOf module:twgl/m4\n */\nfunction setDefaultType(ctor) {\n  const oldType = MatType;\n  MatType = ctor;\n  return oldType;\n}\n\n/**\n * Negates a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} -m.\n * @memberOf module:twgl/m4\n */\nfunction negate(m, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = -m[ 0];\n  dst[ 1] = -m[ 1];\n  dst[ 2] = -m[ 2];\n  dst[ 3] = -m[ 3];\n  dst[ 4] = -m[ 4];\n  dst[ 5] = -m[ 5];\n  dst[ 6] = -m[ 6];\n  dst[ 7] = -m[ 7];\n  dst[ 8] = -m[ 8];\n  dst[ 9] = -m[ 9];\n  dst[10] = -m[10];\n  dst[11] = -m[11];\n  dst[12] = -m[12];\n  dst[13] = -m[13];\n  dst[14] = -m[14];\n  dst[15] = -m[15];\n\n  return dst;\n}\n\n/**\n * Creates a matrix.\n * @return {module:twgl/m4.Mat4} A new matrix.\n * @memberOf module:twgl/m4\n */\nfunction create() {\n  return new MatType(16).fill(0);\n}\n\n/**\n * Copies a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] The matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A copy of m.\n * @memberOf module:twgl/m4\n */\nfunction copy(m, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = m[ 0];\n  dst[ 1] = m[ 1];\n  dst[ 2] = m[ 2];\n  dst[ 3] = m[ 3];\n  dst[ 4] = m[ 4];\n  dst[ 5] = m[ 5];\n  dst[ 6] = m[ 6];\n  dst[ 7] = m[ 7];\n  dst[ 8] = m[ 8];\n  dst[ 9] = m[ 9];\n  dst[10] = m[10];\n  dst[11] = m[11];\n  dst[12] = m[12];\n  dst[13] = m[13];\n  dst[14] = m[14];\n  dst[15] = m[15];\n\n  return dst;\n}\n\n/**\n * Creates an n-by-n identity matrix.\n *\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} An n-by-n identity matrix.\n * @memberOf module:twgl/m4\n */\nfunction identity(dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Takes the transpose of a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The transpose of m.\n * @memberOf module:twgl/m4\n */\n function transpose(m, dst) {\n  dst = dst || new MatType(16);\n  if (dst === m) {\n    let t;\n\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n\n    t = m[3];\n    m[3] = m[12];\n    m[12] = t;\n\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n\n    t = m[7];\n    m[7] = m[13];\n    m[13] = t;\n\n    t = m[11];\n    m[11] = m[14];\n    m[14] = t;\n    return dst;\n  }\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  dst[ 0] = m00;\n  dst[ 1] = m10;\n  dst[ 2] = m20;\n  dst[ 3] = m30;\n  dst[ 4] = m01;\n  dst[ 5] = m11;\n  dst[ 6] = m21;\n  dst[ 7] = m31;\n  dst[ 8] = m02;\n  dst[ 9] = m12;\n  dst[10] = m22;\n  dst[11] = m32;\n  dst[12] = m03;\n  dst[13] = m13;\n  dst[14] = m23;\n  dst[15] = m33;\n\n  return dst;\n}\n\n/**\n * Computes the inverse of a 4-by-4 matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The inverse of m.\n * @memberOf module:twgl/m4\n */\nfunction inverse(m, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n  const tmp_0  = m22 * m33;\n  const tmp_1  = m32 * m23;\n  const tmp_2  = m12 * m33;\n  const tmp_3  = m32 * m13;\n  const tmp_4  = m12 * m23;\n  const tmp_5  = m22 * m13;\n  const tmp_6  = m02 * m33;\n  const tmp_7  = m32 * m03;\n  const tmp_8  = m02 * m23;\n  const tmp_9  = m22 * m03;\n  const tmp_10 = m02 * m13;\n  const tmp_11 = m12 * m03;\n  const tmp_12 = m20 * m31;\n  const tmp_13 = m30 * m21;\n  const tmp_14 = m10 * m31;\n  const tmp_15 = m30 * m11;\n  const tmp_16 = m10 * m21;\n  const tmp_17 = m20 * m11;\n  const tmp_18 = m00 * m31;\n  const tmp_19 = m30 * m01;\n  const tmp_20 = m00 * m21;\n  const tmp_21 = m20 * m01;\n  const tmp_22 = m00 * m11;\n  const tmp_23 = m10 * m01;\n\n  const t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\n      (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n  const t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\n      (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n  const t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\n      (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n  const t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\n      (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n\n  const d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n\n  dst[ 0] = d * t0;\n  dst[ 1] = d * t1;\n  dst[ 2] = d * t2;\n  dst[ 3] = d * t3;\n  dst[ 4] = d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -\n          (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\n  dst[ 5] = d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -\n          (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\n  dst[ 6] = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\n          (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\n  dst[ 7] = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\n          (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\n  dst[ 8] = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\n          (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\n  dst[ 9] = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\n          (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\n  dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\n          (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\n  dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\n          (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\n  dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\n          (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\n  dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\n          (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\n  dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\n          (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\n  dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\n          (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\n\n  return dst;\n}\n\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right\n * @param {module:twgl/m4.Mat4} a The matrix on the left.\n * @param {module:twgl/m4.Mat4} b The matrix on the right.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix product of a and b.\n * @memberOf module:twgl/m4\n */\nfunction multiply(a, b, dst) {\n  dst = dst || new MatType(16);\n\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[ 4 + 0];\n  const a11 = a[ 4 + 1];\n  const a12 = a[ 4 + 2];\n  const a13 = a[ 4 + 3];\n  const a20 = a[ 8 + 0];\n  const a21 = a[ 8 + 1];\n  const a22 = a[ 8 + 2];\n  const a23 = a[ 8 + 3];\n  const a30 = a[12 + 0];\n  const a31 = a[12 + 1];\n  const a32 = a[12 + 2];\n  const a33 = a[12 + 3];\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b03 = b[3];\n  const b10 = b[ 4 + 0];\n  const b11 = b[ 4 + 1];\n  const b12 = b[ 4 + 2];\n  const b13 = b[ 4 + 3];\n  const b20 = b[ 8 + 0];\n  const b21 = b[ 8 + 1];\n  const b22 = b[ 8 + 2];\n  const b23 = b[ 8 + 3];\n  const b30 = b[12 + 0];\n  const b31 = b[12 + 1];\n  const b32 = b[12 + 2];\n  const b33 = b[12 + 3];\n\n  dst[ 0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n  dst[ 1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n  dst[ 2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n  dst[ 3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n  dst[ 4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n  dst[ 5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n  dst[ 6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n  dst[ 7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n  dst[ 8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n  dst[ 9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n  dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n  dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n  dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n  dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n  dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n  dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n\n  return dst;\n}\n\n/**\n * Sets the translation component of a 4-by-4 matrix to the given\n * vector.\n * @param {module:twgl/m4.Mat4} a The matrix.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with translation set.\n * @memberOf module:twgl/m4\n */\nfunction setTranslation(a, v, dst) {\n  dst = dst || identity();\n  if (a !== dst) {\n    dst[ 0] = a[ 0];\n    dst[ 1] = a[ 1];\n    dst[ 2] = a[ 2];\n    dst[ 3] = a[ 3];\n    dst[ 4] = a[ 4];\n    dst[ 5] = a[ 5];\n    dst[ 6] = a[ 6];\n    dst[ 7] = a[ 7];\n    dst[ 8] = a[ 8];\n    dst[ 9] = a[ 9];\n    dst[10] = a[10];\n    dst[11] = a[11];\n  }\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The translation component of m.\n * @memberOf module:twgl/m4\n */\nfunction getTranslation(m, dst) {\n  dst = dst || create$1();\n  dst[0] = m[12];\n  dst[1] = m[13];\n  dst[2] = m[14];\n  return dst;\n}\n\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} axis The axis 0 = x, 1 = y, 2 = z;\n * @return {module:twgl/v3.Vec3} [dst] vector.\n * @return {module:twgl/v3.Vec3} The axis component of m.\n * @memberOf module:twgl/m4\n */\nfunction getAxis(m, axis, dst) {\n  dst = dst || create$1();\n  const off = axis * 4;\n  dst[0] = m[off + 0];\n  dst[1] = m[off + 1];\n  dst[2] = m[off + 2];\n  return dst;\n}\n\n/**\n * Sets an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v the axis vector\n * @param {number} axis The axis  0 = x, 1 = y, 2 = z;\n * @param {module:twgl/m4.Mat4} [dst] The matrix to set. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with axis set.\n * @memberOf module:twgl/m4\n */\nfunction setAxis(a, v, axis, dst) {\n  if (dst !== a) {\n    dst = copy(a, dst);\n  }\n  const off = axis * 4;\n  dst[off + 0] = v[0];\n  dst[off + 1] = v[1];\n  dst[off + 2] = v[2];\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 0 to 1 in the z dimension.\n * @param {number} fieldOfViewYInRadians The camera angle from top to bottom (in radians).\n * @param {number} aspect The aspect ratio width / height.\n * @param {number} zNear The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} zFar The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\nfunction perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n  dst = dst || new MatType(16);\n\n  const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n  const rangeInv = 1.0 / (zNear - zFar);\n\n  dst[0]  = f / aspect;\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = f;\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = (zNear + zFar) * rangeInv;\n  dst[11] = -1;\n\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = zNear * zFar * rangeInv * 2;\n  dst[15] = 0;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 orthogonal transformation matrix given the left, right,\n * bottom, and top dimensions of the near clipping plane as well as the\n * near and far clipping plane distances.\n * @param {number} left Left side of the near clipping plane viewport.\n * @param {number} right Right side of the near clipping plane viewport.\n * @param {number} bottom Bottom of the near clipping plane viewport.\n * @param {number} top Top of the near clipping plane viewport.\n * @param {number} near The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} far The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\nfunction ortho(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  dst[0]  = 2 / (right - left);\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = 2 / (top - bottom);\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = 2 / (near - far);\n  dst[11] = 0;\n\n  dst[12] = (right + left) / (left - right);\n  dst[13] = (top + bottom) / (bottom - top);\n  dst[14] = (far + near) / (near - far);\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n * dimension.\n * @param {number} left The x coordinate of the left plane of the box.\n * @param {number} right The x coordinate of the right plane of the box.\n * @param {number} bottom The y coordinate of the bottom plane of the box.\n * @param {number} top The y coordinate of the right plane of the box.\n * @param {number} near The negative z coordinate of the near plane of the box.\n * @param {number} far The negative z coordinate of the far plane of the box.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective projection matrix.\n * @memberOf module:twgl/m4\n */\nfunction frustum(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  const dx = (right - left);\n  const dy = (top - bottom);\n  const dz = (near - far);\n\n  dst[ 0] = 2 * near / dx;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 2 * near / dy;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = (left + right) / dx;\n  dst[ 9] = (top + bottom) / dy;\n  dst[10] = far / dz;\n  dst[11] = -1;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = near * far / dz;\n  dst[15] = 0;\n\n  return dst;\n}\n\nlet xAxis;\nlet yAxis;\nlet zAxis;\n\n/**\n * Computes a 4-by-4 look-at transformation.\n *\n * This is a matrix which positions the camera itself. If you want\n * a view matrix (a matrix which moves things in front of the camera)\n * take the inverse of this.\n *\n * @param {module:twgl/v3.Vec3} eye The position of the eye.\n * @param {module:twgl/v3.Vec3} target The position meant to be viewed.\n * @param {module:twgl/v3.Vec3} up A vector pointing up.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The look-at matrix.\n * @memberOf module:twgl/m4\n */\nfunction lookAt(eye, target, up, dst) {\n  dst = dst || new MatType(16);\n\n  xAxis = xAxis || create$1();\n  yAxis = yAxis || create$1();\n  zAxis = zAxis || create$1();\n\n  normalize(\n      subtract(eye, target, zAxis), zAxis);\n  normalize(cross(up, zAxis, xAxis), xAxis);\n  normalize(cross(zAxis, xAxis, yAxis), yAxis);\n\n  dst[ 0] = xAxis[0];\n  dst[ 1] = xAxis[1];\n  dst[ 2] = xAxis[2];\n  dst[ 3] = 0;\n  dst[ 4] = yAxis[0];\n  dst[ 5] = yAxis[1];\n  dst[ 6] = yAxis[2];\n  dst[ 7] = 0;\n  dst[ 8] = zAxis[0];\n  dst[ 9] = zAxis[1];\n  dst[10] = zAxis[2];\n  dst[11] = 0;\n  dst[12] = eye[0];\n  dst[13] = eye[1];\n  dst[14] = eye[2];\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which translates by the given vector v.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translation matrix.\n * @memberOf module:twgl/m4\n */\nfunction translation(v, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Translates the given 4-by-4 matrix by the given vector v.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translated matrix.\n * @memberOf module:twgl/m4\n */\nfunction translate(m, v, dst) {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  if (m !== dst) {\n    dst[ 0] = m00;\n    dst[ 1] = m01;\n    dst[ 2] = m02;\n    dst[ 3] = m03;\n    dst[ 4] = m10;\n    dst[ 5] = m11;\n    dst[ 6] = m12;\n    dst[ 7] = m13;\n    dst[ 8] = m20;\n    dst[ 9] = m21;\n    dst[10] = m22;\n    dst[11] = m23;\n  }\n\n  dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n  dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n  dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n  dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationX(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = c;\n  dst[ 6] = s;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = -s;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the x-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateX(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[4]  = c * m10 + s * m20;\n  dst[5]  = c * m11 + s * m21;\n  dst[6]  = c * m12 + s * m22;\n  dst[7]  = c * m13 + s * m23;\n  dst[8]  = c * m20 - s * m10;\n  dst[9]  = c * m21 - s * m11;\n  dst[10] = c * m22 - s * m12;\n  dst[11] = c * m23 - s * m13;\n\n  if (m !== dst) {\n    dst[ 0] = m[ 0];\n    dst[ 1] = m[ 1];\n    dst[ 2] = m[ 2];\n    dst[ 3] = m[ 3];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationY(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;\n  dst[ 1] = 0;\n  dst[ 2] = -s;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = s;\n  dst[ 9] = 0;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the y-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateY(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 - s * m20;\n  dst[ 1] = c * m01 - s * m21;\n  dst[ 2] = c * m02 - s * m22;\n  dst[ 3] = c * m03 - s * m23;\n  dst[ 8] = c * m20 + s * m00;\n  dst[ 9] = c * m21 + s * m01;\n  dst[10] = c * m22 + s * m02;\n  dst[11] = c * m23 + s * m03;\n\n  if (m !== dst) {\n    dst[ 4] = m[ 4];\n    dst[ 5] = m[ 5];\n    dst[ 6] = m[ 6];\n    dst[ 7] = m[ 7];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationZ(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;\n  dst[ 1] = s;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = -s;\n  dst[ 5] = c;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the z-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateZ(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 + s * m10;\n  dst[ 1] = c * m01 + s * m11;\n  dst[ 2] = c * m02 + s * m12;\n  dst[ 3] = c * m03 + s * m13;\n  dst[ 4] = c * m10 - s * m00;\n  dst[ 5] = c * m11 - s * m01;\n  dst[ 6] = c * m12 - s * m02;\n  dst[ 7] = c * m13 - s * m03;\n\n  if (m !== dst) {\n    dst[ 8] = m[ 8];\n    dst[ 9] = m[ 9];\n    dst[10] = m[10];\n    dst[11] = m[11];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A matrix which rotates angle radians\n *     around the axis.\n * @memberOf module:twgl/m4\n */\nfunction axisRotation(axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  dst[ 0] = xx + (1 - xx) * c;\n  dst[ 1] = x * y * oneMinusCosine + z * s;\n  dst[ 2] = x * z * oneMinusCosine - y * s;\n  dst[ 3] = 0;\n  dst[ 4] = x * y * oneMinusCosine - z * s;\n  dst[ 5] = yy + (1 - yy) * c;\n  dst[ 6] = y * z * oneMinusCosine + x * s;\n  dst[ 7] = 0;\n  dst[ 8] = x * z * oneMinusCosine + y * s;\n  dst[ 9] = y * z * oneMinusCosine - x * s;\n  dst[10] = zz + (1 - zz) * c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction axisRotate(m, axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  const r00 = xx + (1 - xx) * c;\n  const r01 = x * y * oneMinusCosine + z * s;\n  const r02 = x * z * oneMinusCosine - y * s;\n  const r10 = x * y * oneMinusCosine - z * s;\n  const r11 = yy + (1 - yy) * c;\n  const r12 = y * z * oneMinusCosine + x * s;\n  const r20 = x * z * oneMinusCosine + y * s;\n  const r21 = y * z * oneMinusCosine - x * s;\n  const r22 = zz + (1 - zz) * c;\n\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n\n  dst[ 0] = r00 * m00 + r01 * m10 + r02 * m20;\n  dst[ 1] = r00 * m01 + r01 * m11 + r02 * m21;\n  dst[ 2] = r00 * m02 + r01 * m12 + r02 * m22;\n  dst[ 3] = r00 * m03 + r01 * m13 + r02 * m23;\n  dst[ 4] = r10 * m00 + r11 * m10 + r12 * m20;\n  dst[ 5] = r10 * m01 + r11 * m11 + r12 * m21;\n  dst[ 6] = r10 * m02 + r11 * m12 + r12 * m22;\n  dst[ 7] = r10 * m03 + r11 * m13 + r12 * m23;\n  dst[ 8] = r20 * m00 + r21 * m10 + r22 * m20;\n  dst[ 9] = r20 * m01 + r21 * m11 + r22 * m21;\n  dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n  dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param {module:twgl/v3.Vec3} v A vector of\n *     three entries specifying the factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaling matrix.\n * @memberOf module:twgl/m4\n */\nfunction scaling(v, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = v[0];\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = v[1];\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = v[2];\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Scales the given 4-by-4 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param {module:twgl/m4.Mat4} m The matrix to be modified.\n * @param {module:twgl/v3.Vec3} v A vector of three entries specifying the\n *     factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaled matrix.\n * @memberOf module:twgl/m4\n */\nfunction scale(m, v, dst) {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[ 0] = v0 * m[0 * 4 + 0];\n  dst[ 1] = v0 * m[0 * 4 + 1];\n  dst[ 2] = v0 * m[0 * 4 + 2];\n  dst[ 3] = v0 * m[0 * 4 + 3];\n  dst[ 4] = v1 * m[1 * 4 + 0];\n  dst[ 5] = v1 * m[1 * 4 + 1];\n  dst[ 6] = v1 * m[1 * 4 + 2];\n  dst[ 7] = v1 * m[1 * 4 + 3];\n  dst[ 8] = v2 * m[2 * 4 + 0];\n  dst[ 9] = v2 * m[2 * 4 + 1];\n  dst[10] = v2 * m[2 * 4 + 2];\n  dst[11] = v2 * m[2 * 4 + 3];\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries,\n * interprets the vector as a point, transforms that point by the matrix, and\n * returns the result as a vector with 3 entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The point.\n * @param {module:twgl/v3.Vec3} [dst] optional vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed point.\n * @memberOf module:twgl/m4\n */\nfunction transformPoint(m, v, dst) {\n  dst = dst || create$1();\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];\n\n  dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;\n  dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;\n  dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a\n * direction, transforms that direction by the matrix, and returns the result;\n * assumes the transformation of 3-dimensional space represented by the matrix\n * is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion. Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The direction.\n * @param {module:twgl/v3.Vec3} [dst] optional Vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed direction.\n * @memberOf module:twgl/m4\n */\nfunction transformDirection(m, v, dst) {\n  dst = dst || create$1();\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n  dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n  dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector\n * as a normal to a surface, and computes a vector which is normal upon\n * transforming that surface by the matrix. The effect of this function is the\n * same as transforming v (as a direction) by the inverse-transpose of m.  This\n * function assumes the transformation of 3-dimensional space represented by the\n * matrix is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion.  Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The normal.\n * @param {module:twgl/v3.Vec3} [dst] The direction. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed normal.\n * @memberOf module:twgl/m4\n */\nfunction transformNormal$1(m, v, dst) {\n  dst = dst || create$1();\n  const mi = inverse(m);\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n  return dst;\n}\n\nvar m4 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  axisRotate: axisRotate,\n  axisRotation: axisRotation,\n  copy: copy,\n  create: create,\n  frustum: frustum,\n  getAxis: getAxis,\n  getTranslation: getTranslation,\n  identity: identity,\n  inverse: inverse,\n  lookAt: lookAt,\n  multiply: multiply,\n  negate: negate,\n  ortho: ortho,\n  perspective: perspective,\n  rotateX: rotateX,\n  rotateY: rotateY,\n  rotateZ: rotateZ,\n  rotationX: rotationX,\n  rotationY: rotationY,\n  rotationZ: rotationZ,\n  scale: scale,\n  scaling: scaling,\n  setAxis: setAxis,\n  setDefaultType: setDefaultType,\n  setTranslation: setTranslation,\n  transformDirection: transformDirection,\n  transformNormal: transformNormal$1,\n  transformPoint: transformPoint,\n  translate: translate,\n  translation: translation,\n  transpose: transpose\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* DataType */\nconst BYTE$2                           = 0x1400;\nconst UNSIGNED_BYTE$3                  = 0x1401;\nconst SHORT$2                          = 0x1402;\nconst UNSIGNED_SHORT$3                 = 0x1403;\nconst INT$3                            = 0x1404;\nconst UNSIGNED_INT$3                   = 0x1405;\nconst FLOAT$3                          = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4$1       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1$1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5$1         = 0x8363;\nconst HALF_FLOAT$1                   = 0x140B;\nconst UNSIGNED_INT_2_10_10_10_REV$1  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV$1 = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV$1     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV$1 = 0x8DAD;\nconst UNSIGNED_INT_24_8$1            = 0x84FA;\n\nconst glTypeToTypedArray = {};\n{\n  const tt = glTypeToTypedArray;\n  tt[BYTE$2]                           = Int8Array;\n  tt[UNSIGNED_BYTE$3]                  = Uint8Array;\n  tt[SHORT$2]                          = Int16Array;\n  tt[UNSIGNED_SHORT$3]                 = Uint16Array;\n  tt[INT$3]                            = Int32Array;\n  tt[UNSIGNED_INT$3]                   = Uint32Array;\n  tt[FLOAT$3]                          = Float32Array;\n  tt[UNSIGNED_SHORT_4_4_4_4$1]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_5_5_1$1]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_6_5$1]           = Uint16Array;\n  tt[HALF_FLOAT$1]                     = Uint16Array;\n  tt[UNSIGNED_INT_2_10_10_10_REV$1]    = Uint32Array;\n  tt[UNSIGNED_INT_10F_11F_11F_REV$1]   = Uint32Array;\n  tt[UNSIGNED_INT_5_9_9_9_REV$1]       = Uint32Array;\n  tt[FLOAT_32_UNSIGNED_INT_24_8_REV$1] = Uint32Array;\n  tt[UNSIGNED_INT_24_8$1]              = Uint32Array;\n}\n\n/**\n * Get the GL type for a typedArray\n * @param {ArrayBufferView} typedArray a typedArray\n * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)         { return BYTE$2; }           // eslint-disable-line\n  if (typedArray instanceof Uint8Array)        { return UNSIGNED_BYTE$3; }  // eslint-disable-line\n  if (typedArray instanceof Uint8ClampedArray) { return UNSIGNED_BYTE$3; }  // eslint-disable-line\n  if (typedArray instanceof Int16Array)        { return SHORT$2; }          // eslint-disable-line\n  if (typedArray instanceof Uint16Array)       { return UNSIGNED_SHORT$3; } // eslint-disable-line\n  if (typedArray instanceof Int32Array)        { return INT$3; }            // eslint-disable-line\n  if (typedArray instanceof Uint32Array)       { return UNSIGNED_INT$3; }   // eslint-disable-line\n  if (typedArray instanceof Float32Array)      { return FLOAT$3; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the GL type for a typedArray type\n * @param {ArrayBufferView} typedArrayType a typedArray constructor\n * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)         { return BYTE$2; }           // eslint-disable-line\n  if (typedArrayType === Uint8Array)        { return UNSIGNED_BYTE$3; }  // eslint-disable-line\n  if (typedArrayType === Uint8ClampedArray) { return UNSIGNED_BYTE$3; }  // eslint-disable-line\n  if (typedArrayType === Int16Array)        { return SHORT$2; }          // eslint-disable-line\n  if (typedArrayType === Uint16Array)       { return UNSIGNED_SHORT$3; } // eslint-disable-line\n  if (typedArrayType === Int32Array)        { return INT$3; }            // eslint-disable-line\n  if (typedArrayType === Uint32Array)       { return UNSIGNED_INT$3; }   // eslint-disable-line\n  if (typedArrayType === Float32Array)      { return FLOAT$3; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the typed array constructor for a given GL type\n * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)\n * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).\n * @memberOf module:twgl/typedArray\n */\nfunction getTypedArrayTypeForGLType(type) {\n  const CTOR = glTypeToTypedArray[type];\n  if (!CTOR) {\n    throw new Error('unknown gl type');\n  }\n  return CTOR;\n}\n\nconst isArrayBuffer$1 = typeof SharedArrayBuffer !== 'undefined'\n  ? function isArrayBufferOrSharedArrayBuffer(a) {\n    return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);\n  }\n  : function isArrayBuffer(a) {\n    return a && a.buffer && a.buffer instanceof ArrayBuffer;\n  };\n\nvar typedarrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getGLTypeForTypedArray: getGLTypeForTypedArray,\n  getGLTypeForTypedArrayType: getGLTypeForTypedArrayType,\n  getTypedArrayTypeForGLType: getTypedArrayTypeForGLType,\n  isArrayBuffer: isArrayBuffer$1\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint no-console: \"off\" */\n\n/**\n * Copy named properties\n *\n * @param {string[]} names names of properties to copy\n * @param {object} src object to copy properties from\n * @param {object} dst object to copy properties to\n * @private\n */\nfunction copyNamedProperties(names, src, dst) {\n  names.forEach(function(name) {\n    const value = src[name];\n    if (value !== undefined) {\n      dst[name] = value;\n    }\n  });\n}\n\n/**\n * Copies properties from source to dest only if a matching key is in dest\n *\n * @param {Object.<string, ?>} src the source\n * @param {Object.<string, ?>} dst the dest\n * @private\n */\nfunction copyExistingProperties(src, dst) {\n  Object.keys(dst).forEach(function(key) {\n    if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {  /* eslint no-prototype-builtins: 0 */\n      dst[key] = src[key];\n    }\n  });\n}\n\nfunction error$1(...args) {\n  console.error(...args);\n}\n\nfunction warn$1(...args) {\n  console.warn(...args);\n}\n\nconst isTypeWeakMaps = new Map();\n\nfunction isType(object, type) {\n  if (!object || typeof object !== 'object') {\n    return false;\n  }\n  let weakMap = isTypeWeakMaps.get(type);\n  if (!weakMap) {\n    weakMap = new WeakMap();\n    isTypeWeakMaps.set(type, weakMap);\n  }\n  let isOfType = weakMap.get(object);\n  if (isOfType === undefined) {\n    const s = Object.prototype.toString.call(object);\n    isOfType = s.substring(8, s.length - 1) === type;\n    weakMap.set(object, isOfType);\n  }\n  return isOfType;\n}\n\nfunction isBuffer(gl, t) {\n  return typeof WebGLBuffer !== 'undefined' && isType(t, 'WebGLBuffer');\n}\n\nfunction isRenderbuffer(gl, t) {\n  return typeof WebGLRenderbuffer !== 'undefined' && isType(t, 'WebGLRenderbuffer');\n}\n\nfunction isTexture(gl, t) {\n  return typeof WebGLTexture !== 'undefined' && isType(t, 'WebGLTexture');\n}\n\nfunction isSampler(gl, t) {\n  return typeof WebGLSampler !== 'undefined' && isType(t, 'WebGLSampler');\n}\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst STATIC_DRAW                  = 0x88e4;\nconst ARRAY_BUFFER$1                 = 0x8892;\nconst ELEMENT_ARRAY_BUFFER$2         = 0x8893;\nconst BUFFER_SIZE                  = 0x8764;\n\nconst BYTE$1                         = 0x1400;\nconst UNSIGNED_BYTE$2                = 0x1401;\nconst SHORT$1                        = 0x1402;\nconst UNSIGNED_SHORT$2               = 0x1403;\nconst INT$2                          = 0x1404;\nconst UNSIGNED_INT$2                 = 0x1405;\nconst FLOAT$2                        = 0x1406;\nconst defaults$2 = {\n  attribPrefix: \"\",\n};\n\n/**\n * Sets the default attrib prefix\n *\n * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n * as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n * In other words I'll create arrays of geometry like this\n *\n *     var arrays = {\n *       position: ...\n *       normal: ...\n *       texcoord: ...\n *     };\n *\n * But need those mapped to attributes and my attributes start with `a_`.\n *\n * @deprecated see {@link module:twgl.setDefaults}\n * @param {string} prefix prefix for attribs\n * @memberOf module:twgl/attributes\n */\nfunction setAttributePrefix(prefix) {\n  defaults$2.attribPrefix = prefix;\n}\n\nfunction setDefaults$2(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$2);\n}\n\nfunction setBufferFromTypedArray(gl, type, buffer, array, drawType) {\n  gl.bindBuffer(type, buffer);\n  gl.bufferData(type, array, drawType || STATIC_DRAW);\n}\n\n/**\n * Given typed array creates a WebGLBuffer and copies the typed array\n * into it.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken\n * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.\n * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.\n * @return {WebGLBuffer} the created WebGLBuffer\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromTypedArray(gl, typedArray, type, drawType) {\n  if (isBuffer(gl, typedArray)) {\n    return typedArray;\n  }\n  type = type || ARRAY_BUFFER$1;\n  const buffer = gl.createBuffer();\n  setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);\n  return buffer;\n}\n\nfunction isIndices(name) {\n  return name === \"indices\";\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArrayType === Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\nfunction getArray$1(array) {\n  return array.length ? array : array.data;\n}\n\nconst texcoordRE = /coord|texture/i;\nconst colorRE = /color|colour/i;\n\nfunction guessNumComponentsFromName(name, length) {\n  let numComponents;\n  if (texcoordRE.test(name)) {\n    numComponents = 2;\n  } else if (colorRE.test(name)) {\n    numComponents = 4;\n  } else {\n    numComponents = 3;  // position, normals, indices ...\n  }\n\n  if (length % numComponents > 0) {\n    throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);\n  }\n\n  return numComponents;\n}\n\nfunction getNumComponents$1(array, arrayName, numValues) {\n  return array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues || getArray$1(array).length);\n}\n\nfunction makeTypedArray(array, name) {\n  if (isArrayBuffer$1(array)) {\n    return array;\n  }\n\n  if (isArrayBuffer$1(array.data)) {\n    return array.data;\n  }\n\n  if (Array.isArray(array)) {\n    array = {\n      data: array,\n    };\n  }\n\n  let Type = array.type ? typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type) : undefined;\n  if (!Type) {\n    if (isIndices(name)) {\n      Type = Uint16Array;\n    } else {\n      Type = Float32Array;\n    }\n  }\n  return new Type(array.data);\n}\n\nfunction glTypeFromGLTypeOrTypedArrayType(glTypeOrTypedArrayCtor) {\n  return typeof glTypeOrTypedArrayCtor === 'number'\n      ? glTypeOrTypedArrayCtor\n      : glTypeOrTypedArrayCtor ? getGLTypeForTypedArrayType(glTypeOrTypedArrayCtor) : FLOAT$2;\n}\n\nfunction typedArrayTypeFromGLTypeOrTypedArrayCtor(glTypeOrTypedArrayCtor) {\n  return typeof glTypeOrTypedArrayCtor === 'number'\n      ? getTypedArrayTypeForGLType(glTypeOrTypedArrayCtor)\n      : glTypeOrTypedArrayCtor || Float32Array;\n}\n\nfunction attribBufferFromBuffer(gl, array/*, arrayName */) {\n  return {\n    buffer: array.buffer,\n    numValues: 2 * 3 * 4,  // safely divided by 2, 3, 4\n    type: glTypeFromGLTypeOrTypedArrayType(array.type),\n    arrayType: typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type),\n  };\n}\n\nfunction attribBufferFromSize(gl, array/*, arrayName*/) {\n  const numValues = array.data || array;\n  const arrayType = typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type);\n  const numBytes = numValues * arrayType.BYTES_PER_ELEMENT;\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(ARRAY_BUFFER$1, buffer);\n  gl.bufferData(ARRAY_BUFFER$1, numBytes, array.drawType || STATIC_DRAW);\n  return {\n    buffer,\n    numValues,\n    type: getGLTypeForTypedArrayType(arrayType),\n    arrayType,\n  };\n}\n\nfunction attribBufferFromArrayLike(gl, array, arrayName) {\n  const typedArray = makeTypedArray(array, arrayName);\n  return {\n    arrayType: typedArray.constructor,\n    buffer: createBufferFromTypedArray(gl, typedArray, undefined, array.drawType),\n    type: getGLTypeForTypedArray(typedArray),\n    numValues: 0,\n  };\n}\n\n/**\n * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer\n * for the attribute.\n *\n * @typedef {Object} AttribInfo\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {number} [numComponents] the number of components for this attribute.\n * @property {number} [size] synonym for `numComponents`.\n * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n * @property {boolean} [normalize] whether or not to normalize the data. Default = false\n * @property {number} [offset] offset into buffer in bytes. Default = 0\n * @property {number} [stride] the stride in bytes per element. Default = 0\n * @property {number} [divisor] the divisor in instances. Default = 0.\n *    Requires WebGL2 or the ANGLE_instanced_arrays extension.\n *    and, if you're using WebGL1 you must have called {@link module:twgl.addExtensionsToContext}\n * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * @typedef {(Int8ArrayConstructor|Uint8ArrayConstructor|Int16ArrayConstructor|Uint16ArrayConstructor|Int32ArrayConstructor|Uint32ArrayConstructor|Float32ArrayConstructor)} TypedArrayConstructor\n */\n\n/**\n * Use this type of array spec when TWGL can't guess the type or number of components of an array\n * @typedef {Object} FullArraySpec\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {(number|number[]|ArrayBufferView)} [data] The data of the array. A number alone becomes the number of elements of type.\n * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.\n *    If `coord` is in the name assumes `numComponents = 2`.\n *    If `color` is in the name assumes `numComponents = 4`.\n *    otherwise assumes `numComponents = 3`\n * @property {number|TypedArrayConstructor} [type] type. This is used if `data` is a JavaScript array, or `buffer` is passed in, or `data` is a number.\n *   It can either be the constructor for a typedarray. (eg. `Uint8Array`) OR a WebGL type, (eg `gl.UNSIGNED_BYTE`).\n *   For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: gl.UNSIGNED_BYTE, data: [255,0,255,255, ...], }`.\n * @property {number} [size] synonym for `numComponents`.\n * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.\n * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0\n * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0\n * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = 0.\n *     Requires WebGL2 or the ANGLE_instanced_arrays extension.\n *     and, if you using WebGL1 you must have called {@link module:twgl.addExtensionsToContext}\n * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.\n * @property {string} [name] synonym for `attrib`.\n * @property {string} [attribName] synonym for `attrib`.\n * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer\n *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`\n *    to provide this. Example:\n *\n *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {\n *           position: [1, 2, 3, ... ],\n *         });\n *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {\n *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1\n *         });\n *\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * An individual array in {@link module:twgl.Arrays}\n *\n * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`\n * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will\n * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.\n *\n * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec\n * @memberOf module:twgl\n */\n\n/**\n * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your\n * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * Objects with various fields. See {@link module:twgl.FullArraySpec}.\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays\n * @memberOf module:twgl\n */\n\n\n/**\n * Creates a set of attribute data and WebGLBuffers from set of arrays\n *\n * Given\n *\n *      var arrays = {\n *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *      };\n *\n * returns something like\n *\n *      var attribs = {\n *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n *      };\n *\n * notes:\n *\n * *   Arrays can take various forms\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * @param {WebGLRenderingContext} gl The webgl rendering context.\n * @param {module:twgl.Arrays} arrays The arrays\n * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from\n *   This lets you share buffers. Any arrays you supply will override\n *   the buffers from srcBufferInfo.\n * @return {Object.<string, module:twgl.AttribInfo>} the attribs\n * @memberOf module:twgl/attributes\n */\nfunction createAttribsFromArrays(gl, arrays) {\n  const attribs = {};\n  Object.keys(arrays).forEach(function(arrayName) {\n    if (!isIndices(arrayName)) {\n      const array = arrays[arrayName];\n      const attribName = array.attrib || array.name || array.attribName || (defaults$2.attribPrefix + arrayName);\n      if (array.value) {\n        if (!Array.isArray(array.value) && !isArrayBuffer$1(array.value)) {\n          throw new Error('array.value is not array or typedarray');\n        }\n        attribs[attribName] = {\n          value: array.value,\n        };\n      } else {\n        let fn;\n        if (array.buffer && array.buffer instanceof WebGLBuffer) {\n          fn = attribBufferFromBuffer;\n        } else if (typeof array === \"number\" || typeof array.data === \"number\") {\n          fn = attribBufferFromSize;\n        } else {\n          fn = attribBufferFromArrayLike;\n        }\n        const {buffer, type, numValues, arrayType} = fn(gl, array, arrayName);\n        const normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);\n        const numComponents = getNumComponents$1(array, arrayName, numValues);\n        attribs[attribName] = {\n          buffer:        buffer,\n          numComponents: numComponents,\n          type:          type,\n          normalize:     normalization,\n          stride:        array.stride || 0,\n          offset:        array.offset || 0,\n          divisor:       array.divisor === undefined ? undefined : array.divisor,\n          drawType:      array.drawType,\n        };\n      }\n    }\n  });\n  gl.bindBuffer(ARRAY_BUFFER$1, null);\n  return attribs;\n}\n\n/**\n * Sets the contents of a buffer attached to an attribInfo\n *\n * This is helper function to dynamically update a buffer.\n *\n * Let's say you make a bufferInfo\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n *\n *  And you want to dynamically update the positions. You could do this\n *\n *     // assuming arrays.position has already been updated with new data.\n *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);\n *\n * @param {WebGLRenderingContext} gl\n * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix\n *   the name of the attribute will include the prefix.\n * @param {ArraySpec} array Note: it is arguably inefficient to pass in anything but a typed array because anything\n *    else will have to be converted to a typed array before it can be used by WebGL. During init time that\n *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.\n * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer\n *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`\n *    for the portion of the array you want to use.\n *\n *        var someArray = new Float32Array(1000); // an array with 1000 floats\n *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray\n *\n *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`\n * @memberOf module:twgl/attributes\n */\nfunction setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {\n  array = makeTypedArray(array);\n  if (offset !== undefined) {\n    gl.bindBuffer(ARRAY_BUFFER$1, attribInfo.buffer);\n    gl.bufferSubData(ARRAY_BUFFER$1, offset, array);\n  } else {\n    setBufferFromTypedArray(gl, ARRAY_BUFFER$1, attribInfo.buffer, array, attribInfo.drawType);\n  }\n}\n\nfunction getBytesPerValueForGLType(gl, type) {\n  if (type === BYTE$1)           return 1;  // eslint-disable-line\n  if (type === UNSIGNED_BYTE$2)  return 1;  // eslint-disable-line\n  if (type === SHORT$1)          return 2;  // eslint-disable-line\n  if (type === UNSIGNED_SHORT$2) return 2;  // eslint-disable-line\n  if (type === INT$2)            return 4;  // eslint-disable-line\n  if (type === UNSIGNED_INT$2)   return 4;  // eslint-disable-line\n  if (type === FLOAT$2)          return 4;  // eslint-disable-line\n  return 0;\n}\n\n// Tries to get the number of elements from a set of arrays.\nconst positionKeys = ['position', 'positions', 'a_position'];\nfunction getNumElementsFromNonIndexedArrays(arrays) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in arrays) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(arrays)[0];\n  }\n  const array = arrays[key];\n  const length = getArray$1(array).length;\n  if (length === undefined) {\n    return 1;   // There's no arrays\n  }\n  const numComponents = getNumComponents$1(array, key);\n  const numElements = length / numComponents;\n  if (length % numComponents > 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\nfunction getNumElementsFromAttributes(gl, attribs) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in attribs) {\n      break;\n    }\n    key = defaults$2.attribPrefix + key;\n    if (key in attribs) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(attribs)[0];\n  }\n  const attrib = attribs[key];\n  if (!attrib.buffer) {\n    return 1; // There's no buffer\n  }\n  gl.bindBuffer(ARRAY_BUFFER$1, attrib.buffer);\n  const numBytes = gl.getBufferParameter(ARRAY_BUFFER$1, BUFFER_SIZE);\n  gl.bindBuffer(ARRAY_BUFFER$1, null);\n\n  const bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);\n  const totalElements = numBytes / bytesPerValue;\n  const numComponents = attrib.numComponents || attrib.size;\n  // TODO: check stride\n  const numElements = totalElements / numComponents;\n  if (numElements % 1 !== 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\n/**\n * @typedef {Object} BufferInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs appropriate to call `setAttributes`\n * @memberOf module:twgl\n */\n\n/**\n * Creates a BufferInfo from an object of arrays.\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * Given an object like\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n *  Creates an BufferInfo like this\n *\n *     bufferInfo = {\n *       numElements: 4,        // or whatever the number of elements is\n *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n *       attribs: {\n *         position: { buffer: WebGLBuffer, numComponents: 3, },\n *         normal:   { buffer: WebGLBuffer, numComponents: 3, },\n *         texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n *       },\n *     };\n *\n *  The properties of arrays can be JavaScript arrays in which case the number of components\n *  will be guessed.\n *\n *     var arrays = {\n *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n *        indices:  [0, 1, 2, 1, 2, 3],\n *     };\n *\n *  They can also be TypedArrays\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *\n *  Or AugmentedTypedArrays\n *\n *     var positions = createAugmentedTypedArray(3, 4);\n *     var texcoords = createAugmentedTypedArray(2, 4);\n *     var normals   = createAugmentedTypedArray(3, 4);\n *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n *\n *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n *     indices.push([0, 1, 2, 1, 2, 3]);\n *\n *     var arrays = {\n *        position: positions,\n *        texcoord: texcoords,\n *        normal:   normals,\n *        indices:  indices,\n *     };\n *\n * For the last example it is equivalent to\n *\n *     var bufferInfo = {\n *       attribs: {\n *         position: { numComponents: 3, buffer: gl.createBuffer(), },\n *         texcoord: { numComponents: 2, buffer: gl.createBuffer(), },\n *         normal: { numComponents: 3, buffer: gl.createBuffer(), },\n *       },\n *       indices: gl.createBuffer(),\n *       numElements: 6,\n *     };\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.position.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.texcoord.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.normal.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.Arrays} arrays Your data\n * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing\n *        buffer info to start from. WebGLBuffers etc specified\n *        in the srcBufferInfo will be used in a new BufferInfo\n *        with any arrays specified overriding the ones in\n *        srcBufferInfo.\n * @return {module:twgl.BufferInfo} A BufferInfo\n * @memberOf module:twgl/attributes\n */\nfunction createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {\n  const newAttribs = createAttribsFromArrays(gl, arrays);\n  const bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});\n  bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);\n  const indices = arrays.indices;\n  if (indices) {\n    const newIndices = makeTypedArray(indices, \"indices\");\n    bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, ELEMENT_ARRAY_BUFFER$2);\n    bufferInfo.numElements = newIndices.length;\n    bufferInfo.elementType = getGLTypeForTypedArray(newIndices);\n  } else if (!bufferInfo.numElements) {\n    bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);\n  }\n\n  return bufferInfo;\n}\n\n/**\n * Creates a buffer from an array, typed array, or array spec\n *\n * Given something like this\n *\n *     [1, 2, 3],\n *\n * or\n *\n *     new Uint16Array([1,2,3]);\n *\n * or\n *\n *     {\n *        data: [1, 2, 3],\n *        type: Uint8Array,\n *     }\n *\n * returns a WebGLBuffer that contains the given data.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.\n * @param {string} arrayName name of array. Used to guess the type if type can not be derived otherwise.\n * @return {WebGLBuffer} a WebGLBuffer containing the data in array.\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromArray(gl, array, arrayName) {\n  const type = arrayName === \"indices\" ? ELEMENT_ARRAY_BUFFER$2 : ARRAY_BUFFER$1;\n  const typedArray = makeTypedArray(array, arrayName);\n  return createBufferFromTypedArray(gl, typedArray, type);\n}\n\n/**\n * Creates buffers from arrays or typed arrays\n *\n * Given something like this\n *\n *     var arrays = {\n *        positions: [1, 2, 3],\n *        normals: [0, 0, 1],\n *     }\n *\n * returns something like\n *\n *     buffers = {\n *       positions: WebGLBuffer,\n *       normals: WebGLBuffer,\n *     }\n *\n * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.Arrays} arrays\n * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n * @memberOf module:twgl/attributes\n */\nfunction createBuffersFromArrays(gl, arrays) {\n  const buffers = { };\n  Object.keys(arrays).forEach(function(key) {\n    buffers[key] = createBufferFromArray(gl, arrays[key], key);\n  });\n\n  // Ugh!\n  if (arrays.indices) {\n    buffers.numElements = arrays.indices.length;\n    buffers.elementType = getGLTypeForTypedArray(makeTypedArray(arrays.indices));\n  } else {\n    buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);\n  }\n\n  return buffers;\n}\n\nvar attributes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttribsFromArrays: createAttribsFromArrays,\n  createBuffersFromArrays: createBuffersFromArrays,\n  createBufferFromArray: createBufferFromArray,\n  createBufferFromTypedArray: createBufferFromTypedArray,\n  createBufferInfoFromArrays: createBufferInfoFromArrays,\n  setAttribInfoBufferFromArray: setAttribInfoBufferFromArray,\n  setAttributePrefix: setAttributePrefix,\n  setAttributeDefaults_: setDefaults$2,\n  getNumComponents_: getNumComponents$1,\n  getArray_: getArray$1\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst getArray = getArray$1;  // eslint-disable-line\nconst getNumComponents = getNumComponents$1;  // eslint-disable-line\n\n/**\n * @typedef {(Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array)} TypedArray\n */\n\n/**\n * Add `push` to a typed array. It just keeps a 'cursor'\n * and allows use to `push` values into the array so we\n * don't have to manually compute offsets\n * @param {TypedArray} typedArray TypedArray to augment\n * @param {number} numComponents number of components.\n * @private\n */\nfunction augmentTypedArray(typedArray, numComponents) {\n  let cursor = 0;\n  typedArray.push = function() {\n    for (let ii = 0; ii < arguments.length; ++ii) {\n      const value = arguments[ii];\n      if (value instanceof Array || isArrayBuffer$1(value)) {\n        for (let jj = 0; jj < value.length; ++jj) {\n          typedArray[cursor++] = value[jj];\n        }\n      } else {\n        typedArray[cursor++] = value;\n      }\n    }\n  };\n  typedArray.reset = function(opt_index) {\n    cursor = opt_index || 0;\n  };\n  typedArray.numComponents = numComponents;\n  Object.defineProperty(typedArray, 'numElements', {\n    get: function() {\n      return this.length / this.numComponents | 0;\n    },\n  });\n  return typedArray;\n}\n\n/**\n * creates a typed array with a `push` function attached\n * so that you can easily *push* values.\n *\n * `push` can take multiple arguments. If an argument is an array each element\n * of the array will be added to the typed array.\n *\n * Example:\n *\n *     const array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values\n *     array.push(1, 2, 3);\n *     array.push([4, 5, 6]);\n *     // array now contains [1, 2, 3, 4, 5, 6]\n *\n * Also has `numComponents` and `numElements` properties.\n *\n * @param {number} numComponents number of components\n * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.\n * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.\n * @return {ArrayBufferView} A typed array.\n * @memberOf module:twgl/primitives\n */\nfunction createAugmentedTypedArray(numComponents, numElements, opt_type) {\n  const Type = opt_type || Float32Array;\n  return augmentTypedArray(new Type(numComponents * numElements), numComponents);\n}\n\nfunction allButIndices(name) {\n  return name !== \"indices\";\n}\n\n/**\n * Given indexed vertices creates a new set of vertices un-indexed by expanding the indexed vertices.\n * @param {Object.<string, TypedArray>} vertices The indexed vertices to deindex\n * @return {Object.<string, TypedArray>} The deindexed vertices\n * @memberOf module:twgl/primitives\n */\nfunction deindexVertices(vertices) {\n  const indices = vertices.indices;\n  const newVertices = {};\n  const numElements = indices.length;\n\n  function expandToUnindexed(channel) {\n    const srcBuffer = vertices[channel];\n    const numComponents = srcBuffer.numComponents;\n    const dstBuffer = createAugmentedTypedArray(numComponents, numElements, srcBuffer.constructor);\n    for (let ii = 0; ii < numElements; ++ii) {\n      const ndx = indices[ii];\n      const offset = ndx * numComponents;\n      for (let jj = 0; jj < numComponents; ++jj) {\n        dstBuffer.push(srcBuffer[offset + jj]);\n      }\n    }\n    newVertices[channel] = dstBuffer;\n  }\n\n  Object.keys(vertices).filter(allButIndices).forEach(expandToUnindexed);\n\n  return newVertices;\n}\n\n/**\n * flattens the normals of deindexed vertices in place.\n * @param {Object.<string, TypedArray>} vertices The deindexed vertices who's normals to flatten\n * @return {Object.<string, TypedArray>} The flattened vertices (same as was passed in)\n * @memberOf module:twgl/primitives\n */\nfunction flattenNormals(vertices) {\n  if (vertices.indices) {\n    throw new Error('can not flatten normals of indexed vertices. deindex them first');\n  }\n\n  const normals = vertices.normal;\n  const numNormals = normals.length;\n  for (let ii = 0; ii < numNormals; ii += 9) {\n    // pull out the 3 normals for this triangle\n    const nax = normals[ii + 0];\n    const nay = normals[ii + 1];\n    const naz = normals[ii + 2];\n\n    const nbx = normals[ii + 3];\n    const nby = normals[ii + 4];\n    const nbz = normals[ii + 5];\n\n    const ncx = normals[ii + 6];\n    const ncy = normals[ii + 7];\n    const ncz = normals[ii + 8];\n\n    // add them\n    let nx = nax + nbx + ncx;\n    let ny = nay + nby + ncy;\n    let nz = naz + nbz + ncz;\n\n    // normalize them\n    const length = Math.sqrt(nx * nx + ny * ny + nz * nz);\n\n    nx /= length;\n    ny /= length;\n    nz /= length;\n\n    // copy them back in\n    normals[ii + 0] = nx;\n    normals[ii + 1] = ny;\n    normals[ii + 2] = nz;\n\n    normals[ii + 3] = nx;\n    normals[ii + 4] = ny;\n    normals[ii + 5] = nz;\n\n    normals[ii + 6] = nx;\n    normals[ii + 7] = ny;\n    normals[ii + 8] = nz;\n  }\n\n  return vertices;\n}\n\nfunction applyFuncToV3Array(array, matrix, fn) {\n  const len = array.length;\n  const tmp = new Float32Array(3);\n  for (let ii = 0; ii < len; ii += 3) {\n    fn(matrix, [array[ii], array[ii + 1], array[ii + 2]], tmp);\n    array[ii    ] = tmp[0];\n    array[ii + 1] = tmp[1];\n    array[ii + 2] = tmp[2];\n  }\n}\n\nfunction transformNormal(mi, v, dst) {\n  dst = dst || create$1();\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Reorients directions by the given matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientDirections(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformDirection);\n  return array;\n}\n\n/**\n * Reorients normals by the inverse-transpose of the given\n * matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientNormals(array, matrix) {\n  applyFuncToV3Array(array, inverse(matrix), transformNormal);\n  return array;\n}\n\n/**\n * Reorients positions by the given matrix. In other words, it\n * multiplies each vertex by the given matrix.\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientPositions(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformPoint);\n  return array;\n}\n\n/**\n * @typedef {(number[]|TypedArray)} NativeArrayOrTypedArray\n */\n\n/**\n * Reorients arrays by the given matrix. Assumes arrays have\n * names that contains 'pos' could be reoriented as positions,\n * 'binorm' or 'tan' as directions, and 'norm' as normals.\n *\n * @param {Object.<string, NativeArrayOrTypedArray>} arrays The vertices to reorient\n * @param {module:twgl/m4.Mat4} matrix matrix to reorient by.\n * @return {Object.<string, NativeArrayOrTypedArray>} same arrays that were passed in.\n * @memberOf module:twgl/primitives\n */\nfunction reorientVertices(arrays, matrix) {\n  Object.keys(arrays).forEach(function(name) {\n    const array = arrays[name];\n    if (name.indexOf(\"pos\") >= 0) {\n      reorientPositions(array, matrix);\n    } else if (name.indexOf(\"tan\") >= 0 || name.indexOf(\"binorm\") >= 0) {\n      reorientDirections(array, matrix);\n    } else if (name.indexOf(\"norm\") >= 0) {\n      reorientNormals(array, matrix);\n    }\n  });\n  return arrays;\n}\n\n/**\n * Creates XY quad BufferInfo\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, WebGLBuffer>} the created XY Quad BufferInfo\n * @memberOf module:twgl/primitives\n * @function createXYQuadBuffers\n */\n\n/**\n * Creates XY quad Buffers\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {module:twgl.BufferInfo} the created XY Quad buffers\n * @memberOf module:twgl/primitives\n * @function createXYQuadBufferInfo\n */\n\n/**\n * Creates XY quad vertices\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0, 0.5);\n *\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, TypedArray>} the created XY Quad vertices\n * @memberOf module:twgl/primitives\n */\nfunction createXYQuadVertices(size, xOffset, yOffset) {\n  size = size || 2;\n  xOffset = xOffset || 0;\n  yOffset = yOffset || 0;\n  size *= 0.5;\n  return {\n    position: {\n      numComponents: 2,\n      data: [\n        xOffset + -1 * size, yOffset + -1 * size,\n        xOffset +  1 * size, yOffset + -1 * size,\n        xOffset + -1 * size, yOffset +  1 * size,\n        xOffset +  1 * size, yOffset +  1 * size,\n      ],\n    },\n    normal: [\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n    ],\n    texcoord: [\n      0, 0,\n      1, 0,\n      0, 1,\n      1, 1,\n    ],\n    indices: [ 0, 1, 2, 2, 1, 3 ],\n  };\n}\n\n/**\n * Creates XZ plane BufferInfo.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {module:twgl.BufferInfo} The created plane BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createPlaneBufferInfo\n */\n\n/**\n * Creates XZ plane buffers.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, WebGLBuffer>} The created plane buffers.\n * @memberOf module:twgl/primitives\n * @function createPlaneBuffers\n */\n\n/**\n * Creates XZ plane vertices.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, TypedArray>} The created plane vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createPlaneVertices(\n    width,\n    depth,\n    subdivisionsWidth,\n    subdivisionsDepth,\n    matrix) {\n  width = width || 1;\n  depth = depth || 1;\n  subdivisionsWidth = subdivisionsWidth || 1;\n  subdivisionsDepth = subdivisionsDepth || 1;\n  matrix = matrix || identity();\n\n  const numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n\n  for (let z = 0; z <= subdivisionsDepth; z++) {\n    for (let x = 0; x <= subdivisionsWidth; x++) {\n      const u = x / subdivisionsWidth;\n      const v = z / subdivisionsDepth;\n      positions.push(\n          width * u - width * 0.5,\n          0,\n          depth * v - depth * 0.5);\n      normals.push(0, 1, 0);\n      texcoords.push(u, v);\n    }\n  }\n\n  const numVertsAcross = subdivisionsWidth + 1;\n  const indices = createAugmentedTypedArray(\n      3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);\n\n  for (let z = 0; z < subdivisionsDepth; z++) {  // eslint-disable-line\n    for (let x = 0; x < subdivisionsWidth; x++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (z + 0) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x,\n          (z + 0) * numVertsAcross + x + 1);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (z + 1) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x + 1,\n          (z + 0) * numVertsAcross + x + 1);\n    }\n  }\n\n  const arrays = reorientVertices({\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  }, matrix);\n  return arrays;\n}\n\n/**\n * Creates sphere BufferInfo.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {module:twgl.BufferInfo} The created sphere BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createSphereBufferInfo\n */\n\n/**\n * Creates sphere buffers.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, WebGLBuffer>} The created sphere buffers.\n * @memberOf module:twgl/primitives\n * @function createSphereBuffers\n */\n\n/**\n * Creates sphere vertices.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, TypedArray>} The created sphere vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createSphereVertices(\n    radius,\n    subdivisionsAxis,\n    subdivisionsHeight,\n    opt_startLatitudeInRadians,\n    opt_endLatitudeInRadians,\n    opt_startLongitudeInRadians,\n    opt_endLongitudeInRadians) {\n  if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {\n    throw new Error('subdivisionAxis and subdivisionHeight must be > 0');\n  }\n\n  opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;\n  opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;\n  opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;\n  opt_endLongitudeInRadians = opt_endLongitudeInRadians || (Math.PI * 2);\n\n  const latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;\n  const longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians;\n\n  // We are going to generate our sphere by iterating through its\n  // spherical coordinates and generating 2 triangles for each quad on a\n  // ring of the sphere.\n  const numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let y = 0; y <= subdivisionsHeight; y++) {\n    for (let x = 0; x <= subdivisionsAxis; x++) {\n      // Generate a vertex based on its spherical coordinates\n      const u = x / subdivisionsAxis;\n      const v = y / subdivisionsHeight;\n      const theta = longRange * u + opt_startLongitudeInRadians;\n      const phi = latRange * v + opt_startLatitudeInRadians;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const sinPhi = Math.sin(phi);\n      const cosPhi = Math.cos(phi);\n      const ux = cosTheta * sinPhi;\n      const uy = cosPhi;\n      const uz = sinTheta * sinPhi;\n      positions.push(radius * ux, radius * uy, radius * uz);\n      normals.push(ux, uy, uz);\n      texcoords.push(1 - u, v);\n    }\n  }\n\n  const numVertsAround = subdivisionsAxis + 1;\n  const indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);\n  for (let x = 0; x < subdivisionsAxis; x++) {  // eslint-disable-line\n    for (let y = 0; y < subdivisionsHeight; y++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (y + 0) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (y + 1) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x + 1);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Array of the indices of corners of each face of a cube.\n * @type {Array.<number[]>}\n * @private\n */\nconst CUBE_FACE_INDICES = [\n  [3, 7, 5, 1],  // right\n  [6, 2, 0, 4],  // left\n  [6, 7, 3, 2],  // ??\n  [0, 1, 5, 4],  // ??\n  [7, 6, 4, 5],  // front\n  [2, 3, 1, 0],  // back\n];\n\n/**\n * Creates a BufferInfo for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCubeBufferInfo\n */\n\n/**\n * Creates the buffers and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCubeBuffers\n */\n\n/**\n * Creates the vertices and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createCubeVertices(size) {\n  size = size || 1;\n  const k = size / 2;\n\n  const cornerVertices = [\n    [-k, -k, -k],\n    [+k, -k, -k],\n    [-k, +k, -k],\n    [+k, +k, -k],\n    [-k, -k, +k],\n    [+k, -k, +k],\n    [-k, +k, +k],\n    [+k, +k, +k],\n  ];\n\n  const faceNormals = [\n    [+1, +0, +0],\n    [-1, +0, +0],\n    [+0, +1, +0],\n    [+0, -1, +0],\n    [+0, +0, +1],\n    [+0, +0, -1],\n  ];\n\n  const uvCoords = [\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [1, 1],\n  ];\n\n  const numVertices = 6 * 4;\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2 , numVertices);\n  const indices   = createAugmentedTypedArray(3, 6 * 2, Uint16Array);\n\n  for (let f = 0; f < 6; ++f) {\n    const faceIndices = CUBE_FACE_INDICES[f];\n    for (let v = 0; v < 4; ++v) {\n      const position = cornerVertices[faceIndices[v]];\n      const normal = faceNormals[f];\n      const uv = uvCoords[v];\n\n      // Each face needs all four vertices because the normals and texture\n      // coordinates are not all the same.\n      positions.push(position);\n      normals.push(normal);\n      texcoords.push(uv);\n\n    }\n    // Two triangles make a square face.\n    const offset = 4 * f;\n    indices.push(offset + 0, offset + 1, offset + 2);\n    indices.push(offset + 0, offset + 2, offset + 3);\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Creates a BufferInfo for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created cone BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBufferInfo\n */\n\n/**\n * Creates buffers for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, WebGLBuffer>} The created cone buffers.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBuffers\n */\n\n/**\n * Creates vertices for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis. .\n *\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, TypedArray>} The created cone vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createTruncatedConeVertices(\n    bottomRadius,\n    topRadius,\n    height,\n    radialSubdivisions,\n    verticalSubdivisions,\n    opt_topCap,\n    opt_bottomCap) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (verticalSubdivisions < 1) {\n    throw new Error('verticalSubdivisions must be 1 or greater');\n  }\n\n  const topCap = (opt_topCap === undefined) ? true : opt_topCap;\n  const bottomCap = (opt_bottomCap === undefined) ? true : opt_bottomCap;\n\n  const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n\n  const numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n  const indices   = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra / 2) * 2, Uint16Array);\n\n  const vertsAroundEdge = radialSubdivisions + 1;\n\n  // The slant of the cone is constant across its surface\n  const slant = Math.atan2(bottomRadius - topRadius, height);\n  const cosSlant = Math.cos(slant);\n  const sinSlant = Math.sin(slant);\n\n  const start = topCap ? -2 : 0;\n  const end = verticalSubdivisions + (bottomCap ? 2 : 0);\n\n  for (let yy = start; yy <= end; ++yy) {\n    let v = yy / verticalSubdivisions;\n    let y = height * v;\n    let ringRadius;\n    if (yy < 0) {\n      y = 0;\n      v = 1;\n      ringRadius = bottomRadius;\n    } else if (yy > verticalSubdivisions) {\n      y = height;\n      v = 1;\n      ringRadius = topRadius;\n    } else {\n      ringRadius = bottomRadius +\n        (topRadius - bottomRadius) * (yy / verticalSubdivisions);\n    }\n    if (yy === -2 || yy === verticalSubdivisions + 2) {\n      ringRadius = 0;\n      v = 0;\n    }\n    y -= height / 2;\n    for (let ii = 0; ii < vertsAroundEdge; ++ii) {\n      const sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);\n      const cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);\n      positions.push(sin * ringRadius, y, cos * ringRadius);\n      if (yy < 0) {\n        normals.push(0, -1, 0);\n      } else if (yy > verticalSubdivisions) {\n        normals.push(0, 1, 0);\n      } else if (ringRadius === 0.0) {\n        normals.push(0, 0, 0);\n      } else {\n        normals.push(sin * cosSlant, sinSlant, cos * cosSlant);\n      }\n      texcoords.push((ii / radialSubdivisions), 1 - v);\n    }\n  }\n\n  for (let yy = 0; yy < verticalSubdivisions + extra; ++yy) {  // eslint-disable-line\n    if (yy === 1 && topCap || yy === verticalSubdivisions + extra - 2 && bottomCap) {\n      continue;\n    }\n    for (let ii = 0; ii < radialSubdivisions; ++ii) {  // eslint-disable-line\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 0) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii);\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 0 + ii);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Expands RLE data\n * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z\n * @param {number[]} [padding] value to add each entry with.\n * @return {number[]} the expanded rleData\n * @private\n */\nfunction expandRLEData(rleData, padding) {\n  padding = padding || [];\n  const data = [];\n  for (let ii = 0; ii < rleData.length; ii += 4) {\n    const runLength = rleData[ii];\n    const element = rleData.slice(ii + 1, ii + 4);\n    element.push.apply(element, padding);\n    for (let jj = 0; jj < runLength; ++jj) {\n      data.push.apply(data, element);\n    }\n  }\n  return data;\n}\n\n/**\n * Creates 3D 'F' BufferInfo.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function create3DFBufferInfo\n */\n\n/**\n * Creates 3D 'F' buffers.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function create3DFBuffers\n */\n\n/**\n * Creates 3D 'F' vertices.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color arrays.\n *\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction create3DFVertices() {\n\n  const positions = [\n    // left column front\n    0,   0,  0,\n    0, 150,  0,\n    30,   0,  0,\n    0, 150,  0,\n    30, 150,  0,\n    30,   0,  0,\n\n    // top rung front\n    30,   0,  0,\n    30,  30,  0,\n    100,   0,  0,\n    30,  30,  0,\n    100,  30,  0,\n    100,   0,  0,\n\n    // middle rung front\n    30,  60,  0,\n    30,  90,  0,\n    67,  60,  0,\n    30,  90,  0,\n    67,  90,  0,\n    67,  60,  0,\n\n    // left column back\n      0,   0,  30,\n     30,   0,  30,\n      0, 150,  30,\n      0, 150,  30,\n     30,   0,  30,\n     30, 150,  30,\n\n    // top rung back\n     30,   0,  30,\n    100,   0,  30,\n     30,  30,  30,\n     30,  30,  30,\n    100,   0,  30,\n    100,  30,  30,\n\n    // middle rung back\n     30,  60,  30,\n     67,  60,  30,\n     30,  90,  30,\n     30,  90,  30,\n     67,  60,  30,\n     67,  90,  30,\n\n    // top\n      0,   0,   0,\n    100,   0,   0,\n    100,   0,  30,\n      0,   0,   0,\n    100,   0,  30,\n      0,   0,  30,\n\n    // top rung front\n    100,   0,   0,\n    100,  30,   0,\n    100,  30,  30,\n    100,   0,   0,\n    100,  30,  30,\n    100,   0,  30,\n\n    // under top rung\n    30,   30,   0,\n    30,   30,  30,\n    100,  30,  30,\n    30,   30,   0,\n    100,  30,  30,\n    100,  30,   0,\n\n    // between top rung and middle\n    30,   30,   0,\n    30,   60,  30,\n    30,   30,  30,\n    30,   30,   0,\n    30,   60,   0,\n    30,   60,  30,\n\n    // top of middle rung\n    30,   60,   0,\n    67,   60,  30,\n    30,   60,  30,\n    30,   60,   0,\n    67,   60,   0,\n    67,   60,  30,\n\n    // front of middle rung\n    67,   60,   0,\n    67,   90,  30,\n    67,   60,  30,\n    67,   60,   0,\n    67,   90,   0,\n    67,   90,  30,\n\n    // bottom of middle rung.\n    30,   90,   0,\n    30,   90,  30,\n    67,   90,  30,\n    30,   90,   0,\n    67,   90,  30,\n    67,   90,   0,\n\n    // front of bottom\n    30,   90,   0,\n    30,  150,  30,\n    30,   90,  30,\n    30,   90,   0,\n    30,  150,   0,\n    30,  150,  30,\n\n    // bottom\n    0,   150,   0,\n    0,   150,  30,\n    30,  150,  30,\n    0,   150,   0,\n    30,  150,  30,\n    30,  150,   0,\n\n    // left side\n    0,   0,   0,\n    0,   0,  30,\n    0, 150,  30,\n    0,   0,   0,\n    0, 150,  30,\n    0, 150,   0,\n  ];\n\n  const texcoords = [\n    // left column front\n    0.22, 0.19,\n    0.22, 0.79,\n    0.34, 0.19,\n    0.22, 0.79,\n    0.34, 0.79,\n    0.34, 0.19,\n\n    // top rung front\n    0.34, 0.19,\n    0.34, 0.31,\n    0.62, 0.19,\n    0.34, 0.31,\n    0.62, 0.31,\n    0.62, 0.19,\n\n    // middle rung front\n    0.34, 0.43,\n    0.34, 0.55,\n    0.49, 0.43,\n    0.34, 0.55,\n    0.49, 0.55,\n    0.49, 0.43,\n\n    // left column back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // middle rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // top rung front\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // under top rung\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // between top rung and middle\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // top of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // front of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom of middle rung.\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // front of bottom\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // left side\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n  ];\n\n  const normals = expandRLEData([\n    // left column front\n    // top rung front\n    // middle rung front\n    18, 0, 0, 1,\n\n    // left column back\n    // top rung back\n    // middle rung back\n    18, 0, 0, -1,\n\n    // top\n    6, 0, 1, 0,\n\n    // top rung front\n    6, 1, 0, 0,\n\n    // under top rung\n    6, 0, -1, 0,\n\n    // between top rung and middle\n    6, 1, 0, 0,\n\n    // top of middle rung\n    6, 0, 1, 0,\n\n    // front of middle rung\n    6, 1, 0, 0,\n\n    // bottom of middle rung.\n    6, 0, -1, 0,\n\n    // front of bottom\n    6, 1, 0, 0,\n\n    // bottom\n    6, 0, -1, 0,\n\n    // left side\n    6, -1, 0, 0,\n  ]);\n\n  const colors = expandRLEData([\n        // left column front\n        // top rung front\n        // middle rung front\n      18, 200,  70, 120,\n\n        // left column back\n        // top rung back\n        // middle rung back\n      18, 80, 70, 200,\n\n        // top\n      6, 70, 200, 210,\n\n        // top rung front\n      6, 200, 200, 70,\n\n        // under top rung\n      6, 210, 100, 70,\n\n        // between top rung and middle\n      6, 210, 160, 70,\n\n        // top of middle rung\n      6, 70, 180, 210,\n\n        // front of middle rung\n      6, 100, 70, 210,\n\n        // bottom of middle rung.\n      6, 76, 210, 100,\n\n        // front of bottom\n      6, 140, 210, 80,\n\n        // bottom\n      6, 90, 130, 110,\n\n        // left side\n      6, 160, 160, 220,\n  ], [255]);\n\n  const numVerts = positions.length / 3;\n\n  const arrays = {\n    position: createAugmentedTypedArray(3, numVerts),\n    texcoord: createAugmentedTypedArray(2,  numVerts),\n    normal: createAugmentedTypedArray(3, numVerts),\n    color: createAugmentedTypedArray(4, numVerts, Uint8Array),\n    indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array),\n  };\n\n  arrays.position.push(positions);\n  arrays.texcoord.push(texcoords);\n  arrays.normal.push(normals);\n  arrays.color.push(colors);\n\n  for (let ii = 0; ii < numVerts; ++ii) {\n    arrays.indices.push(ii);\n  }\n\n  return arrays;\n}\n\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCresentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCrescentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCrescentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n function createCrescentVertices(\n    verticalRadius,\n    outerRadius,\n    innerRadius,\n    thickness,\n    subdivisionsDown,\n    startOffset,\n    endOffset) {\n  if (subdivisionsDown <= 0) {\n    throw new Error('subdivisionDown must be > 0');\n  }\n\n  startOffset = startOffset || 0;\n  endOffset   = endOffset || 1;\n\n  const subdivisionsThick = 2;\n\n  const offsetRange = endOffset - startOffset;\n  const numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);\n  const positions   = createAugmentedTypedArray(3, numVertices);\n  const normals     = createAugmentedTypedArray(3, numVertices);\n  const texcoords   = createAugmentedTypedArray(2, numVertices);\n\n  function lerp(a, b, s) {\n    return a + (b - a) * s;\n  }\n\n  function createArc(arcRadius, x, normalMult, normalAdd, uMult, uAdd) {\n    for (let z = 0; z <= subdivisionsDown; z++) {\n      const uBack = x / (subdivisionsThick - 1);\n      const v = z / subdivisionsDown;\n      const xBack = (uBack - 0.5) * 2;\n      const angle = (startOffset + (v * offsetRange)) * Math.PI;\n      const s = Math.sin(angle);\n      const c = Math.cos(angle);\n      const radius = lerp(verticalRadius, arcRadius, s);\n      const px = xBack * thickness;\n      const py = c * verticalRadius;\n      const pz = s * radius;\n      positions.push(px, py, pz);\n      const n = add(multiply$1([0, s, c], normalMult), normalAdd);\n      normals.push(n);\n      texcoords.push(uBack * uMult + uAdd, v);\n    }\n  }\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let x = 0; x < subdivisionsThick; x++) {\n    const uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;\n    createArc(outerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);\n    createArc(innerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);\n  }\n\n  // Do outer surface.\n  const indices = createAugmentedTypedArray(3, (subdivisionsDown * 2) * (2 + subdivisionsThick), Uint16Array);\n\n  function createSurface(leftArcOffset, rightArcOffset) {\n    for (let z = 0; z < subdivisionsDown; ++z) {\n      // Make triangle 1 of quad.\n      indices.push(\n          leftArcOffset + z + 0,\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 0);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 1,\n          rightArcOffset + z + 0);\n    }\n  }\n\n  const numVerticesDown = subdivisionsDown + 1;\n  // front\n  createSurface(numVerticesDown * 0, numVerticesDown * 4);\n  // right\n  createSurface(numVerticesDown * 5, numVerticesDown * 7);\n  // back\n  createSurface(numVerticesDown * 6, numVerticesDown * 2);\n  // left\n  createSurface(numVerticesDown * 3, numVerticesDown * 1);\n\n  return {\n    position: positions,\n    normal:   normals,\n    texcoord: texcoords,\n    indices:  indices,\n  };\n}\n\n/**\n * Creates cylinder BufferInfo. The cylinder will be created around the origin\n * along the y-axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of cylinder.\n * @param {number} height Height of cylinder.\n * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n * @param {boolean} [topCap] Create top cap. Default = true.\n * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCylinderBufferInfo\n */\n\n /**\n  * Creates cylinder buffers. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, WebGLBuffer>} The created buffers.\n  * @memberOf module:twgl/primitives\n  * @function createCylinderBuffers\n  */\n\n /**\n  * Creates cylinder vertices. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, TypedArray>} The created vertices.\n  * @memberOf module:twgl/primitives\n  */\nfunction createCylinderVertices(\n    radius,\n    height,\n    radialSubdivisions,\n    verticalSubdivisions,\n    topCap,\n    bottomCap) {\n  return createTruncatedConeVertices(\n      radius,\n      radius,\n      height,\n      radialSubdivisions,\n      verticalSubdivisions,\n      topCap,\n      bottomCap);\n}\n\n/**\n * Creates BufferInfo for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTorusBufferInfo\n */\n\n/**\n * Creates buffers for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createTorusBuffers\n */\n\n/**\n * Creates vertices for a torus\n *\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createTorusVertices(\n    radius,\n    thickness,\n    radialSubdivisions,\n    bodySubdivisions,\n    startAngle,\n    endAngle) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (bodySubdivisions < 3) {\n    throw new Error('verticalSubdivisions must be 3 or greater');\n  }\n\n  startAngle = startAngle || 0;\n  endAngle = endAngle || Math.PI * 2;\n  const range = endAngle - startAngle;\n\n  const radialParts = radialSubdivisions + 1;\n  const bodyParts   = bodySubdivisions + 1;\n  const numVertices = radialParts * bodyParts;\n  const positions   = createAugmentedTypedArray(3, numVertices);\n  const normals     = createAugmentedTypedArray(3, numVertices);\n  const texcoords   = createAugmentedTypedArray(2, numVertices);\n  const indices     = createAugmentedTypedArray(3, (radialSubdivisions) * (bodySubdivisions) * 2, Uint16Array);\n\n  for (let slice = 0; slice < bodyParts; ++slice) {\n    const v = slice / bodySubdivisions;\n    const sliceAngle = v * Math.PI * 2;\n    const sliceSin = Math.sin(sliceAngle);\n    const ringRadius = radius + sliceSin * thickness;\n    const ny = Math.cos(sliceAngle);\n    const y = ny * thickness;\n    for (let ring = 0; ring < radialParts; ++ring) {\n      const u = ring / radialSubdivisions;\n      const ringAngle = startAngle + u * range;\n      const xSin = Math.sin(ringAngle);\n      const zCos = Math.cos(ringAngle);\n      const x = xSin * ringRadius;\n      const z = zCos * ringRadius;\n      const nx = xSin * sliceSin;\n      const nz = zCos * sliceSin;\n      positions.push(x, y, z);\n      normals.push(nx, ny, nz);\n      texcoords.push(u, 1 - v);\n    }\n  }\n\n  for (let slice = 0; slice < bodySubdivisions; ++slice) {  // eslint-disable-line\n    for (let ring = 0; ring < radialSubdivisions; ++ring) {  // eslint-disable-line\n      const nextRingIndex  = 1 + ring;\n      const nextSliceIndex = 1 + slice;\n      indices.push(radialParts * slice          + ring,\n                   radialParts * nextSliceIndex + ring,\n                   radialParts * slice          + nextRingIndex);\n      indices.push(radialParts * nextSliceIndex + ring,\n                   radialParts * nextSliceIndex + nextRingIndex,\n                   radialParts * slice          + nextRingIndex);\n    }\n  }\n\n  return {\n    position: positions,\n    normal:   normals,\n    texcoord: texcoords,\n    indices:  indices,\n  };\n}\n\n\n/**\n * Creates a disc BufferInfo. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createDiscBufferInfo\n */\n\n/**\n * Creates disc buffers. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createDiscBuffers\n */\n\n/**\n * Creates disc vertices. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createDiscVertices(\n    radius,\n    divisions,\n    stacks,\n    innerRadius,\n    stackPower) {\n  if (divisions < 3) {\n    throw new Error('divisions must be at least 3');\n  }\n\n  stacks = stacks ? stacks : 1;\n  stackPower = stackPower ? stackPower : 1;\n  innerRadius = innerRadius ? innerRadius : 0;\n\n  // Note: We don't share the center vertex because that would\n  // mess up texture coordinates.\n  const numVertices = (divisions + 1) * (stacks + 1);\n\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n  const indices   = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);\n\n  let firstIndex = 0;\n  const radiusSpan = radius - innerRadius;\n  const pointsPerStack = divisions + 1;\n\n  // Build the disk one stack at a time.\n  for (let stack = 0; stack <= stacks; ++stack) {\n    const stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);\n\n    for (let i = 0; i <= divisions; ++i) {\n      const theta = 2.0 * Math.PI * i / divisions;\n      const x = stackRadius * Math.cos(theta);\n      const z = stackRadius * Math.sin(theta);\n\n      positions.push(x, 0, z);\n      normals.push(0, 1, 0);\n      texcoords.push(1 - (i / divisions), stack / stacks);\n      if (stack > 0 && i !== divisions) {\n        // a, b, c and d are the indices of the vertices of a quad.  unless\n        // the current stack is the one closest to the center, in which case\n        // the vertices a and b connect to the center vertex.\n        const a = firstIndex + (i + 1);\n        const b = firstIndex + i;\n        const c = firstIndex + i - pointsPerStack;\n        const d = firstIndex + (i + 1) - pointsPerStack;\n\n        // Make a quad of the vertices a, b, c, d.\n        indices.push(a, b, c);\n        indices.push(a, c, d);\n      }\n    }\n\n    firstIndex += divisions + 1;\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * creates a random integer between 0 and range - 1 inclusive.\n * @param {number} range\n * @return {number} random value between 0 and range - 1 inclusive.\n * @private\n */\nfunction randInt(range) {\n  return Math.random() * range | 0;\n}\n\n/**\n * Used to supply random colors\n * @callback RandomColorFunc\n * @param {number} ndx index of triangle/quad if unindexed or index of vertex if indexed\n * @param {number} channel 0 = red, 1 = green, 2 = blue, 3 = alpha\n * @return {number} a number from 0 to 255\n * @memberOf module:twgl/primitives\n */\n\n/**\n * @typedef {Object} RandomVerticesOptions\n * @property {number} [vertsPerColor] Defaults to 3 for non-indexed vertices\n * @property {module:twgl/primitives.RandomColorFunc} [rand] A function to generate random numbers\n * @memberOf module:twgl/primitives\n */\n\n/**\n * Creates an augmentedTypedArray of random vertex colors.\n * If the vertices are indexed (have an indices array) then will\n * just make random colors. Otherwise assumes they are triangles\n * and makes one random color for every 3 vertices.\n * @param {Object.<string, AugmentedTypedArray>} vertices Vertices as returned from one of the createXXXVertices functions.\n * @param {module:twgl/primitives.RandomVerticesOptions} [options] options.\n * @return {Object.<string, AugmentedTypedArray>} same vertices as passed in with `color` added.\n * @memberOf module:twgl/primitives\n */\nfunction makeRandomVertexColors(vertices, options) {\n  options = options || {};\n  const numElements = vertices.position.numElements;\n  const vColors = createAugmentedTypedArray(4, numElements, Uint8Array);\n  const rand = options.rand || function(ndx, channel) {\n    return channel < 3 ? randInt(256) : 255;\n  };\n  vertices.color = vColors;\n  if (vertices.indices) {\n    // just make random colors if index\n    for (let ii = 0; ii < numElements; ++ii) {\n      vColors.push(rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3));\n    }\n  } else {\n    // make random colors per triangle\n    const numVertsPerColor = options.vertsPerColor || 3;\n    const numSets = numElements / numVertsPerColor;\n    for (let ii = 0; ii < numSets; ++ii) {  // eslint-disable-line\n      const color = [rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3)];\n      for (let jj = 0; jj < numVertsPerColor; ++jj) {\n        vColors.push(color);\n      }\n    }\n  }\n  return vertices;\n}\n\n/**\n * creates a function that calls fn to create vertices and then\n * creates a buffers for them\n * @private\n */\nfunction createBufferFunc(fn) {\n  return function(gl) {\n    const arrays = fn.apply(this, Array.prototype.slice.call(arguments, 1));\n    return createBuffersFromArrays(gl, arrays);\n  };\n}\n\n/**\n * creates a function that calls fn to create vertices and then\n * creates a bufferInfo object for them\n * @private\n */\nfunction createBufferInfoFunc(fn) {\n  return function(gl) {\n    const arrays = fn.apply(null,  Array.prototype.slice.call(arguments, 1));\n    return createBufferInfoFromArrays(gl, arrays);\n  };\n}\n\nconst arraySpecPropertyNames = [\n  \"numComponents\",\n  \"size\",\n  \"type\",\n  \"normalize\",\n  \"stride\",\n  \"offset\",\n  \"attrib\",\n  \"name\",\n  \"attribName\",\n];\n\n/**\n * Copy elements from one array to another\n *\n * @param {Array|TypedArray} src source array\n * @param {Array|TypedArray} dst dest array\n * @param {number} dstNdx index in dest to copy src\n * @param {number} [offset] offset to add to copied values\n * @private\n */\nfunction copyElements(src, dst, dstNdx, offset) {\n  offset = offset || 0;\n  const length = src.length;\n  for (let ii = 0; ii < length; ++ii) {\n    dst[dstNdx + ii] = src[ii] + offset;\n  }\n}\n\n/**\n * Creates an array of the same time\n *\n * @param {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} srcArray array who's type to copy\n * @param {number} length size of new array\n * @return {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} array with same type as srcArray\n * @private\n */\nfunction createArrayOfSameType(srcArray, length) {\n  const arraySrc = getArray(srcArray);\n  const newArray = new arraySrc.constructor(length);\n  let newArraySpec = newArray;\n  // If it appears to have been augmented make new one augmented\n  if (arraySrc.numComponents && arraySrc.numElements) {\n    augmentTypedArray(newArray, arraySrc.numComponents);\n  }\n  // If it was a full spec make new one a full spec\n  if (srcArray.data) {\n    newArraySpec = {\n      data: newArray,\n    };\n    copyNamedProperties(arraySpecPropertyNames, srcArray, newArraySpec);\n  }\n  return newArraySpec;\n}\n\n/**\n * Concatenates sets of vertices\n *\n * Assumes the vertices match in composition. For example\n * if one set of vertices has positions, normals, and indices\n * all sets of vertices must have positions, normals, and indices\n * and of the same type.\n *\n * Example:\n *\n *      const cubeVertices = twgl.primitives.createCubeVertices(2);\n *      const sphereVertices = twgl.primitives.createSphereVertices(1, 10, 10);\n *      // move the sphere 2 units up\n *      twgl.primitives.reorientVertices(\n *          sphereVertices, twgl.m4.translation([0, 2, 0]));\n *      // merge the sphere with the cube\n *      const cubeSphereVertices = twgl.primitives.concatVertices(\n *          [cubeVertices, sphereVertices]);\n *      // turn them into WebGL buffers and attrib data\n *      const bufferInfo = twgl.createBufferInfoFromArrays(gl, cubeSphereVertices);\n *\n * @param {module:twgl.Arrays[]} arrays Array of arrays of vertices\n * @return {module:twgl.Arrays} The concatenated vertices.\n * @memberOf module:twgl/primitives\n */\nfunction concatVertices(arrayOfArrays) {\n  const names = {};\n  let baseName;\n  // get names of all arrays.\n  // and numElements for each set of vertices\n  for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n    const arrays = arrayOfArrays[ii];\n    Object.keys(arrays).forEach(function(name) {  // eslint-disable-line\n      if (!names[name]) {\n        names[name] = [];\n      }\n      if (!baseName && name !== 'indices') {\n        baseName = name;\n      }\n      const arrayInfo = arrays[name];\n      const numComponents = getNumComponents(arrayInfo, name);\n      const array = getArray(arrayInfo);\n      const numElements = array.length / numComponents;\n      names[name].push(numElements);\n    });\n  }\n\n  // compute length of combined array\n  // and return one for reference\n  function getLengthOfCombinedArrays(name) {\n    let length = 0;\n    let arraySpec;\n    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n      const arrays = arrayOfArrays[ii];\n      const arrayInfo = arrays[name];\n      const array = getArray(arrayInfo);\n      length += array.length;\n      if (!arraySpec || arrayInfo.data) {\n        arraySpec = arrayInfo;\n      }\n    }\n    return {\n      length: length,\n      spec: arraySpec,\n    };\n  }\n\n  function copyArraysToNewArray(name, base, newArray) {\n    let baseIndex = 0;\n    let offset = 0;\n    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n      const arrays = arrayOfArrays[ii];\n      const arrayInfo = arrays[name];\n      const array = getArray(arrayInfo);\n      if (name === 'indices') {\n        copyElements(array, newArray, offset, baseIndex);\n        baseIndex += base[ii];\n      } else {\n        copyElements(array, newArray, offset);\n      }\n      offset += array.length;\n    }\n  }\n\n  const base = names[baseName];\n\n  const newArrays = {};\n  Object.keys(names).forEach(function(name) {\n    const info = getLengthOfCombinedArrays(name);\n    const newArraySpec = createArrayOfSameType(info.spec, info.length);\n    copyArraysToNewArray(name, base, getArray(newArraySpec));\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\n/**\n * Creates a duplicate set of vertices\n *\n * This is useful for calling reorientVertices when you\n * also want to keep the original available\n *\n * @param {module:twgl.Arrays} arrays of vertices\n * @return {module:twgl.Arrays} The duplicated vertices.\n * @memberOf module:twgl/primitives\n */\nfunction duplicateVertices(arrays) {\n  const newArrays = {};\n  Object.keys(arrays).forEach(function(name) {\n    const arraySpec = arrays[name];\n    const srcArray = getArray(arraySpec);\n    const newArraySpec = createArrayOfSameType(arraySpec, srcArray.length);\n    copyElements(srcArray, getArray(newArraySpec), 0);\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\nconst create3DFBufferInfo = createBufferInfoFunc(create3DFVertices);\nconst create3DFBuffers = createBufferFunc(create3DFVertices);\nconst createCubeBufferInfo = createBufferInfoFunc(createCubeVertices);\nconst createCubeBuffers = createBufferFunc(createCubeVertices);\nconst createPlaneBufferInfo = createBufferInfoFunc(createPlaneVertices);\nconst createPlaneBuffers = createBufferFunc(createPlaneVertices);\nconst createSphereBufferInfo = createBufferInfoFunc(createSphereVertices);\nconst createSphereBuffers = createBufferFunc(createSphereVertices);\nconst createTruncatedConeBufferInfo = createBufferInfoFunc(createTruncatedConeVertices);\nconst createTruncatedConeBuffers = createBufferFunc(createTruncatedConeVertices);\nconst createXYQuadBufferInfo = createBufferInfoFunc(createXYQuadVertices);\nconst createXYQuadBuffers = createBufferFunc(createXYQuadVertices);\nconst createCrescentBufferInfo = createBufferInfoFunc(createCrescentVertices);\nconst createCrescentBuffers = createBufferFunc(createCrescentVertices);\nconst createCylinderBufferInfo = createBufferInfoFunc(createCylinderVertices);\nconst createCylinderBuffers = createBufferFunc(createCylinderVertices);\nconst createTorusBufferInfo = createBufferInfoFunc(createTorusVertices);\nconst createTorusBuffers = createBufferFunc(createTorusVertices);\nconst createDiscBufferInfo = createBufferInfoFunc(createDiscVertices);\nconst createDiscBuffers = createBufferFunc(createDiscVertices);\n\n// these were mis-spelled until 4.12\nconst createCresentBufferInfo = createCrescentBufferInfo;\nconst createCresentBuffers = createCrescentBuffers;\nconst createCresentVertices = createCrescentVertices;\n\nvar primitives = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  create3DFBufferInfo: create3DFBufferInfo,\n  create3DFBuffers: create3DFBuffers,\n  create3DFVertices: create3DFVertices,\n  createAugmentedTypedArray: createAugmentedTypedArray,\n  createCubeBufferInfo: createCubeBufferInfo,\n  createCubeBuffers: createCubeBuffers,\n  createCubeVertices: createCubeVertices,\n  createPlaneBufferInfo: createPlaneBufferInfo,\n  createPlaneBuffers: createPlaneBuffers,\n  createPlaneVertices: createPlaneVertices,\n  createSphereBufferInfo: createSphereBufferInfo,\n  createSphereBuffers: createSphereBuffers,\n  createSphereVertices: createSphereVertices,\n  createTruncatedConeBufferInfo: createTruncatedConeBufferInfo,\n  createTruncatedConeBuffers: createTruncatedConeBuffers,\n  createTruncatedConeVertices: createTruncatedConeVertices,\n  createXYQuadBufferInfo: createXYQuadBufferInfo,\n  createXYQuadBuffers: createXYQuadBuffers,\n  createXYQuadVertices: createXYQuadVertices,\n  createCresentBufferInfo: createCresentBufferInfo,\n  createCresentBuffers: createCresentBuffers,\n  createCresentVertices: createCresentVertices,\n  createCrescentBufferInfo: createCrescentBufferInfo,\n  createCrescentBuffers: createCrescentBuffers,\n  createCrescentVertices: createCrescentVertices,\n  createCylinderBufferInfo: createCylinderBufferInfo,\n  createCylinderBuffers: createCylinderBuffers,\n  createCylinderVertices: createCylinderVertices,\n  createTorusBufferInfo: createTorusBufferInfo,\n  createTorusBuffers: createTorusBuffers,\n  createTorusVertices: createTorusVertices,\n  createDiscBufferInfo: createDiscBufferInfo,\n  createDiscBuffers: createDiscBuffers,\n  createDiscVertices: createDiscVertices,\n  deindexVertices: deindexVertices,\n  flattenNormals: flattenNormals,\n  makeRandomVertexColors: makeRandomVertexColors,\n  reorientDirections: reorientDirections,\n  reorientNormals: reorientNormals,\n  reorientPositions: reorientPositions,\n  reorientVertices: reorientVertices,\n  concatVertices: concatVertices,\n  duplicateVertices: duplicateVertices\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Gets the gl version as a number\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {number} version of gl\n * @private\n */\n//function getVersionAsNumber(gl) {\n//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));\n//}\n\n/**\n * Check if context is WebGL 2.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 2.0\n * @memberOf module:twgl\n */\nfunction isWebGL2(gl) {\n  // This is the correct check but it's slow\n  //  return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0\") === 0;\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGL2RenderingContext;\n  return !!gl.texStorage2D;\n}\n\n/**\n * Check if context is WebGL 1.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 1.0\n * @memberOf module:twgl\n */\nfunction isWebGL1(gl) {\n  // This is the correct check but it's slow\n  // const version = getVersionAsNumber(gl);\n  // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGLRenderingContext;\n  return !gl.texStorage2D;\n}\n\n/**\n * Gets a string for WebGL enum\n *\n * Note: Several enums are the same. Without more\n * context (which function) it's impossible to always\n * give the correct enum. As it is, for matching values\n * it gives all enums. Checking the WebGL2RenderingContext\n * that means\n *\n *      0     = ZERO | POINT | NONE | NO_ERROR\n *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT\n *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB\n *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING\n *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING\n *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING\n *\n * It's also not useful for bits really unless you pass in individual bits.\n * In other words\n *\n *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;\n *     twgl.glEnumToString(gl, bits);  // not going to work\n *\n * Note that some enums only exist on extensions. If you\n * want them to show up you need to pass the extension at least\n * once. For example\n *\n *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');\n *     if (ext) {\n *        twgl.glEnumToString(ext, 0);  // just prime the function\n *\n *        ..later..\n *\n *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;\n *        console.log(twgl.glEnumToString(gl, internalFormat));\n *\n * Notice I didn't have to pass the extension the second time. This means\n * you can have place that generically gets an enum for texture formats for example.\n * and as long as you primed the function with the extensions\n *\n * If you're using `twgl.addExtensionsToContext` to enable your extensions\n * then twgl will automatically get the extension's enums.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object\n * @param {number} value the value of the enum you want to look up.\n * @return {string} enum string or hex value\n * @memberOf module:twgl\n * @function glEnumToString\n */\nconst glEnumToString = (function() {\n  const haveEnumsForType = {};\n  const enums = {};\n\n  function addEnums(gl) {\n    const type = gl.constructor.name;\n    if (!haveEnumsForType[type]) {\n      for (const key in gl) {\n        if (typeof gl[key] === 'number') {\n          const existing = enums[gl[key]];\n          enums[gl[key]] = existing ? `${existing} | ${key}` : key;\n        }\n      }\n      haveEnumsForType[type] = true;\n    }\n  }\n\n  return function glEnumToString(gl, value) {\n    addEnums(gl);\n    return enums[value] || (typeof value === 'number' ? `0x${value.toString(16)}` : value);\n  };\n}());\n\nvar utils = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  glEnumToString: glEnumToString,\n  isWebGL1: isWebGL1,\n  isWebGL2: isWebGL2\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nconst defaults$1 = {\n  textureColor: new Uint8Array([128, 192, 255, 255]),\n  textureOptions: {},\n  crossOrigin: undefined,\n};\nconst isArrayBuffer = isArrayBuffer$1;\n\n// Should we make this on demand?\nconst getShared2DContext = function() {\n  let s_ctx;\n  return function getShared2DContext() {\n    s_ctx = s_ctx ||\n        ((typeof document !== 'undefined' && document.createElement)\n          ? document.createElement(\"canvas\").getContext(\"2d\")\n          : null);\n    return s_ctx;\n  };\n}();\n\n// NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but\n//       not only does Firefox NOT support it but Firefox freezes immediately\n//       if you try to create one instead of just returning null and continuing.\n//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext(\"2d\"));  // OffscreenCanvas may not support 2d\n\n// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2\n// we can use the various unpack settings. Otherwise we could try using\n// the ability of an ImageBitmap to be cut. Unfortunately cutting an ImageBitmap\n// is async and the current TWGL code expects a non-Async result though that\n// might not be a problem. ImageBitmap though is not available in Edge or Safari\n// as of 2018-01-02\n\n/* PixelFormat */\nconst ALPHA                          = 0x1906;\nconst RGB                            = 0x1907;\nconst RGBA$1                           = 0x1908;\nconst LUMINANCE                      = 0x1909;\nconst LUMINANCE_ALPHA                = 0x190A;\nconst DEPTH_COMPONENT$1                = 0x1902;\nconst DEPTH_STENCIL$1                  = 0x84F9;\n\n/* TextureWrapMode */\n// const REPEAT                         = 0x2901;\n// const MIRRORED_REPEAT                = 0x8370;\nconst CLAMP_TO_EDGE$1                  = 0x812f;\n\n/* TextureMagFilter */\nconst NEAREST                        = 0x2600;\nconst LINEAR$1                         = 0x2601;\n\n/* TextureMinFilter */\n// const NEAREST_MIPMAP_NEAREST         = 0x2700;\n// const LINEAR_MIPMAP_NEAREST          = 0x2701;\n// const NEAREST_MIPMAP_LINEAR          = 0x2702;\n// const LINEAR_MIPMAP_LINEAR           = 0x2703;\n\n/* Texture Target */\nconst TEXTURE_2D$2                     = 0x0de1;\nconst TEXTURE_CUBE_MAP$1               = 0x8513;\nconst TEXTURE_3D$1                     = 0x806f;\nconst TEXTURE_2D_ARRAY$1               = 0x8c1a;\n\n/* Cubemap Targets */\nconst TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;\nconst TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;\nconst TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;\nconst TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851a;\n\n/* Texture Parameters */\nconst TEXTURE_MIN_FILTER             = 0x2801;\nconst TEXTURE_MAG_FILTER             = 0x2800;\nconst TEXTURE_WRAP_S                 = 0x2802;\nconst TEXTURE_WRAP_T                 = 0x2803;\nconst TEXTURE_WRAP_R                 = 0x8072;\nconst TEXTURE_MIN_LOD                = 0x813a;\nconst TEXTURE_MAX_LOD                = 0x813b;\nconst TEXTURE_BASE_LEVEL             = 0x813c;\nconst TEXTURE_MAX_LEVEL              = 0x813d;\nconst TEXTURE_COMPARE_MODE           = 0x884C;\nconst TEXTURE_COMPARE_FUNC           = 0x884D;\n\n/* Pixel store */\nconst UNPACK_ALIGNMENT                   = 0x0cf5;\nconst UNPACK_ROW_LENGTH                  = 0x0cf2;\nconst UNPACK_IMAGE_HEIGHT                = 0x806e;\nconst UNPACK_SKIP_PIXELS                 = 0x0cf4;\nconst UNPACK_SKIP_ROWS                   = 0x0cf3;\nconst UNPACK_SKIP_IMAGES                 = 0x806d;\nconst UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\nconst UNPACK_PREMULTIPLY_ALPHA_WEBGL     = 0x9241;\nconst UNPACK_FLIP_Y_WEBGL                = 0x9240;\n\nconst R8                           = 0x8229;\nconst R8_SNORM                     = 0x8F94;\nconst R16F                         = 0x822D;\nconst R32F                         = 0x822E;\nconst R8UI                         = 0x8232;\nconst R8I                          = 0x8231;\nconst RG16UI                       = 0x823A;\nconst RG16I                        = 0x8239;\nconst RG32UI                       = 0x823C;\nconst RG32I                        = 0x823B;\nconst RG8                          = 0x822B;\nconst RG8_SNORM                    = 0x8F95;\nconst RG16F                        = 0x822F;\nconst RG32F                        = 0x8230;\nconst RG8UI                        = 0x8238;\nconst RG8I                         = 0x8237;\nconst R16UI                        = 0x8234;\nconst R16I                         = 0x8233;\nconst R32UI                        = 0x8236;\nconst R32I                         = 0x8235;\nconst RGB8                         = 0x8051;\nconst SRGB8                        = 0x8C41;\nconst RGB565$1                       = 0x8D62;\nconst RGB8_SNORM                   = 0x8F96;\nconst R11F_G11F_B10F               = 0x8C3A;\nconst RGB9_E5                      = 0x8C3D;\nconst RGB16F                       = 0x881B;\nconst RGB32F                       = 0x8815;\nconst RGB8UI                       = 0x8D7D;\nconst RGB8I                        = 0x8D8F;\nconst RGB16UI                      = 0x8D77;\nconst RGB16I                       = 0x8D89;\nconst RGB32UI                      = 0x8D71;\nconst RGB32I                       = 0x8D83;\nconst RGBA8                        = 0x8058;\nconst SRGB8_ALPHA8                 = 0x8C43;\nconst RGBA8_SNORM                  = 0x8F97;\nconst RGB5_A1$1                      = 0x8057;\nconst RGBA4$1                        = 0x8056;\nconst RGB10_A2                     = 0x8059;\nconst RGBA16F                      = 0x881A;\nconst RGBA32F                      = 0x8814;\nconst RGBA8UI                      = 0x8D7C;\nconst RGBA8I                       = 0x8D8E;\nconst RGB10_A2UI                   = 0x906F;\nconst RGBA16UI                     = 0x8D76;\nconst RGBA16I                      = 0x8D88;\nconst RGBA32I                      = 0x8D82;\nconst RGBA32UI                     = 0x8D70;\n\nconst DEPTH_COMPONENT16$1            = 0x81A5;\nconst DEPTH_COMPONENT24$1            = 0x81A6;\nconst DEPTH_COMPONENT32F$1           = 0x8CAC;\nconst DEPTH32F_STENCIL8$1            = 0x8CAD;\nconst DEPTH24_STENCIL8$1             = 0x88F0;\n\n/* DataType */\nconst BYTE                         = 0x1400;\nconst UNSIGNED_BYTE$1                = 0x1401;\nconst SHORT                        = 0x1402;\nconst UNSIGNED_SHORT$1               = 0x1403;\nconst INT$1                          = 0x1404;\nconst UNSIGNED_INT$1                 = 0x1405;\nconst FLOAT$1                        = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5         = 0x8363;\nconst HALF_FLOAT                   = 0x140B;\nconst HALF_FLOAT_OES               = 0x8D61;  // Thanks Khronos for making this different >:(\nconst UNSIGNED_INT_2_10_10_10_REV  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nconst UNSIGNED_INT_24_8            = 0x84FA;\n\nconst RG                           = 0x8227;\nconst RG_INTEGER                   = 0x8228;\nconst RED                          = 0x1903;\nconst RED_INTEGER                  = 0x8D94;\nconst RGB_INTEGER                  = 0x8D98;\nconst RGBA_INTEGER                 = 0x8D99;\n\nconst formatInfo = {};\n{\n  // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle\n  // the name.\n  const f = formatInfo;\n  f[ALPHA]           = { numColorComponents: 1, };\n  f[LUMINANCE]       = { numColorComponents: 1, };\n  f[LUMINANCE_ALPHA] = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGBA$1]            = { numColorComponents: 4, };\n  f[RED]             = { numColorComponents: 1, };\n  f[RED_INTEGER]     = { numColorComponents: 1, };\n  f[RG]              = { numColorComponents: 2, };\n  f[RG_INTEGER]      = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGB_INTEGER]     = { numColorComponents: 3, };\n  f[RGBA$1]            = { numColorComponents: 4, };\n  f[RGBA_INTEGER]    = { numColorComponents: 4, };\n  f[DEPTH_COMPONENT$1] = { numColorComponents: 1, };\n  f[DEPTH_STENCIL$1]   = { numColorComponents: 2, };\n}\n\n/**\n * @typedef {Object} TextureFormatDetails\n * @property {number} textureFormat format to pass texImage2D and similar functions.\n * @property {boolean} colorRenderable true if you can render to this format of texture.\n * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.\n * @property {number[]} type Array of possible types you can pass to texImage2D and similar function\n * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element\n * @private\n */\n\nlet s_textureInternalFormatInfo;\nfunction getTextureInternalFormatInfo(internalFormat) {\n  if (!s_textureInternalFormatInfo) {\n    // NOTE: these properties need unique names so we can let Uglify mangle the name.\n    const t = {};\n    // unsized formats\n    t[ALPHA]              = { textureFormat: ALPHA,           colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1], };\n    t[LUMINANCE]          = { textureFormat: LUMINANCE,       colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1], };\n    t[LUMINANCE_ALPHA]    = { textureFormat: LUMINANCE_ALPHA, colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2, 4, 4, 8],        type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1], };\n    t[RGB]                = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 6, 6, 12, 2],    type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1, UNSIGNED_SHORT_5_6_5], };\n    t[RGBA$1]               = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 8, 8, 16, 2, 2], type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1, UNSIGNED_SHORT_4_4_4_4, UNSIGNED_SHORT_5_5_5_1], };\n    t[DEPTH_COMPONENT$1]    = { textureFormat: DEPTH_COMPONENT$1, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],              type: [UNSIGNED_INT$1, UNSIGNED_SHORT$1], };\n\n    // sized formats\n    t[R8]                 = { textureFormat: RED,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1],        type: [UNSIGNED_BYTE$1], };\n    t[R8_SNORM]           = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [1],        type: [BYTE], };\n    t[R16F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [4, 2],     type: [FLOAT$1, HALF_FLOAT], };\n    t[R32F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$1], };\n    t[R8UI]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [UNSIGNED_BYTE$1], };\n    t[R8I]                = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [BYTE], };\n    t[R16UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_SHORT$1], };\n    t[R16I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [SHORT], };\n    t[R32UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$1], };\n    t[R32I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [INT$1], };\n    t[RG8]                = { textureFormat: RG,              colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2],        type: [UNSIGNED_BYTE$1], };\n    t[RG8_SNORM]          = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [2],        type: [BYTE], };\n    t[RG16F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [8, 4],     type: [FLOAT$1, HALF_FLOAT], };\n    t[RG32F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: false, bytesPerElement: [8],        type: [FLOAT$1], };\n    t[RG8UI]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_BYTE$1], };\n    t[RG8I]               = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [BYTE], };\n    t[RG16UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_SHORT$1], };\n    t[RG16I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [SHORT], };\n    t[RG32UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_INT$1], };\n    t[RG32I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [INT$1], };\n    t[RGB8]               = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$1], };\n    t[SRGB8]              = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$1], };\n    t[RGB565$1]             = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 2],     type: [UNSIGNED_BYTE$1, UNSIGNED_SHORT_5_6_5], };\n    t[RGB8_SNORM]         = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [BYTE], };\n    t[R11F_G11F_B10F]     = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$1, HALF_FLOAT, UNSIGNED_INT_10F_11F_11F_REV], };\n    t[RGB9_E5]            = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$1, HALF_FLOAT, UNSIGNED_INT_5_9_9_9_REV], };\n    t[RGB16F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6],    type: [FLOAT$1, HALF_FLOAT], };\n    t[RGB32F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [FLOAT$1], };\n    t[RGB8UI]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [UNSIGNED_BYTE$1], };\n    t[RGB8I]              = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [BYTE], };\n    t[RGB16UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [UNSIGNED_SHORT$1], };\n    t[RGB16I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [SHORT], };\n    t[RGB32UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [UNSIGNED_INT$1], };\n    t[RGB32I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [INT$1], };\n    t[RGBA8]              = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$1], };\n    t[SRGB8_ALPHA8]       = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$1], };\n    t[RGBA8_SNORM]        = { textureFormat: RGBA$1,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [4],        type: [BYTE], };\n    t[RGB5_A1$1]            = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2, 4],  type: [UNSIGNED_BYTE$1, UNSIGNED_SHORT_5_5_5_1, UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA4$1]              = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2],     type: [UNSIGNED_BYTE$1, UNSIGNED_SHORT_4_4_4_4], };\n    t[RGB10_A2]           = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA16F]            = { textureFormat: RGBA$1,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [16, 8],    type: [FLOAT$1, HALF_FLOAT], };\n    t[RGBA32F]            = { textureFormat: RGBA$1,            colorRenderable: false, textureFilterable: false, bytesPerElement: [16],       type: [FLOAT$1], };\n    t[RGBA8UI]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_BYTE$1], };\n    t[RGBA8I]             = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [BYTE], };\n    t[RGB10_A2UI]         = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA16UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_SHORT$1], };\n    t[RGBA16I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [SHORT], };\n    t[RGBA32I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [INT$1], };\n    t[RGBA32UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [UNSIGNED_INT$1], };\n    // Sized Internal\n    t[DEPTH_COMPONENT16$1]  = { textureFormat: DEPTH_COMPONENT$1, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],     type: [UNSIGNED_SHORT$1, UNSIGNED_INT$1], };\n    t[DEPTH_COMPONENT24$1]  = { textureFormat: DEPTH_COMPONENT$1, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$1], };\n    t[DEPTH_COMPONENT32F$1] = { textureFormat: DEPTH_COMPONENT$1, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$1], };\n    t[DEPTH24_STENCIL8$1]   = { textureFormat: DEPTH_STENCIL$1,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_24_8], };\n    t[DEPTH32F_STENCIL8$1]  = { textureFormat: DEPTH_STENCIL$1,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT_32_UNSIGNED_INT_24_8_REV], };\n\n    Object.keys(t).forEach(function(internalFormat) {\n      const info = t[internalFormat];\n      info.bytesPerElementMap = {};\n      info.bytesPerElement.forEach(function(bytesPerElement, ndx) {\n        const type = info.type[ndx];\n        info.bytesPerElementMap[type] = bytesPerElement;\n      });\n    });\n    s_textureInternalFormatInfo = t;\n  }\n  return s_textureInternalFormatInfo[internalFormat];\n}\n\n/**\n * Gets the number of bytes per element for a given internalFormat / type\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @param {number} type The type parameter for texImage2D etc..\n * @return {number} the number of bytes per element for the given internalFormat, type combo\n * @memberOf module:twgl/textures\n */\nfunction getBytesPerElementForInternalFormat(internalFormat, type) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  const bytesPerElement = info.bytesPerElementMap[type];\n  if (bytesPerElement === undefined) {\n    throw \"unknown internal format\";\n  }\n  return bytesPerElement;\n}\n\n/**\n * Info related to a specific texture internalFormat as returned\n * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.\n *\n * @typedef {Object} TextureFormatInfo\n * @property {number} format Format to pass to texImage2D and related functions\n * @property {number} type Type to pass to texImage2D and related functions\n * @memberOf module:twgl/textures\n */\n\n/**\n * Gets the format and type for a given internalFormat\n *\n * @param {number} internalFormat The internal format\n * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,\n * @memberOf module:twgl/textures\n */\nfunction getFormatAndTypeForInternalFormat(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return {\n    format: info.textureFormat,\n    type: info.type[0],\n  };\n}\n\n/**\n * Returns true if value is power of 2\n * @param {number} value number to check.\n * @return true if value is power of 2\n * @private\n */\nfunction isPowerOf2(value) {\n  return (value & (value - 1)) === 0;\n}\n\n/**\n * Gets whether or not we can generate mips for the given\n * internal format.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number} width The width parameter from texImage2D etc..\n * @param {number} height The height parameter from texImage2D etc..\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canGenerateMipmap(gl, width, height, internalFormat) {\n  if (!isWebGL2(gl)) {\n    return isPowerOf2(width) && isPowerOf2(height);\n  }\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.colorRenderable && info.textureFilterable;\n}\n\n/**\n * Gets whether or not we can generate mips for the given format\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canFilter(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.textureFilterable;\n}\n\n/**\n * Gets the number of components for a given image format.\n * @param {number} format the format.\n * @return {number} the number of components for the format.\n * @memberOf module:twgl/textures\n */\nfunction getNumComponentsForFormat(format) {\n  const info = formatInfo[format];\n  if (!info) {\n    throw \"unknown format: \" + format;\n  }\n  return info.numColorComponents;\n}\n\n/**\n * Gets the texture type for a given array type.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @return {number} the gl texture type\n * @private\n */\nfunction getTextureTypeForArrayType(gl, src, defaultType) {\n  if (isArrayBuffer(src)) {\n    return getGLTypeForTypedArray(src);\n  }\n  return defaultType || UNSIGNED_BYTE$1;\n}\n\nfunction guessDimensions(gl, target, width, height, numElements) {\n  if (numElements % 1 !== 0) {\n    throw \"can't guess dimensions\";\n  }\n  if (!width && !height) {\n    const size = Math.sqrt(numElements / (target === TEXTURE_CUBE_MAP$1 ? 6 : 1));\n    if (size % 1 === 0) {\n      width = size;\n      height = size;\n    } else {\n      width = numElements;\n      height = 1;\n    }\n  } else if (!height) {\n    height = numElements / width;\n    if (height % 1) {\n      throw \"can't guess dimensions\";\n    }\n  } else if (!width) {\n    width = numElements / height;\n    if (width % 1) {\n      throw \"can't guess dimensions\";\n    }\n  }\n  return {\n    width: width,\n    height: height,\n  };\n}\n\n/**\n * Sets the default texture color.\n *\n * The default texture color is used when loading textures from\n * urls. Because the URL will be loaded async we'd like to be\n * able to use the texture immediately. By putting a 1x1 pixel\n * color in the texture we can start using the texture before\n * the URL has loaded.\n *\n * @param {number[]} color Array of 4 values in the range 0 to 1\n * @deprecated see {@link module:twgl.setDefaults}\n * @memberOf module:twgl/textures\n */\nfunction setDefaultTextureColor(color) {\n  defaults$1.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\nfunction setDefaults$1(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$1);\n  if (newDefaults.textureColor) {\n    setDefaultTextureColor(newDefaults.textureColor);\n  }\n}\n\n/**\n * A function to generate the source for a texture.\n * @callback TextureFunc\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options the texture options\n * @return {*} Returns any of the things documented for `src` for {@link module:twgl.TextureOptions}.\n * @memberOf module:twgl\n */\n\n/**\n * Texture options passed to most texture functions. Each function will use whatever options\n * are appropriate for its needs. This lets you pass the same options to all functions.\n *\n * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,\n * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.\n *\n * @typedef {Object} TextureOptions\n * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.\n * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.\n * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.\n * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.\n * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .\n * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`\n *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.\n * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`\n * @property {number} [minMag] both the min and mag filter settings.\n * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`\n * @property {number} [format] format for texture. Defaults to `gl.RGBA`.\n * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`\n *     is ArrayBufferView defaults to type that matches ArrayBufferView type.\n * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube\n * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [minLod] TEXTURE_MIN_LOD setting\n * @property {number} [maxLod] TEXTURE_MAX_LOD setting\n * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting\n * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting\n * @property {number} [compareFunc] TEXTURE_COMPARE_FUNC setting\n * @property {number} [compareMode] TEXTURE_COMPARE_MODE setting\n * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.\n * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.\n *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`\n *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink\n * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and\n *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above\n *    then then `auto` is assumed to be `false` unless explicity set to `true`.\n * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is\n *\n *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]\n *\n * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture\n *\n *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable\n *    1x1 pixel texture will be returned immediately. The texture will be updated once the image has downloaded.\n *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.\n *    The pieces will be uploaded in `cubeFaceOrder`\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then each entry is a slice of the a 2d array texture\n *    and will be scaled to the specified width and height OR to the size of the first image that loads.\n *\n *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,\n *    `HTMLCanvasElement`, `HTMLVideoElement`.\n *\n *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is\n *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`\n *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided\n *    by 6. Then\n *\n *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height\n *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.\n *\n *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.\n *\n * If `number[]` will be converted to `type`.\n *\n * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.\n * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`\n * an array etc...\n *\n * If `src` is undefined then an empty texture will be created of size `width` by `height`.\n *\n * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.\n *    default: undefined. Also see {@link module:twgl.setDefaults}.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets any packing state that will be set based on the options.\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setPackState(gl, options) {\n  if (options.colorspaceConversion !== undefined) {\n    gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);\n  }\n  if (options.premultiplyAlpha !== undefined) {\n    gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);\n  }\n  if (options.flipY !== undefined) {\n    gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, options.flipY);\n  }\n}\n\n/**\n * Set skip state to defaults\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setSkipStateToDefault(gl) {\n  gl.pixelStorei(UNPACK_ALIGNMENT, 4);\n  if (isWebGL2(gl)) {\n    gl.pixelStorei(UNPACK_ROW_LENGTH, 0);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_PIXELS, 0);\n    gl.pixelStorei(UNPACK_SKIP_ROWS, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n  }\n}\n\n/**\n * Sets the parameters of a texture or sampler\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number|WebGLSampler} target texture target or sampler\n * @param {function()} parameteriFn texParameteri or samplerParameteri fn\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @private\n */\nfunction setTextureSamplerParameters(gl, target, parameteriFn, options) {\n  if (options.minMag) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.minMag);\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.minMag);\n  }\n  if (options.min) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.min);\n  }\n  if (options.mag) {\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.mag);\n  }\n  if (options.wrap) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrap);\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrap);\n    if (target === TEXTURE_3D$1 || isSampler(gl, target)) {\n      parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrap);\n    }\n  }\n  if (options.wrapR) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrapR);\n  }\n  if (options.wrapS) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrapS);\n  }\n  if (options.wrapT) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrapT);\n  }\n  if (options.minLod !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_LOD, options.minLod);\n  }\n  if (options.maxLod !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LOD, options.maxLod);\n  }\n  if (options.baseLevel !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_BASE_LEVEL, options.baseLevel);\n  }\n  if (options.maxLevel !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LEVEL, options.maxLevel);\n  }\n  if (options.compareFunc !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_COMPARE_FUNC, options.compareFunc);\n  }\n  if (options.compareMode !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_COMPARE_MODE, options.compareMode);\n  }\n}\n\n/**\n * Sets the texture parameters of a texture.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureParameters(gl, tex, options) {\n  const target = options.target || TEXTURE_2D$2;\n  gl.bindTexture(target, tex);\n  setTextureSamplerParameters(gl, target, gl.texParameteri, options);\n}\n\n/**\n * Sets the sampler parameters of a sampler.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLSampler} sampler the WebGLSampler to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setSamplerParameters(gl, sampler, options) {\n  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);\n}\n\n/**\n * Creates a new sampler object and sets parameters.\n *\n * Example:\n *\n *      const sampler = twgl.createSampler(gl, {\n *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER\n *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.\n * @return {Object.<string,WebGLSampler>} the created samplers by name\n * @private\n */\nfunction createSampler(gl, options) {\n  const sampler = gl.createSampler();\n  setSamplerParameters(gl, sampler, options);\n  return sampler;\n}\n\n/**\n * Creates a multiple sampler objects and sets parameters on each.\n *\n * Example:\n *\n *      const samplers = twgl.createSamplers(gl, {\n *        nearest: {\n *          minMag: gl.NEAREST,\n *        },\n *        nearestClampS: {\n *          minMag: gl.NEAREST,\n *          wrapS: gl.CLAMP_TO_NEAREST,\n *        },\n *        linear: {\n *          minMag: gl.LINEAR,\n *        },\n *        nearestClamp: {\n *          minMag: gl.NEAREST,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClamp: {\n *          minMag: gl.LINEAR,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClampT: {\n *          minMag: gl.LINEAR,\n *          wrapT: gl.CLAMP_TO_EDGE,\n *        },\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler\n * @private\n */\nfunction createSamplers(gl, samplerOptions) {\n  const samplers = {};\n  Object.keys(samplerOptions).forEach(function(name) {\n    samplers[name] = createSampler(gl, samplerOptions[name]);\n  });\n  return samplers;\n}\n\n/**\n * Makes a 1x1 pixel\n * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.\n * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values\n * @return {Uint8Array} Unit8Array with color.\n * @private\n */\nfunction make1Pixel(color) {\n  color = color || defaults$1.textureColor;\n  if (isArrayBuffer(color)) {\n    return color;\n  }\n  return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\n/**\n * Sets filtering or generates mips for texture based on width or height\n * If width or height is not passed in uses `options.width` and//or `options.height`\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @param {number} [width] width of texture\n * @param {number} [height] height of texture\n * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..\n * @memberOf module:twgl/textures\n */\nfunction setTextureFilteringForSize(gl, tex, options, width, height, internalFormat) {\n  options = options || defaults$1.textureOptions;\n  internalFormat = internalFormat || RGBA$1;\n  const target = options.target || TEXTURE_2D$2;\n  width = width || options.width;\n  height = height || options.height;\n  gl.bindTexture(target, tex);\n  if (canGenerateMipmap(gl, width, height, internalFormat)) {\n    gl.generateMipmap(target);\n  } else {\n    const filtering = canFilter(internalFormat) ? LINEAR$1 : NEAREST;\n    gl.texParameteri(target, TEXTURE_MIN_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_MAG_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE$1);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE$1);\n  }\n}\n\nfunction shouldAutomaticallySetTextureFilteringForSize(options) {\n  return options.auto === true || (options.auto === undefined && options.level === undefined);\n}\n\n/**\n * Gets an array of cubemap face enums\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @return {number[]} cubemap face enums\n * @private\n */\nfunction getCubeFaceOrder(gl, options) {\n  options = options || {};\n  return options.cubeFaceOrder || [\n      TEXTURE_CUBE_MAP_POSITIVE_X,\n      TEXTURE_CUBE_MAP_NEGATIVE_X,\n      TEXTURE_CUBE_MAP_POSITIVE_Y,\n      TEXTURE_CUBE_MAP_NEGATIVE_Y,\n      TEXTURE_CUBE_MAP_POSITIVE_Z,\n      TEXTURE_CUBE_MAP_NEGATIVE_Z,\n    ];\n}\n\n/**\n * @typedef {Object} FaceInfo\n * @property {number} face gl enum for texImage2D\n * @property {number} ndx face index (0 - 5) into source data\n * @ignore\n */\n\n/**\n * Gets an array of FaceInfos\n * There's a bug in some NVidia drivers that will crash the driver if\n * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take\n * the user's desired order from his faces to WebGL and make sure we\n * do the faces in WebGL order\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundant but\n *    it's needed internally to sort the array of `ndx` properties by `face`.\n * @private\n */\nfunction getCubeFacesWithNdx(gl, options) {\n  const faces = getCubeFaceOrder(gl, options);\n  // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(\n  const facesWithNdx = faces.map(function(face, ndx) {\n    return { face: face, ndx: ndx };\n  });\n  facesWithNdx.sort(function(a, b) {\n    return a.face - b.face;\n  });\n  return facesWithNdx;\n}\n\n/**\n * Set a texture from the contents of an element. Will also set\n * texture filtering or generate mips based on the dimensions of the element\n * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will\n * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {HTMLElement} element a canvas, img, or video element.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @kind function\n */\nfunction setTextureFromElement(gl, tex, element, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D$2;\n  const level = options.level || 0;\n  let width = element.width;\n  let height = element.height;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP$1) {\n    // guess the parts\n    const imgWidth  = element.width;\n    const imgHeight = element.height;\n    let size;\n    let slices;\n    if (imgWidth / 6 === imgHeight) {\n      // It's 6x1\n      size = imgHeight;\n      slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n    } else if (imgHeight / 6 === imgWidth) {\n      // It's 1x6\n      size = imgWidth;\n      slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];\n    } else if (imgWidth / 3 === imgHeight / 2) {\n      // It's 3x2\n      size = imgWidth / 3;\n      slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];\n    } else if (imgWidth / 2 === imgHeight / 3) {\n      // It's 2x3\n      size = imgWidth / 2;\n      slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];\n    } else {\n      throw \"can't figure out cube map from element: \" + (element.src ? element.src : element.nodeName);\n    }\n    const ctx = getShared2DContext();\n    if (ctx) {\n      ctx.canvas.width = size;\n      ctx.canvas.height = size;\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);\n        gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);\n      });\n      // Free up the canvas memory\n      ctx.canvas.width = 1;\n      ctx.canvas.height = 1;\n    } else if (typeof createImageBitmap !== 'undefined') {\n      // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's\n      // note lossy? (alpha is not premultiplied? although I'm not sure what\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        // We can't easily use a default texture color here as it would have to match\n        // the type across all faces where as with a 2D one there's only one face\n        // so we're replacing everything all at once. It also has to be the correct size.\n        // On the other hand we need all faces to be the same size so as one face loads\n        // the rest match else the texture will be un-renderable.\n        gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);\n        createImageBitmap(element, xOffset, yOffset, size, size, {\n          premultiplyAlpha: 'none',\n          colorSpaceConversion: 'none',\n        })\n        .then(function(imageBitmap) {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n          gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n          }\n        });\n      });\n    }\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    const smallest = Math.min(element.width, element.height);\n    const largest = Math.max(element.width, element.height);\n    const depth = largest / smallest;\n    if (depth % 1 !== 0) {\n      throw \"can not compute 3D dimensions of element\";\n    }\n    const xMult = element.width  === largest ? 1 : 0;\n    const yMult = element.height === largest ? 1 : 0;\n    gl.pixelStorei(UNPACK_ALIGNMENT, 1);\n    gl.pixelStorei(UNPACK_ROW_LENGTH, element.width);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n    gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);\n    for (let d = 0; d < depth; ++d) {\n      const srcX = d * smallest * xMult;\n      const srcY = d * smallest * yMult;\n      gl.pixelStorei(UNPACK_SKIP_PIXELS, srcX);\n      gl.pixelStorei(UNPACK_SKIP_ROWS, srcY);\n      gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);\n    }\n    setSkipStateToDefault(gl);\n  } else {\n    gl.texImage2D(target, level, internalFormat, format, type, element);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n}\n\nfunction noop() {\n}\n\n/**\n * Checks whether the url's origin is the same so that we can set the `crossOrigin`\n * @param {string} url url to image\n * @returns {boolean} true if the window's origin is the same as image's url\n * @private\n */\nfunction urlIsSameOrigin(url) {\n  if (typeof document !== 'undefined') {\n    // for IE really\n    const a = document.createElement('a');\n    a.href = url;\n    return a.hostname === location.hostname &&\n           a.port     === location.port &&\n           a.protocol === location.protocol;\n  } else {\n    const localOrigin = (new URL(location.href)).origin;\n    const urlOrigin = (new URL(url, location.href)).origin;\n    return urlOrigin === localOrigin;\n  }\n}\n\nfunction setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {\n  return crossOrigin === undefined && !urlIsSameOrigin(url)\n     ? 'anonymous'\n     : crossOrigin;\n}\n\n/**\n * Loads an image\n * @param {string} url url to image\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @return {HTMLImageElement} the image being loaded.\n * @private\n */\nfunction loadImage(url, crossOrigin, callback) {\n  callback = callback || noop;\n  let img;\n  crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults$1.crossOrigin;\n  crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);\n  if (typeof Image !== 'undefined') {\n    img = new Image();\n    if (crossOrigin !== undefined) {\n      img.crossOrigin = crossOrigin;\n    }\n\n    const clearEventHandlers = function clearEventHandlers() {\n      img.removeEventListener('error', onError);  // eslint-disable-line\n      img.removeEventListener('load', onLoad);  // eslint-disable-line\n      img = null;\n    };\n\n    const onError = function onError() {\n      const msg = \"couldn't load image: \" + url;\n      error$1(msg);\n      callback(msg, img);\n      clearEventHandlers();\n    };\n\n    const onLoad = function onLoad() {\n      callback(null, img);\n      clearEventHandlers();\n    };\n\n    img.addEventListener('error', onError);\n    img.addEventListener('load', onLoad);\n    img.src = url;\n    return img;\n  } else if (typeof ImageBitmap !== 'undefined') {\n    let err;\n    let bm;\n    const cb = function cb() {\n      callback(err, bm);\n    };\n\n    const options = {};\n    if (crossOrigin) {\n      options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin\n    }\n    fetch(url, options).then(function(response) {\n      if (!response.ok) {\n        throw response;\n      }\n      return response.blob();\n    }).then(function(blob) {\n      return createImageBitmap(blob, {\n        premultiplyAlpha: 'none',\n        colorSpaceConversion: 'none',\n      });\n    }).then(function(bitmap) {\n      // not sure if this works. We don't want\n      // to catch the user's error. So, call\n      // the callback in a timeout so we're\n      // not in this scope inside the promise.\n      bm = bitmap;\n      setTimeout(cb);\n    }).catch(function(e) {\n      err = e;\n      setTimeout(cb);\n    });\n    img = null;\n  }\n  return img;\n}\n\n/**\n * check if object is a TexImageSource\n *\n * @param {Object} obj Object to test\n * @return {boolean} true if object is a TexImageSource\n * @private\n */\nfunction isTexImageSource(obj) {\n  return (typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap) ||\n         (typeof ImageData !== 'undefined'  && obj instanceof ImageData) ||\n         (typeof HTMLElement !== 'undefined'  && obj instanceof HTMLElement);\n}\n\n/**\n * if obj is an TexImageSource then just\n * uses it otherwise if obj is a string\n * then load it first.\n *\n * @param {string|TexImageSource} obj\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @private\n */\nfunction loadAndUseImage(obj, crossOrigin, callback) {\n  if (isTexImageSource(obj)) {\n    setTimeout(function() {\n      callback(null, obj);\n    });\n    return obj;\n  }\n\n  return loadImage(obj, crossOrigin, callback);\n}\n\n/**\n * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set\n * the default texture color is used which can be set by calling `setDefaultTextureColor`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction setTextureTo1PixelColor(gl, tex, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D$2;\n  gl.bindTexture(target, tex);\n  if (options.color === false) {\n    return;\n  }\n  // Assume it's a URL\n  // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\n  const color = make1Pixel(options.color);\n  if (target === TEXTURE_CUBE_MAP$1) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, RGBA$1, 1, 1, 0, RGBA$1, UNSIGNED_BYTE$1, color);\n    }\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    gl.texImage3D(target, 0, RGBA$1, 1, 1, 1, 0, RGBA$1, UNSIGNED_BYTE$1, color);\n  } else {\n    gl.texImage2D(target, 0, RGBA$1, 1, 1, 0, RGBA$1, UNSIGNED_BYTE$1, color);\n  }\n}\n\n/**\n * The src image(s) used to create a texture.\n *\n * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}\n * you can pass in urls for images to load into the textures. If it's a single url\n * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap\n * this will be a corresponding array of images for the cubemap.\n *\n * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback TextureReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} texture the texture.\n * @param {module:twgl.TextureSrc} source image(s) used to as the src for the texture\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when all images have finished downloading and been uploaded into their respective textures\n * @callback TexturesReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.\n * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback CubemapReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each face.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback ThreeDReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each slice.\n * @memberOf module:twgl\n */\n\n/**\n * Loads a texture from an image from a Url as specified in `options.src`\n * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is\n * immediately useable. It will be updated with the contents of the image once the image has finished\n * downloading. Filtering options will be set as appropriate for image unless `options.auto === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will\n *    be non null if there was an error.\n * @return {HTMLImageElement} the image being downloaded.\n * @memberOf module:twgl/textures\n */\nfunction loadTextureFromUrl(gl, tex, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  const img = loadAndUseImage(options.src, options.crossOrigin, function(err, img) {\n    if (err) {\n      callback(err, tex, img);\n    } else {\n      setTextureFromElement(gl, tex, img, options);\n      callback(null, tex, img);\n    }\n  });\n  return img;\n}\n\n/**\n * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction loadCubemapFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  if (urls.length !== 6) {\n    throw \"there must be 6 urls for a cubemap\";\n  }\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE$1;\n  const target = options.target || TEXTURE_2D$2;\n  if (target !== TEXTURE_CUBE_MAP$1) {\n    throw \"target must be TEXTURE_CUBE_MAP\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = 6;\n  const errors = [];\n  const faces = getCubeFaceOrder(gl, options);\n  let imgs;  // eslint-disable-line\n\n  function uploadImg(faceTarget) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        if (img.width !== img.height) {\n          errors.push(\"cubemap face img is not a square: \" + img.src);\n        } else {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n\n          // So assuming this is the first image we now have one face that's img sized\n          // and 5 faces that are 1x1 pixel so size the other faces\n          if (numToLoad === 5) {\n            // use the default order\n            getCubeFaceOrder().forEach(function(otherTarget) {\n              // Should we re-use the same face or a color?\n              gl.texImage2D(otherTarget, level, internalFormat, format, type, img);\n            });\n          } else {\n            gl.texImage2D(faceTarget, level, internalFormat, format, type, img);\n          }\n\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            gl.generateMipmap(target);\n          }\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));\n  });\n}\n\n/**\n * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.\n * Will set the texture to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n *\n * If the width and height is not specified the width and height of the first\n * image loaded will be used. Note that since images are loaded async\n * which image downloads first is unknown.\n *\n * If an image is not the same size as the width and height it will be scaled\n * to that width and height.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction loadSlicesFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE$1;\n  const target = options.target || TEXTURE_2D_ARRAY$1;\n  if (target !== TEXTURE_3D$1 && target !== TEXTURE_2D_ARRAY$1) {\n    throw \"target must be TEXTURE_3D or TEXTURE_2D_ARRAY\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = urls.length;\n  const errors = [];\n  let imgs;  // eslint-disable-line\n  const level = options.level || 0;\n  let width = options.width;\n  let height = options.height;\n  const depth = urls.length;\n  let firstImage = true;\n\n  function uploadImg(slice) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        setPackState(gl, options);\n        gl.bindTexture(target, tex);\n\n        if (firstImage) {\n          firstImage = false;\n          width = options.width || img.width;\n          height = options.height || img.height;\n          gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n\n          // put it in every slice otherwise some slices will be 0,0,0,0\n          for (let s = 0; s < depth; ++s) {\n            gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);\n          }\n        } else {\n          let src = img;\n          let ctx;\n          if (img.width !== width || img.height !== height) {\n            // Size the image to fix\n            ctx = getShared2DContext();\n            src = ctx.canvas;\n            ctx.canvas.width = width;\n            ctx.canvas.height = height;\n            ctx.drawImage(img, 0, 0, width, height);\n          }\n\n          gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src);\n\n          // free the canvas memory\n          if (ctx && src === ctx.canvas) {\n            ctx.canvas.width = 0;\n            ctx.canvas.height = 0;\n          }\n        }\n\n        if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n          gl.generateMipmap(target);\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));\n  });\n}\n\n/**\n * Sets a texture from an array or typed array. If the width or height is not provided will attempt to\n * guess the size. See {@link module:twgl.TextureOptions}.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureFromArray(gl, tex, src, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D$2;\n  gl.bindTexture(target, tex);\n  let width = options.width;\n  let height = options.height;\n  let depth = options.depth;\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  if (!isArrayBuffer(src)) {\n    const Type = getTypedArrayTypeForGLType(type);\n    src = new Type(src);\n  } else if (src instanceof Uint8ClampedArray) {\n    src = new Uint8Array(src.buffer);\n  }\n\n  const bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);\n  const numElements = src.byteLength / bytesPerElement;  // TODO: check UNPACK_ALIGNMENT?\n  if (numElements % 1) {\n    throw \"length wrong size for format: \" + glEnumToString(gl, format);\n  }\n  let dimensions;\n  if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    if (!width && !height && !depth) {\n      const size = Math.cbrt(numElements);\n      if (size % 1 !== 0) {\n        throw \"can't guess cube size of array of numElements: \" + numElements;\n      }\n      width = size;\n      height = size;\n      depth = size;\n    } else if (width && (!height || !depth)) {\n      dimensions = guessDimensions(gl, target, height, depth, numElements / width);\n      height = dimensions.width;\n      depth = dimensions.height;\n    } else if (height && (!width || !depth)) {\n      dimensions = guessDimensions(gl, target, width, depth, numElements / height);\n      width = dimensions.width;\n      depth = dimensions.height;\n    } else {\n      dimensions = guessDimensions(gl, target, width, height, numElements / depth);\n      width = dimensions.width;\n      height = dimensions.height;\n    }\n  } else {\n    dimensions = guessDimensions(gl, target, width, height, numElements);\n    width = dimensions.width;\n    height = dimensions.height;\n  }\n  setSkipStateToDefault(gl);\n  gl.pixelStorei(UNPACK_ALIGNMENT, options.unpackAlignment || 1);\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP$1) {\n    const elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;\n    const faceSize = numElements / 6 * elementsPerElement;\n\n    getCubeFacesWithNdx(gl, options).forEach(f => {\n      const offset = faceSize * f.ndx;\n      const data = src.subarray(offset, offset + faceSize);\n      gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);\n    });\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);\n  }\n  return {\n    width: width,\n    height: height,\n    depth: depth,\n    type: type,\n  };\n}\n\n/**\n * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.\n * You must set `options.width` and `options.height`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setEmptyTexture(gl, tex, options) {\n  const target = options.target || TEXTURE_2D$2;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP$1) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);\n  }\n}\n\n/**\n * Creates a texture based on the options passed in.\n *\n * Note: may reset UNPACK_ALIGNMENT, UNPACK_ROW_LENGTH, UNPACK_IMAGE_HEIGHT, UNPACK_SKIP_IMAGES\n * UNPACK_SKIP_PIXELS, and UNPACK_SKIP_ROWS\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.\n * @return {WebGLTexture} the created texture.\n * @memberOf module:twgl/textures\n */\nfunction createTexture(gl, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  const tex = gl.createTexture();\n  const target = options.target || TEXTURE_2D$2;\n  let width  = options.width  || 1;\n  let height = options.height || 1;\n  const internalFormat = options.internalFormat || RGBA$1;\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP$1) {\n    // this should have been the default for cubemaps :(\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE$1);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE$1);\n  }\n  let src = options.src;\n  if (src) {\n    if (typeof src === \"function\") {\n      src = src(gl, options);\n    }\n    if (typeof (src) === \"string\") {\n      loadTextureFromUrl(gl, tex, options, callback);\n    } else if (isArrayBuffer(src) ||\n               (Array.isArray(src) && (\n                    typeof src[0] === 'number' ||\n                    Array.isArray(src[0]) ||\n                    isArrayBuffer(src[0]))\n               )\n              ) {\n      const dimensions = setTextureFromArray(gl, tex, src, options);\n      width  = dimensions.width;\n      height = dimensions.height;\n    } else if (Array.isArray(src) && (typeof (src[0]) === 'string' || isTexImageSource(src[0]))) {\n      if (target === TEXTURE_CUBE_MAP$1) {\n        loadCubemapFromUrls(gl, tex, options, callback);\n      } else {\n        loadSlicesFromUrls(gl, tex, options, callback);\n      }\n    } else { // if (isTexImageSource(src))\n      setTextureFromElement(gl, tex, src, options);\n      width  = src.width;\n      height = src.height;\n    }\n  } else {\n    setEmptyTexture(gl, tex, options);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n  return tex;\n}\n\n/**\n * Resizes a texture based on the options passed in.\n *\n * Note: This is not a generic resize anything function.\n * It's mostly used by {@link module:twgl.resizeFramebufferInfo}\n * It will use `options.src` if it exists to try to determine a `type`\n * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided\n * for the texture. Texture parameters will be set accordingly\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the texture to resize\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {number} [width] the new width. If not passed in will use `options.width`\n * @param {number} [height] the new height. If not passed in will use `options.height`\n * @param {number} [depth] the new depth. If not passed in will use `options.depth`\n * @memberOf module:twgl/textures\n */\nfunction resizeTexture(gl, tex, options, width, height, depth) {\n  width = width || options.width;\n  height = height || options.height;\n  depth = depth || options.depth;\n  const target = options.target || TEXTURE_2D$2;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  let type;\n  const src = options.src;\n  if (!src) {\n    type = options.type || formatType.type;\n  } else if (isArrayBuffer(src) || (Array.isArray(src) && typeof (src[0]) === 'number')) {\n    type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  } else {\n    type = options.type || formatType.type;\n  }\n  if (target === TEXTURE_CUBE_MAP$1) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);\n  }\n}\n\n/**\n * Check if a src is an async request.\n * if src is a string we're going to download an image\n * if src is an array of strings we're going to download cubemap images\n * @param {*} src The src from a TextureOptions\n * @returns {bool} true if src is async.\n * @private\n */\nfunction isAsyncSrc(src) {\n  return typeof src === 'string' ||\n         (Array.isArray(src) && typeof src[0] === 'string');\n}\n\n/**\n * Creates a bunch of textures based on the passed in options.\n *\n * Example:\n *\n *     const textures = twgl.createTextures(gl, {\n *       // a power of 2 image\n *       hftIcon: { src: \"images/hft-icon-16.png\", mag: gl.NEAREST },\n *       // a non-power of 2 image\n *       clover: { src: \"images/clover.jpg\" },\n *       // From a canvas\n *       fromCanvas: { src: ctx.canvas },\n *       // A cubemap from 6 images\n *       yokohama: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: [\n *           'images/yokohama/posx.jpg',\n *           'images/yokohama/negx.jpg',\n *           'images/yokohama/posy.jpg',\n *           'images/yokohama/negy.jpg',\n *           'images/yokohama/posz.jpg',\n *           'images/yokohama/negz.jpg',\n *         ],\n *       },\n *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)\n *       goldengate: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: 'images/goldengate.jpg',\n *       },\n *       // A 2x2 pixel texture from a JavaScript array\n *       checker: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         src: [\n *           255,255,255,255,\n *           192,192,192,255,\n *           192,192,192,255,\n *           255,255,255,255,\n *         ],\n *       },\n *       // a 1x2 pixel texture from a typed array.\n *       stripe: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         format: gl.LUMINANCE,\n *         src: new Uint8Array([\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *         ]),\n *         width: 1,\n *       },\n *     });\n *\n * Now\n *\n * *   `textures.hftIcon` will be a 2d texture\n * *   `textures.clover` will be a 2d texture\n * *   `textures.fromCanvas` will be a 2d texture\n * *   `textures.yohohama` will be a cubemap texture\n * *   `textures.goldengate` will be a cubemap texture\n * *   `textures.checker` will be a 2d texture\n * *   `textures.stripe` will be a 2d texture\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.\n * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.\n * @return {Object.<string,WebGLTexture>} the created textures by name\n * @memberOf module:twgl/textures\n */\nfunction createTextures(gl, textureOptions, callback) {\n  callback = callback || noop;\n  let numDownloading = 0;\n  const errors = [];\n  const textures = {};\n  const images = {};\n\n  function callCallbackIfReady() {\n    if (numDownloading === 0) {\n      setTimeout(function() {\n        callback(errors.length ? errors : undefined, textures, images);\n      }, 0);\n    }\n  }\n\n  Object.keys(textureOptions).forEach(function(name) {\n    const options = textureOptions[name];\n    let onLoadFn;\n    if (isAsyncSrc(options.src)) {\n      onLoadFn = function(err, tex, img) {\n        images[name] = img;\n        --numDownloading;\n        if (err) {\n          errors.push(err);\n        }\n        callCallbackIfReady();\n      };\n      ++numDownloading;\n    }\n    textures[name] = createTexture(gl, options, onLoadFn);\n  });\n\n  // queue the callback if there are no images to download.\n  // We do this because if your code is structured to wait for\n  // images to download but then you comment out all the async\n  // images your code would break.\n  callCallbackIfReady();\n\n  return textures;\n}\n\nvar textures = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  setTextureDefaults_: setDefaults$1,\n  createSampler: createSampler,\n  createSamplers: createSamplers,\n  setSamplerParameters: setSamplerParameters,\n  createTexture: createTexture,\n  setEmptyTexture: setEmptyTexture,\n  setTextureFromArray: setTextureFromArray,\n  loadTextureFromUrl: loadTextureFromUrl,\n  setTextureFromElement: setTextureFromElement,\n  setTextureFilteringForSize: setTextureFilteringForSize,\n  setTextureParameters: setTextureParameters,\n  setDefaultTextureColor: setDefaultTextureColor,\n  createTextures: createTextures,\n  resizeTexture: resizeTexture,\n  canGenerateMipmap: canGenerateMipmap,\n  canFilter: canFilter,\n  getNumComponentsForFormat: getNumComponentsForFormat,\n  getBytesPerElementForInternalFormat: getBytesPerElementForInternalFormat,\n  getFormatAndTypeForInternalFormat: getFormatAndTypeForInternalFormat\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level shader program related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.programs` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/programs\n */\n\nconst error = error$1;\nconst warn = warn$1;\nfunction getElementById(id) {\n  return (typeof document !== 'undefined' && document.getElementById)\n      ? document.getElementById(id)\n      : null;\n}\n\nconst TEXTURE0                       = 0x84c0;\nconst DYNAMIC_DRAW                   = 0x88e8;\n\nconst ARRAY_BUFFER                   = 0x8892;\nconst ELEMENT_ARRAY_BUFFER$1           = 0x8893;\nconst UNIFORM_BUFFER                 = 0x8a11;\nconst TRANSFORM_FEEDBACK_BUFFER      = 0x8c8e;\n\nconst TRANSFORM_FEEDBACK             = 0x8e22;\n\nconst COMPILE_STATUS                 = 0x8b81;\nconst LINK_STATUS                    = 0x8b82;\nconst FRAGMENT_SHADER                = 0x8b30;\nconst VERTEX_SHADER                  = 0x8b31;\nconst SEPARATE_ATTRIBS               = 0x8c8d;\n\nconst ACTIVE_UNIFORMS                = 0x8b86;\nconst ACTIVE_ATTRIBUTES              = 0x8b89;\nconst TRANSFORM_FEEDBACK_VARYINGS    = 0x8c83;\nconst ACTIVE_UNIFORM_BLOCKS          = 0x8a36;\nconst UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER   = 0x8a44;\nconst UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46;\nconst UNIFORM_BLOCK_DATA_SIZE                     = 0x8a40;\nconst UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES        = 0x8a43;\n\nconst FLOAT                         = 0x1406;\nconst FLOAT_VEC2                    = 0x8B50;\nconst FLOAT_VEC3                    = 0x8B51;\nconst FLOAT_VEC4                    = 0x8B52;\nconst INT                           = 0x1404;\nconst INT_VEC2                      = 0x8B53;\nconst INT_VEC3                      = 0x8B54;\nconst INT_VEC4                      = 0x8B55;\nconst BOOL                          = 0x8B56;\nconst BOOL_VEC2                     = 0x8B57;\nconst BOOL_VEC3                     = 0x8B58;\nconst BOOL_VEC4                     = 0x8B59;\nconst FLOAT_MAT2                    = 0x8B5A;\nconst FLOAT_MAT3                    = 0x8B5B;\nconst FLOAT_MAT4                    = 0x8B5C;\nconst SAMPLER_2D                    = 0x8B5E;\nconst SAMPLER_CUBE                  = 0x8B60;\nconst SAMPLER_3D                    = 0x8B5F;\nconst SAMPLER_2D_SHADOW             = 0x8B62;\nconst FLOAT_MAT2x3                  = 0x8B65;\nconst FLOAT_MAT2x4                  = 0x8B66;\nconst FLOAT_MAT3x2                  = 0x8B67;\nconst FLOAT_MAT3x4                  = 0x8B68;\nconst FLOAT_MAT4x2                  = 0x8B69;\nconst FLOAT_MAT4x3                  = 0x8B6A;\nconst SAMPLER_2D_ARRAY              = 0x8DC1;\nconst SAMPLER_2D_ARRAY_SHADOW       = 0x8DC4;\nconst SAMPLER_CUBE_SHADOW           = 0x8DC5;\nconst UNSIGNED_INT                  = 0x1405;\nconst UNSIGNED_INT_VEC2             = 0x8DC6;\nconst UNSIGNED_INT_VEC3             = 0x8DC7;\nconst UNSIGNED_INT_VEC4             = 0x8DC8;\nconst INT_SAMPLER_2D                = 0x8DCA;\nconst INT_SAMPLER_3D                = 0x8DCB;\nconst INT_SAMPLER_CUBE              = 0x8DCC;\nconst INT_SAMPLER_2D_ARRAY          = 0x8DCF;\nconst UNSIGNED_INT_SAMPLER_2D       = 0x8DD2;\nconst UNSIGNED_INT_SAMPLER_3D       = 0x8DD3;\nconst UNSIGNED_INT_SAMPLER_CUBE     = 0x8DD4;\nconst UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\n\nconst TEXTURE_2D$1                    = 0x0DE1;\nconst TEXTURE_CUBE_MAP              = 0x8513;\nconst TEXTURE_3D                    = 0x806F;\nconst TEXTURE_2D_ARRAY              = 0x8C1A;\n\nconst typeMap = {};\n\n/**\n * Returns the corresponding bind point for a given sampler type\n * @private\n */\nfunction getBindPointForSamplerType(gl, type) {\n  return typeMap[type].bindPoint;\n}\n\n// This kind of sucks! If you could compose functions as in `var fn = gl[name];`\n// this code could be a lot smaller but that is sadly really slow (T_T)\n\nfunction floatSetter(gl, location) {\n  return function(v) {\n    gl.uniform1f(location, v);\n  };\n}\n\nfunction floatArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1fv(location, v);\n  };\n}\n\nfunction floatVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2fv(location, v);\n  };\n}\n\nfunction floatVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3fv(location, v);\n  };\n}\n\nfunction floatVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4fv(location, v);\n  };\n}\n\nfunction intSetter(gl, location) {\n  return function(v) {\n    gl.uniform1i(location, v);\n  };\n}\n\nfunction intArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1iv(location, v);\n  };\n}\n\nfunction intVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2iv(location, v);\n  };\n}\n\nfunction intVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3iv(location, v);\n  };\n}\n\nfunction intVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4iv(location, v);\n  };\n}\n\nfunction uintSetter(gl, location) {\n  return function(v) {\n    gl.uniform1ui(location, v);\n  };\n}\n\nfunction uintArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1uiv(location, v);\n  };\n}\n\nfunction uintVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2uiv(location, v);\n  };\n}\n\nfunction uintVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3uiv(location, v);\n  };\n}\n\nfunction uintVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4uiv(location, v);\n  };\n}\n\nfunction floatMat2Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2fv(location, false, v);\n  };\n}\n\nfunction floatMat3Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3fv(location, false, v);\n  };\n}\n\nfunction floatMat4Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4fv(location, false, v);\n  };\n}\n\nfunction floatMat23Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x3fv(location, false, v);\n  };\n}\n\nfunction floatMat32Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x2fv(location, false, v);\n  };\n}\n\nfunction floatMat24Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x4fv(location, false, v);\n  };\n}\n\nfunction floatMat42Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x2fv(location, false, v);\n  };\n}\n\nfunction floatMat34Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x4fv(location, false, v);\n  };\n}\n\nfunction floatMat43Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x3fv(location, false, v);\n  };\n}\n\nfunction samplerSetter(gl, type, unit, location) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  return isWebGL2(gl) ? function(textureOrPair) {\n    let texture;\n    let sampler;\n    if (!textureOrPair || isTexture(gl, textureOrPair)) {\n      texture = textureOrPair;\n      sampler = null;\n    } else {\n      texture = textureOrPair.texture;\n      sampler = textureOrPair.sampler;\n    }\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n    gl.bindSampler(unit, sampler);\n  } : function(texture) {\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n  };\n}\n\nfunction samplerArraySetter(gl, type, unit, location, size) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  const units = new Int32Array(size);\n  for (let ii = 0; ii < size; ++ii) {\n    units[ii] = unit + ii;\n  }\n\n  return isWebGL2(gl) ? function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(textureOrPair, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      let texture;\n      let sampler;\n      if (!textureOrPair || isTexture(gl, textureOrPair)) {\n        texture = textureOrPair;\n        sampler = null;\n      } else {\n        texture = textureOrPair.texture;\n        sampler = textureOrPair.sampler;\n      }\n      gl.bindSampler(unit, sampler);\n      gl.bindTexture(bindPoint, texture);\n    });\n  } : function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(texture, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      gl.bindTexture(bindPoint, texture);\n    });\n  };\n}\n\ntypeMap[FLOAT]                         = { Type: Float32Array, size:  4, setter: floatSetter,      arraySetter: floatArraySetter, };\ntypeMap[FLOAT_VEC2]                    = { Type: Float32Array, size:  8, setter: floatVec2Setter,  cols: 2, };\ntypeMap[FLOAT_VEC3]                    = { Type: Float32Array, size: 12, setter: floatVec3Setter,  cols: 3, };\ntypeMap[FLOAT_VEC4]                    = { Type: Float32Array, size: 16, setter: floatVec4Setter,  cols: 4, };\ntypeMap[INT]                           = { Type: Int32Array,   size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[INT_VEC2]                      = { Type: Int32Array,   size:  8, setter: intVec2Setter,    cols: 2, };\ntypeMap[INT_VEC3]                      = { Type: Int32Array,   size: 12, setter: intVec3Setter,    cols: 3, };\ntypeMap[INT_VEC4]                      = { Type: Int32Array,   size: 16, setter: intVec4Setter,    cols: 4, };\ntypeMap[UNSIGNED_INT]                  = { Type: Uint32Array,  size:  4, setter: uintSetter,       arraySetter: uintArraySetter, };\ntypeMap[UNSIGNED_INT_VEC2]             = { Type: Uint32Array,  size:  8, setter: uintVec2Setter,   cols: 2, };\ntypeMap[UNSIGNED_INT_VEC3]             = { Type: Uint32Array,  size: 12, setter: uintVec3Setter,   cols: 3, };\ntypeMap[UNSIGNED_INT_VEC4]             = { Type: Uint32Array,  size: 16, setter: uintVec4Setter,   cols: 4, };\ntypeMap[BOOL]                          = { Type: Uint32Array,  size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[BOOL_VEC2]                     = { Type: Uint32Array,  size:  8, setter: intVec2Setter,    cols: 2, };\ntypeMap[BOOL_VEC3]                     = { Type: Uint32Array,  size: 12, setter: intVec3Setter,    cols: 3, };\ntypeMap[BOOL_VEC4]                     = { Type: Uint32Array,  size: 16, setter: intVec4Setter,    cols: 4, };\ntypeMap[FLOAT_MAT2]                    = { Type: Float32Array, size: 32, setter: floatMat2Setter,  rows: 2, cols: 2, };\ntypeMap[FLOAT_MAT3]                    = { Type: Float32Array, size: 48, setter: floatMat3Setter,  rows: 3, cols: 3, };\ntypeMap[FLOAT_MAT4]                    = { Type: Float32Array, size: 64, setter: floatMat4Setter,  rows: 4, cols: 4, };\ntypeMap[FLOAT_MAT2x3]                  = { Type: Float32Array, size: 32, setter: floatMat23Setter, rows: 2, cols: 3, };\ntypeMap[FLOAT_MAT2x4]                  = { Type: Float32Array, size: 32, setter: floatMat24Setter, rows: 2, cols: 4, };\ntypeMap[FLOAT_MAT3x2]                  = { Type: Float32Array, size: 48, setter: floatMat32Setter, rows: 3, cols: 2, };\ntypeMap[FLOAT_MAT3x4]                  = { Type: Float32Array, size: 48, setter: floatMat34Setter, rows: 3, cols: 4, };\ntypeMap[FLOAT_MAT4x2]                  = { Type: Float32Array, size: 64, setter: floatMat42Setter, rows: 4, cols: 2, };\ntypeMap[FLOAT_MAT4x3]                  = { Type: Float32Array, size: 64, setter: floatMat43Setter, rows: 4, cols: 3, };\ntypeMap[SAMPLER_2D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[SAMPLER_CUBE]                  = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[SAMPLER_3D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[SAMPLER_2D_SHADOW]             = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[SAMPLER_2D_ARRAY]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[SAMPLER_2D_ARRAY_SHADOW]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[SAMPLER_CUBE_SHADOW]           = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[INT_SAMPLER_2D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[INT_SAMPLER_3D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[INT_SAMPLER_CUBE]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[INT_SAMPLER_2D_ARRAY]          = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[UNSIGNED_INT_SAMPLER_3D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[UNSIGNED_INT_SAMPLER_CUBE]     = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\n\nfunction floatAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      switch (b.value.length) {\n        case 4:\n          gl.vertexAttrib4fv(index, b.value);\n          break;\n        case 3:\n          gl.vertexAttrib3fv(index, b.value);\n          break;\n        case 2:\n          gl.vertexAttrib2fv(index, b.value);\n          break;\n        case 1:\n          gl.vertexAttrib1fv(index, b.value);\n          break;\n        default:\n          throw new Error('the length of a float constant value must be between 1 and 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribPointer(\n          index, b.numComponents || b.size, b.type || FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction intAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4iv(index, b.value);\n      } else {\n        throw new Error('The length of an integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || INT, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction uintAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4uiv(index, b.value);\n      } else {\n        throw new Error('The length of an unsigned integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || UNSIGNED_INT, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction matAttribSetter(gl, index, typeInfo) {\n  const defaultSize = typeInfo.size;\n  const count = typeInfo.count;\n\n  return function(b) {\n    gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n    const numComponents = b.size || b.numComponents || defaultSize;\n    const size = numComponents / count;\n    const type = b.type || FLOAT;\n    const typeInfo = typeMap[type];\n    const stride = typeInfo.size * numComponents;\n    const normalize = b.normalize || false;\n    const offset = b.offset || 0;\n    const rowOffset = stride / count;\n    for (let i = 0; i < count; ++i) {\n      gl.enableVertexAttribArray(index + i);\n      gl.vertexAttribPointer(\n          index + i, size, type, normalize, stride, offset + rowOffset * i);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index + i, b.divisor || 0);\n      }\n    }\n  };\n}\n\n\n\nconst attrTypeMap = {};\nattrTypeMap[FLOAT]             = { size:  4, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC2]        = { size:  8, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC3]        = { size: 12, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC4]        = { size: 16, setter: floatAttribSetter, };\nattrTypeMap[INT]               = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC2]          = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC3]          = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC4]          = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[UNSIGNED_INT]      = { size:  4, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC2] = { size:  8, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC3] = { size: 12, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC4] = { size: 16, setter: uintAttribSetter,  };\nattrTypeMap[BOOL]              = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC2]         = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC3]         = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC4]         = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[FLOAT_MAT2]        = { size:  4, setter: matAttribSetter,   count: 2, };\nattrTypeMap[FLOAT_MAT3]        = { size:  9, setter: matAttribSetter,   count: 3, };\nattrTypeMap[FLOAT_MAT4]        = { size: 16, setter: matAttribSetter,   count: 4, };\n\nconst errorRE = /ERROR:\\s*\\d+:(\\d+)/gi;\nfunction addLineNumbersWithError(src, log = '', lineOffset = 0) {\n  // Note: Error message formats are not defined by any spec so this may or may not work.\n  const matches = [...log.matchAll(errorRE)];\n  const lineNoToErrorMap = new Map(matches.map((m, ndx) => {\n    const lineNo = parseInt(m[1]);\n    const next = matches[ndx + 1];\n    const end = next ? next.index : log.length;\n    const msg = log.substring(m.index, end);\n    return [lineNo - 1, msg];\n  }));\n  return src.split('\\n').map((line, lineNo) => {\n    const err = lineNoToErrorMap.get(lineNo);\n    return `${lineNo + 1 + lineOffset}: ${line}${err ? `\\n\\n^^^ ${err}` : ''}`;\n  }).join('\\n');\n}\n\n/**\n * Error Callback\n * @callback ErrorCallback\n * @param {string} msg error message.\n * @param {number} [lineOffset] amount to add to line number\n * @memberOf module:twgl\n */\n\n/**\n * Program Callback\n * @callback ProgramCallback\n * @param {string} [err] error message, falsy if no error\n * @param {WebGLProgram|module:twgl.ProgramInfo} [result] the program or programInfo\n */\n\nconst spaceRE = /^[ \\t]*\\n/;\n\n/**\n * Remove the first end of line because WebGL 2.0 requires\n * #version 300 es\n * as the first line. No whitespace allowed before that line\n * so\n *\n * <script>\n * #version 300 es\n * </script>\n *\n * Has one line before it which is invalid according to GLSL ES 3.00\n *\n * @param {string} shaderSource The source of the shader\n * @returns {{shaderSource: string, lineOffset: number}}\n * @private\n */\nfunction prepShaderSource(shaderSource) {\n  let lineOffset = 0;\n  if (spaceRE.test(shaderSource)) {\n    lineOffset = 1;\n    shaderSource = shaderSource.replace(spaceRE, '');\n  }\n  return {lineOffset, shaderSource};\n}\n\n/**\n * @param {module:twgl.ProgramOptions} progOptions\n * @param {string} msg\n * @return null\n * @private\n */\nfunction reportError(progOptions, msg) {\n  progOptions.errorCallback(msg);\n  if (progOptions.callback) {\n    setTimeout(() => {\n      progOptions.callback(`${msg}\\n${progOptions.errors.join('\\n')}`);\n    });\n  }\n  return null;\n}\n\n/**\n * Check Shader status\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {number} shaderType The shader type\n * @param {WebGLShader} shader The shader\n * @param {ErrorCallback} [errFn] function to receive error message.\n * @return {string} errors or empty string\n * @private\n */\nfunction checkShaderStatus(gl, shaderType, shader, errFn) {\n  errFn = errFn || error;\n  // Check the compile status\n  const compiled = gl.getShaderParameter(shader, COMPILE_STATUS);\n  if (!compiled) {\n    // Something went wrong during compilation; get the error\n    const lastError = gl.getShaderInfoLog(shader);\n    const {lineOffset, shaderSource} = prepShaderSource(gl.getShaderSource(shader));\n    const error = `${addLineNumbersWithError(shaderSource, lastError, lineOffset)}\\nError compiling ${glEnumToString(gl, shaderType)}: ${lastError}`;\n    errFn(error);\n    return error;\n  }\n  return '';\n}\n\n/**\n * @typedef {Object} FullProgramSpec\n * @property {string[]} shaders the shader source or element ids.\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>|string[]} [attribLocations] a attribute name to location map, or array of attribute names where index = location.\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @property {ProgramCallback} [callback] callback for async program compilation.\n * @memberOf module:twgl\n */\n\n/**\n * @typedef {string[]|module:twgl.FullProgramSpec} ProgramSpec\n * @memberOf module:twgl\n */\n\n/**\n * @typedef {Object} ProgramOptions\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>|string[]} [attribLocations] a attribute name to location map, or array of attribute names where index = location.\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @property {ProgramCallback} [callback] callback for async program compilation.\n * @memberOf module:twgl\n */\n\n/**\n * Gets the program options based on all these optional arguments\n * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments passed in\n * @private\n */\nfunction getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {\n  let transformFeedbackVaryings;\n  let transformFeedbackMode;\n  let callback;\n  if (typeof opt_locations === 'function') {\n    opt_errorCallback = opt_locations;\n    opt_locations = undefined;\n  }\n  if (typeof opt_attribs === 'function') {\n    opt_errorCallback = opt_attribs;\n    opt_attribs = undefined;\n  } else if (opt_attribs && !Array.isArray(opt_attribs)) {\n    const opt = opt_attribs;\n    opt_errorCallback = opt.errorCallback;\n    opt_attribs = opt.attribLocations;\n    transformFeedbackVaryings = opt.transformFeedbackVaryings;\n    transformFeedbackMode = opt.transformFeedbackMode;\n    callback = opt.callback;\n  }\n\n  const errorCallback = opt_errorCallback || error;\n  const errors = [];\n  const options = {\n    errorCallback(msg, ...args) {\n      errors.push(msg);\n      errorCallback(msg, ...args);\n    },\n    transformFeedbackVaryings,\n    transformFeedbackMode,\n    callback,\n    errors,\n  };\n\n  {\n    let attribLocations = {};\n    if (Array.isArray(opt_attribs)) {\n      opt_attribs.forEach(function(attrib,  ndx) {\n        attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;\n      });\n    } else {\n      attribLocations = opt_attribs || {};\n    }\n    options.attribLocations = attribLocations;\n  }\n\n  return options;\n}\n\nconst defaultShaderType = [\n  \"VERTEX_SHADER\",\n  \"FRAGMENT_SHADER\",\n];\n\nfunction getShaderTypeFromScriptType(gl, scriptType) {\n  if (scriptType.indexOf(\"frag\") >= 0) {\n    return FRAGMENT_SHADER;\n  } else if (scriptType.indexOf(\"vert\") >= 0) {\n    return VERTEX_SHADER;\n  }\n  return undefined;\n}\n\nfunction deleteProgramAndShaders(gl, program, notThese) {\n  const shaders = gl.getAttachedShaders(program);\n  for (const shader of shaders) {\n    if (notThese.has(shader)) {\n      gl.deleteShader(shader);\n    }\n  }\n  gl.deleteProgram(program);\n}\n\nconst wait = (ms = 0) => new Promise(resolve => setTimeout(resolve, ms));\n\nfunction createProgramNoCheck(gl, shaders, programOptions) {\n  const program = gl.createProgram();\n  const {\n    attribLocations,\n    transformFeedbackVaryings,\n    transformFeedbackMode,\n  } = getProgramOptions(programOptions);\n\n  for (let ndx = 0; ndx < shaders.length; ++ndx) {\n    let shader = shaders[ndx];\n    if (typeof shader === 'string') {\n      const elem = getElementById(shader);\n      const src = elem ? elem.text : shader;\n      let type = gl[defaultShaderType[ndx]];\n      if (elem && elem.type) {\n        type = getShaderTypeFromScriptType(gl, elem.type) || type;\n      }\n      shader = gl.createShader(type);\n      gl.shaderSource(shader, prepShaderSource(src).shaderSource);\n      gl.compileShader(shader);\n      gl.attachShader(program, shader);\n    }\n  }\n\n  Object.entries(attribLocations).forEach(([attrib, loc]) => gl.bindAttribLocation(program, loc, attrib));\n\n  {\n    let varyings = transformFeedbackVaryings;\n    if (varyings) {\n      if (varyings.attribs) {\n        varyings = varyings.attribs;\n      }\n      if (!Array.isArray(varyings)) {\n        varyings = Object.keys(varyings);\n      }\n      gl.transformFeedbackVaryings(program, varyings, transformFeedbackMode || SEPARATE_ATTRIBS);\n    }\n  }\n\n  gl.linkProgram(program);\n  return program;\n}\n\n/**\n * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the\n * program.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgram(gl, [vs, fs], options);\n *     twgl.createProgram(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error of a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgram(\n    gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n  // This code is really convoluted, because it may or may not be async\n  // Maybe it would be better to have a separate function\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaderSet = new Set(shaders);\n  const program = createProgramNoCheck(gl, shaders, progOptions);\n\n  function hasErrors(gl, program) {\n    const errors = getProgramErrors(gl, program, progOptions.errorCallback);\n    if (errors) {\n      deleteProgramAndShaders(gl, program, shaderSet);\n    }\n    return errors;\n  }\n\n  if (progOptions.callback) {\n    waitForProgramLinkCompletionAsync(gl, program).then(() => {\n      const errors = hasErrors(gl, program);\n      progOptions.callback(errors, errors ? undefined : program);\n    });\n    return undefined;\n  }\n\n  return hasErrors(gl, program) ? undefined : program;\n}\n\n/**\n * This only works because the functions it wraps the first 2 arguments\n * are gl and any, followed by things that become programOptions\n * @private\n */\nfunction wrapCallbackFnToAsyncFn(fn) {\n  return function(gl, arg1, ...args) {\n    return new Promise((resolve, reject) => {\n      const programOptions = getProgramOptions(...args);\n      programOptions.callback = (err, program) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(program);\n        }\n      };\n      fn(gl, arg1, programOptions);\n    });\n  };\n}\n\n/**\n * Same as createProgram but returns a promise\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramAsync(gl, [vs, fs], options);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @function\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {Promise<WebGLProgram>} The created program\n * @memberOf module:twgl/programs\n */\nconst createProgramAsync = wrapCallbackFnToAsyncFn(createProgram);\n\n/**\n * Same as createProgramInfo but returns a promise\n * @function\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {Promise<module:twgl.ProgramInfo>} The created ProgramInfo\n * @memberOf module:twgl/programs\n */\nconst createProgramInfoAsync = wrapCallbackFnToAsyncFn(createProgramInfo);\n\nasync function waitForProgramLinkCompletionAsync(gl, program) {\n  const ext = gl.getExtension('KHR_parallel_shader_compile');\n  const checkFn = ext\n      ? (gl, program) => gl.getProgramParameter(program, ext.COMPLETION_STATUS_KHR)\n      : () => true;\n\n  let waitTime = 0;\n  do {\n    await wait(waitTime);  // must wait at least once\n    waitTime = 1000 / 60;\n  } while (!checkFn(gl, program));\n}\n\nasync function waitForAllProgramsLinkCompletionAsync(gl, programs) {\n  for (const program of Object.values(programs)) {\n    await waitForProgramLinkCompletionAsync(gl, program);\n  }\n}\n\n/**\n * Check a program's link status\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program Program to check\n * @param {ErrorCallback} [errFn] func for errors\n * @return {string?} errors if program is failed, else undefined\n * @private\n */\nfunction getProgramErrors(gl, program, errFn) {\n  errFn = errFn || error;\n  // Check the link status\n  const linked = gl.getProgramParameter(program, LINK_STATUS);\n  if (!linked) {\n    // something went wrong with the link\n    const lastError = gl.getProgramInfoLog(program);\n    errFn(`Error in program linking: ${lastError}`);\n    // print any errors from these shaders\n    const shaders = gl.getAttachedShaders(program);\n    const errors = shaders.map(shader => checkShaderStatus(gl, gl.getShaderParameter(shader, gl.SHADER_TYPE), shader, errFn));\n    return `${lastError}\\n${errors.filter(_ => _).join('\\n')}`;\n  }\n  return undefined;\n}\n\n/**\n * Creates a program from 2 script tags.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderScriptIds Array of ids of the script\n *        tags for the shaders. The first is assumed to be the\n *        vertex shader, the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromScripts(\n    gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (const scriptId of shaderScriptIds) {\n    const shaderScript = getElementById(scriptId);\n    if (!shaderScript) {\n      return reportError(progOptions, `unknown script element: ${scriptId}`);\n    }\n    shaders.push(shaderScript.text);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Creates a program from 2 sources.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromSources(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  return createProgram(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback);\n}\n\n/**\n * Returns true if attribute/uniform is a reserved/built in\n *\n * It makes no sense to me why GL returns these because it's\n * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`\n * with names that start with `gl_` (and `webgl_` in WebGL)\n *\n * I can only assume they are there because they might count\n * when computing the number of uniforms/attributes used when you want to\n * know if you are near the limit. That doesn't really make sense\n * to me but the fact that these get returned are in the spec.\n *\n * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or\n *    `gl.getActiveAttrib`.\n * @return {bool} true if it's reserved\n * @private\n */\nfunction isBuiltIn(info) {\n  const name = info.name;\n  return name.startsWith(\"gl_\") || name.startsWith(\"webgl_\");\n}\n\nconst tokenRE = /(\\.|\\[|]|\\w+)/g;\nconst isDigit = s => s >= '0' && s <= '9';\nfunction addSetterToUniformTree(fullPath, setter, node, uniformSetters) {\n  const tokens = fullPath.split(tokenRE).filter(s => s !== '');\n  let tokenNdx = 0;\n  let path = '';\n\n  for (;;) {\n    const token = tokens[tokenNdx++];  // has to be name or number\n    path += token;\n    const isArrayIndex = isDigit(token[0]);\n    const accessor = isArrayIndex\n        ? parseInt(token)\n        : token;\n    if (isArrayIndex) {\n      path += tokens[tokenNdx++];  // skip ']'\n    }\n    const isLastToken = tokenNdx === tokens.length;\n    if (isLastToken) {\n      node[accessor] = setter;\n      break;\n    } else {\n      const token = tokens[tokenNdx++];  // has to be . or [\n      const isArray = token === '[';\n      const child = node[accessor] || (isArray ? [] : {});\n      node[accessor] = child;\n      node = child;\n      uniformSetters[path] = uniformSetters[path] || function(node) {\n        return function(value) {\n          setUniformTree(node, value);\n        };\n      }(child);\n      path += token;\n    }\n  }\n}\n\n/**\n * Creates setter functions for all uniforms of a shader\n * program.\n *\n * @see {@link module:twgl.setUniforms}\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @returns {Object.<string, function>} an object with a setter by name for each uniform\n * @memberOf module:twgl/programs\n */\nfunction createUniformSetters(gl, program) {\n  let textureUnit = 0;\n\n  /**\n   * Creates a setter for a uniform of the given program with it's\n   * location embedded in the setter.\n   * @param {WebGLProgram} program\n   * @param {WebGLUniformInfo} uniformInfo\n   * @returns {function} the created setter.\n   */\n  function createUniformSetter(program, uniformInfo, location) {\n    const isArray = uniformInfo.name.endsWith(\"[0]\");\n    const type = uniformInfo.type;\n    const typeInfo = typeMap[type];\n    if (!typeInfo) {\n      throw new Error(`unknown type: 0x${type.toString(16)}`); // we should never get here.\n    }\n    let setter;\n    if (typeInfo.bindPoint) {\n      // it's a sampler\n      const unit = textureUnit;\n      textureUnit += uniformInfo.size;\n      if (isArray) {\n        setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n      } else {\n        setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);\n      }\n    } else {\n      if (typeInfo.arraySetter && isArray) {\n        setter = typeInfo.arraySetter(gl, location);\n      } else {\n        setter = typeInfo.setter(gl, location);\n      }\n    }\n    setter.location = location;\n    return setter;\n  }\n\n  const uniformSetters = {};\n  const uniformTree = {};\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    if (isBuiltIn(uniformInfo)) {\n      continue;\n    }\n    let name = uniformInfo.name;\n    // remove the array suffix.\n    if (name.endsWith(\"[0]\")) {\n      name = name.substr(0, name.length - 3);\n    }\n    const location = gl.getUniformLocation(program, uniformInfo.name);\n    // the uniform will have no location if it's in a uniform block\n    if (location) {\n      const setter = createUniformSetter(program, uniformInfo, location);\n      uniformSetters[name] = setter;\n      addSetterToUniformTree(name, setter, uniformTree, uniformSetters);\n    }\n  }\n\n  return uniformSetters;\n}\n\n/**\n * @typedef {Object} TransformFeedbackInfo\n * @property {number} index index of transform feedback\n * @property {number} type GL type\n * @property {number} size 1 - 4\n * @memberOf module:twgl\n */\n\n/**\n * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {Object<string, module:twgl.TransformFeedbackInfo>}\n * @memberOf module:twgl\n */\nfunction createTransformFeedbackInfo(gl, program) {\n  const info = {};\n  const numVaryings = gl.getProgramParameter(program, TRANSFORM_FEEDBACK_VARYINGS);\n  for (let ii = 0; ii < numVaryings; ++ii) {\n    const varying = gl.getTransformFeedbackVarying(program, ii);\n    info[varying.name] = {\n      index: ii,\n      type: varying.type,\n      size: varying.size,\n    };\n  }\n  return info;\n}\n\n/**\n * Binds buffers for transform feedback.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @memberOf module:twgl\n */\nfunction bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {\n  if (transformFeedbackInfo.transformFeedbackInfo) {\n    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\n  }\n  if (bufferInfo.attribs) {\n    bufferInfo = bufferInfo.attribs;\n  }\n  for (const name in bufferInfo) {\n    const varying = transformFeedbackInfo[name];\n    if (varying) {\n      const buf = bufferInfo[name];\n      if (buf.offset) {\n        gl.bindBufferRange(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);\n      } else {\n        gl.bindBufferBase(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);\n      }\n    }\n  }\n}\n\n/**\n * Creates a transform feedback and sets the buffers\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @return {WebGLTransformFeedback} the created transform feedback\n * @memberOf module:twgl\n */\nfunction createTransformFeedback(gl, programInfo, bufferInfo) {\n  const tf = gl.createTransformFeedback();\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, tf);\n  gl.useProgram(programInfo.program);\n  bindTransformFeedbackInfo(gl, programInfo, bufferInfo);\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, null);\n  return tf;\n}\n\n/**\n * @typedef {Object} UniformData\n * @property {string} name The name of the uniform\n * @property {number} type The WebGL type enum for this uniform\n * @property {number} size The number of elements for this uniform\n * @property {number} blockNdx The block index this uniform appears in\n * @property {number} offset The byte offset in the block for this uniform's value\n * @memberOf module:twgl\n */\n\n/**\n * The specification for one UniformBlockObject\n *\n * @typedef {Object} BlockSpec\n * @property {number} index The index of the block.\n * @property {number} size The size in bytes needed for the block\n * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices\n *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.\n * @property {bool} usedByVertexShader Self explanatory\n * @property {bool} usedByFragmentShader Self explanatory\n * @property {bool} used Self explanatory\n * @memberOf module:twgl\n */\n\n/**\n * A `UniformBlockSpec` represents the data needed to create and bind\n * UniformBlockObjects for a given program\n *\n * @typedef {Object} UniformBlockSpec\n * @property {Object.<string, module:twgl.BlockSpec>} blockSpecs The BlockSpec for each block by block name\n * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a UniformBlockSpec for the given program.\n *\n * A UniformBlockSpec represents the data needed to create and bind\n * UniformBlockObjects\n *\n * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context\n * @param {WebGLProgram} program A WebGLProgram for a successfully linked program\n * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockSpecFromProgram(gl, program) {\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n  const uniformData = [];\n  const uniformIndices = [];\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    uniformIndices.push(ii);\n    uniformData.push({});\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    uniformData[ii].name = uniformInfo.name;\n  }\n\n  [\n    [ \"UNIFORM_TYPE\", \"type\" ],\n    [ \"UNIFORM_SIZE\", \"size\" ],  // num elements\n    [ \"UNIFORM_BLOCK_INDEX\", \"blockNdx\" ],\n    [ \"UNIFORM_OFFSET\", \"offset\", ],\n  ].forEach(function(pair) {\n    const pname = pair[0];\n    const key = pair[1];\n    gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function(value, ndx) {\n      uniformData[ndx][key] = value;\n    });\n  });\n\n  const blockSpecs = {};\n\n  const numUniformBlocks = gl.getProgramParameter(program, ACTIVE_UNIFORM_BLOCKS);\n  for (let ii = 0; ii < numUniformBlocks; ++ii) {\n    const name = gl.getActiveUniformBlockName(program, ii);\n    const blockSpec = {\n      index: gl.getUniformBlockIndex(program, name),\n      usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n      usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n      size: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_DATA_SIZE),\n      uniformIndices: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),\n    };\n    blockSpec.used = blockSpec.usedByVertexShader || blockSpec.usedByFragmentShader;\n    blockSpecs[name] = blockSpec;\n  }\n\n  return {\n    blockSpecs: blockSpecs,\n    uniformData: uniformData,\n  };\n}\n\nconst arraySuffixRE = /\\[\\d+\\]\\.$/;  // better way to check?\n\nconst pad = (v, padding) => ((v + (padding - 1)) / padding | 0) * padding;\n\nfunction createUniformBlockUniformSetter(view, isArray, rows, cols) {\n  if (isArray || rows) {\n    cols = cols || 1;\n    const numElements = view.length;\n    const totalRows = numElements / 4;\n    return function(value) {\n      let dst = 0;\n      let src = 0;\n      for (let row = 0; row < totalRows; ++row) {\n        for (let col = 0; col < cols; ++col) {\n          view[dst++] = value[src++];\n        }\n        dst += 4 - cols;\n      }\n    };\n  } else {\n    return function(value) {\n      if (value.length) {\n        view.set(value);\n      } else {\n        view[0] = value;\n      }\n    };\n  }\n}\n\n/**\n * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values\n * and a corresponding WebGLBuffer to hold those values on the GPU\n *\n * @typedef {Object} UniformBlockInfo\n * @property {string} name The name of the block\n * @property {ArrayBuffer} array The array buffer that contains the uniform values\n * @property {Float32Array} asFloat A float view on the array buffer. This is useful\n *    inspecting the contents of the buffer in the debugger.\n * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.\n * @property {number} [offset] offset into buffer\n * @property {Object<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.\n *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset\n *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`\n *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an\n *   `Int32Array` view, etc.\n * @property {Object<string, function>} setters A setter for this uniform.\n *   The reason to use setters is elements of arrays are padded to vec4 sizes which\n *   means if you want to set an array of 4 floats you'd need to set 16 values\n *   (or set elements 0, 4, 8, 12). In other words\n *   `someBlockInfo.uniforms.some4FloatArrayUniform.set([0, , , , 1, , , , 2, , , , 3])`\n *   where as the setter handles just passing in [0, 1, 2, 3] either directly as in\n *   `someBlockInfo.setter.some4FloatArrayUniform.set([0, 1, 2, 3])` (not recommended)\n *   or via {@link module:twgl.setBlockUniforms}\n * @memberOf module:twgl\n */\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {WebGLProgram} program A WebGLProgram\n * @param {module:twgl.UniformBlockSpec} uniformBlockSpec. A UniformBlockSpec as returned\n *     from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {\n  const blockSpecs = uniformBlockSpec.blockSpecs;\n  const uniformData = uniformBlockSpec.uniformData;\n  const blockSpec = blockSpecs[blockName];\n  if (!blockSpec) {\n    warn(\"no uniform block object named:\", blockName);\n    return {\n      name: blockName,\n      uniforms: {},\n    };\n  }\n  const array = new ArrayBuffer(blockSpec.size);\n  const buffer = gl.createBuffer();\n  const uniformBufferIndex = blockSpec.index;\n  gl.bindBuffer(UNIFORM_BUFFER, buffer);\n  gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);\n\n  let prefix = blockName + \".\";\n  if (arraySuffixRE.test(prefix)) {\n    prefix = prefix.replace(arraySuffixRE, \".\");\n  }\n  const uniforms = {};\n  const setters = {};\n  const setterTree = {};\n  blockSpec.uniformIndices.forEach(function(uniformNdx) {\n    const data = uniformData[uniformNdx];\n    let name = data.name;\n    if (name.startsWith(prefix)) {\n      name = name.substr(prefix.length);\n    }\n    const isArray = name.endsWith('[0]');\n    if (isArray) {\n      name = name.substr(0, name.length - 3);\n    }\n    const typeInfo = typeMap[data.type];\n    const Type = typeInfo.Type;\n    const byteLength = isArray\n        ? pad(typeInfo.size, 16) * data.size\n        : typeInfo.size * data.size;\n    const uniformView = new Type(array, data.offset, byteLength / Type.BYTES_PER_ELEMENT);\n    uniforms[name] = uniformView;\n    // Note: I'm not sure what to do here. The original\n    // idea was to create TypedArray views into each part\n    // of the block. This is useful, for example if you have\n    // a block with { mat4: model; mat4 view; mat4 projection; }\n    // you'll get a Float32Array for each one suitable for\n    // passing to most JS math libraries including twgl's and glMatrix.js.\n    //\n    // But, if you have a an array of structures, especially if that\n    // array is large, you get a whole bunch of TypedArray views.\n    // Every one of them has overhead and switching between them all\n    // is probably a cache miss. In that case it would really be better\n    // to just have one view (asFloat) and have all the setters\n    // just reference the correct portion. But, then you can't easily\n    // treat a matrix, or a vec4, as a standalone thing like you can\n    // with all the views.\n    //\n    // Another problem with the views is they are not shared. With\n    // uniforms you have one set of setters. With UniformBlockInfo\n    // you have a set of setters *pre block instance*. That's because\n    // TypedArray views can't be mapped to different buffers.\n    //\n    // My gut right now is if you really want the speed and compactness\n    // then you should probably roll your own solution. TWGL's goal\n    // here is ease of use as AFAICT there is no simple generic efficient\n    // solution.\n    const setter = createUniformBlockUniformSetter(uniformView, isArray, typeInfo.rows, typeInfo.cols);\n    setters[name] = setter;\n    addSetterToUniformTree(name, setter, setterTree, setters);\n  });\n  return {\n    name: blockName,\n    array,\n    asFloat: new Float32Array(array),  // for debugging\n    buffer,\n    uniforms,\n    setters,\n  };\n}\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo}\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfo(gl, programInfo, blockName) {\n  return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);\n}\n\n/**\n * Binds a uniform block to the matching uniform block point.\n * Matches by blocks by name so blocks must have the same name not just the same\n * structure.\n *\n * If you have changed any values and you upload the values into the corresponding WebGLBuffer\n * call {@link module:twgl.setUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name\n *     no buffer is bound.\n * @memberOf module:twgl/programs\n */\nfunction bindUniformBlock(gl, programInfo, uniformBlockInfo) {\n  const uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;\n  const blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];\n  if (blockSpec) {\n    const bufferBindIndex = blockSpec.index;\n    gl.bindBufferRange(UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Uploads the current uniform values to the corresponding WebGLBuffer\n * and binds that buffer to the program's corresponding bind point for the uniform block object.\n *\n * If you haven't changed any values and you only need to bind the uniform block object\n * call {@link module:twgl.bindUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @memberOf module:twgl/programs\n */\nfunction setUniformBlock(gl, programInfo, uniformBlockInfo) {\n  if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {\n    gl.bufferData(UNIFORM_BUFFER, uniformBlockInfo.array, DYNAMIC_DRAW);\n  }\n}\n\n/**\n * Sets values of a uniform block object\n *\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.\n * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given\n *    type of uniform. So for example given a block like\n *\n *       uniform SomeBlock {\n *         float someFloat;\n *         vec2 someVec2;\n *         vec3 someVec3Array[2];\n *         int someInt;\n *       }\n *\n *  You can set the values of the uniform block with\n *\n *       twgl.setBlockUniforms(someBlockInfo, {\n *          someFloat: 12.3,\n *          someVec2: [1, 2],\n *          someVec3Array: [1, 2, 3, 4, 5, 6],\n *          someInt: 5,\n *       }\n *\n *  Arrays can be JavaScript arrays or typed arrays\n *\n *  You can also fill out structure and array values either via\n *  shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *       float nearFar[2];\n *     };\n *     uniform Lights {\n *       Light lights[2];\n *     };\n *\n *     // in JavaScript\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[0].nearFar\": [0.1, 10],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *       \"lights[1].nearFar\": [0.2, 15],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\n *     });\n *\n *   But you can not specify leaf array indices.\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\n *       'lights[1].nearFar': [0.2, 15], // GOOD\n *     });\n *\n *  **IMPORTANT!**, packing in a UniformBlock is unintuitive.\n *  For example the actual layout of `someVec3Array` above in memory\n *  is `1, 2, 3, unused, 4, 5, 6, unused`. twgl takes in 6 values\n *  as shown about and copies them, skipping the padding. This might\n *  be confusing if you're already familiar with Uniform blocks.\n *\n *  If you want to deal with the padding yourself you can access the array\n *  buffer views directly. eg:\n *\n *      someBlockInfo.someVec3Array.set([1, 2, 3, 0, 4, 5, 6, 0]);\n *\n *  Any name that doesn't match will be ignored\n * @memberOf module:twgl/programs\n */\nfunction setBlockUniforms(uniformBlockInfo, values) {\n  const setters = uniformBlockInfo.setters;\n  for (const name in values) {\n    const setter = setters[name];\n    if (setter) {\n      const value = values[name];\n      setter(value);\n    }\n  }\n}\n\nfunction setUniformTree(tree, values) {\n  for (const name in values) {\n    const prop = tree[name];\n    if (typeof prop === 'function') {\n      prop(values[name]);\n    } else {\n      setUniformTree(tree[name], values[name]);\n    }\n  }\n}\n\n/**\n * Set uniforms and binds related textures.\n *\n * example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\"]);\n *\n *     const tex1 = gl.createTexture();\n *     const tex2 = gl.createTexture();\n *\n *     ... assume we setup the textures with data ...\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the textures AND set the\n * uniforms.\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *\n * For the example above it is equivalent to\n *\n *     let texUnit = 0;\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n *     gl.uniformMatrix4fv(u_someMatrix, false, [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ]);\n *\n * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *     };\n *\n *     const moreUniforms {\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *     twgl.setUniforms(programInfo, moreUniforms);\n *\n * You can also add WebGLSamplers to uniform samplers as in\n *\n *     const uniforms = {\n *       u_someSampler: {\n *         texture: someWebGLTexture,\n *         sampler: someWebGLSampler,\n *       },\n *     };\n *\n * In which case both the sampler and texture will be bound to the\n * same unit.\n *\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n *        uniforms.\n *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example\n *\n *     const sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     const localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, sharedUniforms);\n *     twgl.setUniforms(programInfo, localUniforms};\n *\n *   You can also fill out structure and array values either via\n *   shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *       float nearFar[2];\n *     };\n *     uniform Light lights[2];\n *\n *     // in JavaScript\n *\n *     twgl.setUniforms(programInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setUniforms(programInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[0].nearFar\": [0.1, 10],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *       \"lights[1].nearFar\": [0.2, 15],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\n *     });\n *\n *   But you can not specify leaf array indices\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\n *       'lights[1].nearFar': [0.2, 15], // GOOD\n *     });\n *\n * @memberOf module:twgl/programs\n */\nfunction setUniforms(setters, ...args) {  // eslint-disable-line\n  const actualSetters = setters.uniformSetters || setters;\n  const numArgs = args.length;\n  for (let aNdx = 0; aNdx < numArgs; ++aNdx) {\n    const values = args[aNdx];\n    if (Array.isArray(values)) {\n      const numValues = values.length;\n      for (let ii = 0; ii < numValues; ++ii) {\n        setUniforms(actualSetters, values[ii]);\n      }\n    } else {\n      for (const name in values) {\n        const setter = actualSetters[name];\n        if (setter) {\n          setter(values[name]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Alias for `setUniforms`\n * @function\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n * @memberOf module:twgl/programs\n */\nconst setUniformsAndBindTextures = setUniforms;\n\n/**\n * Creates setter functions for all attributes of a shader\n * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.\n *\n * @see {@link module:twgl.setAttributes} for example\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @return {Object.<string, function>} an object with a setter for each attribute by name.\n * @memberOf module:twgl/programs\n */\nfunction createAttributeSetters(gl, program) {\n  const attribSetters = {\n  };\n\n  const numAttribs = gl.getProgramParameter(program, ACTIVE_ATTRIBUTES);\n  for (let ii = 0; ii < numAttribs; ++ii) {\n    const attribInfo = gl.getActiveAttrib(program, ii);\n    if (isBuiltIn(attribInfo)) {\n      continue;\n    }\n    const index = gl.getAttribLocation(program, attribInfo.name);\n    const typeInfo = attrTypeMap[attribInfo.type];\n    const setter = typeInfo.setter(gl, index, typeInfo);\n    setter.location = index;\n    attribSetters[attribInfo.name] = setter;\n  }\n\n  return attribSetters;\n}\n\n/**\n * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})\n *\n * Example:\n *\n *     const program = createProgramFromScripts(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const attribSetters = createAttributeSetters(program);\n *\n *     const positionBuffer = gl.createBuffer();\n *     const texcoordBuffer = gl.createBuffer();\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setAttributes(attribSetters, attribs);\n *\n * Properties of attribs. For each attrib you can add\n * properties:\n *\n * *   type: the type of data in the buffer. Default = gl.FLOAT\n * *   normalize: whether or not to normalize the data. Default = false\n * *   stride: the stride. Default = 0\n * *   offset: offset into the buffer. Default = 0\n * *   divisor: the divisor for instances. Default = undefined\n *\n * For example if you had 3 value float positions, 2 value\n * float texcoord and 4 value uint8 colors you'd setup your\n * attribs like this\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *       a_color: {\n *         buffer: colorBuffer,\n *         numComponents: 4,\n *         type: gl.UNSIGNED_BYTE,\n *         normalize: true,\n *       },\n *     };\n *\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.\n * @memberOf module:twgl/programs\n * @deprecated use {@link module:twgl.setBuffersAndAttributes}\n * @private\n */\nfunction setAttributes(setters, buffers) {\n  for (const name in buffers) {\n    const setter = setters[name];\n    if (setter) {\n      setter(buffers[name]);\n    }\n  }\n}\n\n/**\n * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n *\n * Example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *     };\n *\n *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setBuffersAndAttributes(gl, programInfo, bufferInfo);\n *\n * For the example above it is equivalent to\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n *     gl.enableVertexAttribArray(a_positionLocation);\n *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n *     gl.enableVertexAttribArray(a_texcoordLocation);\n *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgramInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.\n *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}\n * @memberOf module:twgl/programs\n */\nfunction setBuffersAndAttributes(gl, programInfo, buffers) {\n  if (buffers.vertexArrayObject) {\n    gl.bindVertexArray(buffers.vertexArrayObject);\n  } else {\n    setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);\n    if (buffers.indices) {\n      gl.bindBuffer(ELEMENT_ARRAY_BUFFER$1, buffers.indices);\n    }\n  }\n}\n\n/**\n * @typedef {Object} ProgramInfo\n * @property {WebGLProgram} program A shader program\n * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,\n * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,\n * @property {module:twgl.UniformBlockSpec} [uniformBlockSpec] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..\n * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks\n * @memberOf module:twgl\n */\n\n/**\n * Creates a ProgramInfo from an existing program.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {module:twgl.ProgramInfo} The created ProgramInfo.\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfoFromProgram(gl, program) {\n  const uniformSetters = createUniformSetters(gl, program);\n  const attribSetters = createAttributeSetters(gl, program);\n  const programInfo = {\n    program,\n    uniformSetters,\n    attribSetters,\n  };\n\n  if (isWebGL2(gl)) {\n    programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);\n    programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);\n  }\n\n  return programInfo;\n}\n\nconst notIdRE = /\\s|{|}|;/;\n\n/**\n * Creates a ProgramInfo from 2 sources.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramInfo(gl, [vs, fs], options);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfo(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const errors = [];\n  shaderSources = shaderSources.map(function(source) {\n    // Lets assume if there is no \\n it's an id\n    if (!notIdRE.test(source)) {\n      const script = getElementById(source);\n      if (!script) {\n        const err = `no element with id: ${source}`;\n        progOptions.errorCallback(err);\n        errors.push(err);\n      } else {\n        source = script.text;\n      }\n    }\n    return source;\n  });\n\n  if (errors.length) {\n    return reportError(progOptions, '');\n  }\n\n  const origCallback = progOptions.callback;\n  if (origCallback) {\n    progOptions.callback = (err, program) => {\n      origCallback(err, err ? undefined : createProgramInfoFromProgram(gl, program));\n    };\n  }\n\n  const program = createProgramFromSources(gl, shaderSources, progOptions);\n  if (!program) {\n    return null;\n  }\n\n  return createProgramInfoFromProgram(gl, program);\n}\n\nfunction checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions) {\n  // check errors for everything.\n  for (const [name, program] of Object.entries(programs)) {\n    const options = {...programOptions};\n    const spec = programSpecs[name];\n    if (!Array.isArray(spec)) {\n      Object.assign(options, spec);\n    }\n    const errors = getProgramErrors(gl, program, options.errorCallback);\n    if (errors) {\n      // delete everything we created\n      for (const program of Object.values(programs)) {\n        const shaders = gl.getAttachedShaders(program);\n        gl.deleteProgram(program);\n        for (const shader of shaders) {\n          // Don't delete it if we didn't create it.\n          if (!noDeleteShadersSet.has(shader)) {\n            gl.deleteShader(shader);\n          }\n        }\n      }\n      return errors;\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Creates multiple programs\n *\n * Note: the reason this function exists is because the fastest way to create multiple\n * programs in WebGL is to create and compile all shaders and link all programs and only\n * afterwards check if they succeeded. In that way, giving all your shaders\n *\n * @see {@link module:twgl.createProgram}\n *\n * Example:\n *\n *     const programs = twgl.createPrograms(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Object.<string, WebGLProgram>?} the created programInfos by name\n */\nfunction createPrograms(gl, programSpecs, programOptions = {}) {\n  // Remember existing shaders so that if there is an error we don't delete them\n  const noDeleteShadersSet = new Set();\n\n  // compile and link everything\n  const programs = Object.fromEntries(Object.entries(programSpecs).map(([name, spec]) => {\n    const options = {...programOptions};\n    const shaders = Array.isArray(spec) ? spec : spec.shaders;\n    if (!Array.isArray(spec)) {\n      Object.assign(options, spec);\n    }\n    shaders.forEach(noDeleteShadersSet.add, noDeleteShadersSet);\n    return [name, createProgramNoCheck(gl, shaders, options)];\n  }));\n\n  if (programOptions.callback) {\n    waitForAllProgramsLinkCompletionAsync(gl, programs).then(() => {\n      const errors = checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions);\n      programOptions.callback(errors, errors ? undefined : programs);\n    });\n    return undefined;\n  }\n\n  const errors = checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions);\n  return errors ? undefined : programs;\n}\n\n/**\n * Creates multiple programInfos\n *\n * Note: the reason this function exists is because the fastest way to create multiple\n * programs in WebGL is to create and compile all shaders and link all programs and only\n * afterwards check if they succeeded. In that way, giving all your shaders\n *\n * @see {@link module:twgl.createProgramInfo}\n *\n * Examples:\n *\n *     const programInfos = twgl.createProgramInfos(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * or\n *\n *     const {lambert, phong, particles} = twgl.createProgramInfos(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Object.<string, module:twgl.ProgramInfo>?} the created programInfos by name\n */\nfunction createProgramInfos(gl, programSpecs, programOptions) {\n  programOptions = getProgramOptions(programOptions);\n\n  function createProgramInfosForPrograms(gl, programs) {\n    return Object.fromEntries(Object.entries(programs).map(([name, program]) =>\n      [name, createProgramInfoFromProgram(gl, program)]\n    ));\n  }\n\n  const origCallback = programOptions.callback;\n  if (origCallback) {\n    programOptions.callback = (err, programs) => {\n      origCallback(err, err ? undefined : createProgramInfosForPrograms(gl, programs));\n    };\n  }\n\n  const programs = createPrograms(gl, programSpecs, programOptions);\n  if (origCallback || !programs) {\n    return undefined;\n  }\n\n  return createProgramInfosForPrograms(gl, programs);\n}\n\n/**\n * Creates multiple programs asynchronously\n *\n * @see {@link module:twgl.createProgramAsync}\n *\n * Example:\n *\n *     const programs = await twgl.createProgramsAsync(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * @function\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Object.<string, WebGLProgram>?} the created programInfos by name\n */\nconst createProgramsAsync = wrapCallbackFnToAsyncFn(createPrograms);\n\n/**\n * Creates multiple programInfos asynchronously\n *\n * @see {@link module:twgl.createProgramInfoAsync}\n *\n * Example:\n *\n *     const programInfos = await twgl.createProgramInfosAsync(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * @function\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Promise<Object.<string, module:twgl.ProgramInfo>>} the created programInfos by name\n */\nconst createProgramInfosAsync = wrapCallbackFnToAsyncFn(createProgramInfos);\n\nvar programs = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttributeSetters: createAttributeSetters,\n  createProgram: createProgram,\n  createProgramAsync: createProgramAsync,\n  createPrograms: createPrograms,\n  createProgramsAsync: createProgramsAsync,\n  createProgramFromScripts: createProgramFromScripts,\n  createProgramFromSources: createProgramFromSources,\n  createProgramInfo: createProgramInfo,\n  createProgramInfoAsync: createProgramInfoAsync,\n  createProgramInfos: createProgramInfos,\n  createProgramInfosAsync: createProgramInfosAsync,\n  createProgramInfoFromProgram: createProgramInfoFromProgram,\n  createUniformSetters: createUniformSetters,\n  createUniformBlockSpecFromProgram: createUniformBlockSpecFromProgram,\n  createUniformBlockInfoFromProgram: createUniformBlockInfoFromProgram,\n  createUniformBlockInfo: createUniformBlockInfo,\n  createTransformFeedback: createTransformFeedback,\n  createTransformFeedbackInfo: createTransformFeedbackInfo,\n  bindTransformFeedbackInfo: bindTransformFeedbackInfo,\n  setAttributes: setAttributes,\n  setBuffersAndAttributes: setBuffersAndAttributes,\n  setUniforms: setUniforms,\n  setUniformsAndBindTextures: setUniformsAndBindTextures,\n  setUniformBlock: setUniformBlock,\n  setBlockUniforms: setBlockUniforms,\n  bindUniformBlock: bindUniformBlock\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst TRIANGLES                      = 0x0004;\nconst UNSIGNED_SHORT                 = 0x1403;\n\n/**\n * Drawing related functions\n *\n * For backward compatibility they are available at both `twgl.draw` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/draw\n */\n\n/**\n * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n *\n * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n * but calling this means if you switch from indexed data to non-indexed\n * data you don't have to remember to update your draw call.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or\n *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`\n * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n * @param {number} [offset] An optional offset. Defaults to 0.\n * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called\n * @memberOf module:twgl/draw\n */\nfunction drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {\n  type = type === undefined ? TRIANGLES : type;\n  const indices = bufferInfo.indices;\n  const elementType = bufferInfo.elementType;\n  const numElements = count === undefined ? bufferInfo.numElements : count;\n  offset = offset === undefined ? 0 : offset;\n  if (elementType || indices) {\n    if (instanceCount !== undefined) {\n      gl.drawElementsInstanced(type, numElements, elementType === undefined ? UNSIGNED_SHORT : bufferInfo.elementType, offset, instanceCount);\n    } else {\n      gl.drawElements(type, numElements, elementType === undefined ? UNSIGNED_SHORT : bufferInfo.elementType, offset);\n    }\n  } else {\n    if (instanceCount !== undefined) {\n      gl.drawArraysInstanced(type, offset, numElements, instanceCount);\n    } else {\n      gl.drawArrays(type, offset, numElements);\n    }\n  }\n}\n\n/**\n * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.\n *\n * You need either a `BufferInfo` or a `VertexArrayInfo`.\n *\n * @typedef {Object} DrawObject\n * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In other words `undefined` = `true`\n * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...\n * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}\n * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @property {Object<string, ?>} uniforms The values for the uniforms.\n *   You can pass multiple objects by putting them in an array. For example\n *\n *     var sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     var localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     var drawObj = {\n *       ...\n *       uniforms: [sharedUniforms, localUniforms],\n *     };\n *\n * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.\n * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to bufferInfo.numElements.\n * @property {number} [instanceCount] the number of instances. Defaults to undefined.\n * @memberOf module:twgl\n */\n\n/**\n * Draws a list of objects\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n * @memberOf module:twgl/draw\n */\nfunction drawObjectList(gl, objectsToDraw) {\n  let lastUsedProgramInfo = null;\n  let lastUsedBufferInfo = null;\n\n  objectsToDraw.forEach(function(object) {\n    if (object.active === false) {\n      return;\n    }\n\n    const programInfo = object.programInfo;\n    const bufferInfo = object.vertexArrayInfo || object.bufferInfo;\n    let bindBuffers = false;\n    const type = object.type === undefined ? TRIANGLES : object.type;\n\n    if (programInfo !== lastUsedProgramInfo) {\n      lastUsedProgramInfo = programInfo;\n      gl.useProgram(programInfo.program);\n\n      // We have to rebind buffers when changing programs because we\n      // only bind buffers the program uses. So if 2 programs use the same\n      // bufferInfo but the 1st one uses only positions the when the\n      // we switch to the 2nd one some of the attributes will not be on.\n      bindBuffers = true;\n    }\n\n    // Setup all the needed attributes.\n    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {\n        gl.bindVertexArray(null);\n      }\n      lastUsedBufferInfo = bufferInfo;\n      setBuffersAndAttributes(gl, programInfo, bufferInfo);\n    }\n\n    // Set the uniforms.\n    setUniforms(programInfo, object.uniforms);\n\n    // Draw\n    drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);\n  });\n\n  if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject) {\n    gl.bindVertexArray(null);\n  }\n}\n\nvar draw = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  drawBufferInfo: drawBufferInfo,\n  drawObjectList: drawObjectList\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst FRAMEBUFFER                    = 0x8d40;\nconst RENDERBUFFER                   = 0x8d41;\nconst TEXTURE_2D                     = 0x0de1;\n\nconst UNSIGNED_BYTE                  = 0x1401;\n\n/* PixelFormat */\nconst DEPTH_COMPONENT                = 0x1902;\nconst RGBA                           = 0x1908;\nconst DEPTH_COMPONENT24              = 0x81a6;\nconst DEPTH_COMPONENT32F             = 0x8cac;\nconst DEPTH24_STENCIL8               = 0x88f0;\nconst DEPTH32F_STENCIL8              = 0x8cad;\n\n/* Framebuffer Object. */\nconst RGBA4                          = 0x8056;\nconst RGB5_A1                        = 0x8057;\nconst RGB565                         = 0x8D62;\nconst DEPTH_COMPONENT16              = 0x81A5;\nconst STENCIL_INDEX                  = 0x1901;\nconst STENCIL_INDEX8                 = 0x8D48;\nconst DEPTH_STENCIL                  = 0x84F9;\nconst COLOR_ATTACHMENT0              = 0x8CE0;\nconst DEPTH_ATTACHMENT               = 0x8D00;\nconst STENCIL_ATTACHMENT             = 0x8D20;\nconst DEPTH_STENCIL_ATTACHMENT       = 0x821A;\n\n/* TextureWrapMode */\nconst CLAMP_TO_EDGE                  = 0x812F;\n\n/* TextureMagFilter */\nconst LINEAR                         = 0x2601;\n\n/**\n * The options for a framebuffer attachment.\n *\n * Note: For a `format` that is a texture include all the texture\n * options from {@link module:twgl.TextureOptions} for example\n * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}\n * `auto` defaults to `false` for attachment textures but `min` and `mag` default\n * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`\n *\n * @typedef {Object} AttachmentOptions\n * @property {number} [attachmentPoint] The attachment point. Defaults\n *   to `gl.COLOR_ATTACHMENT0 + ndx` unless type is a depth or stencil type\n *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending\n *   on the format or attachment type.\n * @property {number} [format] The format. If one of `gl.RGBA4`,\n *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,\n *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a\n *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`\n * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.\n * @property {number} [target] The texture target for `gl.framebufferTexture2D`.\n *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.\n * @property {number} [samples] The number of samples. Default = 1\n * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.\n * @property {number} [layer] layer for `gl.framebufferTextureLayer`. Defaults to undefined.\n *   If set then `gl.framebufferTextureLayer` is called, if not then `gl.framebufferTexture2D`\n * @property {(WebGLRenderbuffer | WebGLTexture)} [attachment] An existing renderbuffer or texture.\n *    If provided will attach this Object. This allows you to share\n *    attachments across framebuffers.\n * @memberOf module:twgl\n * @mixes module:twgl.TextureOptions\n */\n\nconst defaultAttachments = [\n  { format: RGBA, type: UNSIGNED_BYTE, min: LINEAR, wrap: CLAMP_TO_EDGE, },\n  { format: DEPTH_STENCIL, },\n];\n\nconst attachmentsByFormat = {};\nattachmentsByFormat[DEPTH_STENCIL] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT16] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT24] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT32F] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH24_STENCIL8] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH32F_STENCIL8] = DEPTH_STENCIL_ATTACHMENT;\n\nfunction getAttachmentPointForFormat(format, internalFormat) {\n  return attachmentsByFormat[format] || attachmentsByFormat[internalFormat];\n}\n\nconst renderbufferFormats = {};\nrenderbufferFormats[RGBA4] = true;\nrenderbufferFormats[RGB5_A1] = true;\nrenderbufferFormats[RGB565] = true;\nrenderbufferFormats[DEPTH_STENCIL] = true;\nrenderbufferFormats[DEPTH_COMPONENT16] = true;\nrenderbufferFormats[STENCIL_INDEX] = true;\nrenderbufferFormats[STENCIL_INDEX8] = true;\n\nfunction isRenderbufferFormat(format) {\n  return renderbufferFormats[format];\n}\n\nconst MAX_COLOR_ATTACHMENT_POINTS = 32;  // even an 3090 only supports 8 but WebGL/OpenGL ES define constants for 32\n\nfunction isColorAttachmentPoint(attachmentPoint) {\n  return attachmentPoint >= COLOR_ATTACHMENT0 && attachmentPoint < COLOR_ATTACHMENT0 + MAX_COLOR_ATTACHMENT_POINTS;\n}\n\n/**\n * @typedef {Object} FramebufferInfo\n * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo\n * @property {Array.<(WebGLRenderbuffer | WebGLTexture)>} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.\n * @property {number} width The width of the framebuffer and its attachments\n * @property {number} height The width of the framebuffer and its attachments\n * @memberOf module:twgl\n */\n\n/**\n * Creates a framebuffer and attachments.\n *\n * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.\n * It also leaves the framebuffer it just created as the currently bound `FRAMEBUFFER`.\n * Note: If this is WebGL2 or if you called {@link module:twgl.addExtensionsToContext} then it will set the drawBuffers\n * to `[COLOR_ATTACHMENT0, COLOR_ATTACHMENT1, ...]` for how ever many color attachments were created.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n * Passing in a specific size\n *\n *     const width = 256;\n *     const height = 256;\n *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);\n *\n * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.\n * [WebGL1 only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an\n *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.\n * @memberOf module:twgl/framebuffers\n */\nfunction createFramebufferInfo(gl, attachments, width, height) {\n  const target = FRAMEBUFFER;\n  const fb = gl.createFramebuffer();\n  gl.bindFramebuffer(target, fb);\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  attachments = attachments || defaultAttachments;\n  const usedColorAttachmentsPoints = [];\n  const framebufferInfo = {\n    framebuffer: fb,\n    attachments: [],\n    width: width,\n    height: height,\n  };\n\n  attachments.forEach(function(attachmentOptions, i) {\n    let attachment = attachmentOptions.attachment;\n    const samples = attachmentOptions.samples;\n    const format = attachmentOptions.format;\n    let attachmentPoint = attachmentOptions.attachmentPoint || getAttachmentPointForFormat(format, attachmentOptions.internalFormat);\n    if (!attachmentPoint) {\n      attachmentPoint = COLOR_ATTACHMENT0 + i;\n    }\n    if (isColorAttachmentPoint(attachmentPoint)) {\n      usedColorAttachmentsPoints.push(attachmentPoint);\n    }\n    if (!attachment) {\n      if (samples !== undefined || isRenderbufferFormat(format)) {\n        attachment = gl.createRenderbuffer();\n        gl.bindRenderbuffer(RENDERBUFFER, attachment);\n        if (samples > 1) {\n          gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);\n        } else {\n          gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n        }\n      } else {\n        const textureOptions = Object.assign({}, attachmentOptions);\n        textureOptions.width = width;\n        textureOptions.height = height;\n        if (textureOptions.auto === undefined) {\n          textureOptions.auto = false;\n          textureOptions.min = textureOptions.min || textureOptions.minMag || LINEAR;\n          textureOptions.mag = textureOptions.mag || textureOptions.minMag || LINEAR;\n          textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || CLAMP_TO_EDGE;\n          textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || CLAMP_TO_EDGE;\n        }\n        attachment = createTexture(gl, textureOptions);\n      }\n    }\n    if (isRenderbuffer(gl, attachment)) {\n      gl.framebufferRenderbuffer(target, attachmentPoint, RENDERBUFFER, attachment);\n    } else if (isTexture(gl, attachment)) {\n      if (attachmentOptions.layer !== undefined) {\n        gl.framebufferTextureLayer(\n          target,\n          attachmentPoint,\n          attachment,\n          attachmentOptions.level || 0,\n          attachmentOptions.layer);\n      } else {\n        gl.framebufferTexture2D(\n            target,\n            attachmentPoint,\n            attachmentOptions.target || TEXTURE_2D,\n            attachment,\n            attachmentOptions.level || 0);\n      }\n    } else {\n      throw new Error('unknown attachment type');\n    }\n    framebufferInfo.attachments.push(attachment);\n  });\n  if (gl.drawBuffers) {\n    gl.drawBuffers(usedColorAttachmentsPoints);\n  }\n  return framebufferInfo;\n}\n\n/**\n * Resizes the attachments of a framebuffer.\n *\n * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}\n * because TWGL has no idea the format/type of each attachment.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments\n *         twgl.resizeFramebufferInfo(gl, fbi);\n *       }\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments to match\n *         twgl.resizeFramebufferInfo(gl, fbi, attachments);\n *       }\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @memberOf module:twgl/framebuffers\n */\nfunction resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  framebufferInfo.width = width;\n  framebufferInfo.height = height;\n  attachments = attachments || defaultAttachments;\n  attachments.forEach(function(attachmentOptions, ndx) {\n    const attachment = framebufferInfo.attachments[ndx];\n    const format = attachmentOptions.format;\n    const samples = attachmentOptions.samples;\n    if (samples !== undefined || isRenderbuffer(gl, attachment)) {\n      gl.bindRenderbuffer(RENDERBUFFER, attachment);\n      if (samples > 1) {\n        gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);\n      } else {\n        gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n      }\n    } else if (isTexture(gl, attachment)) {\n      resizeTexture(gl, attachment, attachmentOptions, width, height);\n    } else {\n      throw new Error('unknown attachment type');\n    }\n  });\n}\n\n/**\n * Binds a framebuffer\n *\n * This function pretty much solely exists because I spent hours\n * trying to figure out why something I wrote wasn't working only\n * to realize I forget to set the viewport dimensions.\n * My hope is this function will fix that.\n *\n * It is effectively the same as\n *\n *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\n *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo|null} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n *   If falsy will bind the canvas.\n * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\n * @memberOf module:twgl/framebuffers\n */\n\nfunction bindFramebufferInfo(gl, framebufferInfo, target) {\n  target = target || FRAMEBUFFER;\n  if (framebufferInfo) {\n    gl.bindFramebuffer(target, framebufferInfo.framebuffer);\n    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\n  } else {\n    gl.bindFramebuffer(target, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  }\n}\n\nvar framebuffers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  bindFramebufferInfo: bindFramebufferInfo,\n  createFramebufferInfo: createFramebufferInfo,\n  resizeFramebufferInfo: resizeFramebufferInfo\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * vertex array object related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/vertexArrays\n */\n\nconst ELEMENT_ARRAY_BUFFER           = 0x8893;\n\n/**\n * @typedef {Object} VertexArrayInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object\n * @memberOf module:twgl\n */\n\n/**\n * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects\n *   assign buffers to specific attributes at creation time. That means they can only be used with programs\n *   who's attributes use the same attribute locations for the same purposes.\n *\n * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}\n *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.\n *\n * also\n *\n * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object\n *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**\n *   will affect the Vertex Array Object state.\n *\n * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n *\n *    You need to make sure every attribute that will be used is bound. So for example assume shader 1\n *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo\n *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't\n *    now attribute D's location.\n *\n *    So, you can pass in both shader 1 and shader 2's programInfo\n *\n * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVertexArrayInfo(gl, programInfos, bufferInfo) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  if (!programInfos.length) {\n    programInfos = [programInfos];\n  }\n  programInfos.forEach(function(programInfo) {\n    setBuffersAndAttributes(gl, programInfo, bufferInfo);\n  });\n  gl.bindVertexArray(null);\n  return {\n    numElements: bufferInfo.numElements,\n    elementType: bufferInfo.elementType,\n    vertexArrayObject: vao,\n  };\n}\n\n/**\n * Creates a vertex array object and then sets the attributes on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n *\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOAndSetAttributes(gl, setters, attribs, indices) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  setAttributes(setters, attribs);\n  if (indices) {\n    gl.bindBuffer(ELEMENT_ARRAY_BUFFER, indices);\n  }\n  // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n  // like when creating buffers for other stuff will mess up this VAO's binding\n  gl.bindVertexArray(null);\n  return vao;\n}\n\n/**\n * Creates a vertex array object and then sets the attributes\n * on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n *\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n  return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n}\n\nvar vertexArrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createVertexArrayInfo: createVertexArrayInfo,\n  createVAOAndSetAttributes: createVAOAndSetAttributes,\n  createVAOFromBufferInfo: createVAOFromBufferInfo\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nconst defaults = {\n  addExtensionsToContext: true,\n};\n\n/**\n * Various default settings for twgl.\n *\n * Note: You can call this any number of times. Example:\n *\n *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });\n *     twgl.setDefaults({ attribPrefix: 'a_' });\n *\n * is equivalent to\n *\n *     twgl.setDefaults({\n *       textureColor: [1, 0, 0, 1],\n *       attribPrefix: 'a_',\n *     });\n *\n * @typedef {Object} Defaults\n * @property {string} [attribPrefix] The prefix to stick on attributes\n *\n *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n *   as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n *   In other words I'll create arrays of geometry like this\n *\n *       const arrays = {\n *         position: ...\n *         normal: ...\n *         texcoord: ...\n *       };\n *\n *   But need those mapped to attributes and my attributes start with `a_`.\n *\n *   Default: `\"\"`\n *\n * @property {number[]} [textureColor] Array of 4 values in the range 0 to 1\n *\n *   The default texture color is used when loading textures from\n *   urls. Because the URL will be loaded async we'd like to be\n *   able to use the texture immediately. By putting a 1x1 pixel\n *   color in the texture we can start using the texture before\n *   the URL has loaded.\n *\n *   Default: `[0.5, 0.75, 1, 1]`\n *\n * @property {string} [crossOrigin]\n *\n *   If not undefined sets the crossOrigin attribute on images\n *   that twgl creates when downloading images for textures.\n *\n *   Also see {@link module:twgl.TextureOptions}.\n *\n * @property {bool} [addExtensionsToContext]\n *\n *   If true, then, when twgl will try to add any supported WebGL extensions\n *   directly to the context under their normal GL names. For example\n *   if ANGLE_instances_arrays exists then twgl would enable it,\n *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,\n *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`\n *   to the `WebGLRenderingContext`.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets various defaults for twgl.\n *\n * In the interest of terseness which is kind of the point\n * of twgl I've integrated a few of the older functions here\n *\n * @param {module:twgl.Defaults} newDefaults The default settings.\n * @memberOf module:twgl\n */\nfunction setDefaults(newDefaults) {\n  copyExistingProperties(newDefaults, defaults);\n  setDefaults$2(newDefaults);  // eslint-disable-line\n  setDefaults$1(newDefaults);  // eslint-disable-line\n}\n\nconst prefixRE = /^(.*?)_/;\nfunction addExtensionToContext(gl, extensionName) {\n  glEnumToString(gl, 0);\n  const ext = gl.getExtension(extensionName);\n  if (ext) {\n    const enums = {};\n    const fnSuffix = prefixRE.exec(extensionName)[1];\n    const enumSuffix = '_' + fnSuffix;\n    for (const key in ext) {\n      const value = ext[key];\n      const isFunc = typeof (value) === 'function';\n      const suffix = isFunc ? fnSuffix : enumSuffix;\n      let name = key;\n      // examples of where this is not true are WEBGL_compressed_texture_s3tc\n      // and WEBGL_compressed_texture_pvrtc\n      if (key.endsWith(suffix)) {\n        name = key.substring(0, key.length - suffix.length);\n      }\n      if (gl[name] !== undefined) {\n        if (!isFunc && gl[name] !== value) {\n          warn$1(name, gl[name], value, key);\n        }\n      } else {\n        if (isFunc) {\n          gl[name] = function(origFn) {\n            return function() {\n              return origFn.apply(ext, arguments);\n            };\n          }(value);\n        } else {\n          gl[name] = value;\n          enums[name] = value;\n        }\n      }\n    }\n    // pass the modified enums to glEnumToString\n    enums.constructor = {\n      name: ext.constructor.name,\n    };\n    glEnumToString(enums, 0);\n  }\n  return ext;\n}\n\n/*\n * If you're wondering why the code doesn't just iterate\n * over all extensions using `gl.getExtensions` is that it's possible\n * some future extension is incompatible with this code. Rather than\n * have thing suddenly break it seems better to manually add to this\n * list.\n *\n */\nconst supportedExtensions = [\n  'ANGLE_instanced_arrays',\n  'EXT_blend_minmax',\n  'EXT_color_buffer_float',\n  'EXT_color_buffer_half_float',\n  'EXT_disjoint_timer_query',\n  'EXT_disjoint_timer_query_webgl2',\n  'EXT_frag_depth',\n  'EXT_sRGB',\n  'EXT_shader_texture_lod',\n  'EXT_texture_filter_anisotropic',\n  'OES_element_index_uint',\n  'OES_standard_derivatives',\n  'OES_texture_float',\n  'OES_texture_float_linear',\n  'OES_texture_half_float',\n  'OES_texture_half_float_linear',\n  'OES_vertex_array_object',\n  'WEBGL_color_buffer_float',\n  'WEBGL_compressed_texture_atc',\n  'WEBGL_compressed_texture_etc1',\n  'WEBGL_compressed_texture_pvrtc',\n  'WEBGL_compressed_texture_s3tc',\n  'WEBGL_compressed_texture_s3tc_srgb',\n  'WEBGL_depth_texture',\n  'WEBGL_draw_buffers',\n];\n\n/**\n * Attempts to enable all of the following extensions\n * and add their functions and constants to the\n * `WebGLRenderingContext` using their normal non-extension like names.\n *\n *      ANGLE_instanced_arrays\n *      EXT_blend_minmax\n *      EXT_color_buffer_float\n *      EXT_color_buffer_half_float\n *      EXT_disjoint_timer_query\n *      EXT_disjoint_timer_query_webgl2\n *      EXT_frag_depth\n *      EXT_sRGB\n *      EXT_shader_texture_lod\n *      EXT_texture_filter_anisotropic\n *      OES_element_index_uint\n *      OES_standard_derivatives\n *      OES_texture_float\n *      OES_texture_float_linear\n *      OES_texture_half_float\n *      OES_texture_half_float_linear\n *      OES_vertex_array_object\n *      WEBGL_color_buffer_float\n *      WEBGL_compressed_texture_atc\n *      WEBGL_compressed_texture_etc1\n *      WEBGL_compressed_texture_pvrtc\n *      WEBGL_compressed_texture_s3tc\n *      WEBGL_compressed_texture_s3tc_srgb\n *      WEBGL_depth_texture\n *      WEBGL_draw_buffers\n *\n * For example if `ANGLE_instanced_arrays` exists then the functions\n * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`\n * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the\n * `WebGLRenderingContext`.\n *\n * Note that if you want to know if the extension exists you should\n * probably call `gl.getExtension` for each extension. Alternatively\n * you can check for the existence of the functions or constants that\n * are expected to be added. For example\n *\n *    if (gl.drawBuffers) {\n *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2\n *      ....\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @memberOf module:twgl\n */\nfunction addExtensionsToContext(gl) {\n  for (let ii = 0; ii < supportedExtensions.length; ++ii) {\n    addExtensionToContext(gl, supportedExtensions[ii]);\n  }\n}\n\n/**\n * Creates a webgl context.\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n * @private\n */\nfunction create3DContext(canvas, opt_attribs) {\n  const names = [\"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL1 context.\n *\n * Note: Will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n * @deprecated\n * @private\n */\nfunction getWebGLContext(canvas, opt_attribs) {\n  const gl = create3DContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Creates a webgl context.\n *\n * Will return a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *     twgl.isWebGL2(gl);\n *\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n */\nfunction createContext(canvas, opt_attribs) {\n  const names = [\"webgl2\", \"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL context.  Will create a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *    function isWebGL2(gl) {\n *      return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0 \") == 0;\n *    }\n *\n * Note: For a WebGL1 context will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\nfunction getContext(canvas, opt_attribs) {\n  const gl = createContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Resize a canvas to match the size it's displayed.\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.\n * @return {boolean} true if the canvas was resized.\n * @memberOf module:twgl\n */\nfunction resizeCanvasToDisplaySize(canvas, multiplier) {\n  multiplier = multiplier || 1;\n  multiplier = Math.max(0, multiplier);\n  const width  = canvas.clientWidth  * multiplier | 0;\n  const height = canvas.clientHeight * multiplier | 0;\n  if (canvas.width !== width || canvas.height !== height) {\n    canvas.width = width;\n    canvas.height = height;\n    return true;\n  }\n  return false;\n}\n\nexport { addExtensionsToContext, attributes, bindFramebufferInfo, bindTransformFeedbackInfo, bindUniformBlock, canFilter, canGenerateMipmap, createAttribsFromArrays, createAttributeSetters, createBufferFromArray, createBufferFromTypedArray, createBufferInfoFromArrays, createBuffersFromArrays, createFramebufferInfo, createProgram, createProgramAsync, createProgramFromScripts, createProgramFromSources, createProgramInfo, createProgramInfoAsync, createProgramInfoFromProgram, createProgramInfos, createProgramInfosAsync, createPrograms, createProgramsAsync, createSampler, createSamplers, createTexture, createTextures, createTransformFeedback, createTransformFeedbackInfo, createUniformBlockInfo, createUniformBlockInfoFromProgram, createUniformBlockSpecFromProgram, createUniformSetters, createVAOAndSetAttributes, createVAOFromBufferInfo, createVertexArrayInfo, draw, drawBufferInfo, drawObjectList, framebuffers, getArray$1 as getArray_, getBytesPerElementForInternalFormat, getContext, getFormatAndTypeForInternalFormat, getGLTypeForTypedArray, getGLTypeForTypedArrayType, getNumComponentsForFormat, getNumComponents$1 as getNumComponents_, getTypedArrayTypeForGLType, getWebGLContext, glEnumToString, isArrayBuffer$1 as isArrayBuffer, isWebGL1, isWebGL2, loadTextureFromUrl, m4, primitives, programs, resizeCanvasToDisplaySize, resizeFramebufferInfo, resizeTexture, setAttribInfoBufferFromArray, setDefaults$2 as setAttributeDefaults_, setAttributePrefix, setAttributes, setBlockUniforms, setBuffersAndAttributes, setDefaultTextureColor, setDefaults, setEmptyTexture, setSamplerParameters, setDefaults$1 as setTextureDefaults_, setTextureFilteringForSize, setTextureFromArray, setTextureFromElement, setTextureParameters, setUniformBlock, setUniforms, setUniformsAndBindTextures, textures, typedarrays, utils, v3, vertexArrays };\n",null,null,null,null,null,null,null,null,null,null,null,null,null],"names":["FlipnoteRegion","FlipnoteFormat","FlipnoteThumbImageFormat","FlipnoteStereoscopicEye","FlipnoteAudioTrack","FlipnoteSoundEffectTrack","exports","ByteArray","constructor","this","pageSize","allocSize","realSize","pages","numPages","pageIdx","pagePtr","realPtr","newPage","pointer","ptr","setPointer","Uint8Array","length","Math","floor","writeByte","value","writeBytes","bytes","srcPtr","l","i","writeChars","str","charCodeAt","writeU8","writeU16","writeU32","getBytes","page","set","slice","getBuffer","buffer","DataStream","arrayBuffer","data","DataView","byteLength","seek","offset","whence","readUint8","val","getUint8","writeUint8","setUint8","readInt8","getInt8","writeInt8","setInt8","readUint16","littleEndian","getUint16","writeUint16","setUint16","readInt16","getInt16","writeInt16","setInt16","readUint32","getUint32","writeUint32","setUint32","readInt32","getInt32","writeInt32","setInt32","readBytes","count","forEach","byte","readHex","reverse","hex","push","toString","padStart","join","toUpperCase","readChars","chars","char","String","fromCharCode","string","readWideChars","Uint16Array","clamp","n","h","assert","condition","errMsg","err","assertRange","min","max","name","Error","getGlobalObject","isNode","global","window","self","isBrowser","document","assertBrowserEnv","process","versions","node","isWebWorker","createElement","BaseParser","_a","titleFormats","COMMENT","FLIPNOTE","ICON","soundMeta","Map","layerVisibility","isFolderIcon","isComment","isDsiLibraryNote","getTitle","formats","replace","meta","current","username","Symbol","toStringTag","iterator","frameCount","getLayerPixels","frameIndex","layerIndex","imageBuffer","imageWidth","imageHeight","depthStrength","depthEye","Left","numLayers","palette","getFramePaletteIndices","palettePtr","numLayerColors","layerBuffer","decodeFrame","depth","getFrameLayerDepths","depthShift","srcStride","srcWidth","dstStride","width","height","xOffs","imageOffsetX","yOffs","imageOffsetY","fill","srcY","dstY","srcX","dstX","dstPtr","pixel","getLayerPixelsRgba","Uint32Array","paletteBuffer","getFramePaletteUint32","getFramePixels","layerOrder","getFrameLayerOrder","layerDepth","layers","getFramePixelsRgba","colors","getFramePalette","r","g","b","a","getSoundEffectFlagsForTrack","trackId","getSoundEffectFlags","map","flags","isSoundEffectUsedOnFrame","soundEffectTracks","includes","getFrameSoundEffectFlags","hasAudioTrack","has","get","REGEX_PPM_FSID","PPM_FSID_SPECIAL_CASE","isPpmFsid","fsid","test","getPpmFsidRegion","charAt","JPN","USA","EUR","UNKNOWN","ADPCM_INDEX_TABLE_2BIT","Int8Array","ADPCM_INDEX_TABLE_4BIT","ADPCM_STEP_TABLE","Int16Array","pcmGetSample","src","srcSize","pcmGetClippingRatio","numSamples","numClippedSamples","sample","pcmGetRms","rms","pow","sqrt","dateFromNintendoTimestamp","timestamp","Date","timeGetNoteDuration","framerate","SUBTLE_CRYPTO","crypto","msCrypto","subtle","nodeModule","p","require","dynamicRequire","module","webcrypto","ALGORITHM","rsaLoadPublicKey","async","pemKey","hashType","lines","split","filter","line","startsWith","endsWith","keyPlaintext","atob","keyBytes","_","importKey","hash","rsaVerify","key","signature","verify","PPM_FRAMERATES","PPM_PALETTE","WHITE","BLACK","RED","BLUE","PPM_THUMB_PALETTE","PPM_PUBLIC_KEY","PpmParser","matchBuffer","magicBytes","settings","super","format","PPM","aspect","publicKey","audioTracks","rawSampleRate","sampleRate","globalPalette","prevDecodedFrame","decodeHeader","decodeAnimationHeader","decodeSoundHeader","version","decodeMeta","layerBuffers","prevLayerBuffers","lineEncodingBuffers","frameDataLength","soundDataLength","soundDataOffset","readFilename","lock","thumbIndex","rootAuthorName","parentAuthorName","currentAuthorName","parentAuthorId","currentAuthorId","parentFilename","currentFilename","rootAuthorId","thumbFrameIndex","isSpinoff","loop","frameSpeed","bgmSpeed","duration","root","region","filename","parent","offsetTableLength","numOffsets","frameOffsets","bgmLen","se1Len","se2Len","se3Len","bgmrate","BGM","SE1","SE2","SE3","isKeyFrame","getThumbnailImage","pixels","tileY","tileX","x","y","Rgba","header","isTranslated","translateX","translateY","lineEncodingBuffer","pixelBuffer","pixelBufferPtr","lineHeader","chunk","layer1","layer2","layer1Prev","layer2Prev","w","startX","startY","endX","endY","shift","dest","size","isInverted","penMap","colorIndex","getIsKeyFrame","flag","getFrameAuthor","getFrameCameraFlags","decodeSoundFlags","undefined","soundFlags","numFlags","Array","frameFlags","SE4","getAudioTrackRaw","trackMeta","decodeAudioTrack","dst","stepIndex","predictor","lowNibble","step","diff","getAudioTrackPcm","dstFreq","srcPcm","srcFreq","bgmAdjust","srcLength","dstLength","adjFreq","pcmResampleNearestNeighbour","pcmAudioMix","dstOffset","dstSize","samp","getAudioMasterPcm","ceil","master","hasBgm","hasSe1","hasSe2","hasSe3","bgmPcm","samplesPerFrame","se1Pcm","se2Pcm","se3Pcm","seFlags","frame","seOffset","audioClipRatio","getBody","bodyEnd","subarray","getSignature","defaultSettings","REGEX_KWZ_FSID","REGEX_KWZ_DSI_LIBRARY_FSID","KWZ_DSI_LIBRARY_FSID_SPECIAL_CASE_SUFFIX","isKwzFsid","isKwzDsiLibraryFsid","suffix","getKwzFsidRegion","KWZ_FRAMERATES","KWZ_PALETTE","YELLOW","GREEN","NONE","KWZ_PUBLIC_KEY","BITMASKS","KWZ_LINE_TABLE","KWZ_LINE_TABLE_SHIFT","c","d","e","f","KWZ_LINE_TABLE_COMMON","KWZ_LINE_TABLE_COMMON_SHIFT","lineTablePtr","shiftPixels","KwzParser","magic","KWZ","bitIndex","bitValue","buildSectionMap","sectionMap","getFrameOffsets","dsiLibraryNote","borderCrop","fileSize","sectionCount","substring","bodyEndOffset","readBits","num","nextBits","result","readFsid","toLowerCase","mac","random","edits","quickMeta","decodeMetaQuick","creationTime","modifiedTime","rootFilename","layerFlags","creationTimestamp","isDsiFilename","numFrames","kmiSection","kmcSection","frameMetaOffsets","frameDataOffsets","frameLayerSizes","frameMetaPtr","frameDataPtr","layerASize","layerBSize","layerCSize","trackSizes","ktn","Jpeg","getFrameDiffingFlag","cameraFlags","depths","sort","diffingFlag","isPrevFrame","framePtr","layerSizes","layerSize","skipTileCounter","tileOffsetY","tileOffsetX","subTileOffsetY","subTileOffsetX","tileType","linePtr","mask","pattern","linePtrA","linePtrB","decodeFrameSoundFlags","decodeAdpcm","currByte","currBit","doGuess","initialBgmPredictor","initialBgmStepIndex","guessInitialBgmState","bestRms","bestStepIndex","trackIndex","indexOf","isArray","initialSePredictors","initialSeStepIndices","adj","weight","pcmResampleLinear","hasSe4","se4Pcm","soundEffectFlags","urlLoader","source","load","response","fetch","status","fileLoader","File","FileReader","blobLoader","Blob","Response","nodeBufferLoader","Buffer","arrayBufferLoader","ArrayBuffer","LOADER_REGISTRY","loadSource","loader","matches","registerLoader","parse","parserConfig","parseSource","PlayerEvent","supportedEvents","Play","Pause","CanPlay","CanPlayThrough","SeekStart","SeekEnd","Duration","Loop","Ended","VolumeChange","Progress","TimeUpdate","FrameUpdate","FrameNext","FramePrev","FrameFirst","FrameLast","Ready","Load","LoadStart","LoadedData","LoadedMeta","Emptied","Close","createTimeRanges","ranges","start","end","padNumber","strLength","formatTime","seconds","m","s","CanvasStereoscopicMode","BYTE$2","UNSIGNED_BYTE$3","SHORT$2","UNSIGNED_SHORT$3","INT$3","UNSIGNED_INT$3","FLOAT$3","glTypeToTypedArray","tt","Int32Array","Float32Array","getGLTypeForTypedArray","typedArray","Uint8ClampedArray","getGLTypeForTypedArrayType","typedArrayType","isArrayBuffer$1","SharedArrayBuffer","isTypeWeakMaps","isType","object","type","weakMap","WeakMap","isOfType","Object","prototype","call","isTexture","gl","t","WebGLTexture","STATIC_DRAW","ARRAY_BUFFER$1","FLOAT$2","defaults$2","createBufferFromTypedArray","drawType","WebGLBuffer","createBuffer","array","bindBuffer","bufferData","setBufferFromTypedArray","isIndices","texcoordRE","colorRE","makeTypedArray","Type","typedArrayTypeFromGLTypeOrTypedArrayCtor","glTypeOrTypedArrayCtor","CTOR","getTypedArrayTypeForGLType","attribBufferFromBuffer","numValues","arrayType","attribBufferFromSize","numBytes","BYTES_PER_ELEMENT","attribBufferFromArrayLike","arrayName","createAttribsFromArrays","arrays","attribs","keys","attribName","attrib","fn","normalization","normalize","numComponents","guessNumComponentsFromName","getArray$1","getNumComponents$1","stride","divisor","positionKeys","isWebGL2","texStorage2D","TEXTURE0","ARRAY_BUFFER","INT","TEXTURE_2D$1","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","typeMap","getBindPointForSamplerType","bindPoint","intSetter","location","v","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","samplerSetter","unit","textureOrPair","texture","sampler","activeTexture","bindTexture","bindSampler","samplerArraySetter","units","ii","textures","index","floatAttribSetter","disableVertexAttribArray","vertexAttrib4fv","vertexAttrib3fv","vertexAttrib2fv","vertexAttrib1fv","enableVertexAttribArray","vertexAttribPointer","vertexAttribDivisor","intAttribSetter","vertexAttrib4iv","vertexAttribIPointer","uintAttribSetter","vertexAttrib4uiv","matAttribSetter","typeInfo","defaultSize","rowOffset","FLOAT","setter","uniform1f","arraySetter","uniform1fv","uniform2fv","cols","uniform3fv","uniform4fv","UNSIGNED_INT","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","rows","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","attrTypeMap","isBuiltIn","info","tokenRE","isDigit","addSetterToUniformTree","fullPath","uniformSetters","tokens","tokenNdx","path","token","isArrayIndex","accessor","parseInt","child","setUniformTree","tree","values","prop","setUniforms","setters","args","actualSetters","numArgs","aNdx","WebglCanvas","isSupported","testCanvas","testCtx","getContext","supported","options","supportedStereoscopeModes","None","Dual","stereoscopeMode","stereoscopeStrength","textureTypes","textureSizes","frameBufferTextures","applyFirefoxFix","refs","programs","shaders","buffers","frameBuffers","isCtxLost","handleContextLoss","destroy","preventDefault","onlost","handleContextRestored","init","onrestored","defaultOptions","canvas","addEventListener","className","antialias","alpha","appendChild","setCanvasSize","checkContextLoss","layerProgram","createProgram","upscaleProgram","quadBuffer","createScreenQuad","setBuffersAndAttribs","layerTexture","createTexture","RGBA","LINEAR","CLAMP_TO_EDGE","frameTexture","frameBuffer","createFramebuffer","debugInfo","getExtension","renderer","getParameter","UNMASKED_RENDERER_WEBGL","userAgent","navigator","isMacFirefox","vertexShaderSource","fragmentShaderSource","vert","createShader","VERTEX_SHADER","frag","FRAGMENT_SHADER","program","attachShader","linkProgram","getProgramParameter","LINK_STATUS","log","getProgramInfoLog","deleteProgram","programInfo","textureUnit","createUniformSetter","uniformInfo","uniformTree","numUniforms","getActiveUniform","substr","getUniformLocation","createUniformSetters","attribSetters","numAttribs","attribInfo","getActiveAttrib","getAttribLocation","createAttributeSetters","uniformBlockSpec","uniformData","uniformIndices","pair","pname","getActiveUniforms","ndx","blockSpecs","numUniformBlocks","getActiveUniformBlockName","blockSpec","getUniformBlockIndex","usedByVertexShader","getActiveUniformBlockParameter","usedByFragmentShader","used","createUniformBlockSpecFromProgram","transformFeedbackInfo","numVaryings","varying","getTransformFeedbackVarying","createTransformFeedbackInfo","createProgramInfoFromProgram","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","x0","y0","xSubdivs","ySubdivs","numVerts","numVertsAcross","positions","texCoords","positionPtr","texCoordPtr","u","indices","indicesPtr","bufferInfo","srcBufferInfo","newAttribs","assign","newIndices","numElements","elementType","getBufferParameter","totalElements","getNumElementsFromAttributes","createBufferInfoFromArrays","position","texcoord","vertexArrayObject","bindVertexArray","setAttributes","minMag","wrap","tex","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","texImage2D","UNSIGNED_BYTE","resizeTexture","textureType","fb","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","useFramebuffer","viewX","viewY","viewWidth","viewHeight","srcHeight","sx","drawingBufferWidth","sy","drawingBufferHeight","viewport","resizeFramebuffer","dpi","useDpi","devicePixelRatio","internalWidth","internalHeight","dstWidth","dstHeight","style","setNote","note","layerTexturePixelBuffer","layerTexturePixels","title","clear","color","paperColor","clearColor","COLOR_BUFFER_BIT","drawFrame","mode","strength","drawLayers","upscale","Right","useProgram","u_tex","u_textureSize","u_screenSize","drawElements","TRIANGLES","requestStereoScopeMode","forceUpdate","isErrorState","getError","NO_ERROR","shouldClear","layerDepths","u_flipY","u_3d_mode","u_3d_eye","u_3d_depth","u_3d_strength","isLost","getDataUrl","quality","toDataURL","getBlob","Promise","resolve","reject","toBlob","deleteTexture","deleteBuffer","deleteFramebuffer","parentElement","parentNode","removeChild","Html5Canvas","ctx","srcCanvas","srcCtx","frameImage","createImageData","clearRect","fillStyle","fillRect","useSmoothing","imageSmoothingEnabled","putImageData","drawImage","UniversalCanvas","isReady","isHtml5","rendererStack","rendererStackIdx","setSubRenderer","Canvas","immediateLoss","fallbackIfPossible","switchToHtml5","_AudioContext","AudioContext","webkitAudioContext","WebAudioPlayer","useEq","useAnalyser","eqSettings","_volume","_loop","_startTime","_ctxStartTime","nodeRefs","volume","setVolume","getCtx","setBuffer","inputBuffer","audioBuffer","channelData","getChannelData","connectEqNodesTo","inNode","lastNode","frequency","gain","createBiquadFilter","connect","initNodes","createBufferSource","gainNode","createGain","analyserNode","createAnalyser","analyser","destination","setAnalyserEnabled","on","playFrom","currentTime","stop","getCurrentTime","disconnect","state","close","Player","parserSettings","autoplay","_src","_muted","_frame","_hasEnded","isNoteLoaded","events","playbackStartTime","playbackTime","playbackLoopId","showThumbnail","hasPlaybackStarted","isPlaying","wasPlaying","isSeeking","playbackLoop","now","currAudioTime","audio","currPlaybackTime","abs","pause","emit","setCurrentTime","requestAnimationFrame","mountPoint","querySelector","reload","el","paused","isPaused","play","currentFrame","setCurrentFrame","progress","setProgress","getVolume","muted","getMuted","setMuted","getLoop","setLoop","buffered","seekable","currentSrc","videoWidth","videoHeight","closeNote","openNote","promise","catch","error","until","message","updateSettings","noteFormat","assertNoteLoaded","getTimeCounter","getFrameCounter","getProgress","performance","playAudio","cancelAnimationFrame","stopAudio","togglePlay","getPaused","getDuration","toggleLoop","newFrameValue","newFrameIndex","nextFrame","prevFrame","lastFrame","firstFrame","thumbnailFrame","startSeek","endSeek","resize","console","warn","setLayerVisibility","layer","getLayerVisibility","toggleLayerVisibility","toggleAudioEq","setAudioEq","mute","unmute","isMute","toggleMuted","seekToNextFrame","fastSeek","time","canPlayType","mediaType","getVideoPlaybackQuality","droppedVideoFrames","corruptedVideoFrames","totalVideoFrames","requestPictureInPicture","captureStream","eventType","listener","off","callback","callbackList","splice","__Any","apply","listenerName","thisAsAny","clearEvents","Destroy","supports","isEvent","isMethod","EncoderBase","dataUrl","from","getArrayBuffer","mimeType","getUrl","URL","createObjectURL","revokeUrl","revokeObjectURL","HSIZE","masks","LzwCompressor","colorDepth","accum","htab","codetab","cur_accum","cur_bits","curPixel","free_ent","clear_flg","g_init_bits","ClearCode","EOFCode","reset","initCodeSize","maxcode","char_out","outs","a_count","flush_char","cl_block","cl_hash","output","hsize","compress","init_bits","fcode","ent","disp","hsize_reg","hshift","n_bits","get_maxcode","nextPixel","outer_loop","encode","remaining","code","GifImage","compressor","fromFlipnote","flipnote","gif","delay","repeat","writeFrame","finish","fromFlipnoteFrame","writeFirstFrame","writeAdditionalFrame","writeHeader","writeLogicalScreenDescriptor","writeColorTable","writeNetscapeExt","writeGraphicControlExt","writeImageDescriptor","writePixels","fields","colorTableSize","colorTableLength","log2","getImage","img","Image","WavAudio","channels","bitsPerSample","headerBuffer","pcmData","wav","pcm","writeSamples","fromFlipnoteTrack","headerBytes","pcmBytes","resultBytes","ppmFsidToKwzFsidSuffix","toLocaleLowerCase","kwzFsidToPpmFsid","kwzFsid","ppmFsid","kwzIdSuffix","Target","PlayerMixinClass","player","canvasEl","Reflect","ownKeys","desc","getOwnPropertyDescriptor","defineProperty"],"mappings":"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","x_google_ignoreList":[25]}
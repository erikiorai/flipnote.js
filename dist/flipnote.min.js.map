{"version":3,"sources":["webpack://flipnote/webpack/universalModuleDefinition","webpack://flipnote/webpack/bootstrap","webpack://flipnote/./webgl/shader.vert","webpack://flipnote/./webgl/shader.frag","webpack://flipnote/./utils/byteArray.ts","webpack://flipnote/./utils/dataStream.ts","webpack://flipnote/./loaders/index.ts","webpack://flipnote/./loaders/urlLoader.ts","webpack://flipnote/./loaders/fileLoader.ts","webpack://flipnote/./loaders/arrayBufferLoader.ts","webpack://flipnote/./parsers/adpcm.ts","webpack://flipnote/./parsers/kwzTables.ts","webpack://flipnote/./parsers/ppm.ts","webpack://flipnote/./parsers/kwz.ts","webpack://flipnote/./parsers/index.ts","webpack://flipnote/./encoders/wav.ts","webpack://flipnote/./webgl/canvas.ts","webpack://flipnote/./player/audio.ts","webpack://flipnote/./player/index.ts","webpack://flipnote/./encoders/lzw.ts","webpack://flipnote/./encoders/gif.ts","webpack://flipnote/./flipnote.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","SeekOrigin","ByteArray","page","pages","cursor","newPage","Uint8Array","pageSize","getData","_this","data","map","index","set","slice","getBuffer","buffer","writeByte","val","writeBytes","array","offset","length","DataStream","arrayBuffer","DataView","configurable","byteLength","seek","whence","End","Current","Begin","readUint8","getUint8","writeUint8","setUint8","readInt8","getInt8","writeInt8","setInt8","readUint16","littleEndian","getUint16","writeUint16","setUint16","readInt16","getInt16","writeInt16","setInt16","readUint32","getUint32","writeUint32","setUint32","readInt32","getInt32","writeInt32","setInt32","readBytes","count","bytes","forEach","byte","readHex","reverse","hex","push","toString","padStart","join","toUpperCase","readUtf8","chars","str","char","String","fromCharCode","writeUtf8","string","charCodeAt","readUtf16","Uint16Array","loaders","matches","source","load","resolve","reject","xhr","XMLHttpRequest","open","responseType","onreadystatechange","e","readyState","status","response","type","statusText","send","File","reader","FileReader","onload","event","result","onerror","readAsArrayBuffer","ArrayBuffer","ADPCM_INDEX_TABLE_2","Int8Array","ADPCM_INDEX_TABLE_4","ADPCM_STEP_TABLE","Int16Array","ADPCM_SAMPLE_TABLE_2","adpcm_sample","adpcm_stepIndex","adpcm_diff","step","ADPCM_SAMPLE_TABLE_4","__extends","extendStatics","b","setPrototypeOf","__proto__","Array","__","constructor","FRAMERATES","PALETTE","WHITE","BLACK","RED","BLUE","ppm_PpmParser","_super","PpmParser","width","height","palette","globalPalette","sampleRate","prevDecodedFrame","decodeHeader","decodeAnimationHeader","decodeSoundHeader","decodeMeta","layers","prevLayers","validateFSID","fsid","test","validateFilename","filename","readFilename","readLineEncoding","unpacked","byteIndex","bitOffset","frameDataLength","soundDataLength","frameCount","version","lock","thumbIndex","rootAuthorName","parentAuthorName","currentAuthorName","parentAuthorId","currentAuthorId","parentFilename","currentFilename","rootAuthorId","timestamp","Date","flags","thumbFrameIndex","meta","loop","frame_count","frame_speed","frameSpeed","bgm_speed","bgmSpeed","thumb_index","spinoff","username","parent","current","offsetTableLength","frameOffsets","Uint32Array","bgmLen","se1Len","se2Len","se3Len","framerate","bgmrate","soundMeta","bgm","se1","se2","se3","isNewFrame","frameIndex","getFramePalette","header","paperColor","pen","getLayerOrder","decodeFrame","isTranslated","translateX","translateY","fill","layerEncoding","layer","layerBitmap","line","lineType","chunkOffset","lineHeader","chunk","pixel","dest","src","y","x","getLayerPixels","layerIndex","image","layerColor","getFramePixels","useGlobalPalette","paletteMap","color","indexOf","a","hasAudioTrack","trackIndex","id","decodeAudio","track","sample","diff","stepIndex","trackMeta","adpcm","output","outputOffset","prevDiff","prevStepIndex","adpcmOffset","bitPos","Math","max","min","decodeSoundFlags","KWZ_TABLE_1","KWZ_TABLE_2","KWZ_TABLE_3","table3Values","kwzTables_index","kwzTables_a","kwzTables_b","KWZ_LINE_TABLE","pixelValues","kwzTables_offset","f","g","h","kwz_extends","kwz_FRAMERATES","kwz_PALETTE","YELLOW","GREEN","NONE","kwz_KwzParser","KwzParser","bitIndex","bitValue","sections","frameMeta","fileSize","sectionCount","sectionMagic","substring","sectionLength","decodeFrameMeta","readBits","num","nextBits","mask","creationTimestamp","modifiedTimestamp","rootFilename","creation_timestamp","frame","layerSize","frameAuthor","layerDepth","soundFlags","cameraFlag","trackSizes","se4","getDiffingFlag","getLayerDepths","depths","sort","diffingFlag","isPrevFrame","skip","tileOffsetY","tileOffsetX","subTileOffsetY","subTileOffsetX","pixelOffset","pixelBuffer","lineIndex","pixels","subarray","lineValue","lineIndexA","lineIndexB","pattern","paletteOffset","pixelIndex","framePalette","parseSource","Promise","loader","loadSource","then","magic","ShaderType","TextureType","wav_WavEncoder","WavEncoder","channels","bitsPerSample","headerBuffer","pcmData","writeFrames","getBlob","Blob","audio_AudioTrack","AudioTrack","playbackRate","channelCount","audio","document","createElement","preload","isActive","wav","url","window","URL","createObjectURL","duration","unset","revokeObjectURL","start","currentTime","play","stop","pause","WebGLRenderingContext","VERTEX_SHADER","FRAGMENT_SHADER","ALPHA","LUMINANCE_ALPHA","canvas_WebglCanvas","WebglCanvas","el","params","antialias","alpha","uniforms","refs","shaders","textures","buffers","gl","getContext","createProgram","createScreenQuad","createBitmapTexture","setCanvasSize","pixelStorei","UNPACK_FLIP_Y_WEBGL","enable","BLEND","blendEquation","FUNC_ADD","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","program","attachShader","createShader","Vertex","shader_default","Fragment","webgl_shader_default","linkProgram","getProgramParameter","LINK_STATUS","log","getProgramInfoLog","deleteProgram","Error","useProgram","uniformCount","ACTIVE_UNIFORMS","name_1","getActiveUniform","getUniformLocation","vertBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","activeTexture","TEXTURE0","tex","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","uniform1i","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","setInputSize","uniform2f","viewport","setLayerType","textureType","toImage","toDataURL","setColor","uniform4f","setPaperColor","clearColor","drawLayer","color1","color2","texImage2D","UNSIGNED_BYTE","drawArrays","TRIANGLES","resize","clear","COLOR_BUFFER_BIT","destroy","texture","deleteTexture","deleteBuffer","canvas","__awaiter","thisArg","_arguments","P","generator","fulfilled","next","rejected","done","apply","__generator","body","_","label","sent","trys","ops","verb","throw","return","iterator","v","op","TypeError","pop","player_Player","Player","paused","isOpen","events","_frame","_time","hasPlaybackStarted","wasPlaying","isSeeking","querySelector","customPalette","audioTracks","setFrame","round","emit","progress","volume","muted","note","_a","close","catch","err","console","error","seFlags","setPalette","audiorate","layerVisibility","1","2","3","Alpha","LuminanceAlpha","currentFrame","playBgm","performance","now","stopAudio","time","requestAnimationFrame","floor","drawFrame","playFrameSe","nextFrame","prevFrame","lastFrame","firstFrame","thumbnailFrame","startSeek","endSeek","colors","layerBuffers","forceUpdate","setLayerVisibility","on","eventType","callback","off","callbackList","splice","args","_i","arguments","clearEvents","HSIZE","masks","LZWEncoder","colorDepth","accum","htab","Int32Array","codetab","cur_accum","cur_bits","curPixel","free_ent","clear_flg","g_init_bits","undefined","ClearCode","EOFCode","initCodeSize","a_count","remaining","maxcode","char_out","outs","flush_char","cl_block","cl_hash","hsize","compress","init_bits","fcode","ent","disp","hsize_reg","hshift","n_bits","get_maxcode","nextPixel","outer_loop","encode","code","gif_GifEncoder","GifEncoder","delay","repeat","fromFlipnote","flipnote","gif","init","writeFrame","fromFlipnoteFrame","paletteSize","writeHeader","writeColorTable","writeNetscapeExt","pow","writeGraphicsControlExt","graphicsControlExt","netscapeExt","writeImageDesc","desc","writePixels","getUrl","getImage","img","Image","__webpack_exports__","player","kwzParser","ppmParser","gifEncoder","wavEncoder","utils","utils_namespaceObject"],"mappings":"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","file":"flipnote.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"flipnote\"] = factory();\n\telse\n\t\troot[\"flipnote\"] = factory();\n})(typeof self !== \"undefined\" ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = \"#define GLSLIFY 1\\nattribute vec4 a_position;\\nvarying vec2 v_texel;\\nvarying float v_scale;\\nuniform vec2 u_textureSize;\\nuniform vec2 u_screenSize;\\n\\nvoid main() {\\n  gl_Position = a_position;\\n  vec2 uv = a_position.xy * 0.5 + 0.5;\\n  v_texel = uv * u_textureSize;\\n  v_scale = floor(u_screenSize.y / u_textureSize.y + 0.01);\\n}\"","module.exports = \"precision highp float;\\n#define GLSLIFY 1\\nvarying vec2 v_texel;\\nvarying float v_scale;\\nuniform vec4 u_color1;\\nuniform vec4 u_color2;\\nuniform sampler2D u_bitmap;\\nuniform bool u_isSmooth;\\nuniform vec2 u_textureSize;\\nuniform vec2 u_screenSize;\\n\\nvoid main() {\\n  vec2 texel_floored = floor(v_texel);\\n  vec2 s = fract(v_texel);\\n  float region_range = 0.5 - 0.5 / v_scale;\\n  vec2 center_dist = s - 0.5;\\n  vec2 f = (center_dist - clamp(center_dist, -region_range, region_range)) * v_scale + 0.5;\\n  vec2 mod_texel = texel_floored + f;\\n  vec2 coord = mod_texel.xy / u_textureSize.xy;\\n  vec2 colorWeights = texture2D(u_bitmap, coord).ra;\\n  gl_FragColor = vec4(u_color1.rgb, 1.0) * colorWeights.y + vec4(u_color2.rgb, 1.0) * colorWeights.x;\\n}\"","var ByteArray = /** @class */ (function () {\n    function ByteArray() {\n        this.page = -1;\n        this.pages = [];\n        this.cursor = 0;\n        this.newPage();\n    }\n    ByteArray.prototype.newPage = function () {\n        this.pages[++this.page] = new Uint8Array(ByteArray.pageSize);\n        this.cursor = 0;\n    };\n    ByteArray.prototype.getData = function () {\n        var _this = this;\n        var data = new Uint8Array((this.page) * ByteArray.pageSize + this.cursor);\n        this.pages.map(function (page, index) {\n            if (index === _this.page) {\n                data.set(page.slice(0, _this.cursor), index * ByteArray.pageSize);\n            }\n            else {\n                data.set(page, index * ByteArray.pageSize);\n            }\n        });\n        return data;\n    };\n    ByteArray.prototype.getBuffer = function () {\n        var data = this.getData();\n        return data.buffer;\n    };\n    ByteArray.prototype.writeByte = function (val) {\n        if (this.cursor >= ByteArray.pageSize)\n            this.newPage();\n        this.pages[this.page][this.cursor++] = val;\n    };\n    ByteArray.prototype.writeBytes = function (array, offset, length) {\n        for (var l = length || array.length, i = offset || 0; i < l; i++)\n            this.writeByte(array[i]);\n    };\n    ByteArray.pageSize = 4096;\n    return ByteArray;\n}());\nexport { ByteArray };\n","/** datastream serves as a wrapper around the DataView API to help keep track of the offset into the stream */\nexport var SeekOrigin;\n(function (SeekOrigin) {\n    SeekOrigin[SeekOrigin[\"Begin\"] = 0] = \"Begin\";\n    SeekOrigin[SeekOrigin[\"Current\"] = 1] = \"Current\";\n    SeekOrigin[SeekOrigin[\"End\"] = 2] = \"End\";\n})(SeekOrigin || (SeekOrigin = {}));\n;\nvar DataStream = /** @class */ (function () {\n    function DataStream(arrayBuffer) {\n        this.buffer = arrayBuffer;\n        this.data = new DataView(arrayBuffer);\n        this.cursor = 0;\n    }\n    Object.defineProperty(DataStream.prototype, \"bytes\", {\n        get: function () {\n            return new Uint8Array(this.buffer);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataStream.prototype, \"byteLength\", {\n        get: function () {\n            return this.data.byteLength;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DataStream.prototype.seek = function (offset, whence) {\n        switch (whence) {\n            case SeekOrigin.End:\n                this.cursor = this.data.byteLength + offset;\n                break;\n            case SeekOrigin.Current:\n                this.cursor += offset;\n                break;\n            case SeekOrigin.Begin:\n            default:\n                this.cursor = offset;\n                break;\n        }\n    };\n    DataStream.prototype.readUint8 = function () {\n        var val = this.data.getUint8(this.cursor);\n        this.cursor += 1;\n        return val;\n    };\n    DataStream.prototype.writeUint8 = function (value) {\n        this.data.setUint8(this.cursor, value);\n        this.cursor += 1;\n    };\n    DataStream.prototype.readInt8 = function () {\n        var val = this.data.getInt8(this.cursor);\n        this.cursor += 1;\n        return val;\n    };\n    DataStream.prototype.writeInt8 = function (value) {\n        this.data.setInt8(this.cursor, value);\n        this.cursor += 1;\n    };\n    DataStream.prototype.readUint16 = function (littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        var val = this.data.getUint16(this.cursor, littleEndian);\n        this.cursor += 2;\n        return val;\n    };\n    DataStream.prototype.writeUint16 = function (value, littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        this.data.setUint16(this.cursor, value, littleEndian);\n        this.cursor += 2;\n    };\n    DataStream.prototype.readInt16 = function (littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        var val = this.data.getInt16(this.cursor, littleEndian);\n        this.cursor += 2;\n        return val;\n    };\n    DataStream.prototype.writeInt16 = function (value, littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        this.data.setInt16(this.cursor, value, littleEndian);\n        this.cursor += 2;\n    };\n    DataStream.prototype.readUint32 = function (littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        var val = this.data.getUint32(this.cursor, littleEndian);\n        this.cursor += 4;\n        return val;\n    };\n    DataStream.prototype.writeUint32 = function (value, littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        this.data.setUint32(this.cursor, value, littleEndian);\n        this.cursor += 4;\n    };\n    DataStream.prototype.readInt32 = function (littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        var val = this.data.getInt32(this.cursor, littleEndian);\n        this.cursor += 4;\n        return val;\n    };\n    DataStream.prototype.writeInt32 = function (value, littleEndian) {\n        if (littleEndian === void 0) { littleEndian = true; }\n        this.data.setInt32(this.cursor, value, littleEndian);\n        this.cursor += 4;\n    };\n    DataStream.prototype.readBytes = function (count) {\n        var bytes = new Uint8Array(this.data.buffer, this.cursor, count);\n        this.cursor += bytes.byteLength;\n        return bytes;\n    };\n    DataStream.prototype.writeBytes = function (bytes) {\n        var _this = this;\n        bytes.forEach(function (byte) { return _this.writeUint8(byte); });\n    };\n    DataStream.prototype.readHex = function (count, reverse) {\n        if (reverse === void 0) { reverse = false; }\n        var bytes = this.readBytes(count);\n        var hex = [];\n        for (var i = 0; i < bytes.length; i++) {\n            hex.push(bytes[i].toString(16).padStart(2, '0'));\n        }\n        if (reverse)\n            hex.reverse();\n        return hex.join('').toUpperCase();\n    };\n    DataStream.prototype.readUtf8 = function (count) {\n        var chars = this.readBytes(count);\n        var str = '';\n        for (var i = 0; i < chars.length; i++) {\n            var char = chars[i];\n            if (char === 0)\n                break;\n            str += String.fromCharCode(char);\n        }\n        return str;\n    };\n    DataStream.prototype.writeUtf8 = function (string) {\n        for (var i = 0; i < string.length; i++) {\n            var char = string.charCodeAt(i);\n            this.writeUint8(char);\n        }\n    };\n    DataStream.prototype.readUtf16 = function (count) {\n        var chars = new Uint16Array(this.data.buffer, this.cursor, count);\n        var str = '';\n        for (var i = 0; i < chars.length; i++) {\n            var char = chars[i];\n            if (char == 0)\n                break;\n            str += String.fromCharCode(char);\n        }\n        this.cursor += chars.byteLength;\n        return str;\n    };\n    return DataStream;\n}());\nexport { DataStream };\n","import urlLoader from './urlLoader';\nimport fileLoader from './fileLoader';\nimport arrayBufferLoader from './arrayBufferLoader';\nvar loaders = [\n    urlLoader,\n    fileLoader,\n    arrayBufferLoader\n];\nexport function loadSource(source) {\n    return new Promise(function (resolve, reject) {\n        loaders.forEach(function (loader) {\n            if (loader.matches(source)) {\n                loader.load(source, resolve, reject);\n            }\n        });\n    });\n}\n","export default {\n    matches: function (source) {\n        return typeof source === 'string';\n    },\n    load: function (source, resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', source, true);\n        xhr.responseType = 'arraybuffer';\n        xhr.onreadystatechange = function (e) {\n            if (xhr.readyState === 4) {\n                if (xhr.status >= 200 && xhr.status < 300) {\n                    resolve(xhr.response);\n                }\n                else {\n                    reject({\n                        type: 'httpError',\n                        status: xhr.status,\n                        statusText: xhr.statusText\n                    });\n                }\n            }\n        };\n        xhr.send(null);\n    }\n};\n","export default {\n    matches: function (source) {\n        return (source instanceof File);\n    },\n    load: function (source, resolve, reject) {\n        var reader = new FileReader();\n        reader.onload = function (event) {\n            resolve(reader.result);\n        };\n        reader.onerror = function (event) {\n            reject({ type: 'fileReadError' });\n        };\n        reader.readAsArrayBuffer(source);\n    }\n};\n","export default {\n    matches: function (source) {\n        return (source instanceof ArrayBuffer);\n    },\n    load: function (source, resolve, reject) {\n        resolve(source);\n    }\n};\n","export var ADPCM_INDEX_TABLE_2 = new Int8Array([\n    -1, 2, -1, 2\n]);\nexport var ADPCM_INDEX_TABLE_4 = new Int8Array([\n    -1, -1, -1, -1, 2, 4, 6, 8,\n    -1, -1, -1, -1, 2, 4, 6, 8\n]);\n// note that this is a slight deviation from the normal adpcm table\nexport var ADPCM_STEP_TABLE = new Int16Array([\n    7, 8, 9, 10, 11, 12, 13, 14, 16, 17,\n    19, 21, 23, 25, 28, 31, 34, 37, 41, 45,\n    50, 55, 60, 66, 73, 80, 88, 97, 107, 118,\n    130, 143, 157, 173, 190, 209, 230, 253, 279, 307,\n    337, 371, 408, 449, 494, 544, 598, 658, 724, 796,\n    876, 963, 1060, 1166, 1282, 1411, 1552, 1707, 1878, 2066,\n    2272, 2499, 2749, 3024, 3327, 3660, 4026, 4428, 4871, 5358,\n    5894, 6484, 7132, 7845, 8630, 9493, 10442, 11487, 12635, 13899,\n    15289, 16818, 18500, 20350, 22385, 24623, 27086, 29794, 32767, 0\n]);\nexport var ADPCM_SAMPLE_TABLE_2 = new Int16Array(90 * 4);\nfor (var sample = 0; sample < 4; sample++) {\n    for (var stepIndex = 0; stepIndex < 90; stepIndex++) {\n        var step = ADPCM_STEP_TABLE[stepIndex];\n        var diff = step >> 3;\n        if (sample & 1)\n            diff += step;\n        if (sample & 2)\n            diff = -diff;\n        ADPCM_SAMPLE_TABLE_2[sample + 4 * stepIndex] = diff;\n    }\n}\nexport var ADPCM_SAMPLE_TABLE_4 = new Int16Array(90 * 16);\nfor (var sample = 0; sample < 16; sample++) {\n    for (var stepIndex = 0; stepIndex < 90; stepIndex++) {\n        var step = ADPCM_STEP_TABLE[stepIndex];\n        var diff = step >> 3;\n        if (sample & 4)\n            diff += step;\n        if (sample & 2)\n            diff += step >> 1;\n        if (sample & 1)\n            diff += step >> 2;\n        if (sample & 8)\n            diff = -diff;\n        ADPCM_SAMPLE_TABLE_4[sample + 16 * stepIndex] = diff;\n    }\n}\n","// table1 - commonly occuring line offsets\nexport var KWZ_TABLE_1 = new Uint16Array([\n    0x0000, 0x0CD0, 0x19A0, 0x02D9, 0x088B, 0x0051, 0x00F3, 0x0009,\n    0x001B, 0x0001, 0x0003, 0x05B2, 0x1116, 0x00A2, 0x01E6, 0x0012,\n    0x0036, 0x0002, 0x0006, 0x0B64, 0x08DC, 0x0144, 0x00FC, 0x0024,\n    0x001C, 0x0004, 0x0334, 0x099C, 0x0668, 0x1338, 0x1004, 0x166C\n]);\n// table2 - commonly occuring line offsets, but the lines are shifted to the left by one pixel\nexport var KWZ_TABLE_2 = new Uint16Array([\n    0x0000, 0x0CD0, 0x19A0, 0x0003, 0x02D9, 0x088B, 0x0051, 0x00F3,\n    0x0009, 0x001B, 0x0001, 0x0006, 0x05B2, 0x1116, 0x00A2, 0x01E6,\n    0x0012, 0x0036, 0x0002, 0x02DC, 0x0B64, 0x08DC, 0x0144, 0x00FC,\n    0x0024, 0x001C, 0x099C, 0x0334, 0x1338, 0x0668, 0x166C, 0x1004\n]);\n// table3 - line offsets, but the lines are shifted to the left by one pixel\nexport var KWZ_TABLE_3 = new Uint16Array(6561);\nvar table3Values = [0, 3, 7, 1, 4, 8, 2, 5, 6];\nvar index = 0;\nfor (var a = 0; a < 9; a++)\n    for (var b = 0; b < 9; b++)\n        for (var c = 0; c < 9; c++)\n            for (var d = 0; d < 9; d++) {\n                KWZ_TABLE_3[index] = ((table3Values[a] * 9 + table3Values[b]) * 9 + table3Values[c]) * 9 + table3Values[d];\n                index++;\n            }\n// linetable - contains every possible sequence of pixels for each tile line\nexport var KWZ_LINE_TABLE = new Uint16Array(6561 * 8);\nvar pixelValues = [0x0000, 0xFF00, 0x00FF];\nvar offset = 0;\nfor (var a = 0; a < 3; a++)\n    for (var b = 0; b < 3; b++)\n        for (var c = 0; c < 3; c++)\n            for (var d = 0; d < 3; d++)\n                for (var e = 0; e < 3; e++)\n                    for (var f = 0; f < 3; f++)\n                        for (var g = 0; g < 3; g++)\n                            for (var h = 0; h < 3; h++) {\n                                KWZ_LINE_TABLE.set([\n                                    pixelValues[b],\n                                    pixelValues[a],\n                                    pixelValues[d],\n                                    pixelValues[c],\n                                    pixelValues[f],\n                                    pixelValues[e],\n                                    pixelValues[h],\n                                    pixelValues[g]\n                                ], offset);\n                                offset += 8;\n                            }\n","/**\n * PPM decoder\n * Reads frames, audio, and metadata from Flipnote Studio PPM files\n * Based on my Python PPM decoder implementation (https://github.com/jaames/flipnote-tools)\n *\n * Credits:\n *  PPM format reverse-engineering and documentation:\n *   - bricklife (http://ugomemo.g.hatena.ne.jp/bricklife/20090307/1236391313)\n *   - mirai-iro (http://mirai-iro.hatenablog.jp/entry/20090116/ugomemo_ppm)\n *   - harimau_tigris (http://ugomemo.g.hatena.ne.jp/harimau_tigris)\n *   - steven (http://www.dsibrew.org/wiki/User:Steven)\n *   - yellows8 (http://www.dsibrew.org/wiki/User:Yellows8)\n *   - PBSDS (https://github.com/pbsds)\n *   - jaames (https://github.com/jaames)\n *  Identifying the PPM sound codec:\n *   - Midmad from Hatena Haiku\n *   - WDLMaster from hcs64.com\n *  Helping me to identify issues with the Python decoder that this is based on:\n *   - Austin Burk (https://sudomemo.net)\n *\n *  Lastly, a huge thanks goes to Nintendo for creating Flipnote Studio,\n *  and to Hatena for providing the Flipnote Hatena online service, both of which inspired so many c:\n*/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { DataStream } from '../utils/dataStream';\nimport { ADPCM_INDEX_TABLE_4, ADPCM_SAMPLE_TABLE_4 } from './adpcm';\n// internal frame speed value -> FPS table\nvar FRAMERATES = [\n    null,\n    0.5,\n    1,\n    2,\n    4,\n    6,\n    12,\n    20,\n    30,\n];\nvar PALETTE = {\n    WHITE: [0xff, 0xff, 0xff],\n    BLACK: [0x0e, 0x0e, 0x0e],\n    RED: [0xff, 0x2a, 0x2a],\n    BLUE: [0x0a, 0x39, 0xff],\n};\n;\nvar PpmParser = /** @class */ (function (_super) {\n    __extends(PpmParser, _super);\n    function PpmParser(arrayBuffer) {\n        var _this = _super.call(this, arrayBuffer) || this;\n        _this.type = PpmParser.type;\n        _this.width = PpmParser.width;\n        _this.height = PpmParser.height;\n        _this.palette = PALETTE;\n        _this.globalPalette = PpmParser.globalPalette;\n        _this.sampleRate = PpmParser.sampleRate;\n        _this.prevDecodedFrame = null;\n        _this.decodeHeader();\n        _this.decodeAnimationHeader();\n        _this.decodeSoundHeader();\n        _this.decodeMeta();\n        // create image buffers\n        _this.layers = [\n            new Uint8Array(PpmParser.width * PpmParser.height),\n            new Uint8Array(PpmParser.width * PpmParser.height)\n        ];\n        _this.prevLayers = [\n            new Uint8Array(PpmParser.width * PpmParser.height),\n            new Uint8Array(PpmParser.width * PpmParser.height)\n        ];\n        _this.prevDecodedFrame = null;\n        return _this;\n    }\n    PpmParser.validateFSID = function (fsid) {\n        return /[0159]{1}[0-9A-F]{6}0[0-9A-F]{8}/.test(fsid);\n    };\n    PpmParser.validateFilename = function (filename) {\n        return /[0-9A-F]{6}_[0-9A-F]{13}_[0-9]{3}/.test(filename);\n    };\n    PpmParser.prototype.readFilename = function () {\n        return [\n            this.readHex(3),\n            this.readUtf8(13),\n            this.readUint16().toString().padStart(3, '0')\n        ].join('_');\n    };\n    PpmParser.prototype.readLineEncoding = function () {\n        var unpacked = new Uint8Array(PpmParser.height);\n        for (var byteIndex = 0; byteIndex < 48; byteIndex++) {\n            var byte = this.readUint8();\n            // each line's encoding type is stored as a 2-bit value\n            for (var bitOffset = 0; bitOffset < 8; bitOffset += 2) {\n                unpacked[byteIndex * 4 + bitOffset / 2] = (byte >> bitOffset) & 0x03;\n            }\n        }\n        return unpacked;\n    };\n    PpmParser.prototype.decodeHeader = function () {\n        this.seek(0);\n        // decode header\n        // https://github.com/pbsds/hatena-server/wiki/PPM-format#file-header\n        var magic = this.readUint32();\n        this.frameDataLength = this.readUint32();\n        this.soundDataLength = this.readUint32();\n        this.frameCount = this.readUint16() + 1;\n        this.version = this.readUint16();\n    };\n    PpmParser.prototype.decodeMeta = function () {\n        // https://github.com/pbsds/hatena-server/wiki/PPM-format#file-header\n        this.seek(0x10);\n        var lock = this.readUint16(), thumbIndex = this.readInt16(), rootAuthorName = this.readUtf16(11), parentAuthorName = this.readUtf16(11), currentAuthorName = this.readUtf16(11), parentAuthorId = this.readHex(8, true), currentAuthorId = this.readHex(8, true), parentFilename = this.readFilename(), currentFilename = this.readFilename(), rootAuthorId = this.readHex(8, true);\n        this.seek(0x9A);\n        var timestamp = new Date((this.readUint32() + 946684800) * 1000);\n        this.seek(0x06A6);\n        var flags = this.readUint16();\n        this.thumbFrameIndex = thumbIndex;\n        this.meta = {\n            lock: lock === 1,\n            loop: (flags >> 1 & 0x01) === 1,\n            frame_count: this.frameCount,\n            frame_speed: this.frameSpeed,\n            bgm_speed: this.bgmSpeed,\n            thumb_index: thumbIndex,\n            timestamp: timestamp,\n            spinoff: (currentAuthorId !== parentAuthorId) || (currentAuthorId !== rootAuthorId),\n            root: {\n                filename: null,\n                username: rootAuthorName,\n                fsid: rootAuthorId,\n            },\n            parent: {\n                username: parentAuthorName,\n                fsid: parentAuthorId,\n                filename: parentFilename\n            },\n            current: {\n                username: currentAuthorName,\n                fsid: currentAuthorId,\n                filename: currentFilename\n            },\n        };\n    };\n    PpmParser.prototype.decodeAnimationHeader = function () {\n        var _this = this;\n        // jump to the start of the animation data section\n        // https://github.com/pbsds/hatena-server/wiki/PPM-format#animation-data-section\n        this.seek(0x06A0);\n        var offsetTableLength = this.readUint16();\n        // skip padding + flags\n        this.seek(0x06A8);\n        // read frame offsets and build them into a table\n        this.frameOffsets = new Uint32Array(offsetTableLength / 4).map(function (value) {\n            return 0x06A8 + offsetTableLength + _this.readUint32();\n        });\n    };\n    PpmParser.prototype.decodeSoundHeader = function () {\n        // https://github.com/pbsds/hatena-server/wiki/PPM-format#sound-data-section\n        // offset = frame data offset + frame data length + sound effect flags\n        var offset = 0x06A0 + this.frameDataLength + this.frameCount;\n        // account for multiple-of-4 padding\n        if (offset % 2 != 0)\n            offset += 4 - (offset % 4);\n        this.seek(offset);\n        var bgmLen = this.readUint32();\n        var se1Len = this.readUint32();\n        var se2Len = this.readUint32();\n        var se3Len = this.readUint32();\n        this.frameSpeed = 8 - this.readUint8();\n        this.bgmSpeed = 8 - this.readUint8();\n        offset += 32;\n        this.framerate = FRAMERATES[this.frameSpeed];\n        this.bgmrate = FRAMERATES[this.bgmSpeed];\n        this.soundMeta = {\n            bgm: { offset: offset, length: bgmLen },\n            se1: { offset: offset += bgmLen, length: se1Len },\n            se2: { offset: offset += se1Len, length: se2Len },\n            se3: { offset: offset += se2Len, length: se3Len },\n        };\n    };\n    PpmParser.prototype.isNewFrame = function (frameIndex) {\n        this.seek(this.frameOffsets[frameIndex]);\n        var header = this.readUint8();\n        return (header >> 7) & 0x1;\n    };\n    PpmParser.prototype.getFramePalette = function (frameIndex) {\n        this.seek(this.frameOffsets[frameIndex]);\n        var palette = this.palette;\n        var header = this.readUint8();\n        var paperColor = header & 0x1;\n        var pen = [\n            palette.BLACK,\n            paperColor == 1 ? palette.BLACK : palette.WHITE,\n            palette.RED,\n            palette.BLUE,\n        ];\n        return [\n            paperColor == 1 ? palette.WHITE : palette.BLACK,\n            pen[(header >> 1) & 0x3],\n            pen[(header >> 3) & 0x3],\n        ];\n    };\n    PpmParser.prototype.getLayerOrder = function (frameIndex) {\n        return [0, 1];\n    };\n    PpmParser.prototype.decodeFrame = function (frameIndex) {\n        if ((frameIndex !== 0) && (this.prevDecodedFrame !== frameIndex - 1) && (!this.isNewFrame(frameIndex)))\n            this.decodeFrame(frameIndex - 1);\n        // https://github.com/pbsds/hatena-server/wiki/PPM-format#animation-frame\n        this.seek(this.frameOffsets[frameIndex]);\n        var header = this.readUint8();\n        var isNewFrame = (header >> 7) & 0x1;\n        var isTranslated = (header >> 5) & 0x3;\n        var translateX = 0;\n        var translateY = 0;\n        // copy the current layer buffers to the previous ones\n        this.prevLayers[0].set(this.layers[0]);\n        this.prevLayers[1].set(this.layers[1]);\n        this.prevDecodedFrame = frameIndex;\n        // reset current layer buffers\n        this.layers[0].fill(0);\n        this.layers[1].fill(0);\n        if (isTranslated) {\n            translateX = this.readInt8();\n            translateY = this.readInt8();\n        }\n        var layerEncoding = [\n            this.readLineEncoding(),\n            this.readLineEncoding(),\n        ];\n        // start decoding layer bitmaps\n        for (var layer = 0; layer < 2; layer++) {\n            var layerBitmap = this.layers[layer];\n            for (var line = 0; line < PpmParser.height; line++) {\n                var lineType = layerEncoding[layer][line];\n                var chunkOffset = line * PpmParser.width;\n                switch (lineType) {\n                    // line type 0 = blank line, decode nothing\n                    case 0:\n                        break;\n                    // line types 1 + 2 = compressed bitmap line\n                    case 1:\n                    case 2:\n                        var lineHeader = this.readUint32(false);\n                        // line type 2 starts as an inverted line\n                        if (lineType == 2)\n                            layerBitmap.fill(0xFF, chunkOffset, chunkOffset + PpmParser.width);\n                        // loop through each bit in the line header\n                        while (lineHeader & 0xFFFFFFFF) {\n                            // if the bit is set, this 8-pix wide chunk is stored\n                            // else we can just leave it blank and move on to the next chunk\n                            if (lineHeader & 0x80000000) {\n                                var chunk = this.readUint8();\n                                // unpack chunk bits\n                                for (var pixel = 0; pixel < 8; pixel++) {\n                                    layerBitmap[chunkOffset + pixel] = (chunk >> pixel & 0x1) ? 0xFF : 0x00;\n                                }\n                            }\n                            chunkOffset += 8;\n                            // shift lineheader to the left by 1 bit, now on the next loop cycle the next bit will be checked\n                            lineHeader <<= 1;\n                        }\n                        break;\n                    // line type 3 = raw bitmap line\n                    case 3:\n                        while (chunkOffset < (line + 1) * PpmParser.width) {\n                            var chunk = this.readUint8();\n                            for (var pixel = 0; pixel < 8; pixel++) {\n                                layerBitmap[chunkOffset + pixel] = (chunk >> pixel & 0x1) ? 0xFF : 0x00;\n                            }\n                            chunkOffset += 8;\n                        }\n                        break;\n                }\n            }\n        }\n        // if the current frame is based on changes from the preivous one, merge them by XORing their values\n        if (!isNewFrame) {\n            var dest = void 0, src = void 0;\n            // loop through each line\n            for (var y = 0; y < PpmParser.height; y++) {\n                // skip to next line if this one falls off the top edge of the screen\n                if (y - translateY < 0)\n                    continue;\n                // stop once the bottom screen edge has been reached\n                if (y - translateY >= PpmParser.height)\n                    break;\n                // loop through each pixel in the line\n                for (var x = 0; x < PpmParser.width; x++) {\n                    // skip to the next pixel if this one falls off the left edge of the screen\n                    if (x - translateX < 0)\n                        continue;\n                    // stop diffing this line once the right screen edge has been reached\n                    if (x - translateX >= PpmParser.width)\n                        break;\n                    dest = x + y * PpmParser.width;\n                    src = dest - (translateX + translateY * PpmParser.width);\n                    // diff pixels with a binary XOR\n                    this.layers[0][dest] ^= this.prevLayers[0][src];\n                    this.layers[1][dest] ^= this.prevLayers[1][src];\n                }\n            }\n        }\n        return this.layers;\n    };\n    // retuns an uint8 array where each item is a pixel's palette index\n    PpmParser.prototype.getLayerPixels = function (frameIndex, layerIndex) {\n        if (this.prevDecodedFrame !== frameIndex) {\n            this.decodeFrame(frameIndex);\n        }\n        var layer = this.layers[layerIndex];\n        var image = new Uint8Array(PpmParser.width * PpmParser.height);\n        var layerColor = layerIndex + 1;\n        for (var pixel = 0; pixel < image.length; pixel++) {\n            if (layer[pixel] !== 0) {\n                image[pixel] = layerColor;\n            }\n        }\n        return image;\n    };\n    // retuns an uint8 array where each item is a pixel's palette index\n    PpmParser.prototype.getFramePixels = function (frameIndex, useGlobalPalette) {\n        if (useGlobalPalette === void 0) { useGlobalPalette = false; }\n        var paletteMap;\n        if (useGlobalPalette) {\n            var framePalette = this.getFramePalette(frameIndex);\n            paletteMap = framePalette.map(function (color) { return PpmParser.globalPalette.indexOf(color); });\n        }\n        else {\n            paletteMap = [0, 1, 2];\n        }\n        var layers = this.decodeFrame(frameIndex);\n        var image = new Uint8Array(PpmParser.width * PpmParser.height);\n        image.fill(paletteMap[0]);\n        for (var pixel = 0; pixel < image.length; pixel++) {\n            var a = layers[0][pixel];\n            var b = layers[1][pixel];\n            if (b)\n                image[pixel] = paletteMap[2];\n            if (a)\n                image[pixel] = paletteMap[1];\n        }\n        return image;\n    };\n    PpmParser.prototype.hasAudioTrack = function (trackIndex) {\n        var keys = ['bgm', 'se1', 'se2', 'se3'];\n        var id = keys[trackIndex];\n        return this.soundMeta[id].length > 0;\n    };\n    PpmParser.prototype.decodeAudio = function (track) {\n        var trackMeta = this.soundMeta[track];\n        var adpcm = new Uint8Array(this.buffer, trackMeta.offset, trackMeta.length);\n        var output = new Int16Array(adpcm.length * 2);\n        var outputOffset = 0;\n        // initial decoder state\n        var prevDiff = 0;\n        var prevStepIndex = 0;\n        var sample;\n        var diff;\n        var stepIndex;\n        // loop through each byte in the raw adpcm data\n        for (var adpcmOffset = 0; adpcmOffset < adpcm.length; adpcmOffset++) {\n            var byte = adpcm[adpcmOffset];\n            var bitPos = 0;\n            while (bitPos < 8) {\n                // isolate 4-bit sample\n                sample = (byte >> bitPos) & 0xF;\n                // get diff\n                diff = prevDiff + ADPCM_SAMPLE_TABLE_4[sample + 16 * prevStepIndex];\n                // get step index\n                stepIndex = prevStepIndex + ADPCM_INDEX_TABLE_4[sample];\n                // clamp step index and diff\n                stepIndex = Math.max(0, Math.min(stepIndex, 79));\n                diff = Math.max(-32767, Math.min(diff, 32767));\n                // add result to output buffer\n                output[outputOffset] = (diff);\n                outputOffset += 1;\n                // set prev decoder state\n                prevStepIndex = stepIndex;\n                prevDiff = diff;\n                // move to next sample\n                bitPos += 4;\n            }\n        }\n        return output;\n    };\n    PpmParser.prototype.decodeSoundFlags = function () {\n        var _this = this;\n        this.seek(0x06A0 + this.frameDataLength);\n        // per msdn docs - the array map callback is only invoked for array indicies that have assigned values\n        // so when we create an array, we need to fill it with something before we can map over it\n        var arr = new Array(this.frameCount).fill([]);\n        return arr.map(function (value) {\n            var byte = _this.readUint8();\n            return [byte & 0x1, (byte >> 1) & 0x1, (byte >> 2) & 0x1];\n        });\n    };\n    PpmParser.type = 'PPM';\n    PpmParser.sampleRate = 8192;\n    PpmParser.width = 256;\n    PpmParser.height = 192;\n    PpmParser.globalPalette = [\n        PALETTE.BLACK,\n        PALETTE.WHITE,\n        PALETTE.RED,\n        PALETTE.BLUE\n    ];\n    return PpmParser;\n}(DataStream));\nexport { PpmParser };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { DataStream } from '../utils/dataStream';\nimport { ADPCM_INDEX_TABLE_2, ADPCM_INDEX_TABLE_4, ADPCM_SAMPLE_TABLE_2, ADPCM_SAMPLE_TABLE_4 } from './adpcm';\nimport { KWZ_TABLE_1, KWZ_TABLE_2, KWZ_TABLE_3, KWZ_LINE_TABLE } from './kwzTables';\nvar FRAMERATES = [\n    0.2,\n    0.5,\n    1,\n    2,\n    4,\n    6,\n    8,\n    12,\n    20,\n    24,\n    30\n];\nvar PALETTE = {\n    WHITE: [0xff, 0xff, 0xff],\n    BLACK: [0x10, 0x10, 0x10],\n    RED: [0xff, 0x10, 0x10],\n    YELLOW: [0xff, 0xe7, 0x00],\n    GREEN: [0x00, 0x86, 0x31],\n    BLUE: [0x00, 0x38, 0xce],\n    NONE: [0xff, 0xff, 0xff]\n};\n;\n;\nvar KwzParser = /** @class */ (function (_super) {\n    __extends(KwzParser, _super);\n    function KwzParser(arrayBuffer) {\n        var _this = _super.call(this, arrayBuffer) || this;\n        _this.type = KwzParser.type;\n        _this.width = KwzParser.width;\n        _this.height = KwzParser.height;\n        _this.palette = PALETTE;\n        _this.globalPalette = KwzParser.globalPalette;\n        _this.sampleRate = KwzParser.sampleRate;\n        _this.prevDecodedFrame = null;\n        _this.bitIndex = 0;\n        _this.bitValue = 0;\n        _this.layers = [\n            new Uint16Array(KwzParser.width * KwzParser.height),\n            new Uint16Array(KwzParser.width * KwzParser.height),\n            new Uint16Array(KwzParser.width * KwzParser.height),\n        ];\n        _this.bitIndex = 0;\n        _this.bitValue = 0;\n        _this.load();\n        return _this;\n    }\n    KwzParser.prototype.load = function () {\n        this.seek(0);\n        this.sections = {};\n        this.frameMeta = [];\n        var fileSize = this.byteLength - 256;\n        var offset = 0;\n        var sectionCount = 0;\n        // counting sections should mitigate against one of mrnbayoh's notehax exploits\n        while ((offset < fileSize) && (sectionCount < 6)) {\n            this.seek(offset);\n            var sectionMagic = this.readUtf8(4).substring(0, 3);\n            var sectionLength = this.readUint32();\n            this.sections[sectionMagic] = {\n                offset: offset,\n                length: sectionLength\n            };\n            offset += sectionLength + 8;\n            sectionCount += 1;\n        }\n        this.decodeMeta();\n        this.decodeFrameMeta();\n        this.decodeSoundHeader();\n    };\n    KwzParser.prototype.readBits = function (num) {\n        if (this.bitIndex + num > 16) {\n            var nextBits = this.readUint16();\n            this.bitValue |= nextBits << (16 - this.bitIndex);\n            this.bitIndex -= 16;\n        }\n        var mask = (1 << num) - 1;\n        var result = this.bitValue & mask;\n        this.bitValue >>= num;\n        this.bitIndex += num;\n        return result;\n    };\n    KwzParser.prototype.decodeMeta = function () {\n        this.seek(this.sections['KFH'].offset + 12);\n        var creationTimestamp = new Date((this.readUint32() + 946684800) * 1000), modifiedTimestamp = new Date((this.readUint32() + 946684800) * 1000), appVersion = this.readUint32(), rootAuthorId = this.readHex(10), parentAuthorId = this.readHex(10), currentAuthorId = this.readHex(10), rootAuthorName = this.readUtf16(11), parentAuthorName = this.readUtf16(11), currentAuthorName = this.readUtf16(11), rootFilename = this.readUtf8(28), parentFilename = this.readUtf8(28), currentFilename = this.readUtf8(28), frameCount = this.readUint16(), thumbIndex = this.readUint16(), flags = this.readUint16(), frameSpeed = this.readUint8(), layerFlags = this.readUint8();\n        this.frameCount = frameCount;\n        this.thumbFrameIndex = thumbIndex;\n        this.frameSpeed = frameSpeed;\n        this.framerate = FRAMERATES[frameSpeed];\n        this.meta = {\n            lock: (flags & 0x1) === 1,\n            loop: ((flags >> 1) & 0x01) === 1,\n            frame_count: frameCount,\n            frame_speed: frameSpeed,\n            thumb_index: thumbIndex,\n            timestamp: modifiedTimestamp,\n            creation_timestamp: creationTimestamp,\n            root: {\n                username: rootAuthorName,\n                fsid: rootAuthorId,\n                filename: rootFilename,\n            },\n            parent: {\n                username: parentAuthorName,\n                fsid: parentAuthorId,\n                filename: parentFilename,\n            },\n            current: {\n                username: currentAuthorName,\n                fsid: currentAuthorId,\n                filename: currentFilename,\n            },\n        };\n    };\n    KwzParser.prototype.decodeFrameMeta = function () {\n        this.frameOffsets = new Uint32Array(this.frameCount);\n        this.seek(this.sections['KMI'].offset + 8);\n        var offset = this.sections['KMC'].offset + 12;\n        for (var i = 0; i < this.frameCount; i++) {\n            var frame = {\n                flags: this.readUint32(),\n                layerSize: [\n                    this.readUint16(),\n                    this.readUint16(),\n                    this.readUint16()\n                ],\n                frameAuthor: this.readHex(10),\n                layerDepth: [\n                    this.readUint8(),\n                    this.readUint8(),\n                    this.readUint8(),\n                ],\n                soundFlags: this.readUint8(),\n                cameraFlag: this.readUint32(),\n            };\n            this.frameMeta.push(frame);\n            this.frameOffsets[i] = offset;\n            offset += frame.layerSize[0] + frame.layerSize[1] + frame.layerSize[2];\n        }\n    };\n    KwzParser.prototype.decodeSoundHeader = function () {\n        var offset = this.sections['KSN'].offset + 8;\n        this.seek(offset);\n        var bgmSpeed = this.readUint32();\n        this.bgmSpeed = bgmSpeed;\n        this.bgmrate = FRAMERATES[bgmSpeed];\n        var trackSizes = new Uint32Array(this.buffer, offset + 4, 20);\n        this.soundMeta = {\n            'bgm': { offset: offset += 28, length: trackSizes[0] },\n            'se1': { offset: offset += trackSizes[0], length: trackSizes[1] },\n            'se2': { offset: offset += trackSizes[1], length: trackSizes[2] },\n            'se3': { offset: offset += trackSizes[2], length: trackSizes[3] },\n            'se4': { offset: offset += trackSizes[3], length: trackSizes[4] },\n        };\n    };\n    KwzParser.prototype.getDiffingFlag = function (frameIndex) {\n        return ~(this.frameMeta[frameIndex].flags >> 4) & 0x07;\n    };\n    KwzParser.prototype.getLayerDepths = function (frameIndex) {\n        return this.frameMeta[frameIndex].layerDepth;\n    };\n    // sort layer indices sorted by depth, drom bottom to top\n    KwzParser.prototype.getLayerOrder = function (frameIndex) {\n        var depths = this.getLayerDepths(frameIndex);\n        return [2, 1, 0].sort(function (a, b) { return depths[b] - depths[a]; });\n    };\n    KwzParser.prototype.decodeFrame = function (frameIndex, diffingFlag, isPrevFrame) {\n        if (diffingFlag === void 0) { diffingFlag = 0x7; }\n        if (isPrevFrame === void 0) { isPrevFrame = false; }\n        // if this frame is being decoded as a prev frame, then we only want to decode the layers necessary\n        if (isPrevFrame)\n            diffingFlag &= this.getDiffingFlag(frameIndex + 1);\n        // the prevDecodedFrame check is an optimisation for decoding frames in full sequence\n        if ((frameIndex !== 0) && (this.prevDecodedFrame !== frameIndex - 1) && (diffingFlag))\n            this.decodeFrame(frameIndex - 1, diffingFlag = diffingFlag, isPrevFrame = true);\n        var meta = this.frameMeta[frameIndex];\n        var offset = this.frameOffsets[frameIndex];\n        for (var layerIndex = 0; layerIndex < 3; layerIndex++) {\n            this.seek(offset);\n            var layerSize = meta.layerSize[layerIndex];\n            offset += layerSize;\n            // if the layer is 38 bytes then it hasn't changed at all since the previous frame, so we can skip it\n            if (layerSize === 38)\n                continue;\n            if (((diffingFlag >> layerIndex) & 0x1) === 0)\n                continue;\n            this.bitIndex = 16;\n            this.bitValue = 0;\n            var skip = 0;\n            for (var tileOffsetY = 0; tileOffsetY < KwzParser.height; tileOffsetY += 128) {\n                for (var tileOffsetX = 0; tileOffsetX < KwzParser.width; tileOffsetX += 128) {\n                    for (var subTileOffsetY = 0; subTileOffsetY < 128; subTileOffsetY += 8) {\n                        var y = tileOffsetY + subTileOffsetY;\n                        if (y >= KwzParser.height)\n                            break;\n                        for (var subTileOffsetX = 0; subTileOffsetX < 128; subTileOffsetX += 8) {\n                            var x = tileOffsetX + subTileOffsetX;\n                            if (x >= KwzParser.width)\n                                break;\n                            if (skip) {\n                                skip -= 1;\n                                continue;\n                            }\n                            var pixelOffset = y * KwzParser.width + x;\n                            var pixelBuffer = this.layers[layerIndex];\n                            var type = this.readBits(3);\n                            if (type == 0) {\n                                var lineIndex = KWZ_TABLE_1[this.readBits(5)];\n                                var pixels = KWZ_LINE_TABLE.subarray(lineIndex * 8, lineIndex * 8 + 8);\n                                pixelBuffer.set(pixels, pixelOffset);\n                                pixelBuffer.set(pixels, pixelOffset + 320);\n                                pixelBuffer.set(pixels, pixelOffset + 640);\n                                pixelBuffer.set(pixels, pixelOffset + 960);\n                                pixelBuffer.set(pixels, pixelOffset + 1280);\n                                pixelBuffer.set(pixels, pixelOffset + 1600);\n                                pixelBuffer.set(pixels, pixelOffset + 1920);\n                                pixelBuffer.set(pixels, pixelOffset + 2240);\n                            }\n                            else if (type == 1) {\n                                var lineIndex = this.readBits(13);\n                                var pixels = KWZ_LINE_TABLE.subarray(lineIndex * 8, lineIndex * 8 + 8);\n                                pixelBuffer.set(pixels, pixelOffset);\n                                pixelBuffer.set(pixels, pixelOffset + 320);\n                                pixelBuffer.set(pixels, pixelOffset + 640);\n                                pixelBuffer.set(pixels, pixelOffset + 960);\n                                pixelBuffer.set(pixels, pixelOffset + 1280);\n                                pixelBuffer.set(pixels, pixelOffset + 1600);\n                                pixelBuffer.set(pixels, pixelOffset + 1920);\n                                pixelBuffer.set(pixels, pixelOffset + 2240);\n                            }\n                            else if (type == 2) {\n                                var lineValue = this.readBits(5);\n                                var lineIndexA = KWZ_TABLE_1[lineValue];\n                                var lineIndexB = KWZ_TABLE_2[lineValue];\n                                var a = KWZ_LINE_TABLE.subarray(lineIndexA * 8, lineIndexA * 8 + 8);\n                                var b = KWZ_LINE_TABLE.subarray(lineIndexB * 8, lineIndexB * 8 + 8);\n                                pixelBuffer.set(a, pixelOffset);\n                                pixelBuffer.set(b, pixelOffset + 320);\n                                pixelBuffer.set(a, pixelOffset + 640);\n                                pixelBuffer.set(b, pixelOffset + 960);\n                                pixelBuffer.set(a, pixelOffset + 1280);\n                                pixelBuffer.set(b, pixelOffset + 1600);\n                                pixelBuffer.set(a, pixelOffset + 1920);\n                                pixelBuffer.set(b, pixelOffset + 2240);\n                            }\n                            else if (type == 3) {\n                                var lineIndexA = this.readBits(13);\n                                var lineIndexB = KWZ_TABLE_3[lineIndexA];\n                                var a = KWZ_LINE_TABLE.subarray(lineIndexA * 8, lineIndexA * 8 + 8);\n                                var b = KWZ_LINE_TABLE.subarray(lineIndexB * 8, lineIndexB * 8 + 8);\n                                pixelBuffer.set(a, pixelOffset);\n                                pixelBuffer.set(b, pixelOffset + 320);\n                                pixelBuffer.set(a, pixelOffset + 640);\n                                pixelBuffer.set(b, pixelOffset + 960);\n                                pixelBuffer.set(a, pixelOffset + 1280);\n                                pixelBuffer.set(b, pixelOffset + 1600);\n                                pixelBuffer.set(a, pixelOffset + 1920);\n                                pixelBuffer.set(b, pixelOffset + 2240);\n                            }\n                            else if (type == 4) {\n                                var mask = this.readBits(8);\n                                for (var line = 0; line < 8; line++) {\n                                    var lineIndex = 0;\n                                    if (mask & (1 << line)) {\n                                        lineIndex = KWZ_TABLE_1[this.readBits(5)];\n                                    }\n                                    else {\n                                        lineIndex = this.readBits(13);\n                                    }\n                                    var pixels = KWZ_LINE_TABLE.subarray(lineIndex * 8, lineIndex * 8 + 8);\n                                    pixelBuffer.set(pixels, pixelOffset + line * 320);\n                                }\n                            }\n                            else if (type == 5) {\n                                skip = this.readBits(5);\n                                continue;\n                            }\n                            // type 6 doesnt exist\n                            else if (type == 7) {\n                                var pattern = this.readBits(2);\n                                var useTable = this.readBits(1);\n                                var lineIndexA = 0;\n                                var lineIndexB = 0;\n                                if (useTable) {\n                                    lineIndexA = KWZ_TABLE_1[this.readBits(5)];\n                                    lineIndexB = KWZ_TABLE_1[this.readBits(5)];\n                                    pattern = (pattern + 1) % 4;\n                                }\n                                else {\n                                    lineIndexA = this.readBits(13);\n                                    lineIndexB = this.readBits(13);\n                                }\n                                var a = KWZ_LINE_TABLE.subarray(lineIndexA * 8, lineIndexA * 8 + 8);\n                                var b = KWZ_LINE_TABLE.subarray(lineIndexB * 8, lineIndexB * 8 + 8);\n                                if (pattern == 0) {\n                                    pixelBuffer.set(a, pixelOffset);\n                                    pixelBuffer.set(b, pixelOffset + 320);\n                                    pixelBuffer.set(a, pixelOffset + 640);\n                                    pixelBuffer.set(b, pixelOffset + 960);\n                                    pixelBuffer.set(a, pixelOffset + 1280);\n                                    pixelBuffer.set(b, pixelOffset + 1600);\n                                    pixelBuffer.set(a, pixelOffset + 1920);\n                                    pixelBuffer.set(b, pixelOffset + 2240);\n                                }\n                                else if (pattern == 1) {\n                                    pixelBuffer.set(a, pixelOffset);\n                                    pixelBuffer.set(a, pixelOffset + 320);\n                                    pixelBuffer.set(b, pixelOffset + 640);\n                                    pixelBuffer.set(a, pixelOffset + 960);\n                                    pixelBuffer.set(a, pixelOffset + 1280);\n                                    pixelBuffer.set(b, pixelOffset + 1600);\n                                    pixelBuffer.set(a, pixelOffset + 1920);\n                                    pixelBuffer.set(a, pixelOffset + 2240);\n                                }\n                                else if (pattern == 2) {\n                                    pixelBuffer.set(a, pixelOffset);\n                                    pixelBuffer.set(b, pixelOffset + 320);\n                                    pixelBuffer.set(a, pixelOffset + 640);\n                                    pixelBuffer.set(a, pixelOffset + 960);\n                                    pixelBuffer.set(b, pixelOffset + 1280);\n                                    pixelBuffer.set(a, pixelOffset + 1600);\n                                    pixelBuffer.set(a, pixelOffset + 1920);\n                                    pixelBuffer.set(b, pixelOffset + 2240);\n                                }\n                                else if (pattern == 3) {\n                                    pixelBuffer.set(a, pixelOffset);\n                                    pixelBuffer.set(b, pixelOffset + 320);\n                                    pixelBuffer.set(b, pixelOffset + 640);\n                                    pixelBuffer.set(a, pixelOffset + 960);\n                                    pixelBuffer.set(b, pixelOffset + 1280);\n                                    pixelBuffer.set(b, pixelOffset + 1600);\n                                    pixelBuffer.set(a, pixelOffset + 1920);\n                                    pixelBuffer.set(b, pixelOffset + 2240);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        this.prevDecodedFrame = frameIndex;\n        // return this._layers;\n        return [\n            new Uint8Array(this.layers[0].buffer),\n            new Uint8Array(this.layers[1].buffer),\n            new Uint8Array(this.layers[2].buffer),\n        ];\n    };\n    KwzParser.prototype.getFramePalette = function (frameIndex) {\n        var flags = this.frameMeta[frameIndex].flags;\n        var paletteMap = [\n            this.palette.WHITE,\n            this.palette.BLACK,\n            this.palette.RED,\n            this.palette.YELLOW,\n            this.palette.GREEN,\n            this.palette.BLUE,\n            this.palette.NONE\n        ];\n        return [\n            paletteMap[flags & 0xF],\n            paletteMap[(flags >> 8) & 0xF],\n            paletteMap[(flags >> 12) & 0xF],\n            paletteMap[(flags >> 16) & 0xF],\n            paletteMap[(flags >> 20) & 0xF],\n            paletteMap[(flags >> 24) & 0xF],\n            paletteMap[(flags >> 28) & 0xF],\n        ];\n    };\n    // retuns an uint8 array where each item is a pixel's palette index\n    KwzParser.prototype.getLayerPixels = function (frameIndex, layerIndex) {\n        if (this.prevDecodedFrame !== frameIndex) {\n            this.decodeFrame(frameIndex);\n        }\n        var layers = this.layers[layerIndex];\n        var image = new Uint8Array((KwzParser.width * KwzParser.height));\n        var paletteOffset = layerIndex * 2 + 1;\n        for (var pixelIndex = 0; pixelIndex < layers.length; pixelIndex++) {\n            var pixel = layers[pixelIndex];\n            if (pixel & 0xff00) {\n                image[pixelIndex] = paletteOffset;\n            }\n            else if (pixel & 0x00ff) {\n                image[pixelIndex] = paletteOffset + 1;\n            }\n        }\n        return image;\n    };\n    // retuns an uint8 array where each item is a pixel's palette index\n    KwzParser.prototype.getFramePixels = function (frameIndex, useGlobalPalette) {\n        var _this = this;\n        if (useGlobalPalette === void 0) { useGlobalPalette = false; }\n        var paletteMap;\n        if (useGlobalPalette) {\n            var framePalette = this.getFramePalette(frameIndex);\n            paletteMap = framePalette.map(function (color) { return KwzParser.globalPalette.indexOf(color); });\n        }\n        else {\n            paletteMap = [0, 1, 2, 3, 4, 5, 6];\n        }\n        var image = new Uint8Array((KwzParser.width * KwzParser.height));\n        image.fill(paletteMap[0]);\n        var layerOrder = this.getLayerOrder(frameIndex);\n        layerOrder.forEach(function (layerIndex) {\n            var layer = _this.getLayerPixels(frameIndex, layerIndex);\n            // merge layer into image result\n            for (var pixelIndex = 0; pixelIndex < layer.length; pixelIndex++) {\n                var pixel = layer[pixelIndex];\n                if (pixel !== 0) {\n                    image[pixelIndex] = paletteMap[pixel];\n                }\n            }\n        });\n        return image;\n    };\n    KwzParser.prototype.decodeSoundFlags = function () {\n        return this.frameMeta.map(function (frame) {\n            var soundFlags = frame.soundFlags;\n            return [\n                soundFlags & 0x1,\n                (soundFlags >> 1) & 0x1,\n                (soundFlags >> 2) & 0x1,\n                (soundFlags >> 3) & 0x1,\n            ];\n        });\n    };\n    KwzParser.prototype.hasAudioTrack = function (trackIndex) {\n        var keys = ['bgm', 'se1', 'se2', 'se3', 'se4'];\n        var id = keys[trackIndex];\n        return this.soundMeta[id].length > 0;\n    };\n    KwzParser.prototype.decodeAudio = function (track) {\n        var trackMeta = this.soundMeta[track];\n        var adpcm = new Uint8Array(this.buffer, trackMeta.offset, trackMeta.length);\n        var output = new Int16Array(16364 * 60);\n        var outputOffset = 0;\n        // initial decoder state\n        var prevDiff = 0;\n        var prevStepIndex = 40;\n        var sample;\n        var diff;\n        var stepIndex;\n        // loop through each byte in the raw adpcm data\n        for (var adpcmOffset = 0; adpcmOffset < adpcm.length; adpcmOffset++) {\n            var byte = adpcm[adpcmOffset];\n            var bitPos = 0;\n            while (bitPos < 8) {\n                if (prevStepIndex < 18 || bitPos == 6) {\n                    // isolate 2-bit sample\n                    sample = (byte >> bitPos) & 0x3;\n                    // get diff\n                    diff = prevDiff + ADPCM_SAMPLE_TABLE_2[sample + 4 * prevStepIndex];\n                    // get step index\n                    stepIndex = prevStepIndex + ADPCM_INDEX_TABLE_2[sample];\n                    bitPos += 2;\n                }\n                else {\n                    // isolate 4-bit sample\n                    sample = (byte >> bitPos) & 0xF;\n                    // get diff\n                    diff = prevDiff + ADPCM_SAMPLE_TABLE_4[sample + 16 * prevStepIndex];\n                    // get step index\n                    stepIndex = prevStepIndex + ADPCM_INDEX_TABLE_4[sample];\n                    bitPos += 4;\n                }\n                // clamp step index and diff\n                stepIndex = Math.max(0, Math.min(stepIndex, 79));\n                diff = Math.max(-2048, Math.min(diff, 2048));\n                // add result to output buffer\n                output[outputOffset] = (diff * 16);\n                outputOffset += 1;\n                // set prev decoder state\n                prevStepIndex = stepIndex;\n                prevDiff = diff;\n            }\n        }\n        return output.slice(0, outputOffset);\n    };\n    KwzParser.type = 'KWZ';\n    KwzParser.sampleRate = 16364;\n    KwzParser.width = 320;\n    KwzParser.height = 240;\n    KwzParser.globalPalette = [\n        PALETTE.BLACK,\n        PALETTE.WHITE,\n        PALETTE.RED,\n        PALETTE.YELLOW,\n        PALETTE.GREEN,\n        PALETTE.BLUE,\n        PALETTE.NONE,\n    ];\n    return KwzParser;\n}(DataStream));\nexport { KwzParser };\n","import { loadSource } from '../loaders';\nimport { PpmParser } from './ppm';\nimport { KwzParser } from './kwz';\nexport function parseSource(source) {\n    return loadSource(source).then(function (arrayBuffer) {\n        // check the buffer's magic to identify which format it uses\n        var data = new DataView(arrayBuffer, 0, 4);\n        var magic = data.getUint32(0);\n        // check if magic is PARA (ppm magic)\n        if (magic === 0x50415241) {\n            return new PpmParser(arrayBuffer);\n        }\n        // check if magic is KFH (kwz magic)\n        else if ((magic & 0xFFFFFF00) === 0x4B464800) {\n            return new KwzParser(arrayBuffer);\n        }\n        return null;\n    });\n}\nexport * from './ppm';\nexport * from './kwz';\n","import { DataStream } from '../utils';\nvar WavEncoder = /** @class */ (function () {\n    function WavEncoder(sampleRate, channels, bitsPerSample) {\n        if (channels === void 0) { channels = 1; }\n        if (bitsPerSample === void 0) { bitsPerSample = 16; }\n        this.sampleRate = sampleRate;\n        this.channels = channels;\n        this.bitsPerSample = bitsPerSample;\n        // Write WAV file header\n        // Reference: http://www.topherlee.com/software/pcm-tut-wavformat.html\n        var headerBuffer = new ArrayBuffer(44);\n        var header = new DataStream(headerBuffer);\n        // 'RIFF' indent\n        header.writeUtf8('RIFF');\n        // filesize (set later)\n        header.writeUint32(0);\n        // 'WAVE' indent\n        header.writeUtf8('WAVE');\n        // 'fmt ' section header\n        header.writeUtf8('fmt ');\n        // fmt section length\n        header.writeUint32(16);\n        // specify audio format is pcm (type 1)\n        header.writeUint16(1);\n        // number of audio channels\n        header.writeUint16(this.channels);\n        // audio sample rate\n        header.writeUint32(this.sampleRate);\n        // byterate = (sampleRate * bitsPerSample * channelCount) / 8\n        header.writeUint32((this.sampleRate * this.bitsPerSample * this.channels) / 8);\n        // blockalign = (bitsPerSample * channels) / 8\n        header.writeUint16((this.bitsPerSample * this.channels) / 8);\n        // bits per sample\n        header.writeUint16(this.bitsPerSample);\n        // 'data' section header\n        header.writeUtf8('data');\n        // data section length (set later)\n        header.writeUint32(0);\n        this.header = header;\n        this.pcmData = null;\n    }\n    WavEncoder.prototype.writeFrames = function (pcmData) {\n        var header = this.header;\n        // fill in filesize\n        header.seek(4);\n        header.writeUint32(header.byteLength + pcmData.byteLength);\n        // fill in data section length\n        header.seek(40);\n        header.writeUint32(pcmData.byteLength);\n        this.pcmData = pcmData;\n    };\n    WavEncoder.prototype.getBlob = function () {\n        return new Blob([this.header.buffer, this.pcmData.buffer], { type: 'audio/wav' });\n    };\n    return WavEncoder;\n}());\nexport { WavEncoder };\n","import vertexShader from './shader.vert';\nimport fragmentShader from './shader.frag';\n;\nvar ShaderType;\n(function (ShaderType) {\n    ShaderType[ShaderType[\"Vertex\"] = WebGLRenderingContext.VERTEX_SHADER] = \"Vertex\";\n    ShaderType[ShaderType[\"Fragment\"] = WebGLRenderingContext.FRAGMENT_SHADER] = \"Fragment\";\n})(ShaderType || (ShaderType = {}));\n;\nexport var TextureType;\n(function (TextureType) {\n    TextureType[TextureType[\"Alpha\"] = WebGLRenderingContext.ALPHA] = \"Alpha\";\n    TextureType[TextureType[\"LuminanceAlpha\"] = WebGLRenderingContext.LUMINANCE_ALPHA] = \"LuminanceAlpha\";\n})(TextureType || (TextureType = {}));\n;\n/** webgl canvas wrapper class */\nvar WebglCanvas = /** @class */ (function () {\n    function WebglCanvas(el, width, height, params) {\n        if (width === void 0) { width = 640; }\n        if (height === void 0) { height = 480; }\n        if (params === void 0) { params = { antialias: false, alpha: false }; }\n        this.uniforms = {};\n        this.refs = {\n            shaders: [],\n            textures: [],\n            buffers: []\n        };\n        var gl = el.getContext('webgl', params);\n        this.el = el;\n        this.gl = gl;\n        this.width = el.width = width;\n        this.height = el.height = height;\n        this.createProgram();\n        this.createScreenQuad();\n        this.createBitmapTexture();\n        this.setCanvasSize(this.width, this.height);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        gl.enable(gl.BLEND);\n        gl.blendEquation(gl.FUNC_ADD);\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    }\n    WebglCanvas.prototype.createProgram = function () {\n        var gl = this.gl;\n        var program = gl.createProgram();\n        // set up shaders\n        gl.attachShader(program, this.createShader(ShaderType.Vertex, vertexShader));\n        gl.attachShader(program, this.createShader(ShaderType.Fragment, fragmentShader));\n        // link program\n        gl.linkProgram(program);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n            var log = gl.getProgramInfoLog(program);\n            gl.deleteProgram(program);\n            throw new Error(log);\n        }\n        // activate the program\n        gl.useProgram(program);\n        // map uniform locations\n        var uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n        for (var index = 0; index < uniformCount; index++) {\n            var name_1 = gl.getActiveUniform(program, index).name;\n            this.uniforms[name_1] = gl.getUniformLocation(program, name_1);\n        }\n        this.program = program;\n    };\n    WebglCanvas.prototype.createScreenQuad = function () {\n        var gl = this.gl;\n        // create quad that fills the screen, this will be our drawing surface\n        var vertBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, vertBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1]), gl.STATIC_DRAW);\n        gl.enableVertexAttribArray(0);\n        gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n        this.refs.buffers.push(vertBuffer);\n    };\n    WebglCanvas.prototype.createBitmapTexture = function () {\n        var gl = this.gl;\n        // create texture to use as the layer bitmap\n        gl.activeTexture(gl.TEXTURE0);\n        var tex = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, tex);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.uniform1i(this.uniforms['u_bitmap'], 0);\n        this.refs.textures.push(tex);\n    };\n    WebglCanvas.prototype.createShader = function (type, source) {\n        var gl = this.gl;\n        var shader = gl.createShader(type);\n        gl.shaderSource(shader, source);\n        gl.compileShader(shader);\n        // test if shader compilation was successful\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n            var log = gl.getShaderInfoLog(shader);\n            gl.deleteShader(shader);\n            throw new Error(log);\n        }\n        this.refs.shaders.push(shader);\n        return shader;\n    };\n    WebglCanvas.prototype.setInputSize = function (width, height) {\n        this.gl.uniform2f(this.uniforms['u_textureSize'], width, height);\n    };\n    WebglCanvas.prototype.setCanvasSize = function (width, height) {\n        this.gl.uniform2f(this.uniforms['u_screenSize'], width, height);\n        this.el.width = width;\n        this.el.height = height;\n        this.width = width;\n        this.height = height;\n        this.gl.viewport(0, 0, width, height);\n    };\n    WebglCanvas.prototype.setLayerType = function (textureType) {\n        this.textureType = textureType;\n    };\n    WebglCanvas.prototype.toImage = function (type) {\n        return this.el.toDataURL(type);\n    };\n    WebglCanvas.prototype.setColor = function (color, value) {\n        this.gl.uniform4f(this.uniforms[color], value[0] / 255, value[1] / 255, value[2] / 255, 1);\n    };\n    WebglCanvas.prototype.setPaperColor = function (value) {\n        this.gl.clearColor(value[0] / 255, value[1] / 255, value[2] / 255, 1);\n    };\n    WebglCanvas.prototype.drawLayer = function (buffer, width, height, color1, color2) {\n        var gl = this.gl;\n        // gl.activeTexture(gl.TEXTURE0);\n        gl.texImage2D(gl.TEXTURE_2D, 0, this.textureType, width, height, 0, this.textureType, gl.UNSIGNED_BYTE, buffer);\n        this.setColor('u_color1', color1);\n        this.setColor('u_color2', color2);\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    };\n    WebglCanvas.prototype.resize = function (width, height) {\n        if (width === void 0) { width = 640; }\n        if (height === void 0) { height = 480; }\n        this.setCanvasSize(width, height);\n    };\n    WebglCanvas.prototype.clear = function () {\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n    };\n    WebglCanvas.prototype.destroy = function () {\n        // free resources\n        var refs = this.refs;\n        var gl = this.gl;\n        refs.shaders.forEach(function (shader) {\n            gl.deleteShader(shader);\n        });\n        refs.shaders = [];\n        refs.textures.forEach(function (texture) {\n            gl.deleteTexture(texture);\n        });\n        refs.textures = [];\n        refs.buffers.forEach(function (buffer) {\n            gl.deleteBuffer(buffer);\n        });\n        refs.buffers = [];\n        gl.deleteProgram(this.program);\n        // shrink the canvas to reduce memory usage until it is garbage collected\n        gl.canvas.width = 1;\n        gl.canvas.height = 1;\n    };\n    return WebglCanvas;\n}());\nexport { WebglCanvas };\n","import { WavEncoder } from '../encoders/wav';\nvar AudioTrack = /** @class */ (function () {\n    function AudioTrack(id) {\n        this.playbackRate = 1;\n        this.id = id;\n        this.channelCount = 1;\n        this.bitsPerSample = 16;\n        this.sampleRate = 0;\n        this.audio = document.createElement('audio');\n        this.audio.preload = 'auto';\n        this.isActive = false;\n    }\n    AudioTrack.prototype.set = function (pcmData, playbackRate) {\n        // the HTML5 audio element supports PCM audio if it's in a WAV wrapper\n        var wav = new WavEncoder(this.sampleRate * playbackRate, this.channelCount, this.bitsPerSample);\n        wav.writeFrames(pcmData);\n        this.url = window.URL.createObjectURL(wav.getBlob());\n        // use the blob url for the audio element\n        this.audio.src = this.url;\n        this.isActive = true;\n        this.playbackRate = playbackRate;\n        this.length = pcmData.length;\n    };\n    Object.defineProperty(AudioTrack.prototype, \"duration\", {\n        get: function () {\n            return this.audio.duration;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AudioTrack.prototype.unset = function () {\n        if (this.isActive) {\n            window.URL.revokeObjectURL(this.url);\n            this.audio.src = '';\n            this.audio.load();\n            this.isActive = false;\n            this.playbackRate = 1;\n            this.length = null;\n        }\n    };\n    AudioTrack.prototype.start = function (offset) {\n        if (offset === void 0) { offset = 0; }\n        if (this.isActive) {\n            this.audio.currentTime = offset;\n            this.audio.play();\n        }\n    };\n    AudioTrack.prototype.stop = function () {\n        if (this.isActive) {\n            this.audio.pause();\n        }\n    };\n    return AudioTrack;\n}());\nexport { AudioTrack };\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { parseSource } from '../parsers';\nimport { AudioTrack } from './audio';\nimport { WebglCanvas, TextureType } from '../webgl';\n/** flipnote player API, based on HTMLMediaElement (https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement) */\nvar Player = /** @class */ (function () {\n    function Player(el, width, height) {\n        this.loop = false;\n        this.paused = true;\n        this.duration = 0;\n        this.isOpen = false;\n        this.events = {};\n        this._frame = -1;\n        this._time = 0;\n        this.hasPlaybackStarted = false;\n        this.wasPlaying = false;\n        this.isSeeking = false;\n        // if `el` is a string, use it to select an Element, else assume it's an element\n        el = ('string' == typeof el) ? document.querySelector(el) : el;\n        this.canvas = new WebglCanvas(el, width, height);\n        this.el = this.canvas.el;\n        this.customPalette = null;\n        this.audioTracks = [\n            new AudioTrack('se1'),\n            new AudioTrack('se2'),\n            new AudioTrack('se3'),\n            new AudioTrack('se4'),\n            new AudioTrack('bgm'),\n        ];\n    }\n    Object.defineProperty(Player.prototype, \"currentFrame\", {\n        get: function () {\n            return this._frame;\n        },\n        set: function (frameIndex) {\n            this.setFrame(frameIndex);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"currentTime\", {\n        get: function () {\n            return this.isOpen ? this._time : null;\n        },\n        set: function (value) {\n            if ((this.isOpen) && (value <= this.duration) && (value >= 0)) {\n                this.setFrame(Math.round(value / (1 / this.framerate)));\n                this._time = value;\n                this.emit('progress', this.progress);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"progress\", {\n        get: function () {\n            return this.isOpen ? (this.currentTime / this.duration) * 100 : 0;\n        },\n        set: function (value) {\n            this.currentTime = this.duration * (value / 100);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"volume\", {\n        get: function () {\n            return this.audioTracks[3].audio.volume;\n        },\n        set: function (value) {\n            for (var i = 0; i < this.audioTracks.length; i++) {\n                this.audioTracks[i].audio.volume = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"muted\", {\n        get: function () {\n            return this.audioTracks[3].audio.muted;\n        },\n        set: function (value) {\n            for (var i = 0; i < this.audioTracks.length; i++) {\n                this.audioTracks[i].audio.muted = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"framerate\", {\n        get: function () {\n            return this.note.framerate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"frameCount\", {\n        get: function () {\n            return this.note.frameCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"frameSpeed\", {\n        get: function () {\n            return this.note.frameSpeed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"audiorate\", {\n        get: function () {\n            return (1 / this.note.bgmrate) / (1 / this.note.framerate);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Player.prototype.open = function (source) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (this.isOpen)\n                    this.close();\n                return [2 /*return*/, parseSource(source)\n                        .then(function (note) {\n                        _this.load(note);\n                    })\n                        .catch(function (err) {\n                        console.error('Error loading Flipnote:', err);\n                    })];\n            });\n        });\n    };\n    Player.prototype.close = function () {\n        this.pause();\n        this.note = null;\n        this.isOpen = false;\n        this.paused = true;\n        this.loop = null;\n        this.meta = null;\n        this._frame = null;\n        this._time = null;\n        this.duration = null;\n        this.loop = null;\n        for (var i = 0; i < this.audioTracks.length; i++) {\n            this.audioTracks[i].unset();\n        }\n        this.seFlags = null;\n        this.hasPlaybackStarted = null;\n        this.canvas.clear();\n    };\n    Player.prototype.load = function (note) {\n        this.note = note;\n        this.meta = note.meta;\n        this.type = note.type;\n        this.loop = note.meta.loop;\n        this.duration = (this.note.frameCount) * (1 / this.note.framerate);\n        this.paused = true;\n        this.isOpen = true;\n        this.audioTracks.forEach(function (track) {\n            track.sampleRate = note.sampleRate;\n        });\n        if (this.customPalette) {\n            this.setPalette(this.customPalette);\n        }\n        if (this.note.hasAudioTrack(1))\n            this.audioTracks[0].set(this.note.decodeAudio('se1'), 1);\n        if (this.note.hasAudioTrack(2))\n            this.audioTracks[1].set(this.note.decodeAudio('se2'), 1);\n        if (this.note.hasAudioTrack(3))\n            this.audioTracks[2].set(this.note.decodeAudio('se3'), 1);\n        if (this.type === 'KWZ' && this.note.hasAudioTrack(4))\n            this.audioTracks[3].set(this.note.decodeAudio('se4'), 1);\n        if (this.note.hasAudioTrack(0))\n            this.audioTracks[4].set(this.note.decodeAudio('bgm'), this.audiorate);\n        this.seFlags = this.note.decodeSoundFlags();\n        this.hasPlaybackStarted = false;\n        this.layerVisibility = {\n            1: true,\n            2: true,\n            3: true\n        };\n        this.canvas.setInputSize(note.width, note.height);\n        this.canvas.setLayerType(this.type === 'PPM' ? TextureType.Alpha : TextureType.LuminanceAlpha);\n        this.setFrame(this.note.thumbFrameIndex);\n        this._time = 0;\n        this.emit('load');\n    };\n    Player.prototype.play = function () {\n        var _this = this;\n        if ((!this.isOpen) || (!this.paused))\n            return null;\n        if ((!this.hasPlaybackStarted) || ((!this.loop) && (this.currentFrame == this.frameCount - 1))) {\n            this._time = 0;\n        }\n        this.paused = false;\n        this.playBgm();\n        var start = (performance.now() / 1000) - this.currentTime;\n        var loop = function (timestamp) {\n            if (_this.paused) { // break loop if paused is set to true\n                _this.stopAudio();\n                return null;\n            }\n            var time = timestamp / 1000;\n            var progress = time - start;\n            if (progress > _this.duration) {\n                if (_this.loop) {\n                    _this.currentTime = 0;\n                    _this.playBgm();\n                    start = time;\n                    _this.emit('playback:loop');\n                }\n                else {\n                    _this.pause();\n                    _this.emit('playback:end');\n                }\n            }\n            else {\n                _this.currentTime = progress;\n            }\n            requestAnimationFrame(loop);\n        };\n        requestAnimationFrame(loop);\n        this.hasPlaybackStarted = true;\n        this.emit('playback:start');\n    };\n    Player.prototype.pause = function () {\n        if ((!this.isOpen) || (this.paused))\n            return null;\n        this.paused = true;\n        this.stopAudio();\n        this.emit('playback:stop');\n    };\n    Player.prototype.setFrame = function (frameIndex) {\n        if ((this.isOpen) && (frameIndex !== this.currentFrame)) {\n            // clamp frame index\n            frameIndex = Math.max(0, Math.min(Math.floor(frameIndex), this.frameCount - 1));\n            this.drawFrame(frameIndex);\n            this._frame = frameIndex;\n            if (this.paused) {\n                this._time = frameIndex * (1 / this.framerate);\n                this.emit('progress', this.progress);\n            }\n            else {\n                this.playFrameSe(frameIndex);\n            }\n            this.emit('frame:update', this.currentFrame);\n        }\n    };\n    Player.prototype.nextFrame = function () {\n        if ((this.loop) && (this.currentFrame >= this.frameCount - 1)) {\n            this.currentFrame = 0;\n        }\n        else {\n            this.currentFrame += 1;\n        }\n    };\n    Player.prototype.prevFrame = function () {\n        if ((this.loop) && (this.currentFrame <= 0)) {\n            this.currentFrame = this.frameCount - 1;\n        }\n        else {\n            this.currentFrame -= 1;\n        }\n    };\n    Player.prototype.lastFrame = function () {\n        this.currentFrame = this.frameCount - 1;\n    };\n    Player.prototype.firstFrame = function () {\n        this.currentFrame = 0;\n    };\n    Player.prototype.thumbnailFrame = function () {\n        this.currentFrame = this.note.thumbFrameIndex;\n    };\n    Player.prototype.startSeek = function () {\n        if (!this.isSeeking) {\n            this.wasPlaying = !this.paused;\n            this.pause();\n            this.isSeeking = true;\n        }\n    };\n    Player.prototype.seek = function (progress) {\n        if (this.isSeeking) {\n            this.progress = progress;\n        }\n    };\n    Player.prototype.endSeek = function () {\n        if ((this.isSeeking) && (this.wasPlaying === true)) {\n            this.play();\n        }\n        this.wasPlaying = false;\n        this.isSeeking = false;\n    };\n    Player.prototype.drawFrame = function (frameIndex) {\n        var _this = this;\n        var width = this.note.width;\n        var height = this.note.height;\n        var colors = this.note.getFramePalette(frameIndex);\n        var layerBuffers = this.note.decodeFrame(frameIndex);\n        this.canvas.setPaperColor(colors[0]);\n        this.canvas.clear();\n        if (this.note.type === 'PPM') {\n            if (this.layerVisibility[2]) {\n                this.canvas.drawLayer(layerBuffers[1], width, height, colors[2], [0, 0, 0, 0]);\n            }\n            if (this.layerVisibility[1]) {\n                this.canvas.drawLayer(layerBuffers[0], width, height, colors[1], [0, 0, 0, 0]);\n            }\n        }\n        else if (this.note.type === 'KWZ') {\n            // loop through each layer\n            this.note.getLayerOrder(frameIndex).forEach(function (layerIndex) {\n                // only draw layer if it's visible\n                if (_this.layerVisibility[layerIndex + 1]) {\n                    _this.canvas.drawLayer(layerBuffers[layerIndex], width, height, colors[layerIndex * 2 + 1], colors[layerIndex * 2 + 2]);\n                }\n            });\n        }\n    };\n    Player.prototype.forceUpdate = function () {\n        if (this.isOpen) {\n            this.drawFrame(this.currentFrame);\n        }\n    };\n    Player.prototype.playFrameSe = function (frameIndex) {\n        var flags = this.seFlags[frameIndex];\n        for (var i = 0; i < flags.length; i++) {\n            if (flags[i] && this.audioTracks[i].isActive)\n                this.audioTracks[i].start();\n        }\n    };\n    Player.prototype.playBgm = function () {\n        this.audioTracks[4].start(this.currentTime);\n    };\n    Player.prototype.stopAudio = function () {\n        for (var i = 0; i < this.audioTracks.length; i++) {\n            this.audioTracks[i].stop();\n        }\n    };\n    Player.prototype.resize = function (width, height) {\n        this.canvas.resize(width, height);\n        this.forceUpdate();\n    };\n    Player.prototype.setLayerVisibility = function (frameIndex, value) {\n        this.layerVisibility[frameIndex] = value;\n        this.forceUpdate();\n    };\n    Player.prototype.setPalette = function (palette) {\n        this.customPalette = palette;\n        this.note.palette = palette;\n        this.forceUpdate();\n    };\n    Player.prototype.on = function (eventType, callback) {\n        var events = this.events;\n        (events[eventType] || (events[eventType] = [])).push(callback);\n    };\n    Player.prototype.off = function (eventType, callback) {\n        var callbackList = this.events[eventType];\n        if (callbackList)\n            callbackList.splice(callbackList.indexOf(callback), 1);\n    };\n    Player.prototype.emit = function (eventType) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var callbackList = this.events[eventType] || [];\n        for (var i = 0; i < callbackList.length; i++) {\n            callbackList[i].apply(null, args);\n        }\n    };\n    Player.prototype.clearEvents = function () {\n        this.events = {};\n    };\n    Player.prototype.destroy = function () {\n        this.close();\n        this.canvas.destroy();\n    };\n    return Player;\n}());\nexport { Player };\n","/*\n  LZWEncoder.js\n\n  Authors\n  Kevin Weiner (original Java version - kweiner@fmsware.com)\n  Thibault Imbert (AS3 version - bytearray.org)\n  Johan Nordberg (JS version - code@johan-nordberg.com)\n  James Daniel (ES6/TS version)\n\n  Acknowledgements\n  GIFCOMPR.C - GIF Image compression routines\n  Lempel-Ziv compression based on 'compress'. GIF modifications by\n  David Rowley (mgardi@watdcsu.waterloo.edu)\n  GIF Image compression - modified 'compress'\n  Based on: compress.c - File compression ala IEEE Computer, June 1984.\n  By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\n  Jim McKie (decvax!mcvax!jim)\n  Steve Davies (decvax!vax135!petsd!peora!srd)\n  Ken Turkowski (decvax!decwrl!turtlevax!ken)\n  James A. Woods (decvax!ihnp4!ames!jaw)\n  Joe Orost (decvax!vax135!petsd!joe)\n*/\nvar EOF = -1;\nvar BITS = 12;\nvar HSIZE = 5003; // 80% occupancy\nvar masks = [\n    0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F,\n    0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF,\n    0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF\n];\nvar LZWEncoder = /** @class */ (function () {\n    function LZWEncoder(width, height, pixels, colorDepth) {\n        this.accum = new Uint8Array(256);\n        this.htab = new Int32Array(HSIZE);\n        this.codetab = new Int32Array(HSIZE);\n        this.cur_accum = 0;\n        this.cur_bits = 0;\n        this.curPixel = 0;\n        this.free_ent = 0; // first unused entry\n        // block compression parameters -- after all codes are used up,\n        // and compression rate changes, start over.\n        this.clear_flg = false;\n        // Algorithm: use open addressing double hashing (no chaining) on the\n        // prefix code / next character combination. We do a variant of Knuth's\n        // algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\n        // secondary probe. Here, the modular division first probe is gives way\n        // to a faster exclusive-or manipulation. Also do block compression with\n        // an adaptive reset, whereby the code table is cleared when the compression\n        // ratio decreases, but after the table fills. The variable-length output\n        // codes are re-sized at this point, and a special CLEAR code is generated\n        // for the decompressor. Late addition: construct the table according to\n        // file size for noticeable speed improvement on small files. Please direct\n        // questions about this implementation to ames!jaw.\n        this.g_init_bits = undefined;\n        this.ClearCode = undefined;\n        this.EOFCode = undefined;\n        this.width = width;\n        this.height = height;\n        this.pixels = pixels;\n        this.colorDepth = colorDepth;\n        this.initCodeSize = Math.max(2, this.colorDepth);\n        this.accum = new Uint8Array(256);\n        this.htab = new Int32Array(HSIZE);\n        this.codetab = new Int32Array(HSIZE);\n        this.cur_accum = 0;\n        this.cur_bits = 0;\n        this.a_count;\n        this.remaining;\n        this.curPixel = 0;\n        this.free_ent = 0; // first unused entry\n        this.maxcode;\n        // block compression parameters -- after all codes are used up,\n        // and compression rate changes, start over.\n        this.clear_flg = false;\n        // Algorithm: use open addressing double hashing (no chaining) on the\n        // prefix code / next character combination. We do a variant of Knuth's\n        // algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\n        // secondary probe. Here, the modular division first probe is gives way\n        // to a faster exclusive-or manipulation. Also do block compression with\n        // an adaptive reset, whereby the code table is cleared when the compression\n        // ratio decreases, but after the table fills. The variable-length output\n        // codes are re-sized at this point, and a special CLEAR code is generated\n        // for the decompressor. Late addition: construct the table according to\n        // file size for noticeable speed improvement on small files. Please direct\n        // questions about this implementation to ames!jaw.\n        this.g_init_bits = undefined;\n        this.ClearCode = undefined;\n        this.EOFCode = undefined;\n    }\n    // Add a character to the end of the current packet, and if it is 254\n    // characters, flush the packet to disk.\n    LZWEncoder.prototype.char_out = function (c, outs) {\n        this.accum[this.a_count++] = c;\n        if (this.a_count >= 254)\n            this.flush_char(outs);\n    };\n    // Clear out the hash table\n    // table clear for block compress\n    LZWEncoder.prototype.cl_block = function (outs) {\n        this.cl_hash(HSIZE);\n        this.free_ent = this.ClearCode + 2;\n        this.clear_flg = true;\n        this.output(this.ClearCode, outs);\n    };\n    // Reset code table\n    LZWEncoder.prototype.cl_hash = function (hsize) {\n        for (var i = 0; i < hsize; ++i)\n            this.htab[i] = -1;\n    };\n    LZWEncoder.prototype.compress = function (init_bits, outs) {\n        var fcode, c, i, ent, disp, hsize_reg, hshift;\n        // Set up the globals: this.g_init_bits - initial number of bits\n        this.g_init_bits = init_bits;\n        // Set up the necessary values\n        this.clear_flg = false;\n        this.n_bits = this.g_init_bits;\n        this.maxcode = this.get_maxcode(this.n_bits);\n        this.ClearCode = 1 << (init_bits - 1);\n        this.EOFCode = this.ClearCode + 1;\n        this.free_ent = this.ClearCode + 2;\n        this.a_count = 0; // clear packet\n        ent = this.nextPixel();\n        hshift = 0;\n        for (fcode = HSIZE; fcode < 65536; fcode *= 2)\n            ++hshift;\n        hshift = 8 - hshift; // set hash code range bound\n        hsize_reg = HSIZE;\n        this.cl_hash(hsize_reg); // clear hash table\n        this.output(this.ClearCode, outs);\n        outer_loop: while ((c = this.nextPixel()) != EOF) {\n            fcode = (c << BITS) + ent;\n            i = (c << hshift) ^ ent; // xor hashing\n            if (this.htab[i] === fcode) {\n                ent = this.codetab[i];\n                continue;\n            }\n            else if (this.htab[i] >= 0) { // non-empty slot\n                disp = hsize_reg - i; // secondary hash (after G. Knott)\n                if (i === 0)\n                    disp = 1;\n                do {\n                    if ((i -= disp) < 0)\n                        i += hsize_reg;\n                    if (this.htab[i] === fcode) {\n                        ent = this.codetab[i];\n                        continue outer_loop;\n                    }\n                } while (this.htab[i] >= 0);\n            }\n            this.output(ent, outs);\n            ent = c;\n            if (this.free_ent < 1 << BITS) {\n                this.codetab[i] = this.free_ent++; // code -> hasthis.htable\n                this.htab[i] = fcode;\n            }\n            else {\n                this.cl_block(outs);\n            }\n        }\n        // Put out the final code.\n        this.output(ent, outs);\n        this.output(this.EOFCode, outs);\n    };\n    LZWEncoder.prototype.encode = function (outs) {\n        outs.writeByte(this.initCodeSize); // write 'initial code size' byte\n        this.remaining = this.width * this.height; // reset navigation variables\n        this.curPixel = 0;\n        this.compress(this.initCodeSize + 1, outs); // compress and write the pixel data\n        outs.writeByte(0); // write block terminator\n    };\n    // Flush the packet to disk, and reset the this.accumulator\n    LZWEncoder.prototype.flush_char = function (outs) {\n        if (this.a_count > 0) {\n            outs.writeByte(this.a_count);\n            outs.writeBytes(this.accum, 0, this.a_count);\n            this.a_count = 0;\n        }\n    };\n    LZWEncoder.prototype.get_maxcode = function (n_bits) {\n        return (1 << n_bits) - 1;\n    };\n    // Return the next pixel from the image\n    LZWEncoder.prototype.nextPixel = function () {\n        if (this.remaining === 0)\n            return EOF;\n        --this.remaining;\n        var pix = this.pixels[this.curPixel++];\n        return pix & 0xff;\n    };\n    LZWEncoder.prototype.output = function (code, outs) {\n        this.cur_accum &= masks[this.cur_bits];\n        if (this.cur_bits > 0)\n            this.cur_accum |= (code << this.cur_bits);\n        else\n            this.cur_accum = code;\n        this.cur_bits += this.n_bits;\n        while (this.cur_bits >= 8) {\n            this.char_out((this.cur_accum & 0xff), outs);\n            this.cur_accum >>= 8;\n            this.cur_bits -= 8;\n        }\n        // If the next entry is going to be too big for the code size,\n        // then increase it, if possible.\n        if (this.free_ent > this.maxcode || this.clear_flg) {\n            if (this.clear_flg) {\n                this.maxcode = this.get_maxcode(this.n_bits = this.g_init_bits);\n                this.clear_flg = false;\n            }\n            else {\n                ++this.n_bits;\n                if (this.n_bits == BITS)\n                    this.maxcode = 1 << BITS;\n                else\n                    this.maxcode = this.get_maxcode(this.n_bits);\n            }\n        }\n        if (code == this.EOFCode) {\n            // At EOF, write the rest of the buffer.\n            while (this.cur_bits > 0) {\n                this.char_out((this.cur_accum & 0xff), outs);\n                this.cur_accum >>= 8;\n                this.cur_bits -= 8;\n            }\n            this.flush_char(outs);\n        }\n    };\n    return LZWEncoder;\n}());\nexport { LZWEncoder };\n","import { DataStream, ByteArray } from '../utils';\nimport { LZWEncoder } from './lzw';\nvar GifEncoder = /** @class */ (function () {\n    function GifEncoder(width, height) {\n        this.delay = 100;\n        // -1 = no repeat, 0 = forever. anything else is repeat count\n        this.repeat = -1;\n        this.colorDepth = 8;\n        this.palette = [];\n        this.width = width;\n        this.height = height;\n        this.data = new ByteArray();\n    }\n    GifEncoder.fromFlipnote = function (flipnote) {\n        var gif = new GifEncoder(flipnote.width, flipnote.height);\n        gif.palette = flipnote.globalPalette;\n        gif.delay = 100 / flipnote.framerate;\n        gif.repeat = flipnote.meta.loop ? -1 : 0;\n        gif.init();\n        for (var frameIndex = 0; frameIndex < flipnote.frameCount; frameIndex++) {\n            gif.writeFrame(flipnote.getFramePixels(frameIndex, true));\n        }\n        return gif;\n    };\n    GifEncoder.fromFlipnoteFrame = function (flipnote, frameIndex) {\n        var gif = new GifEncoder(flipnote.width, flipnote.height);\n        gif.palette = flipnote.globalPalette;\n        gif.delay = 100 / flipnote.framerate;\n        gif.repeat = flipnote.meta.loop ? -1 : 0;\n        gif.init();\n        gif.writeFrame(flipnote.getFramePixels(frameIndex, true));\n        return gif;\n    };\n    GifEncoder.prototype.init = function () {\n        var paletteSize = this.palette.length;\n        for (var p = 1; 1 << p < paletteSize; p += 1) {\n            continue;\n        }\n        this.colorDepth = p;\n        this.writeHeader();\n        this.writeColorTable();\n        this.writeNetscapeExt();\n    };\n    GifEncoder.prototype.writeHeader = function () {\n        var header = new DataStream(new ArrayBuffer(13));\n        header.writeUtf8('GIF89a');\n        // Logical Screen Descriptor\n        header.writeUint16(this.width);\n        header.writeUint16(this.height);\n        header.writeUint8(0x80 | // 1 : global color table flag = 1 (gct used)\n            (this.colorDepth - 1) // 6-8 : gct size\n        );\n        header.writeUint8(0);\n        header.writeUint8(0);\n        this.data.writeBytes(new Uint8Array(header.buffer));\n    };\n    GifEncoder.prototype.writeColorTable = function () {\n        var palette = new Uint8Array(3 * Math.pow(2, this.colorDepth));\n        for (var index = 0, offset = 0; index < this.palette.length; index += 1, offset += 3) {\n            palette.set(this.palette[index], offset);\n        }\n        this.data.writeBytes(palette);\n    };\n    GifEncoder.prototype.writeGraphicsControlExt = function () {\n        var graphicsControlExt = new DataStream(new ArrayBuffer(8));\n        graphicsControlExt.writeBytes([\n            0x21,\n            0xF9,\n            4,\n            0 // bitfield\n        ]);\n        graphicsControlExt.writeUint16(this.delay); // loop flag\n        graphicsControlExt.writeBytes([\n            0,\n            0\n        ]);\n        this.data.writeBytes(new Uint8Array(graphicsControlExt.buffer));\n    };\n    GifEncoder.prototype.writeNetscapeExt = function () {\n        var netscapeExt = new DataStream(new ArrayBuffer(19));\n        netscapeExt.writeBytes([\n            0x21,\n            0xFF,\n            11,\n        ]);\n        netscapeExt.writeUtf8('NETSCAPE2.0');\n        netscapeExt.writeUint8(3); // subblock size\n        netscapeExt.writeUint8(1); // loop subblock id\n        netscapeExt.writeUint16(this.repeat); // loop flag\n        this.data.writeBytes(new Uint8Array(netscapeExt.buffer));\n    };\n    GifEncoder.prototype.writeImageDesc = function () {\n        var desc = new DataStream(new ArrayBuffer(10));\n        desc.writeUint8(0x2C);\n        desc.writeUint16(0); // image left\n        desc.writeUint16(0); // image top\n        desc.writeUint16(this.width);\n        desc.writeUint16(this.height);\n        desc.writeUint8(0);\n        this.data.writeBytes(new Uint8Array(desc.buffer));\n    };\n    GifEncoder.prototype.writePixels = function (pixels) {\n        var lzw = new LZWEncoder(this.width, this.height, pixels, this.colorDepth);\n        lzw.encode(this.data);\n    };\n    GifEncoder.prototype.writeFrame = function (pixels) {\n        this.writeGraphicsControlExt();\n        this.writeImageDesc();\n        this.writePixels(pixels);\n    };\n    GifEncoder.prototype.getBuffer = function () {\n        return this.data.getBuffer();\n    };\n    GifEncoder.prototype.getBlob = function () {\n        return new Blob([this.getBuffer()], { type: 'image/gif' });\n    };\n    GifEncoder.prototype.getUrl = function () {\n        return window.URL.createObjectURL(this.getBlob());\n    };\n    GifEncoder.prototype.getImage = function () {\n        var img = new Image(this.width, this.height);\n        img.src = this.getUrl();\n        return img;\n    };\n    return GifEncoder;\n}());\nexport { GifEncoder };\n","import * as utils from './utils';\nimport { parseSource, KwzParser, PpmParser } from './parsers';\nimport { Player } from './player';\nimport { GifEncoder, WavEncoder } from './encoders';\n// bitmap encoder is deprecated in favor of gif\n// import { BitmapEncoder } from './encoders';\nexport default {\n    version: VERSION,\n    player: Player,\n    parseSource: parseSource,\n    kwzParser: KwzParser,\n    ppmParser: PpmParser,\n    // bitmapEncoder: BitmapEncoder,\n    gifEncoder: GifEncoder,\n    wavEncoder: WavEncoder,\n    utils: utils,\n};\n"],"sourceRoot":""}
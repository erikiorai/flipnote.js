{"version":3,"file":"flipnote.min.js.map","sources":["../src/parsers/types.ts","../node_modules/tslib/tslib.es6.js","../src/utils/ByteArray.ts","../src/utils/hex.ts","../src/utils/DataStream.ts","../src/utils/math.ts","../src/utils/err.ts","../src/utils/env.ts","../src/utils/saveData.ts","../src/parsers/BaseParser.ts","../src/parsers/flipnoteStudioId/ppm.ts","../src/parsers/common/audio.ts","../src/parsers/common/datetime.ts","../src/parsers/common/rsa.ts","../src/parsers/PpmParser.ts","../src/parsers/flipnoteStudioId/kwz.ts","../src/parsers/KwzParser.ts","../src/parsers/flipnoteStudioId/common.ts","../src/parsers/filename/ppm.ts","../src/parsers/filename/kwz.ts","../src/parsers/playlist/Base.ts","../src/parsers/playlist/PpmPlaylist.ts","../src/parsers/playlist/KwzPlaylist.ts","../src/loaders/url.ts","../src/loaders/file.ts","../src/loaders/blob.ts","../src/loaders/nodeBuffer.ts","../src/loaders/arrayBuffer.ts","../src/loaders/index.ts","../src/parsers/playlist/parse.ts","../src/parseSource.ts","../src/player/PlayerEvent.ts","../src/player/playerUtils.ts","../src/renderers/CanvasInterface.ts","../node_modules/twgl.js/dist/5.x/twgl-full.module.js","../src/renderers/WebGlCanvas.ts","../src/renderers/Html5Canvas.ts","../src/renderers/UniversalCanvas.ts","../src/webaudio/WebAudioPlayer.ts","../src/player/Player.ts","../src/utils/promises.ts","../src/encoders/EncoderBase.ts","../src/encoders/LwzCompressor.ts","../src/encoders/GifImage.ts","../src/encoders/WavAudio.ts","../src/components/PlayerMixin.ts","../src/flipnote.ts"],"sourcesContent":[null,"/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    function next() {\r\n        while (env.stack.length) {\r\n            var rec = env.stack.pop();\r\n            try {\r\n                var result = rec.dispose && rec.dispose.call(rec.value);\r\n                if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n};\r\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/* @license twgl.js 5.5.4 Copyright (c) 2015, Gregg Tavares All Rights Reserved.\nAvailable via the MIT license.\nsee: http://github.com/greggman/twgl.js for details */\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n *\n * Vec3 math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new Vec3. In other words you can do this\n *\n *     var v = v3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.\n *\n * or\n *\n *     var v = v3.create();\n *     v3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any vector as the destination. So for example\n *\n *     v3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n * @module twgl/v3\n */\n\nlet VecType = Float32Array;\n\n/**\n * A JavaScript array with 3 values or a Float32Array with 3 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/v3.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Vec3\n * @memberOf module:twgl/v3\n */\n\n/**\n * Sets the type this library creates for a Vec3\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Vec3\n * @memberOf module:twgl/v3\n */\nfunction setDefaultType$1(ctor) {\n  const oldType = VecType;\n  VecType = ctor;\n  return oldType;\n}\n\n/**\n * Creates a vec3; may be called with x, y, z to set initial values.\n * @param {number} [x] Initial x value.\n * @param {number} [y] Initial y value.\n * @param {number} [z] Initial z value.\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\nfunction create$1(x, y, z) {\n  const dst = new VecType(3);\n  if (x) {\n    dst[0] = x;\n  }\n  if (y) {\n    dst[1] = y;\n  }\n  if (z) {\n    dst[2] = z;\n  }\n  return dst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector tha tis the sum of a and b.\n * @memberOf module:twgl/v3\n */\nfunction add(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + b[0];\n  dst[1] = a[1] + b[1];\n  dst[2] = a[2] + b[2];\n\n  return dst;\n}\n\n/**\n * Subtracts two vectors.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector that is the difference of a and b.\n * @memberOf module:twgl/v3\n */\nfunction subtract(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] - b[0];\n  dst[1] = a[1] - b[1];\n  dst[2] = a[2] - b[2];\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {number} t Interpolation coefficient.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The linear interpolated result.\n * @memberOf module:twgl/v3\n */\nfunction lerp(a, b, t, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t * (b[0] - a[0]);\n  dst[1] = a[1] + t * (b[1] - a[1]);\n  dst[2] = a[2] + t * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} t Interpolation coefficients vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} the linear interpolated result.\n * @memberOf module:twgl/v3\n */\nfunction lerpV(a, b, t, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t[0] * (b[0] - a[0]);\n  dst[1] = a[1] + t[1] * (b[1] - a[1]);\n  dst[2] = a[2] + t[2] * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The max components vector.\n * @memberOf module:twgl/v3\n */\nfunction max(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.max(a[0], b[0]);\n  dst[1] = Math.max(a[1], b[1]);\n  dst[2] = Math.max(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The min components vector.\n * @memberOf module:twgl/v3\n */\nfunction min(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.min(a[0], b[0]);\n  dst[1] = Math.min(a[1], b[1]);\n  dst[2] = Math.min(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\nfunction mulScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] * k;\n  dst[1] = v[1] * k;\n  dst[2] = v[2] * k;\n\n  return dst;\n}\n\n/**\n * Divides a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\nfunction divScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] / k;\n  dst[1] = v[1] / k;\n  dst[2] = v[2] / k;\n\n  return dst;\n}\n\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of a cross b.\n * @memberOf module:twgl/v3\n */\nfunction cross(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  const t1 = a[2] * b[0] - a[0] * b[2];\n  const t2 = a[0] * b[1] - a[1] * b[0];\n  dst[0] = a[1] * b[2] - a[2] * b[1];\n  dst[1] = t1;\n  dst[2] = t2;\n\n  return dst;\n}\n\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @return {number} dot product\n * @memberOf module:twgl/v3\n */\nfunction dot(a, b) {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n}\n\n/**\n * Computes the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} length of vector.\n * @memberOf module:twgl/v3\n */\nfunction length$1(v) {\n  return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n}\n\n/**\n * Computes the square of the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} square of the length of vector.\n * @memberOf module:twgl/v3\n */\nfunction lengthSq(v) {\n  return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\n}\n\n/**\n * Computes the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} distance between a and b\n * @memberOf module:twgl/v3\n */\nfunction distance(a, b) {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n\n/**\n * Computes the square of the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} square of the distance between a and b\n * @memberOf module:twgl/v3\n */\nfunction distanceSq(a, b) {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return dx * dx + dy * dy + dz * dz;\n}\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param {module:twgl/v3.Vec3} a The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The normalized vector.\n * @memberOf module:twgl/v3\n */\nfunction normalize(a, dst) {\n  dst = dst || new VecType(3);\n\n  const lenSq = a[0] * a[0] + a[1] * a[1] + a[2] * a[2];\n  const len = Math.sqrt(lenSq);\n  if (len > 0.00001) {\n    dst[0] = a[0] / len;\n    dst[1] = a[1] / len;\n    dst[2] = a[2] / len;\n  } else {\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n  }\n\n  return dst;\n}\n\n/**\n * Negates a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} -v.\n * @memberOf module:twgl/v3\n */\nfunction negate$1(v, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = -v[0];\n  dst[1] = -v[1];\n  dst[2] = -v[2];\n\n  return dst;\n}\n\n/**\n * Copies a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A copy of v.\n * @memberOf module:twgl/v3\n */\nfunction copy$1(v, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0];\n  dst[1] = v[1];\n  dst[2] = v[2];\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of products of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\nfunction multiply$1(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] * b[0];\n  dst[1] = a[1] * b[1];\n  dst[2] = a[2] * b[2];\n\n  return dst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of quotients of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\nfunction divide(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] / b[0];\n  dst[1] = a[1] / b[1];\n  dst[2] = a[2] / b[2];\n\n  return dst;\n}\n\nvar v3 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  add: add,\n  copy: copy$1,\n  create: create$1,\n  cross: cross,\n  distance: distance,\n  distanceSq: distanceSq,\n  divide: divide,\n  divScalar: divScalar,\n  dot: dot,\n  lerp: lerp,\n  lerpV: lerpV,\n  length: length$1,\n  lengthSq: lengthSq,\n  max: max,\n  min: min,\n  mulScalar: mulScalar,\n  multiply: multiply$1,\n  negate: negate$1,\n  normalize: normalize,\n  setDefaultType: setDefaultType$1,\n  subtract: subtract\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * 4x4 Matrix math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = m4.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = m4.create();\n *     m4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = m4.identity();\n *     const trans = m4.translation([1, 2, 3]);\n *     m4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n * @module twgl/m4\n */\nlet MatType = Float32Array;\n\n/**\n * A JavaScript array with 16 values or a Float32Array with 16 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/m4.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Mat4\n * @memberOf module:twgl/m4\n */\n\n/**\n * Sets the type this library creates for a Mat4\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Mat4\n * @memberOf module:twgl/m4\n */\nfunction setDefaultType(ctor) {\n  const oldType = MatType;\n  MatType = ctor;\n  return oldType;\n}\n\n/**\n * Negates a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} -m.\n * @memberOf module:twgl/m4\n */\nfunction negate(m, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = -m[ 0];\n  dst[ 1] = -m[ 1];\n  dst[ 2] = -m[ 2];\n  dst[ 3] = -m[ 3];\n  dst[ 4] = -m[ 4];\n  dst[ 5] = -m[ 5];\n  dst[ 6] = -m[ 6];\n  dst[ 7] = -m[ 7];\n  dst[ 8] = -m[ 8];\n  dst[ 9] = -m[ 9];\n  dst[10] = -m[10];\n  dst[11] = -m[11];\n  dst[12] = -m[12];\n  dst[13] = -m[13];\n  dst[14] = -m[14];\n  dst[15] = -m[15];\n\n  return dst;\n}\n\n/**\n * Creates a matrix.\n * @return {module:twgl/m4.Mat4} A new matrix.\n * @memberOf module:twgl/m4\n */\nfunction create() {\n  return new MatType(16).fill(0);\n}\n\n/**\n * Copies a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] The matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A copy of m.\n * @memberOf module:twgl/m4\n */\nfunction copy(m, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = m[ 0];\n  dst[ 1] = m[ 1];\n  dst[ 2] = m[ 2];\n  dst[ 3] = m[ 3];\n  dst[ 4] = m[ 4];\n  dst[ 5] = m[ 5];\n  dst[ 6] = m[ 6];\n  dst[ 7] = m[ 7];\n  dst[ 8] = m[ 8];\n  dst[ 9] = m[ 9];\n  dst[10] = m[10];\n  dst[11] = m[11];\n  dst[12] = m[12];\n  dst[13] = m[13];\n  dst[14] = m[14];\n  dst[15] = m[15];\n\n  return dst;\n}\n\n/**\n * Creates an n-by-n identity matrix.\n *\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} An n-by-n identity matrix.\n * @memberOf module:twgl/m4\n */\nfunction identity(dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Takes the transpose of a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The transpose of m.\n * @memberOf module:twgl/m4\n */\n function transpose(m, dst) {\n  dst = dst || new MatType(16);\n  if (dst === m) {\n    let t;\n\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n\n    t = m[3];\n    m[3] = m[12];\n    m[12] = t;\n\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n\n    t = m[7];\n    m[7] = m[13];\n    m[13] = t;\n\n    t = m[11];\n    m[11] = m[14];\n    m[14] = t;\n    return dst;\n  }\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  dst[ 0] = m00;\n  dst[ 1] = m10;\n  dst[ 2] = m20;\n  dst[ 3] = m30;\n  dst[ 4] = m01;\n  dst[ 5] = m11;\n  dst[ 6] = m21;\n  dst[ 7] = m31;\n  dst[ 8] = m02;\n  dst[ 9] = m12;\n  dst[10] = m22;\n  dst[11] = m32;\n  dst[12] = m03;\n  dst[13] = m13;\n  dst[14] = m23;\n  dst[15] = m33;\n\n  return dst;\n}\n\n/**\n * Computes the inverse of a 4-by-4 matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The inverse of m.\n * @memberOf module:twgl/m4\n */\nfunction inverse(m, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n  const tmp_0  = m22 * m33;\n  const tmp_1  = m32 * m23;\n  const tmp_2  = m12 * m33;\n  const tmp_3  = m32 * m13;\n  const tmp_4  = m12 * m23;\n  const tmp_5  = m22 * m13;\n  const tmp_6  = m02 * m33;\n  const tmp_7  = m32 * m03;\n  const tmp_8  = m02 * m23;\n  const tmp_9  = m22 * m03;\n  const tmp_10 = m02 * m13;\n  const tmp_11 = m12 * m03;\n  const tmp_12 = m20 * m31;\n  const tmp_13 = m30 * m21;\n  const tmp_14 = m10 * m31;\n  const tmp_15 = m30 * m11;\n  const tmp_16 = m10 * m21;\n  const tmp_17 = m20 * m11;\n  const tmp_18 = m00 * m31;\n  const tmp_19 = m30 * m01;\n  const tmp_20 = m00 * m21;\n  const tmp_21 = m20 * m01;\n  const tmp_22 = m00 * m11;\n  const tmp_23 = m10 * m01;\n\n  const t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\n      (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n  const t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\n      (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n  const t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\n      (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n  const t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\n      (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n\n  const d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n\n  dst[ 0] = d * t0;\n  dst[ 1] = d * t1;\n  dst[ 2] = d * t2;\n  dst[ 3] = d * t3;\n  dst[ 4] = d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -\n          (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\n  dst[ 5] = d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -\n          (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\n  dst[ 6] = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\n          (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\n  dst[ 7] = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\n          (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\n  dst[ 8] = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\n          (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\n  dst[ 9] = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\n          (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\n  dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\n          (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\n  dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\n          (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\n  dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\n          (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\n  dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\n          (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\n  dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\n          (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\n  dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\n          (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\n\n  return dst;\n}\n\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right\n * @param {module:twgl/m4.Mat4} a The matrix on the left.\n * @param {module:twgl/m4.Mat4} b The matrix on the right.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix product of a and b.\n * @memberOf module:twgl/m4\n */\nfunction multiply(a, b, dst) {\n  dst = dst || new MatType(16);\n\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[ 4 + 0];\n  const a11 = a[ 4 + 1];\n  const a12 = a[ 4 + 2];\n  const a13 = a[ 4 + 3];\n  const a20 = a[ 8 + 0];\n  const a21 = a[ 8 + 1];\n  const a22 = a[ 8 + 2];\n  const a23 = a[ 8 + 3];\n  const a30 = a[12 + 0];\n  const a31 = a[12 + 1];\n  const a32 = a[12 + 2];\n  const a33 = a[12 + 3];\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b03 = b[3];\n  const b10 = b[ 4 + 0];\n  const b11 = b[ 4 + 1];\n  const b12 = b[ 4 + 2];\n  const b13 = b[ 4 + 3];\n  const b20 = b[ 8 + 0];\n  const b21 = b[ 8 + 1];\n  const b22 = b[ 8 + 2];\n  const b23 = b[ 8 + 3];\n  const b30 = b[12 + 0];\n  const b31 = b[12 + 1];\n  const b32 = b[12 + 2];\n  const b33 = b[12 + 3];\n\n  dst[ 0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n  dst[ 1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n  dst[ 2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n  dst[ 3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n  dst[ 4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n  dst[ 5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n  dst[ 6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n  dst[ 7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n  dst[ 8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n  dst[ 9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n  dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n  dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n  dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n  dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n  dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n  dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n\n  return dst;\n}\n\n/**\n * Sets the translation component of a 4-by-4 matrix to the given\n * vector.\n * @param {module:twgl/m4.Mat4} a The matrix.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with translation set.\n * @memberOf module:twgl/m4\n */\nfunction setTranslation(a, v, dst) {\n  dst = dst || identity();\n  if (a !== dst) {\n    dst[ 0] = a[ 0];\n    dst[ 1] = a[ 1];\n    dst[ 2] = a[ 2];\n    dst[ 3] = a[ 3];\n    dst[ 4] = a[ 4];\n    dst[ 5] = a[ 5];\n    dst[ 6] = a[ 6];\n    dst[ 7] = a[ 7];\n    dst[ 8] = a[ 8];\n    dst[ 9] = a[ 9];\n    dst[10] = a[10];\n    dst[11] = a[11];\n  }\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The translation component of m.\n * @memberOf module:twgl/m4\n */\nfunction getTranslation(m, dst) {\n  dst = dst || create$1();\n  dst[0] = m[12];\n  dst[1] = m[13];\n  dst[2] = m[14];\n  return dst;\n}\n\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} axis The axis 0 = x, 1 = y, 2 = z;\n * @return {module:twgl/v3.Vec3} [dst] vector.\n * @return {module:twgl/v3.Vec3} The axis component of m.\n * @memberOf module:twgl/m4\n */\nfunction getAxis(m, axis, dst) {\n  dst = dst || create$1();\n  const off = axis * 4;\n  dst[0] = m[off + 0];\n  dst[1] = m[off + 1];\n  dst[2] = m[off + 2];\n  return dst;\n}\n\n/**\n * Sets an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v the axis vector\n * @param {number} axis The axis  0 = x, 1 = y, 2 = z;\n * @param {module:twgl/m4.Mat4} [dst] The matrix to set. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with axis set.\n * @memberOf module:twgl/m4\n */\nfunction setAxis(a, v, axis, dst) {\n  if (dst !== a) {\n    dst = copy(a, dst);\n  }\n  const off = axis * 4;\n  dst[off + 0] = v[0];\n  dst[off + 1] = v[1];\n  dst[off + 2] = v[2];\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 0 to 1 in the z dimension.\n * @param {number} fieldOfViewYInRadians The camera angle from top to bottom (in radians).\n * @param {number} aspect The aspect ratio width / height.\n * @param {number} zNear The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} zFar The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\nfunction perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n  dst = dst || new MatType(16);\n\n  const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n  const rangeInv = 1.0 / (zNear - zFar);\n\n  dst[0]  = f / aspect;\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = f;\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = (zNear + zFar) * rangeInv;\n  dst[11] = -1;\n\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = zNear * zFar * rangeInv * 2;\n  dst[15] = 0;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 orthogonal transformation matrix given the left, right,\n * bottom, and top dimensions of the near clipping plane as well as the\n * near and far clipping plane distances.\n * @param {number} left Left side of the near clipping plane viewport.\n * @param {number} right Right side of the near clipping plane viewport.\n * @param {number} bottom Bottom of the near clipping plane viewport.\n * @param {number} top Top of the near clipping plane viewport.\n * @param {number} near The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} far The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\nfunction ortho(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  dst[0]  = 2 / (right - left);\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = 2 / (top - bottom);\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = 2 / (near - far);\n  dst[11] = 0;\n\n  dst[12] = (right + left) / (left - right);\n  dst[13] = (top + bottom) / (bottom - top);\n  dst[14] = (far + near) / (near - far);\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n * dimension.\n * @param {number} left The x coordinate of the left plane of the box.\n * @param {number} right The x coordinate of the right plane of the box.\n * @param {number} bottom The y coordinate of the bottom plane of the box.\n * @param {number} top The y coordinate of the right plane of the box.\n * @param {number} near The negative z coordinate of the near plane of the box.\n * @param {number} far The negative z coordinate of the far plane of the box.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective projection matrix.\n * @memberOf module:twgl/m4\n */\nfunction frustum(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  const dx = (right - left);\n  const dy = (top - bottom);\n  const dz = (near - far);\n\n  dst[ 0] = 2 * near / dx;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 2 * near / dy;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = (left + right) / dx;\n  dst[ 9] = (top + bottom) / dy;\n  dst[10] = far / dz;\n  dst[11] = -1;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = near * far / dz;\n  dst[15] = 0;\n\n  return dst;\n}\n\nlet xAxis;\nlet yAxis;\nlet zAxis;\n\n/**\n * Computes a 4-by-4 look-at transformation.\n *\n * This is a matrix which positions the camera itself. If you want\n * a view matrix (a matrix which moves things in front of the camera)\n * take the inverse of this.\n *\n * @param {module:twgl/v3.Vec3} eye The position of the eye.\n * @param {module:twgl/v3.Vec3} target The position meant to be viewed.\n * @param {module:twgl/v3.Vec3} up A vector pointing up.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The look-at matrix.\n * @memberOf module:twgl/m4\n */\nfunction lookAt(eye, target, up, dst) {\n  dst = dst || new MatType(16);\n\n  xAxis = xAxis || create$1();\n  yAxis = yAxis || create$1();\n  zAxis = zAxis || create$1();\n\n  normalize(\n      subtract(eye, target, zAxis), zAxis);\n  normalize(cross(up, zAxis, xAxis), xAxis);\n  normalize(cross(zAxis, xAxis, yAxis), yAxis);\n\n  dst[ 0] = xAxis[0];\n  dst[ 1] = xAxis[1];\n  dst[ 2] = xAxis[2];\n  dst[ 3] = 0;\n  dst[ 4] = yAxis[0];\n  dst[ 5] = yAxis[1];\n  dst[ 6] = yAxis[2];\n  dst[ 7] = 0;\n  dst[ 8] = zAxis[0];\n  dst[ 9] = zAxis[1];\n  dst[10] = zAxis[2];\n  dst[11] = 0;\n  dst[12] = eye[0];\n  dst[13] = eye[1];\n  dst[14] = eye[2];\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which translates by the given vector v.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translation matrix.\n * @memberOf module:twgl/m4\n */\nfunction translation(v, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Translates the given 4-by-4 matrix by the given vector v.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translated matrix.\n * @memberOf module:twgl/m4\n */\nfunction translate(m, v, dst) {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  if (m !== dst) {\n    dst[ 0] = m00;\n    dst[ 1] = m01;\n    dst[ 2] = m02;\n    dst[ 3] = m03;\n    dst[ 4] = m10;\n    dst[ 5] = m11;\n    dst[ 6] = m12;\n    dst[ 7] = m13;\n    dst[ 8] = m20;\n    dst[ 9] = m21;\n    dst[10] = m22;\n    dst[11] = m23;\n  }\n\n  dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n  dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n  dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n  dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationX(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = c;\n  dst[ 6] = s;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = -s;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the x-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateX(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[4]  = c * m10 + s * m20;\n  dst[5]  = c * m11 + s * m21;\n  dst[6]  = c * m12 + s * m22;\n  dst[7]  = c * m13 + s * m23;\n  dst[8]  = c * m20 - s * m10;\n  dst[9]  = c * m21 - s * m11;\n  dst[10] = c * m22 - s * m12;\n  dst[11] = c * m23 - s * m13;\n\n  if (m !== dst) {\n    dst[ 0] = m[ 0];\n    dst[ 1] = m[ 1];\n    dst[ 2] = m[ 2];\n    dst[ 3] = m[ 3];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationY(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;\n  dst[ 1] = 0;\n  dst[ 2] = -s;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = s;\n  dst[ 9] = 0;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the y-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateY(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 - s * m20;\n  dst[ 1] = c * m01 - s * m21;\n  dst[ 2] = c * m02 - s * m22;\n  dst[ 3] = c * m03 - s * m23;\n  dst[ 8] = c * m20 + s * m00;\n  dst[ 9] = c * m21 + s * m01;\n  dst[10] = c * m22 + s * m02;\n  dst[11] = c * m23 + s * m03;\n\n  if (m !== dst) {\n    dst[ 4] = m[ 4];\n    dst[ 5] = m[ 5];\n    dst[ 6] = m[ 6];\n    dst[ 7] = m[ 7];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationZ(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;\n  dst[ 1] = s;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = -s;\n  dst[ 5] = c;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the z-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateZ(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 + s * m10;\n  dst[ 1] = c * m01 + s * m11;\n  dst[ 2] = c * m02 + s * m12;\n  dst[ 3] = c * m03 + s * m13;\n  dst[ 4] = c * m10 - s * m00;\n  dst[ 5] = c * m11 - s * m01;\n  dst[ 6] = c * m12 - s * m02;\n  dst[ 7] = c * m13 - s * m03;\n\n  if (m !== dst) {\n    dst[ 8] = m[ 8];\n    dst[ 9] = m[ 9];\n    dst[10] = m[10];\n    dst[11] = m[11];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A matrix which rotates angle radians\n *     around the axis.\n * @memberOf module:twgl/m4\n */\nfunction axisRotation(axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  dst[ 0] = xx + (1 - xx) * c;\n  dst[ 1] = x * y * oneMinusCosine + z * s;\n  dst[ 2] = x * z * oneMinusCosine - y * s;\n  dst[ 3] = 0;\n  dst[ 4] = x * y * oneMinusCosine - z * s;\n  dst[ 5] = yy + (1 - yy) * c;\n  dst[ 6] = y * z * oneMinusCosine + x * s;\n  dst[ 7] = 0;\n  dst[ 8] = x * z * oneMinusCosine + y * s;\n  dst[ 9] = y * z * oneMinusCosine - x * s;\n  dst[10] = zz + (1 - zz) * c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction axisRotate(m, axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  const r00 = xx + (1 - xx) * c;\n  const r01 = x * y * oneMinusCosine + z * s;\n  const r02 = x * z * oneMinusCosine - y * s;\n  const r10 = x * y * oneMinusCosine - z * s;\n  const r11 = yy + (1 - yy) * c;\n  const r12 = y * z * oneMinusCosine + x * s;\n  const r20 = x * z * oneMinusCosine + y * s;\n  const r21 = y * z * oneMinusCosine - x * s;\n  const r22 = zz + (1 - zz) * c;\n\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n\n  dst[ 0] = r00 * m00 + r01 * m10 + r02 * m20;\n  dst[ 1] = r00 * m01 + r01 * m11 + r02 * m21;\n  dst[ 2] = r00 * m02 + r01 * m12 + r02 * m22;\n  dst[ 3] = r00 * m03 + r01 * m13 + r02 * m23;\n  dst[ 4] = r10 * m00 + r11 * m10 + r12 * m20;\n  dst[ 5] = r10 * m01 + r11 * m11 + r12 * m21;\n  dst[ 6] = r10 * m02 + r11 * m12 + r12 * m22;\n  dst[ 7] = r10 * m03 + r11 * m13 + r12 * m23;\n  dst[ 8] = r20 * m00 + r21 * m10 + r22 * m20;\n  dst[ 9] = r20 * m01 + r21 * m11 + r22 * m21;\n  dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n  dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param {module:twgl/v3.Vec3} v A vector of\n *     three entries specifying the factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaling matrix.\n * @memberOf module:twgl/m4\n */\nfunction scaling(v, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = v[0];\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = v[1];\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = v[2];\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Scales the given 4-by-4 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param {module:twgl/m4.Mat4} m The matrix to be modified.\n * @param {module:twgl/v3.Vec3} v A vector of three entries specifying the\n *     factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaled matrix.\n * @memberOf module:twgl/m4\n */\nfunction scale(m, v, dst) {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[ 0] = v0 * m[0 * 4 + 0];\n  dst[ 1] = v0 * m[0 * 4 + 1];\n  dst[ 2] = v0 * m[0 * 4 + 2];\n  dst[ 3] = v0 * m[0 * 4 + 3];\n  dst[ 4] = v1 * m[1 * 4 + 0];\n  dst[ 5] = v1 * m[1 * 4 + 1];\n  dst[ 6] = v1 * m[1 * 4 + 2];\n  dst[ 7] = v1 * m[1 * 4 + 3];\n  dst[ 8] = v2 * m[2 * 4 + 0];\n  dst[ 9] = v2 * m[2 * 4 + 1];\n  dst[10] = v2 * m[2 * 4 + 2];\n  dst[11] = v2 * m[2 * 4 + 3];\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries,\n * interprets the vector as a point, transforms that point by the matrix, and\n * returns the result as a vector with 3 entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The point.\n * @param {module:twgl/v3.Vec3} [dst] optional vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed point.\n * @memberOf module:twgl/m4\n */\nfunction transformPoint(m, v, dst) {\n  dst = dst || create$1();\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];\n\n  dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;\n  dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;\n  dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a\n * direction, transforms that direction by the matrix, and returns the result;\n * assumes the transformation of 3-dimensional space represented by the matrix\n * is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion. Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The direction.\n * @param {module:twgl/v3.Vec3} [dst] optional Vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed direction.\n * @memberOf module:twgl/m4\n */\nfunction transformDirection(m, v, dst) {\n  dst = dst || create$1();\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n  dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n  dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector\n * as a normal to a surface, and computes a vector which is normal upon\n * transforming that surface by the matrix. The effect of this function is the\n * same as transforming v (as a direction) by the inverse-transpose of m.  This\n * function assumes the transformation of 3-dimensional space represented by the\n * matrix is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion.  Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The normal.\n * @param {module:twgl/v3.Vec3} [dst] The direction. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed normal.\n * @memberOf module:twgl/m4\n */\nfunction transformNormal$1(m, v, dst) {\n  dst = dst || create$1();\n  const mi = inverse(m);\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n  return dst;\n}\n\nvar m4 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  axisRotate: axisRotate,\n  axisRotation: axisRotation,\n  copy: copy,\n  create: create,\n  frustum: frustum,\n  getAxis: getAxis,\n  getTranslation: getTranslation,\n  identity: identity,\n  inverse: inverse,\n  lookAt: lookAt,\n  multiply: multiply,\n  negate: negate,\n  ortho: ortho,\n  perspective: perspective,\n  rotateX: rotateX,\n  rotateY: rotateY,\n  rotateZ: rotateZ,\n  rotationX: rotationX,\n  rotationY: rotationY,\n  rotationZ: rotationZ,\n  scale: scale,\n  scaling: scaling,\n  setAxis: setAxis,\n  setDefaultType: setDefaultType,\n  setTranslation: setTranslation,\n  transformDirection: transformDirection,\n  transformNormal: transformNormal$1,\n  transformPoint: transformPoint,\n  translate: translate,\n  translation: translation,\n  transpose: transpose\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* DataType */\nconst BYTE$2                           = 0x1400;\nconst UNSIGNED_BYTE$3                  = 0x1401;\nconst SHORT$2                          = 0x1402;\nconst UNSIGNED_SHORT$3                 = 0x1403;\nconst INT$3                            = 0x1404;\nconst UNSIGNED_INT$3                   = 0x1405;\nconst FLOAT$3                          = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4$1       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1$1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5$1         = 0x8363;\nconst HALF_FLOAT$1                   = 0x140B;\nconst UNSIGNED_INT_2_10_10_10_REV$1  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV$1 = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV$1     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV$1 = 0x8DAD;\nconst UNSIGNED_INT_24_8$1            = 0x84FA;\n\nconst glTypeToTypedArray = {};\n{\n  const tt = glTypeToTypedArray;\n  tt[BYTE$2]                           = Int8Array;\n  tt[UNSIGNED_BYTE$3]                  = Uint8Array;\n  tt[SHORT$2]                          = Int16Array;\n  tt[UNSIGNED_SHORT$3]                 = Uint16Array;\n  tt[INT$3]                            = Int32Array;\n  tt[UNSIGNED_INT$3]                   = Uint32Array;\n  tt[FLOAT$3]                          = Float32Array;\n  tt[UNSIGNED_SHORT_4_4_4_4$1]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_5_5_1$1]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_6_5$1]           = Uint16Array;\n  tt[HALF_FLOAT$1]                     = Uint16Array;\n  tt[UNSIGNED_INT_2_10_10_10_REV$1]    = Uint32Array;\n  tt[UNSIGNED_INT_10F_11F_11F_REV$1]   = Uint32Array;\n  tt[UNSIGNED_INT_5_9_9_9_REV$1]       = Uint32Array;\n  tt[FLOAT_32_UNSIGNED_INT_24_8_REV$1] = Uint32Array;\n  tt[UNSIGNED_INT_24_8$1]              = Uint32Array;\n}\n\n/**\n * Get the GL type for a typedArray\n * @param {ArrayBufferView} typedArray a typedArray\n * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)         { return BYTE$2; }           // eslint-disable-line\n  if (typedArray instanceof Uint8Array)        { return UNSIGNED_BYTE$3; }  // eslint-disable-line\n  if (typedArray instanceof Uint8ClampedArray) { return UNSIGNED_BYTE$3; }  // eslint-disable-line\n  if (typedArray instanceof Int16Array)        { return SHORT$2; }          // eslint-disable-line\n  if (typedArray instanceof Uint16Array)       { return UNSIGNED_SHORT$3; } // eslint-disable-line\n  if (typedArray instanceof Int32Array)        { return INT$3; }            // eslint-disable-line\n  if (typedArray instanceof Uint32Array)       { return UNSIGNED_INT$3; }   // eslint-disable-line\n  if (typedArray instanceof Float32Array)      { return FLOAT$3; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the GL type for a typedArray type\n * @param {ArrayBufferView} typedArrayType a typedArray constructor\n * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)         { return BYTE$2; }           // eslint-disable-line\n  if (typedArrayType === Uint8Array)        { return UNSIGNED_BYTE$3; }  // eslint-disable-line\n  if (typedArrayType === Uint8ClampedArray) { return UNSIGNED_BYTE$3; }  // eslint-disable-line\n  if (typedArrayType === Int16Array)        { return SHORT$2; }          // eslint-disable-line\n  if (typedArrayType === Uint16Array)       { return UNSIGNED_SHORT$3; } // eslint-disable-line\n  if (typedArrayType === Int32Array)        { return INT$3; }            // eslint-disable-line\n  if (typedArrayType === Uint32Array)       { return UNSIGNED_INT$3; }   // eslint-disable-line\n  if (typedArrayType === Float32Array)      { return FLOAT$3; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the typed array constructor for a given GL type\n * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)\n * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).\n * @memberOf module:twgl/typedArray\n */\nfunction getTypedArrayTypeForGLType(type) {\n  const CTOR = glTypeToTypedArray[type];\n  if (!CTOR) {\n    throw new Error('unknown gl type');\n  }\n  return CTOR;\n}\n\nconst isArrayBuffer$1 = typeof SharedArrayBuffer !== 'undefined'\n  ? function isArrayBufferOrSharedArrayBuffer(a) {\n    return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);\n  }\n  : function isArrayBuffer(a) {\n    return a && a.buffer && a.buffer instanceof ArrayBuffer;\n  };\n\nvar typedarrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getGLTypeForTypedArray: getGLTypeForTypedArray,\n  getGLTypeForTypedArrayType: getGLTypeForTypedArrayType,\n  getTypedArrayTypeForGLType: getTypedArrayTypeForGLType,\n  isArrayBuffer: isArrayBuffer$1\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint no-console: \"off\" */\n\n/**\n * Copy named properties\n *\n * @param {string[]} names names of properties to copy\n * @param {object} src object to copy properties from\n * @param {object} dst object to copy properties to\n * @private\n */\nfunction copyNamedProperties(names, src, dst) {\n  names.forEach(function(name) {\n    const value = src[name];\n    if (value !== undefined) {\n      dst[name] = value;\n    }\n  });\n}\n\n/**\n * Copies properties from source to dest only if a matching key is in dest\n *\n * @param {Object.<string, ?>} src the source\n * @param {Object.<string, ?>} dst the dest\n * @private\n */\nfunction copyExistingProperties(src, dst) {\n  Object.keys(dst).forEach(function(key) {\n    if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {  /* eslint no-prototype-builtins: 0 */\n      dst[key] = src[key];\n    }\n  });\n}\n\nfunction error$1(...args) {\n  console.error(...args);\n}\n\nfunction warn$1(...args) {\n  console.warn(...args);\n}\n\nconst isTypeWeakMaps = new Map();\n\nfunction isType(object, type) {\n  if (!object || typeof object !== 'object') {\n    return false;\n  }\n  let weakMap = isTypeWeakMaps.get(type);\n  if (!weakMap) {\n    weakMap = new WeakMap();\n    isTypeWeakMaps.set(type, weakMap);\n  }\n  let isOfType = weakMap.get(object);\n  if (isOfType === undefined) {\n    const s = Object.prototype.toString.call(object);\n    isOfType = s.substring(8, s.length - 1) === type;\n    weakMap.set(object, isOfType);\n  }\n  return isOfType;\n}\n\nfunction isBuffer(gl, t) {\n  return typeof WebGLBuffer !== 'undefined' && isType(t, 'WebGLBuffer');\n}\n\nfunction isRenderbuffer(gl, t) {\n  return typeof WebGLRenderbuffer !== 'undefined' && isType(t, 'WebGLRenderbuffer');\n}\n\nfunction isTexture(gl, t) {\n  return typeof WebGLTexture !== 'undefined' && isType(t, 'WebGLTexture');\n}\n\nfunction isSampler(gl, t) {\n  return typeof WebGLSampler !== 'undefined' && isType(t, 'WebGLSampler');\n}\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst STATIC_DRAW                  = 0x88e4;\nconst ARRAY_BUFFER$1                 = 0x8892;\nconst ELEMENT_ARRAY_BUFFER$2         = 0x8893;\nconst BUFFER_SIZE                  = 0x8764;\n\nconst BYTE$1                         = 0x1400;\nconst UNSIGNED_BYTE$2                = 0x1401;\nconst SHORT$1                        = 0x1402;\nconst UNSIGNED_SHORT$2               = 0x1403;\nconst INT$2                          = 0x1404;\nconst UNSIGNED_INT$2                 = 0x1405;\nconst FLOAT$2                        = 0x1406;\nconst defaults$2 = {\n  attribPrefix: \"\",\n};\n\n/**\n * Sets the default attrib prefix\n *\n * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n * as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n * In other words I'll create arrays of geometry like this\n *\n *     var arrays = {\n *       position: ...\n *       normal: ...\n *       texcoord: ...\n *     };\n *\n * But need those mapped to attributes and my attributes start with `a_`.\n *\n * @deprecated see {@link module:twgl.setDefaults}\n * @param {string} prefix prefix for attribs\n * @memberOf module:twgl/attributes\n */\nfunction setAttributePrefix(prefix) {\n  defaults$2.attribPrefix = prefix;\n}\n\nfunction setDefaults$2(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$2);\n}\n\nfunction setBufferFromTypedArray(gl, type, buffer, array, drawType) {\n  gl.bindBuffer(type, buffer);\n  gl.bufferData(type, array, drawType || STATIC_DRAW);\n}\n\n/**\n * Given typed array creates a WebGLBuffer and copies the typed array\n * into it.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken\n * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.\n * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.\n * @return {WebGLBuffer} the created WebGLBuffer\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromTypedArray(gl, typedArray, type, drawType) {\n  if (isBuffer(gl, typedArray)) {\n    return typedArray;\n  }\n  type = type || ARRAY_BUFFER$1;\n  const buffer = gl.createBuffer();\n  setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);\n  return buffer;\n}\n\nfunction isIndices(name) {\n  return name === \"indices\";\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArrayType === Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\nfunction getArray$1(array) {\n  return array.length ? array : array.data;\n}\n\nconst texcoordRE = /coord|texture/i;\nconst colorRE = /color|colour/i;\n\nfunction guessNumComponentsFromName(name, length) {\n  let numComponents;\n  if (texcoordRE.test(name)) {\n    numComponents = 2;\n  } else if (colorRE.test(name)) {\n    numComponents = 4;\n  } else {\n    numComponents = 3;  // position, normals, indices ...\n  }\n\n  if (length % numComponents > 0) {\n    throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);\n  }\n\n  return numComponents;\n}\n\nfunction getNumComponents$1(array, arrayName, numValues) {\n  return array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues || getArray$1(array).length);\n}\n\nfunction makeTypedArray(array, name) {\n  if (isArrayBuffer$1(array)) {\n    return array;\n  }\n\n  if (isArrayBuffer$1(array.data)) {\n    return array.data;\n  }\n\n  if (Array.isArray(array)) {\n    array = {\n      data: array,\n    };\n  }\n\n  let Type = array.type ? typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type) : undefined;\n  if (!Type) {\n    if (isIndices(name)) {\n      Type = Uint16Array;\n    } else {\n      Type = Float32Array;\n    }\n  }\n  return new Type(array.data);\n}\n\nfunction glTypeFromGLTypeOrTypedArrayType(glTypeOrTypedArrayCtor) {\n  return typeof glTypeOrTypedArrayCtor === 'number'\n      ? glTypeOrTypedArrayCtor\n      : glTypeOrTypedArrayCtor ? getGLTypeForTypedArrayType(glTypeOrTypedArrayCtor) : FLOAT$2;\n}\n\nfunction typedArrayTypeFromGLTypeOrTypedArrayCtor(glTypeOrTypedArrayCtor) {\n  return typeof glTypeOrTypedArrayCtor === 'number'\n      ? getTypedArrayTypeForGLType(glTypeOrTypedArrayCtor)\n      : glTypeOrTypedArrayCtor || Float32Array;\n}\n\nfunction attribBufferFromBuffer(gl, array/*, arrayName */) {\n  return {\n    buffer: array.buffer,\n    numValues: 2 * 3 * 4,  // safely divided by 2, 3, 4\n    type: glTypeFromGLTypeOrTypedArrayType(array.type),\n    arrayType: typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type),\n  };\n}\n\nfunction attribBufferFromSize(gl, array/*, arrayName*/) {\n  const numValues = array.data || array;\n  const arrayType = typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type);\n  const numBytes = numValues * arrayType.BYTES_PER_ELEMENT;\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(ARRAY_BUFFER$1, buffer);\n  gl.bufferData(ARRAY_BUFFER$1, numBytes, array.drawType || STATIC_DRAW);\n  return {\n    buffer,\n    numValues,\n    type: getGLTypeForTypedArrayType(arrayType),\n    arrayType,\n  };\n}\n\nfunction attribBufferFromArrayLike(gl, array, arrayName) {\n  const typedArray = makeTypedArray(array, arrayName);\n  return {\n    arrayType: typedArray.constructor,\n    buffer: createBufferFromTypedArray(gl, typedArray, undefined, array.drawType),\n    type: getGLTypeForTypedArray(typedArray),\n    numValues: 0,\n  };\n}\n\n/**\n * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer\n * for the attribute.\n *\n * @typedef {Object} AttribInfo\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {number} [numComponents] the number of components for this attribute.\n * @property {number} [size] synonym for `numComponents`.\n * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n * @property {boolean} [normalize] whether or not to normalize the data. Default = false\n * @property {number} [offset] offset into buffer in bytes. Default = 0\n * @property {number} [stride] the stride in bytes per element. Default = 0\n * @property {number} [divisor] the divisor in instances. Default = 0.\n *    Requires WebGL2 or the ANGLE_instanced_arrays extension.\n *    and, if you're using WebGL1 you must have called {@link module:twgl.addExtensionsToContext}\n * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * @typedef {(Int8ArrayConstructor|Uint8ArrayConstructor|Int16ArrayConstructor|Uint16ArrayConstructor|Int32ArrayConstructor|Uint32ArrayConstructor|Float32ArrayConstructor)} TypedArrayConstructor\n */\n\n/**\n * Use this type of array spec when TWGL can't guess the type or number of components of an array\n * @typedef {Object} FullArraySpec\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {(number|number[]|ArrayBufferView)} [data] The data of the array. A number alone becomes the number of elements of type.\n * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.\n *    If `coord` is in the name assumes `numComponents = 2`.\n *    If `color` is in the name assumes `numComponents = 4`.\n *    otherwise assumes `numComponents = 3`\n * @property {number|TypedArrayConstructor} [type] type. This is used if `data` is a JavaScript array, or `buffer` is passed in, or `data` is a number.\n *   It can either be the constructor for a typedarray. (eg. `Uint8Array`) OR a WebGL type, (eg `gl.UNSIGNED_BYTE`).\n *   For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: gl.UNSIGNED_BYTE, data: [255,0,255,255, ...], }`.\n * @property {number} [size] synonym for `numComponents`.\n * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.\n * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0\n * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0\n * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = 0.\n *     Requires WebGL2 or the ANGLE_instanced_arrays extension.\n *     and, if you using WebGL1 you must have called {@link module:twgl.addExtensionsToContext}\n * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.\n * @property {string} [name] synonym for `attrib`.\n * @property {string} [attribName] synonym for `attrib`.\n * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer\n *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`\n *    to provide this. Example:\n *\n *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {\n *           position: [1, 2, 3, ... ],\n *         });\n *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {\n *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1\n *         });\n *\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * An individual array in {@link module:twgl.Arrays}\n *\n * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`\n * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will\n * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.\n *\n * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec\n * @memberOf module:twgl\n */\n\n/**\n * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your\n * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * Objects with various fields. See {@link module:twgl.FullArraySpec}.\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays\n * @memberOf module:twgl\n */\n\n\n/**\n * Creates a set of attribute data and WebGLBuffers from set of arrays\n *\n * Given\n *\n *      var arrays = {\n *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *      };\n *\n * returns something like\n *\n *      var attribs = {\n *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n *      };\n *\n * notes:\n *\n * *   Arrays can take various forms\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * @param {WebGLRenderingContext} gl The webgl rendering context.\n * @param {module:twgl.Arrays} arrays The arrays\n * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from\n *   This lets you share buffers. Any arrays you supply will override\n *   the buffers from srcBufferInfo.\n * @return {Object.<string, module:twgl.AttribInfo>} the attribs\n * @memberOf module:twgl/attributes\n */\nfunction createAttribsFromArrays(gl, arrays) {\n  const attribs = {};\n  Object.keys(arrays).forEach(function(arrayName) {\n    if (!isIndices(arrayName)) {\n      const array = arrays[arrayName];\n      const attribName = array.attrib || array.name || array.attribName || (defaults$2.attribPrefix + arrayName);\n      if (array.value) {\n        if (!Array.isArray(array.value) && !isArrayBuffer$1(array.value)) {\n          throw new Error('array.value is not array or typedarray');\n        }\n        attribs[attribName] = {\n          value: array.value,\n        };\n      } else {\n        let fn;\n        if (array.buffer && array.buffer instanceof WebGLBuffer) {\n          fn = attribBufferFromBuffer;\n        } else if (typeof array === \"number\" || typeof array.data === \"number\") {\n          fn = attribBufferFromSize;\n        } else {\n          fn = attribBufferFromArrayLike;\n        }\n        const {buffer, type, numValues, arrayType} = fn(gl, array, arrayName);\n        const normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);\n        const numComponents = getNumComponents$1(array, arrayName, numValues);\n        attribs[attribName] = {\n          buffer:        buffer,\n          numComponents: numComponents,\n          type:          type,\n          normalize:     normalization,\n          stride:        array.stride || 0,\n          offset:        array.offset || 0,\n          divisor:       array.divisor === undefined ? undefined : array.divisor,\n          drawType:      array.drawType,\n        };\n      }\n    }\n  });\n  gl.bindBuffer(ARRAY_BUFFER$1, null);\n  return attribs;\n}\n\n/**\n * Sets the contents of a buffer attached to an attribInfo\n *\n * This is helper function to dynamically update a buffer.\n *\n * Let's say you make a bufferInfo\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n *\n *  And you want to dynamically update the positions. You could do this\n *\n *     // assuming arrays.position has already been updated with new data.\n *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);\n *\n * @param {WebGLRenderingContext} gl\n * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix\n *   the name of the attribute will include the prefix.\n * @param {ArraySpec} array Note: it is arguably inefficient to pass in anything but a typed array because anything\n *    else will have to be converted to a typed array before it can be used by WebGL. During init time that\n *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.\n * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer\n *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`\n *    for the portion of the array you want to use.\n *\n *        var someArray = new Float32Array(1000); // an array with 1000 floats\n *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray\n *\n *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`\n * @memberOf module:twgl/attributes\n */\nfunction setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {\n  array = makeTypedArray(array);\n  if (offset !== undefined) {\n    gl.bindBuffer(ARRAY_BUFFER$1, attribInfo.buffer);\n    gl.bufferSubData(ARRAY_BUFFER$1, offset, array);\n  } else {\n    setBufferFromTypedArray(gl, ARRAY_BUFFER$1, attribInfo.buffer, array, attribInfo.drawType);\n  }\n}\n\nfunction getBytesPerValueForGLType(gl, type) {\n  if (type === BYTE$1)           return 1;  // eslint-disable-line\n  if (type === UNSIGNED_BYTE$2)  return 1;  // eslint-disable-line\n  if (type === SHORT$1)          return 2;  // eslint-disable-line\n  if (type === UNSIGNED_SHORT$2) return 2;  // eslint-disable-line\n  if (type === INT$2)            return 4;  // eslint-disable-line\n  if (type === UNSIGNED_INT$2)   return 4;  // eslint-disable-line\n  if (type === FLOAT$2)          return 4;  // eslint-disable-line\n  return 0;\n}\n\n// Tries to get the number of elements from a set of arrays.\nconst positionKeys = ['position', 'positions', 'a_position'];\nfunction getNumElementsFromNonIndexedArrays(arrays) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in arrays) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(arrays)[0];\n  }\n  const array = arrays[key];\n  const length = getArray$1(array).length;\n  if (length === undefined) {\n    return 1;   // There's no arrays\n  }\n  const numComponents = getNumComponents$1(array, key);\n  const numElements = length / numComponents;\n  if (length % numComponents > 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\nfunction getNumElementsFromAttributes(gl, attribs) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in attribs) {\n      break;\n    }\n    key = defaults$2.attribPrefix + key;\n    if (key in attribs) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(attribs)[0];\n  }\n  const attrib = attribs[key];\n  if (!attrib.buffer) {\n    return 1; // There's no buffer\n  }\n  gl.bindBuffer(ARRAY_BUFFER$1, attrib.buffer);\n  const numBytes = gl.getBufferParameter(ARRAY_BUFFER$1, BUFFER_SIZE);\n  gl.bindBuffer(ARRAY_BUFFER$1, null);\n\n  const bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);\n  const totalElements = numBytes / bytesPerValue;\n  const numComponents = attrib.numComponents || attrib.size;\n  // TODO: check stride\n  const numElements = totalElements / numComponents;\n  if (numElements % 1 !== 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\n/**\n * @typedef {Object} BufferInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs appropriate to call `setAttributes`\n * @memberOf module:twgl\n */\n\n/**\n * Creates a BufferInfo from an object of arrays.\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * Given an object like\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n *  Creates an BufferInfo like this\n *\n *     bufferInfo = {\n *       numElements: 4,        // or whatever the number of elements is\n *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n *       attribs: {\n *         position: { buffer: WebGLBuffer, numComponents: 3, },\n *         normal:   { buffer: WebGLBuffer, numComponents: 3, },\n *         texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n *       },\n *     };\n *\n *  The properties of arrays can be JavaScript arrays in which case the number of components\n *  will be guessed.\n *\n *     var arrays = {\n *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n *        indices:  [0, 1, 2, 1, 2, 3],\n *     };\n *\n *  They can also be TypedArrays\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *\n *  Or AugmentedTypedArrays\n *\n *     var positions = createAugmentedTypedArray(3, 4);\n *     var texcoords = createAugmentedTypedArray(2, 4);\n *     var normals   = createAugmentedTypedArray(3, 4);\n *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n *\n *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n *     indices.push([0, 1, 2, 1, 2, 3]);\n *\n *     var arrays = {\n *        position: positions,\n *        texcoord: texcoords,\n *        normal:   normals,\n *        indices:  indices,\n *     };\n *\n * For the last example it is equivalent to\n *\n *     var bufferInfo = {\n *       attribs: {\n *         position: { numComponents: 3, buffer: gl.createBuffer(), },\n *         texcoord: { numComponents: 2, buffer: gl.createBuffer(), },\n *         normal: { numComponents: 3, buffer: gl.createBuffer(), },\n *       },\n *       indices: gl.createBuffer(),\n *       numElements: 6,\n *     };\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.position.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.texcoord.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.normal.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.Arrays} arrays Your data\n * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing\n *        buffer info to start from. WebGLBuffers etc specified\n *        in the srcBufferInfo will be used in a new BufferInfo\n *        with any arrays specified overriding the ones in\n *        srcBufferInfo.\n * @return {module:twgl.BufferInfo} A BufferInfo\n * @memberOf module:twgl/attributes\n */\nfunction createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {\n  const newAttribs = createAttribsFromArrays(gl, arrays);\n  const bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});\n  bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);\n  const indices = arrays.indices;\n  if (indices) {\n    const newIndices = makeTypedArray(indices, \"indices\");\n    bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, ELEMENT_ARRAY_BUFFER$2);\n    bufferInfo.numElements = newIndices.length;\n    bufferInfo.elementType = getGLTypeForTypedArray(newIndices);\n  } else if (!bufferInfo.numElements) {\n    bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);\n  }\n\n  return bufferInfo;\n}\n\n/**\n * Creates a buffer from an array, typed array, or array spec\n *\n * Given something like this\n *\n *     [1, 2, 3],\n *\n * or\n *\n *     new Uint16Array([1,2,3]);\n *\n * or\n *\n *     {\n *        data: [1, 2, 3],\n *        type: Uint8Array,\n *     }\n *\n * returns a WebGLBuffer that contains the given data.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.\n * @param {string} arrayName name of array. Used to guess the type if type can not be derived otherwise.\n * @return {WebGLBuffer} a WebGLBuffer containing the data in array.\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromArray(gl, array, arrayName) {\n  const type = arrayName === \"indices\" ? ELEMENT_ARRAY_BUFFER$2 : ARRAY_BUFFER$1;\n  const typedArray = makeTypedArray(array, arrayName);\n  return createBufferFromTypedArray(gl, typedArray, type);\n}\n\n/**\n * Creates buffers from arrays or typed arrays\n *\n * Given something like this\n *\n *     var arrays = {\n *        positions: [1, 2, 3],\n *        normals: [0, 0, 1],\n *     }\n *\n * returns something like\n *\n *     buffers = {\n *       positions: WebGLBuffer,\n *       normals: WebGLBuffer,\n *     }\n *\n * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.Arrays} arrays\n * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n * @memberOf module:twgl/attributes\n */\nfunction createBuffersFromArrays(gl, arrays) {\n  const buffers = { };\n  Object.keys(arrays).forEach(function(key) {\n    buffers[key] = createBufferFromArray(gl, arrays[key], key);\n  });\n\n  // Ugh!\n  if (arrays.indices) {\n    buffers.numElements = arrays.indices.length;\n    buffers.elementType = getGLTypeForTypedArray(makeTypedArray(arrays.indices));\n  } else {\n    buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);\n  }\n\n  return buffers;\n}\n\nvar attributes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttribsFromArrays: createAttribsFromArrays,\n  createBuffersFromArrays: createBuffersFromArrays,\n  createBufferFromArray: createBufferFromArray,\n  createBufferFromTypedArray: createBufferFromTypedArray,\n  createBufferInfoFromArrays: createBufferInfoFromArrays,\n  setAttribInfoBufferFromArray: setAttribInfoBufferFromArray,\n  setAttributePrefix: setAttributePrefix,\n  setAttributeDefaults_: setDefaults$2,\n  getNumComponents_: getNumComponents$1,\n  getArray_: getArray$1\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst getArray = getArray$1;  // eslint-disable-line\nconst getNumComponents = getNumComponents$1;  // eslint-disable-line\n\n/**\n * @typedef {(Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array)} TypedArray\n */\n\n/**\n * Add `push` to a typed array. It just keeps a 'cursor'\n * and allows use to `push` values into the array so we\n * don't have to manually compute offsets\n * @param {TypedArray} typedArray TypedArray to augment\n * @param {number} numComponents number of components.\n * @private\n */\nfunction augmentTypedArray(typedArray, numComponents) {\n  let cursor = 0;\n  typedArray.push = function() {\n    for (let ii = 0; ii < arguments.length; ++ii) {\n      const value = arguments[ii];\n      if (value instanceof Array || isArrayBuffer$1(value)) {\n        for (let jj = 0; jj < value.length; ++jj) {\n          typedArray[cursor++] = value[jj];\n        }\n      } else {\n        typedArray[cursor++] = value;\n      }\n    }\n  };\n  typedArray.reset = function(opt_index) {\n    cursor = opt_index || 0;\n  };\n  typedArray.numComponents = numComponents;\n  Object.defineProperty(typedArray, 'numElements', {\n    get: function() {\n      return this.length / this.numComponents | 0;\n    },\n  });\n  return typedArray;\n}\n\n/**\n * creates a typed array with a `push` function attached\n * so that you can easily *push* values.\n *\n * `push` can take multiple arguments. If an argument is an array each element\n * of the array will be added to the typed array.\n *\n * Example:\n *\n *     const array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values\n *     array.push(1, 2, 3);\n *     array.push([4, 5, 6]);\n *     // array now contains [1, 2, 3, 4, 5, 6]\n *\n * Also has `numComponents` and `numElements` properties.\n *\n * @param {number} numComponents number of components\n * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.\n * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.\n * @return {ArrayBufferView} A typed array.\n * @memberOf module:twgl/primitives\n */\nfunction createAugmentedTypedArray(numComponents, numElements, opt_type) {\n  const Type = opt_type || Float32Array;\n  return augmentTypedArray(new Type(numComponents * numElements), numComponents);\n}\n\nfunction allButIndices(name) {\n  return name !== \"indices\";\n}\n\n/**\n * Given indexed vertices creates a new set of vertices un-indexed by expanding the indexed vertices.\n * @param {Object.<string, TypedArray>} vertices The indexed vertices to deindex\n * @return {Object.<string, TypedArray>} The deindexed vertices\n * @memberOf module:twgl/primitives\n */\nfunction deindexVertices(vertices) {\n  const indices = vertices.indices;\n  const newVertices = {};\n  const numElements = indices.length;\n\n  function expandToUnindexed(channel) {\n    const srcBuffer = vertices[channel];\n    const numComponents = srcBuffer.numComponents;\n    const dstBuffer = createAugmentedTypedArray(numComponents, numElements, srcBuffer.constructor);\n    for (let ii = 0; ii < numElements; ++ii) {\n      const ndx = indices[ii];\n      const offset = ndx * numComponents;\n      for (let jj = 0; jj < numComponents; ++jj) {\n        dstBuffer.push(srcBuffer[offset + jj]);\n      }\n    }\n    newVertices[channel] = dstBuffer;\n  }\n\n  Object.keys(vertices).filter(allButIndices).forEach(expandToUnindexed);\n\n  return newVertices;\n}\n\n/**\n * flattens the normals of deindexed vertices in place.\n * @param {Object.<string, TypedArray>} vertices The deindexed vertices who's normals to flatten\n * @return {Object.<string, TypedArray>} The flattened vertices (same as was passed in)\n * @memberOf module:twgl/primitives\n */\nfunction flattenNormals(vertices) {\n  if (vertices.indices) {\n    throw new Error('can not flatten normals of indexed vertices. deindex them first');\n  }\n\n  const normals = vertices.normal;\n  const numNormals = normals.length;\n  for (let ii = 0; ii < numNormals; ii += 9) {\n    // pull out the 3 normals for this triangle\n    const nax = normals[ii + 0];\n    const nay = normals[ii + 1];\n    const naz = normals[ii + 2];\n\n    const nbx = normals[ii + 3];\n    const nby = normals[ii + 4];\n    const nbz = normals[ii + 5];\n\n    const ncx = normals[ii + 6];\n    const ncy = normals[ii + 7];\n    const ncz = normals[ii + 8];\n\n    // add them\n    let nx = nax + nbx + ncx;\n    let ny = nay + nby + ncy;\n    let nz = naz + nbz + ncz;\n\n    // normalize them\n    const length = Math.sqrt(nx * nx + ny * ny + nz * nz);\n\n    nx /= length;\n    ny /= length;\n    nz /= length;\n\n    // copy them back in\n    normals[ii + 0] = nx;\n    normals[ii + 1] = ny;\n    normals[ii + 2] = nz;\n\n    normals[ii + 3] = nx;\n    normals[ii + 4] = ny;\n    normals[ii + 5] = nz;\n\n    normals[ii + 6] = nx;\n    normals[ii + 7] = ny;\n    normals[ii + 8] = nz;\n  }\n\n  return vertices;\n}\n\nfunction applyFuncToV3Array(array, matrix, fn) {\n  const len = array.length;\n  const tmp = new Float32Array(3);\n  for (let ii = 0; ii < len; ii += 3) {\n    fn(matrix, [array[ii], array[ii + 1], array[ii + 2]], tmp);\n    array[ii    ] = tmp[0];\n    array[ii + 1] = tmp[1];\n    array[ii + 2] = tmp[2];\n  }\n}\n\nfunction transformNormal(mi, v, dst) {\n  dst = dst || create$1();\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Reorients directions by the given matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientDirections(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformDirection);\n  return array;\n}\n\n/**\n * Reorients normals by the inverse-transpose of the given\n * matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientNormals(array, matrix) {\n  applyFuncToV3Array(array, inverse(matrix), transformNormal);\n  return array;\n}\n\n/**\n * Reorients positions by the given matrix. In other words, it\n * multiplies each vertex by the given matrix.\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientPositions(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformPoint);\n  return array;\n}\n\n/**\n * @typedef {(number[]|TypedArray)} NativeArrayOrTypedArray\n */\n\n/**\n * Reorients arrays by the given matrix. Assumes arrays have\n * names that contains 'pos' could be reoriented as positions,\n * 'binorm' or 'tan' as directions, and 'norm' as normals.\n *\n * @param {Object.<string, NativeArrayOrTypedArray>} arrays The vertices to reorient\n * @param {module:twgl/m4.Mat4} matrix matrix to reorient by.\n * @return {Object.<string, NativeArrayOrTypedArray>} same arrays that were passed in.\n * @memberOf module:twgl/primitives\n */\nfunction reorientVertices(arrays, matrix) {\n  Object.keys(arrays).forEach(function(name) {\n    const array = arrays[name];\n    if (name.indexOf(\"pos\") >= 0) {\n      reorientPositions(array, matrix);\n    } else if (name.indexOf(\"tan\") >= 0 || name.indexOf(\"binorm\") >= 0) {\n      reorientDirections(array, matrix);\n    } else if (name.indexOf(\"norm\") >= 0) {\n      reorientNormals(array, matrix);\n    }\n  });\n  return arrays;\n}\n\n/**\n * Creates XY quad BufferInfo\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, WebGLBuffer>} the created XY Quad BufferInfo\n * @memberOf module:twgl/primitives\n * @function createXYQuadBuffers\n */\n\n/**\n * Creates XY quad Buffers\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {module:twgl.BufferInfo} the created XY Quad buffers\n * @memberOf module:twgl/primitives\n * @function createXYQuadBufferInfo\n */\n\n/**\n * Creates XY quad vertices\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0, 0.5);\n *\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, TypedArray>} the created XY Quad vertices\n * @memberOf module:twgl/primitives\n */\nfunction createXYQuadVertices(size, xOffset, yOffset) {\n  size = size || 2;\n  xOffset = xOffset || 0;\n  yOffset = yOffset || 0;\n  size *= 0.5;\n  return {\n    position: {\n      numComponents: 2,\n      data: [\n        xOffset + -1 * size, yOffset + -1 * size,\n        xOffset +  1 * size, yOffset + -1 * size,\n        xOffset + -1 * size, yOffset +  1 * size,\n        xOffset +  1 * size, yOffset +  1 * size,\n      ],\n    },\n    normal: [\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n    ],\n    texcoord: [\n      0, 0,\n      1, 0,\n      0, 1,\n      1, 1,\n    ],\n    indices: [ 0, 1, 2, 2, 1, 3 ],\n  };\n}\n\n/**\n * Creates XZ plane BufferInfo.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {module:twgl.BufferInfo} The created plane BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createPlaneBufferInfo\n */\n\n/**\n * Creates XZ plane buffers.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, WebGLBuffer>} The created plane buffers.\n * @memberOf module:twgl/primitives\n * @function createPlaneBuffers\n */\n\n/**\n * Creates XZ plane vertices.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, TypedArray>} The created plane vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createPlaneVertices(\n    width,\n    depth,\n    subdivisionsWidth,\n    subdivisionsDepth,\n    matrix) {\n  width = width || 1;\n  depth = depth || 1;\n  subdivisionsWidth = subdivisionsWidth || 1;\n  subdivisionsDepth = subdivisionsDepth || 1;\n  matrix = matrix || identity();\n\n  const numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n\n  for (let z = 0; z <= subdivisionsDepth; z++) {\n    for (let x = 0; x <= subdivisionsWidth; x++) {\n      const u = x / subdivisionsWidth;\n      const v = z / subdivisionsDepth;\n      positions.push(\n          width * u - width * 0.5,\n          0,\n          depth * v - depth * 0.5);\n      normals.push(0, 1, 0);\n      texcoords.push(u, v);\n    }\n  }\n\n  const numVertsAcross = subdivisionsWidth + 1;\n  const indices = createAugmentedTypedArray(\n      3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);\n\n  for (let z = 0; z < subdivisionsDepth; z++) {  // eslint-disable-line\n    for (let x = 0; x < subdivisionsWidth; x++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (z + 0) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x,\n          (z + 0) * numVertsAcross + x + 1);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (z + 1) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x + 1,\n          (z + 0) * numVertsAcross + x + 1);\n    }\n  }\n\n  const arrays = reorientVertices({\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  }, matrix);\n  return arrays;\n}\n\n/**\n * Creates sphere BufferInfo.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {module:twgl.BufferInfo} The created sphere BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createSphereBufferInfo\n */\n\n/**\n * Creates sphere buffers.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, WebGLBuffer>} The created sphere buffers.\n * @memberOf module:twgl/primitives\n * @function createSphereBuffers\n */\n\n/**\n * Creates sphere vertices.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, TypedArray>} The created sphere vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createSphereVertices(\n    radius,\n    subdivisionsAxis,\n    subdivisionsHeight,\n    opt_startLatitudeInRadians,\n    opt_endLatitudeInRadians,\n    opt_startLongitudeInRadians,\n    opt_endLongitudeInRadians) {\n  if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {\n    throw new Error('subdivisionAxis and subdivisionHeight must be > 0');\n  }\n\n  opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;\n  opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;\n  opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;\n  opt_endLongitudeInRadians = opt_endLongitudeInRadians || (Math.PI * 2);\n\n  const latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;\n  const longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians;\n\n  // We are going to generate our sphere by iterating through its\n  // spherical coordinates and generating 2 triangles for each quad on a\n  // ring of the sphere.\n  const numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let y = 0; y <= subdivisionsHeight; y++) {\n    for (let x = 0; x <= subdivisionsAxis; x++) {\n      // Generate a vertex based on its spherical coordinates\n      const u = x / subdivisionsAxis;\n      const v = y / subdivisionsHeight;\n      const theta = longRange * u + opt_startLongitudeInRadians;\n      const phi = latRange * v + opt_startLatitudeInRadians;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const sinPhi = Math.sin(phi);\n      const cosPhi = Math.cos(phi);\n      const ux = cosTheta * sinPhi;\n      const uy = cosPhi;\n      const uz = sinTheta * sinPhi;\n      positions.push(radius * ux, radius * uy, radius * uz);\n      normals.push(ux, uy, uz);\n      texcoords.push(1 - u, v);\n    }\n  }\n\n  const numVertsAround = subdivisionsAxis + 1;\n  const indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);\n  for (let x = 0; x < subdivisionsAxis; x++) {  // eslint-disable-line\n    for (let y = 0; y < subdivisionsHeight; y++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (y + 0) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (y + 1) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x + 1);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Array of the indices of corners of each face of a cube.\n * @type {Array.<number[]>}\n * @private\n */\nconst CUBE_FACE_INDICES = [\n  [3, 7, 5, 1],  // right\n  [6, 2, 0, 4],  // left\n  [6, 7, 3, 2],  // ??\n  [0, 1, 5, 4],  // ??\n  [7, 6, 4, 5],  // front\n  [2, 3, 1, 0],  // back\n];\n\n/**\n * Creates a BufferInfo for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCubeBufferInfo\n */\n\n/**\n * Creates the buffers and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCubeBuffers\n */\n\n/**\n * Creates the vertices and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createCubeVertices(size) {\n  size = size || 1;\n  const k = size / 2;\n\n  const cornerVertices = [\n    [-k, -k, -k],\n    [+k, -k, -k],\n    [-k, +k, -k],\n    [+k, +k, -k],\n    [-k, -k, +k],\n    [+k, -k, +k],\n    [-k, +k, +k],\n    [+k, +k, +k],\n  ];\n\n  const faceNormals = [\n    [+1, +0, +0],\n    [-1, +0, +0],\n    [+0, +1, +0],\n    [+0, -1, +0],\n    [+0, +0, +1],\n    [+0, +0, -1],\n  ];\n\n  const uvCoords = [\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [1, 1],\n  ];\n\n  const numVertices = 6 * 4;\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2 , numVertices);\n  const indices   = createAugmentedTypedArray(3, 6 * 2, Uint16Array);\n\n  for (let f = 0; f < 6; ++f) {\n    const faceIndices = CUBE_FACE_INDICES[f];\n    for (let v = 0; v < 4; ++v) {\n      const position = cornerVertices[faceIndices[v]];\n      const normal = faceNormals[f];\n      const uv = uvCoords[v];\n\n      // Each face needs all four vertices because the normals and texture\n      // coordinates are not all the same.\n      positions.push(position);\n      normals.push(normal);\n      texcoords.push(uv);\n\n    }\n    // Two triangles make a square face.\n    const offset = 4 * f;\n    indices.push(offset + 0, offset + 1, offset + 2);\n    indices.push(offset + 0, offset + 2, offset + 3);\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Creates a BufferInfo for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created cone BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBufferInfo\n */\n\n/**\n * Creates buffers for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, WebGLBuffer>} The created cone buffers.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBuffers\n */\n\n/**\n * Creates vertices for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis. .\n *\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, TypedArray>} The created cone vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createTruncatedConeVertices(\n    bottomRadius,\n    topRadius,\n    height,\n    radialSubdivisions,\n    verticalSubdivisions,\n    opt_topCap,\n    opt_bottomCap) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (verticalSubdivisions < 1) {\n    throw new Error('verticalSubdivisions must be 1 or greater');\n  }\n\n  const topCap = (opt_topCap === undefined) ? true : opt_topCap;\n  const bottomCap = (opt_bottomCap === undefined) ? true : opt_bottomCap;\n\n  const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n\n  const numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n  const indices   = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra / 2) * 2, Uint16Array);\n\n  const vertsAroundEdge = radialSubdivisions + 1;\n\n  // The slant of the cone is constant across its surface\n  const slant = Math.atan2(bottomRadius - topRadius, height);\n  const cosSlant = Math.cos(slant);\n  const sinSlant = Math.sin(slant);\n\n  const start = topCap ? -2 : 0;\n  const end = verticalSubdivisions + (bottomCap ? 2 : 0);\n\n  for (let yy = start; yy <= end; ++yy) {\n    let v = yy / verticalSubdivisions;\n    let y = height * v;\n    let ringRadius;\n    if (yy < 0) {\n      y = 0;\n      v = 1;\n      ringRadius = bottomRadius;\n    } else if (yy > verticalSubdivisions) {\n      y = height;\n      v = 1;\n      ringRadius = topRadius;\n    } else {\n      ringRadius = bottomRadius +\n        (topRadius - bottomRadius) * (yy / verticalSubdivisions);\n    }\n    if (yy === -2 || yy === verticalSubdivisions + 2) {\n      ringRadius = 0;\n      v = 0;\n    }\n    y -= height / 2;\n    for (let ii = 0; ii < vertsAroundEdge; ++ii) {\n      const sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);\n      const cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);\n      positions.push(sin * ringRadius, y, cos * ringRadius);\n      if (yy < 0) {\n        normals.push(0, -1, 0);\n      } else if (yy > verticalSubdivisions) {\n        normals.push(0, 1, 0);\n      } else if (ringRadius === 0.0) {\n        normals.push(0, 0, 0);\n      } else {\n        normals.push(sin * cosSlant, sinSlant, cos * cosSlant);\n      }\n      texcoords.push((ii / radialSubdivisions), 1 - v);\n    }\n  }\n\n  for (let yy = 0; yy < verticalSubdivisions + extra; ++yy) {  // eslint-disable-line\n    if (yy === 1 && topCap || yy === verticalSubdivisions + extra - 2 && bottomCap) {\n      continue;\n    }\n    for (let ii = 0; ii < radialSubdivisions; ++ii) {  // eslint-disable-line\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 0) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii);\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 0 + ii);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Expands RLE data\n * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z\n * @param {number[]} [padding] value to add each entry with.\n * @return {number[]} the expanded rleData\n * @private\n */\nfunction expandRLEData(rleData, padding) {\n  padding = padding || [];\n  const data = [];\n  for (let ii = 0; ii < rleData.length; ii += 4) {\n    const runLength = rleData[ii];\n    const element = rleData.slice(ii + 1, ii + 4);\n    element.push.apply(element, padding);\n    for (let jj = 0; jj < runLength; ++jj) {\n      data.push.apply(data, element);\n    }\n  }\n  return data;\n}\n\n/**\n * Creates 3D 'F' BufferInfo.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function create3DFBufferInfo\n */\n\n/**\n * Creates 3D 'F' buffers.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function create3DFBuffers\n */\n\n/**\n * Creates 3D 'F' vertices.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color arrays.\n *\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction create3DFVertices() {\n\n  const positions = [\n    // left column front\n    0,   0,  0,\n    0, 150,  0,\n    30,   0,  0,\n    0, 150,  0,\n    30, 150,  0,\n    30,   0,  0,\n\n    // top rung front\n    30,   0,  0,\n    30,  30,  0,\n    100,   0,  0,\n    30,  30,  0,\n    100,  30,  0,\n    100,   0,  0,\n\n    // middle rung front\n    30,  60,  0,\n    30,  90,  0,\n    67,  60,  0,\n    30,  90,  0,\n    67,  90,  0,\n    67,  60,  0,\n\n    // left column back\n      0,   0,  30,\n     30,   0,  30,\n      0, 150,  30,\n      0, 150,  30,\n     30,   0,  30,\n     30, 150,  30,\n\n    // top rung back\n     30,   0,  30,\n    100,   0,  30,\n     30,  30,  30,\n     30,  30,  30,\n    100,   0,  30,\n    100,  30,  30,\n\n    // middle rung back\n     30,  60,  30,\n     67,  60,  30,\n     30,  90,  30,\n     30,  90,  30,\n     67,  60,  30,\n     67,  90,  30,\n\n    // top\n      0,   0,   0,\n    100,   0,   0,\n    100,   0,  30,\n      0,   0,   0,\n    100,   0,  30,\n      0,   0,  30,\n\n    // top rung front\n    100,   0,   0,\n    100,  30,   0,\n    100,  30,  30,\n    100,   0,   0,\n    100,  30,  30,\n    100,   0,  30,\n\n    // under top rung\n    30,   30,   0,\n    30,   30,  30,\n    100,  30,  30,\n    30,   30,   0,\n    100,  30,  30,\n    100,  30,   0,\n\n    // between top rung and middle\n    30,   30,   0,\n    30,   60,  30,\n    30,   30,  30,\n    30,   30,   0,\n    30,   60,   0,\n    30,   60,  30,\n\n    // top of middle rung\n    30,   60,   0,\n    67,   60,  30,\n    30,   60,  30,\n    30,   60,   0,\n    67,   60,   0,\n    67,   60,  30,\n\n    // front of middle rung\n    67,   60,   0,\n    67,   90,  30,\n    67,   60,  30,\n    67,   60,   0,\n    67,   90,   0,\n    67,   90,  30,\n\n    // bottom of middle rung.\n    30,   90,   0,\n    30,   90,  30,\n    67,   90,  30,\n    30,   90,   0,\n    67,   90,  30,\n    67,   90,   0,\n\n    // front of bottom\n    30,   90,   0,\n    30,  150,  30,\n    30,   90,  30,\n    30,   90,   0,\n    30,  150,   0,\n    30,  150,  30,\n\n    // bottom\n    0,   150,   0,\n    0,   150,  30,\n    30,  150,  30,\n    0,   150,   0,\n    30,  150,  30,\n    30,  150,   0,\n\n    // left side\n    0,   0,   0,\n    0,   0,  30,\n    0, 150,  30,\n    0,   0,   0,\n    0, 150,  30,\n    0, 150,   0,\n  ];\n\n  const texcoords = [\n    // left column front\n    0.22, 0.19,\n    0.22, 0.79,\n    0.34, 0.19,\n    0.22, 0.79,\n    0.34, 0.79,\n    0.34, 0.19,\n\n    // top rung front\n    0.34, 0.19,\n    0.34, 0.31,\n    0.62, 0.19,\n    0.34, 0.31,\n    0.62, 0.31,\n    0.62, 0.19,\n\n    // middle rung front\n    0.34, 0.43,\n    0.34, 0.55,\n    0.49, 0.43,\n    0.34, 0.55,\n    0.49, 0.55,\n    0.49, 0.43,\n\n    // left column back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // middle rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // top rung front\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // under top rung\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // between top rung and middle\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // top of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // front of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom of middle rung.\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // front of bottom\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // left side\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n  ];\n\n  const normals = expandRLEData([\n    // left column front\n    // top rung front\n    // middle rung front\n    18, 0, 0, 1,\n\n    // left column back\n    // top rung back\n    // middle rung back\n    18, 0, 0, -1,\n\n    // top\n    6, 0, 1, 0,\n\n    // top rung front\n    6, 1, 0, 0,\n\n    // under top rung\n    6, 0, -1, 0,\n\n    // between top rung and middle\n    6, 1, 0, 0,\n\n    // top of middle rung\n    6, 0, 1, 0,\n\n    // front of middle rung\n    6, 1, 0, 0,\n\n    // bottom of middle rung.\n    6, 0, -1, 0,\n\n    // front of bottom\n    6, 1, 0, 0,\n\n    // bottom\n    6, 0, -1, 0,\n\n    // left side\n    6, -1, 0, 0,\n  ]);\n\n  const colors = expandRLEData([\n        // left column front\n        // top rung front\n        // middle rung front\n      18, 200,  70, 120,\n\n        // left column back\n        // top rung back\n        // middle rung back\n      18, 80, 70, 200,\n\n        // top\n      6, 70, 200, 210,\n\n        // top rung front\n      6, 200, 200, 70,\n\n        // under top rung\n      6, 210, 100, 70,\n\n        // between top rung and middle\n      6, 210, 160, 70,\n\n        // top of middle rung\n      6, 70, 180, 210,\n\n        // front of middle rung\n      6, 100, 70, 210,\n\n        // bottom of middle rung.\n      6, 76, 210, 100,\n\n        // front of bottom\n      6, 140, 210, 80,\n\n        // bottom\n      6, 90, 130, 110,\n\n        // left side\n      6, 160, 160, 220,\n  ], [255]);\n\n  const numVerts = positions.length / 3;\n\n  const arrays = {\n    position: createAugmentedTypedArray(3, numVerts),\n    texcoord: createAugmentedTypedArray(2,  numVerts),\n    normal: createAugmentedTypedArray(3, numVerts),\n    color: createAugmentedTypedArray(4, numVerts, Uint8Array),\n    indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array),\n  };\n\n  arrays.position.push(positions);\n  arrays.texcoord.push(texcoords);\n  arrays.normal.push(normals);\n  arrays.color.push(colors);\n\n  for (let ii = 0; ii < numVerts; ++ii) {\n    arrays.indices.push(ii);\n  }\n\n  return arrays;\n}\n\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCresentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCrescentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCrescentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n function createCrescentVertices(\n    verticalRadius,\n    outerRadius,\n    innerRadius,\n    thickness,\n    subdivisionsDown,\n    startOffset,\n    endOffset) {\n  if (subdivisionsDown <= 0) {\n    throw new Error('subdivisionDown must be > 0');\n  }\n\n  startOffset = startOffset || 0;\n  endOffset   = endOffset || 1;\n\n  const subdivisionsThick = 2;\n\n  const offsetRange = endOffset - startOffset;\n  const numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);\n  const positions   = createAugmentedTypedArray(3, numVertices);\n  const normals     = createAugmentedTypedArray(3, numVertices);\n  const texcoords   = createAugmentedTypedArray(2, numVertices);\n\n  function lerp(a, b, s) {\n    return a + (b - a) * s;\n  }\n\n  function createArc(arcRadius, x, normalMult, normalAdd, uMult, uAdd) {\n    for (let z = 0; z <= subdivisionsDown; z++) {\n      const uBack = x / (subdivisionsThick - 1);\n      const v = z / subdivisionsDown;\n      const xBack = (uBack - 0.5) * 2;\n      const angle = (startOffset + (v * offsetRange)) * Math.PI;\n      const s = Math.sin(angle);\n      const c = Math.cos(angle);\n      const radius = lerp(verticalRadius, arcRadius, s);\n      const px = xBack * thickness;\n      const py = c * verticalRadius;\n      const pz = s * radius;\n      positions.push(px, py, pz);\n      const n = add(multiply$1([0, s, c], normalMult), normalAdd);\n      normals.push(n);\n      texcoords.push(uBack * uMult + uAdd, v);\n    }\n  }\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let x = 0; x < subdivisionsThick; x++) {\n    const uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;\n    createArc(outerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);\n    createArc(innerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);\n  }\n\n  // Do outer surface.\n  const indices = createAugmentedTypedArray(3, (subdivisionsDown * 2) * (2 + subdivisionsThick), Uint16Array);\n\n  function createSurface(leftArcOffset, rightArcOffset) {\n    for (let z = 0; z < subdivisionsDown; ++z) {\n      // Make triangle 1 of quad.\n      indices.push(\n          leftArcOffset + z + 0,\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 0);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 1,\n          rightArcOffset + z + 0);\n    }\n  }\n\n  const numVerticesDown = subdivisionsDown + 1;\n  // front\n  createSurface(numVerticesDown * 0, numVerticesDown * 4);\n  // right\n  createSurface(numVerticesDown * 5, numVerticesDown * 7);\n  // back\n  createSurface(numVerticesDown * 6, numVerticesDown * 2);\n  // left\n  createSurface(numVerticesDown * 3, numVerticesDown * 1);\n\n  return {\n    position: positions,\n    normal:   normals,\n    texcoord: texcoords,\n    indices:  indices,\n  };\n}\n\n/**\n * Creates cylinder BufferInfo. The cylinder will be created around the origin\n * along the y-axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of cylinder.\n * @param {number} height Height of cylinder.\n * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n * @param {boolean} [topCap] Create top cap. Default = true.\n * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCylinderBufferInfo\n */\n\n /**\n  * Creates cylinder buffers. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, WebGLBuffer>} The created buffers.\n  * @memberOf module:twgl/primitives\n  * @function createCylinderBuffers\n  */\n\n /**\n  * Creates cylinder vertices. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, TypedArray>} The created vertices.\n  * @memberOf module:twgl/primitives\n  */\nfunction createCylinderVertices(\n    radius,\n    height,\n    radialSubdivisions,\n    verticalSubdivisions,\n    topCap,\n    bottomCap) {\n  return createTruncatedConeVertices(\n      radius,\n      radius,\n      height,\n      radialSubdivisions,\n      verticalSubdivisions,\n      topCap,\n      bottomCap);\n}\n\n/**\n * Creates BufferInfo for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTorusBufferInfo\n */\n\n/**\n * Creates buffers for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createTorusBuffers\n */\n\n/**\n * Creates vertices for a torus\n *\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createTorusVertices(\n    radius,\n    thickness,\n    radialSubdivisions,\n    bodySubdivisions,\n    startAngle,\n    endAngle) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (bodySubdivisions < 3) {\n    throw new Error('verticalSubdivisions must be 3 or greater');\n  }\n\n  startAngle = startAngle || 0;\n  endAngle = endAngle || Math.PI * 2;\n  const range = endAngle - startAngle;\n\n  const radialParts = radialSubdivisions + 1;\n  const bodyParts   = bodySubdivisions + 1;\n  const numVertices = radialParts * bodyParts;\n  const positions   = createAugmentedTypedArray(3, numVertices);\n  const normals     = createAugmentedTypedArray(3, numVertices);\n  const texcoords   = createAugmentedTypedArray(2, numVertices);\n  const indices     = createAugmentedTypedArray(3, (radialSubdivisions) * (bodySubdivisions) * 2, Uint16Array);\n\n  for (let slice = 0; slice < bodyParts; ++slice) {\n    const v = slice / bodySubdivisions;\n    const sliceAngle = v * Math.PI * 2;\n    const sliceSin = Math.sin(sliceAngle);\n    const ringRadius = radius + sliceSin * thickness;\n    const ny = Math.cos(sliceAngle);\n    const y = ny * thickness;\n    for (let ring = 0; ring < radialParts; ++ring) {\n      const u = ring / radialSubdivisions;\n      const ringAngle = startAngle + u * range;\n      const xSin = Math.sin(ringAngle);\n      const zCos = Math.cos(ringAngle);\n      const x = xSin * ringRadius;\n      const z = zCos * ringRadius;\n      const nx = xSin * sliceSin;\n      const nz = zCos * sliceSin;\n      positions.push(x, y, z);\n      normals.push(nx, ny, nz);\n      texcoords.push(u, 1 - v);\n    }\n  }\n\n  for (let slice = 0; slice < bodySubdivisions; ++slice) {  // eslint-disable-line\n    for (let ring = 0; ring < radialSubdivisions; ++ring) {  // eslint-disable-line\n      const nextRingIndex  = 1 + ring;\n      const nextSliceIndex = 1 + slice;\n      indices.push(radialParts * slice          + ring,\n                   radialParts * nextSliceIndex + ring,\n                   radialParts * slice          + nextRingIndex);\n      indices.push(radialParts * nextSliceIndex + ring,\n                   radialParts * nextSliceIndex + nextRingIndex,\n                   radialParts * slice          + nextRingIndex);\n    }\n  }\n\n  return {\n    position: positions,\n    normal:   normals,\n    texcoord: texcoords,\n    indices:  indices,\n  };\n}\n\n\n/**\n * Creates a disc BufferInfo. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createDiscBufferInfo\n */\n\n/**\n * Creates disc buffers. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createDiscBuffers\n */\n\n/**\n * Creates disc vertices. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createDiscVertices(\n    radius,\n    divisions,\n    stacks,\n    innerRadius,\n    stackPower) {\n  if (divisions < 3) {\n    throw new Error('divisions must be at least 3');\n  }\n\n  stacks = stacks ? stacks : 1;\n  stackPower = stackPower ? stackPower : 1;\n  innerRadius = innerRadius ? innerRadius : 0;\n\n  // Note: We don't share the center vertex because that would\n  // mess up texture coordinates.\n  const numVertices = (divisions + 1) * (stacks + 1);\n\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n  const indices   = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);\n\n  let firstIndex = 0;\n  const radiusSpan = radius - innerRadius;\n  const pointsPerStack = divisions + 1;\n\n  // Build the disk one stack at a time.\n  for (let stack = 0; stack <= stacks; ++stack) {\n    const stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);\n\n    for (let i = 0; i <= divisions; ++i) {\n      const theta = 2.0 * Math.PI * i / divisions;\n      const x = stackRadius * Math.cos(theta);\n      const z = stackRadius * Math.sin(theta);\n\n      positions.push(x, 0, z);\n      normals.push(0, 1, 0);\n      texcoords.push(1 - (i / divisions), stack / stacks);\n      if (stack > 0 && i !== divisions) {\n        // a, b, c and d are the indices of the vertices of a quad.  unless\n        // the current stack is the one closest to the center, in which case\n        // the vertices a and b connect to the center vertex.\n        const a = firstIndex + (i + 1);\n        const b = firstIndex + i;\n        const c = firstIndex + i - pointsPerStack;\n        const d = firstIndex + (i + 1) - pointsPerStack;\n\n        // Make a quad of the vertices a, b, c, d.\n        indices.push(a, b, c);\n        indices.push(a, c, d);\n      }\n    }\n\n    firstIndex += divisions + 1;\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * creates a random integer between 0 and range - 1 inclusive.\n * @param {number} range\n * @return {number} random value between 0 and range - 1 inclusive.\n * @private\n */\nfunction randInt(range) {\n  return Math.random() * range | 0;\n}\n\n/**\n * Used to supply random colors\n * @callback RandomColorFunc\n * @param {number} ndx index of triangle/quad if unindexed or index of vertex if indexed\n * @param {number} channel 0 = red, 1 = green, 2 = blue, 3 = alpha\n * @return {number} a number from 0 to 255\n * @memberOf module:twgl/primitives\n */\n\n/**\n * @typedef {Object} RandomVerticesOptions\n * @property {number} [vertsPerColor] Defaults to 3 for non-indexed vertices\n * @property {module:twgl/primitives.RandomColorFunc} [rand] A function to generate random numbers\n * @memberOf module:twgl/primitives\n */\n\n/**\n * Creates an augmentedTypedArray of random vertex colors.\n * If the vertices are indexed (have an indices array) then will\n * just make random colors. Otherwise assumes they are triangles\n * and makes one random color for every 3 vertices.\n * @param {Object.<string, AugmentedTypedArray>} vertices Vertices as returned from one of the createXXXVertices functions.\n * @param {module:twgl/primitives.RandomVerticesOptions} [options] options.\n * @return {Object.<string, AugmentedTypedArray>} same vertices as passed in with `color` added.\n * @memberOf module:twgl/primitives\n */\nfunction makeRandomVertexColors(vertices, options) {\n  options = options || {};\n  const numElements = vertices.position.numElements;\n  const vColors = createAugmentedTypedArray(4, numElements, Uint8Array);\n  const rand = options.rand || function(ndx, channel) {\n    return channel < 3 ? randInt(256) : 255;\n  };\n  vertices.color = vColors;\n  if (vertices.indices) {\n    // just make random colors if index\n    for (let ii = 0; ii < numElements; ++ii) {\n      vColors.push(rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3));\n    }\n  } else {\n    // make random colors per triangle\n    const numVertsPerColor = options.vertsPerColor || 3;\n    const numSets = numElements / numVertsPerColor;\n    for (let ii = 0; ii < numSets; ++ii) {  // eslint-disable-line\n      const color = [rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3)];\n      for (let jj = 0; jj < numVertsPerColor; ++jj) {\n        vColors.push(color);\n      }\n    }\n  }\n  return vertices;\n}\n\n/**\n * creates a function that calls fn to create vertices and then\n * creates a buffers for them\n * @private\n */\nfunction createBufferFunc(fn) {\n  return function(gl) {\n    const arrays = fn.apply(this, Array.prototype.slice.call(arguments, 1));\n    return createBuffersFromArrays(gl, arrays);\n  };\n}\n\n/**\n * creates a function that calls fn to create vertices and then\n * creates a bufferInfo object for them\n * @private\n */\nfunction createBufferInfoFunc(fn) {\n  return function(gl) {\n    const arrays = fn.apply(null,  Array.prototype.slice.call(arguments, 1));\n    return createBufferInfoFromArrays(gl, arrays);\n  };\n}\n\nconst arraySpecPropertyNames = [\n  \"numComponents\",\n  \"size\",\n  \"type\",\n  \"normalize\",\n  \"stride\",\n  \"offset\",\n  \"attrib\",\n  \"name\",\n  \"attribName\",\n];\n\n/**\n * Copy elements from one array to another\n *\n * @param {Array|TypedArray} src source array\n * @param {Array|TypedArray} dst dest array\n * @param {number} dstNdx index in dest to copy src\n * @param {number} [offset] offset to add to copied values\n * @private\n */\nfunction copyElements(src, dst, dstNdx, offset) {\n  offset = offset || 0;\n  const length = src.length;\n  for (let ii = 0; ii < length; ++ii) {\n    dst[dstNdx + ii] = src[ii] + offset;\n  }\n}\n\n/**\n * Creates an array of the same time\n *\n * @param {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} srcArray array who's type to copy\n * @param {number} length size of new array\n * @return {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} array with same type as srcArray\n * @private\n */\nfunction createArrayOfSameType(srcArray, length) {\n  const arraySrc = getArray(srcArray);\n  const newArray = new arraySrc.constructor(length);\n  let newArraySpec = newArray;\n  // If it appears to have been augmented make new one augmented\n  if (arraySrc.numComponents && arraySrc.numElements) {\n    augmentTypedArray(newArray, arraySrc.numComponents);\n  }\n  // If it was a full spec make new one a full spec\n  if (srcArray.data) {\n    newArraySpec = {\n      data: newArray,\n    };\n    copyNamedProperties(arraySpecPropertyNames, srcArray, newArraySpec);\n  }\n  return newArraySpec;\n}\n\n/**\n * Concatenates sets of vertices\n *\n * Assumes the vertices match in composition. For example\n * if one set of vertices has positions, normals, and indices\n * all sets of vertices must have positions, normals, and indices\n * and of the same type.\n *\n * Example:\n *\n *      const cubeVertices = twgl.primitives.createCubeVertices(2);\n *      const sphereVertices = twgl.primitives.createSphereVertices(1, 10, 10);\n *      // move the sphere 2 units up\n *      twgl.primitives.reorientVertices(\n *          sphereVertices, twgl.m4.translation([0, 2, 0]));\n *      // merge the sphere with the cube\n *      const cubeSphereVertices = twgl.primitives.concatVertices(\n *          [cubeVertices, sphereVertices]);\n *      // turn them into WebGL buffers and attrib data\n *      const bufferInfo = twgl.createBufferInfoFromArrays(gl, cubeSphereVertices);\n *\n * @param {module:twgl.Arrays[]} arrays Array of arrays of vertices\n * @return {module:twgl.Arrays} The concatenated vertices.\n * @memberOf module:twgl/primitives\n */\nfunction concatVertices(arrayOfArrays) {\n  const names = {};\n  let baseName;\n  // get names of all arrays.\n  // and numElements for each set of vertices\n  for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n    const arrays = arrayOfArrays[ii];\n    Object.keys(arrays).forEach(function(name) {  // eslint-disable-line\n      if (!names[name]) {\n        names[name] = [];\n      }\n      if (!baseName && name !== 'indices') {\n        baseName = name;\n      }\n      const arrayInfo = arrays[name];\n      const numComponents = getNumComponents(arrayInfo, name);\n      const array = getArray(arrayInfo);\n      const numElements = array.length / numComponents;\n      names[name].push(numElements);\n    });\n  }\n\n  // compute length of combined array\n  // and return one for reference\n  function getLengthOfCombinedArrays(name) {\n    let length = 0;\n    let arraySpec;\n    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n      const arrays = arrayOfArrays[ii];\n      const arrayInfo = arrays[name];\n      const array = getArray(arrayInfo);\n      length += array.length;\n      if (!arraySpec || arrayInfo.data) {\n        arraySpec = arrayInfo;\n      }\n    }\n    return {\n      length: length,\n      spec: arraySpec,\n    };\n  }\n\n  function copyArraysToNewArray(name, base, newArray) {\n    let baseIndex = 0;\n    let offset = 0;\n    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n      const arrays = arrayOfArrays[ii];\n      const arrayInfo = arrays[name];\n      const array = getArray(arrayInfo);\n      if (name === 'indices') {\n        copyElements(array, newArray, offset, baseIndex);\n        baseIndex += base[ii];\n      } else {\n        copyElements(array, newArray, offset);\n      }\n      offset += array.length;\n    }\n  }\n\n  const base = names[baseName];\n\n  const newArrays = {};\n  Object.keys(names).forEach(function(name) {\n    const info = getLengthOfCombinedArrays(name);\n    const newArraySpec = createArrayOfSameType(info.spec, info.length);\n    copyArraysToNewArray(name, base, getArray(newArraySpec));\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\n/**\n * Creates a duplicate set of vertices\n *\n * This is useful for calling reorientVertices when you\n * also want to keep the original available\n *\n * @param {module:twgl.Arrays} arrays of vertices\n * @return {module:twgl.Arrays} The duplicated vertices.\n * @memberOf module:twgl/primitives\n */\nfunction duplicateVertices(arrays) {\n  const newArrays = {};\n  Object.keys(arrays).forEach(function(name) {\n    const arraySpec = arrays[name];\n    const srcArray = getArray(arraySpec);\n    const newArraySpec = createArrayOfSameType(arraySpec, srcArray.length);\n    copyElements(srcArray, getArray(newArraySpec), 0);\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\nconst create3DFBufferInfo = createBufferInfoFunc(create3DFVertices);\nconst create3DFBuffers = createBufferFunc(create3DFVertices);\nconst createCubeBufferInfo = createBufferInfoFunc(createCubeVertices);\nconst createCubeBuffers = createBufferFunc(createCubeVertices);\nconst createPlaneBufferInfo = createBufferInfoFunc(createPlaneVertices);\nconst createPlaneBuffers = createBufferFunc(createPlaneVertices);\nconst createSphereBufferInfo = createBufferInfoFunc(createSphereVertices);\nconst createSphereBuffers = createBufferFunc(createSphereVertices);\nconst createTruncatedConeBufferInfo = createBufferInfoFunc(createTruncatedConeVertices);\nconst createTruncatedConeBuffers = createBufferFunc(createTruncatedConeVertices);\nconst createXYQuadBufferInfo = createBufferInfoFunc(createXYQuadVertices);\nconst createXYQuadBuffers = createBufferFunc(createXYQuadVertices);\nconst createCrescentBufferInfo = createBufferInfoFunc(createCrescentVertices);\nconst createCrescentBuffers = createBufferFunc(createCrescentVertices);\nconst createCylinderBufferInfo = createBufferInfoFunc(createCylinderVertices);\nconst createCylinderBuffers = createBufferFunc(createCylinderVertices);\nconst createTorusBufferInfo = createBufferInfoFunc(createTorusVertices);\nconst createTorusBuffers = createBufferFunc(createTorusVertices);\nconst createDiscBufferInfo = createBufferInfoFunc(createDiscVertices);\nconst createDiscBuffers = createBufferFunc(createDiscVertices);\n\n// these were mis-spelled until 4.12\nconst createCresentBufferInfo = createCrescentBufferInfo;\nconst createCresentBuffers = createCrescentBuffers;\nconst createCresentVertices = createCrescentVertices;\n\nvar primitives = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  create3DFBufferInfo: create3DFBufferInfo,\n  create3DFBuffers: create3DFBuffers,\n  create3DFVertices: create3DFVertices,\n  createAugmentedTypedArray: createAugmentedTypedArray,\n  createCubeBufferInfo: createCubeBufferInfo,\n  createCubeBuffers: createCubeBuffers,\n  createCubeVertices: createCubeVertices,\n  createPlaneBufferInfo: createPlaneBufferInfo,\n  createPlaneBuffers: createPlaneBuffers,\n  createPlaneVertices: createPlaneVertices,\n  createSphereBufferInfo: createSphereBufferInfo,\n  createSphereBuffers: createSphereBuffers,\n  createSphereVertices: createSphereVertices,\n  createTruncatedConeBufferInfo: createTruncatedConeBufferInfo,\n  createTruncatedConeBuffers: createTruncatedConeBuffers,\n  createTruncatedConeVertices: createTruncatedConeVertices,\n  createXYQuadBufferInfo: createXYQuadBufferInfo,\n  createXYQuadBuffers: createXYQuadBuffers,\n  createXYQuadVertices: createXYQuadVertices,\n  createCresentBufferInfo: createCresentBufferInfo,\n  createCresentBuffers: createCresentBuffers,\n  createCresentVertices: createCresentVertices,\n  createCrescentBufferInfo: createCrescentBufferInfo,\n  createCrescentBuffers: createCrescentBuffers,\n  createCrescentVertices: createCrescentVertices,\n  createCylinderBufferInfo: createCylinderBufferInfo,\n  createCylinderBuffers: createCylinderBuffers,\n  createCylinderVertices: createCylinderVertices,\n  createTorusBufferInfo: createTorusBufferInfo,\n  createTorusBuffers: createTorusBuffers,\n  createTorusVertices: createTorusVertices,\n  createDiscBufferInfo: createDiscBufferInfo,\n  createDiscBuffers: createDiscBuffers,\n  createDiscVertices: createDiscVertices,\n  deindexVertices: deindexVertices,\n  flattenNormals: flattenNormals,\n  makeRandomVertexColors: makeRandomVertexColors,\n  reorientDirections: reorientDirections,\n  reorientNormals: reorientNormals,\n  reorientPositions: reorientPositions,\n  reorientVertices: reorientVertices,\n  concatVertices: concatVertices,\n  duplicateVertices: duplicateVertices\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Gets the gl version as a number\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {number} version of gl\n * @private\n */\n//function getVersionAsNumber(gl) {\n//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));\n//}\n\n/**\n * Check if context is WebGL 2.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 2.0\n * @memberOf module:twgl\n */\nfunction isWebGL2(gl) {\n  // This is the correct check but it's slow\n  //  return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0\") === 0;\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGL2RenderingContext;\n  return !!gl.texStorage2D;\n}\n\n/**\n * Check if context is WebGL 1.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 1.0\n * @memberOf module:twgl\n */\nfunction isWebGL1(gl) {\n  // This is the correct check but it's slow\n  // const version = getVersionAsNumber(gl);\n  // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGLRenderingContext;\n  return !gl.texStorage2D;\n}\n\n/**\n * Gets a string for WebGL enum\n *\n * Note: Several enums are the same. Without more\n * context (which function) it's impossible to always\n * give the correct enum. As it is, for matching values\n * it gives all enums. Checking the WebGL2RenderingContext\n * that means\n *\n *      0     = ZERO | POINT | NONE | NO_ERROR\n *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT\n *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB\n *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING\n *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING\n *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING\n *\n * It's also not useful for bits really unless you pass in individual bits.\n * In other words\n *\n *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;\n *     twgl.glEnumToString(gl, bits);  // not going to work\n *\n * Note that some enums only exist on extensions. If you\n * want them to show up you need to pass the extension at least\n * once. For example\n *\n *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');\n *     if (ext) {\n *        twgl.glEnumToString(ext, 0);  // just prime the function\n *\n *        ..later..\n *\n *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;\n *        console.log(twgl.glEnumToString(gl, internalFormat));\n *\n * Notice I didn't have to pass the extension the second time. This means\n * you can have place that generically gets an enum for texture formats for example.\n * and as long as you primed the function with the extensions\n *\n * If you're using `twgl.addExtensionsToContext` to enable your extensions\n * then twgl will automatically get the extension's enums.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object\n * @param {number} value the value of the enum you want to look up.\n * @return {string} enum string or hex value\n * @memberOf module:twgl\n * @function glEnumToString\n */\nconst glEnumToString = (function() {\n  const haveEnumsForType = {};\n  const enums = {};\n\n  function addEnums(gl) {\n    const type = gl.constructor.name;\n    if (!haveEnumsForType[type]) {\n      for (const key in gl) {\n        if (typeof gl[key] === 'number') {\n          const existing = enums[gl[key]];\n          enums[gl[key]] = existing ? `${existing} | ${key}` : key;\n        }\n      }\n      haveEnumsForType[type] = true;\n    }\n  }\n\n  return function glEnumToString(gl, value) {\n    addEnums(gl);\n    return enums[value] || (typeof value === 'number' ? `0x${value.toString(16)}` : value);\n  };\n}());\n\nvar utils = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  glEnumToString: glEnumToString,\n  isWebGL1: isWebGL1,\n  isWebGL2: isWebGL2\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nconst defaults$1 = {\n  textureColor: new Uint8Array([128, 192, 255, 255]),\n  textureOptions: {},\n  crossOrigin: undefined,\n};\nconst isArrayBuffer = isArrayBuffer$1;\n\n// Should we make this on demand?\nconst getShared2DContext = function() {\n  let s_ctx;\n  return function getShared2DContext() {\n    s_ctx = s_ctx ||\n        ((typeof document !== 'undefined' && document.createElement)\n          ? document.createElement(\"canvas\").getContext(\"2d\")\n          : null);\n    return s_ctx;\n  };\n}();\n\n// NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but\n//       not only does Firefox NOT support it but Firefox freezes immediately\n//       if you try to create one instead of just returning null and continuing.\n//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext(\"2d\"));  // OffscreenCanvas may not support 2d\n\n// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2\n// we can use the various unpack settings. Otherwise we could try using\n// the ability of an ImageBitmap to be cut. Unfortunately cutting an ImageBitmap\n// is async and the current TWGL code expects a non-Async result though that\n// might not be a problem. ImageBitmap though is not available in Edge or Safari\n// as of 2018-01-02\n\n/* PixelFormat */\nconst ALPHA                          = 0x1906;\nconst RGB                            = 0x1907;\nconst RGBA$1                           = 0x1908;\nconst LUMINANCE                      = 0x1909;\nconst LUMINANCE_ALPHA                = 0x190A;\nconst DEPTH_COMPONENT$1                = 0x1902;\nconst DEPTH_STENCIL$1                  = 0x84F9;\n\n/* TextureWrapMode */\n// const REPEAT                         = 0x2901;\n// const MIRRORED_REPEAT                = 0x8370;\nconst CLAMP_TO_EDGE$1                  = 0x812f;\n\n/* TextureMagFilter */\nconst NEAREST                        = 0x2600;\nconst LINEAR$1                         = 0x2601;\n\n/* TextureMinFilter */\n// const NEAREST_MIPMAP_NEAREST         = 0x2700;\n// const LINEAR_MIPMAP_NEAREST          = 0x2701;\n// const NEAREST_MIPMAP_LINEAR          = 0x2702;\n// const LINEAR_MIPMAP_LINEAR           = 0x2703;\n\n/* Texture Target */\nconst TEXTURE_2D$2                     = 0x0de1;\nconst TEXTURE_CUBE_MAP$1               = 0x8513;\nconst TEXTURE_3D$1                     = 0x806f;\nconst TEXTURE_2D_ARRAY$1               = 0x8c1a;\n\n/* Cubemap Targets */\nconst TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;\nconst TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;\nconst TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;\nconst TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851a;\n\n/* Texture Parameters */\nconst TEXTURE_MIN_FILTER             = 0x2801;\nconst TEXTURE_MAG_FILTER             = 0x2800;\nconst TEXTURE_WRAP_S                 = 0x2802;\nconst TEXTURE_WRAP_T                 = 0x2803;\nconst TEXTURE_WRAP_R                 = 0x8072;\nconst TEXTURE_MIN_LOD                = 0x813a;\nconst TEXTURE_MAX_LOD                = 0x813b;\nconst TEXTURE_BASE_LEVEL             = 0x813c;\nconst TEXTURE_MAX_LEVEL              = 0x813d;\nconst TEXTURE_COMPARE_MODE           = 0x884C;\nconst TEXTURE_COMPARE_FUNC           = 0x884D;\n\n/* Pixel store */\nconst UNPACK_ALIGNMENT                   = 0x0cf5;\nconst UNPACK_ROW_LENGTH                  = 0x0cf2;\nconst UNPACK_IMAGE_HEIGHT                = 0x806e;\nconst UNPACK_SKIP_PIXELS                 = 0x0cf4;\nconst UNPACK_SKIP_ROWS                   = 0x0cf3;\nconst UNPACK_SKIP_IMAGES                 = 0x806d;\nconst UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\nconst UNPACK_PREMULTIPLY_ALPHA_WEBGL     = 0x9241;\nconst UNPACK_FLIP_Y_WEBGL                = 0x9240;\n\nconst R8                           = 0x8229;\nconst R8_SNORM                     = 0x8F94;\nconst R16F                         = 0x822D;\nconst R32F                         = 0x822E;\nconst R8UI                         = 0x8232;\nconst R8I                          = 0x8231;\nconst RG16UI                       = 0x823A;\nconst RG16I                        = 0x8239;\nconst RG32UI                       = 0x823C;\nconst RG32I                        = 0x823B;\nconst RG8                          = 0x822B;\nconst RG8_SNORM                    = 0x8F95;\nconst RG16F                        = 0x822F;\nconst RG32F                        = 0x8230;\nconst RG8UI                        = 0x8238;\nconst RG8I                         = 0x8237;\nconst R16UI                        = 0x8234;\nconst R16I                         = 0x8233;\nconst R32UI                        = 0x8236;\nconst R32I                         = 0x8235;\nconst RGB8                         = 0x8051;\nconst SRGB8                        = 0x8C41;\nconst RGB565$1                       = 0x8D62;\nconst RGB8_SNORM                   = 0x8F96;\nconst R11F_G11F_B10F               = 0x8C3A;\nconst RGB9_E5                      = 0x8C3D;\nconst RGB16F                       = 0x881B;\nconst RGB32F                       = 0x8815;\nconst RGB8UI                       = 0x8D7D;\nconst RGB8I                        = 0x8D8F;\nconst RGB16UI                      = 0x8D77;\nconst RGB16I                       = 0x8D89;\nconst RGB32UI                      = 0x8D71;\nconst RGB32I                       = 0x8D83;\nconst RGBA8                        = 0x8058;\nconst SRGB8_ALPHA8                 = 0x8C43;\nconst RGBA8_SNORM                  = 0x8F97;\nconst RGB5_A1$1                      = 0x8057;\nconst RGBA4$1                        = 0x8056;\nconst RGB10_A2                     = 0x8059;\nconst RGBA16F                      = 0x881A;\nconst RGBA32F                      = 0x8814;\nconst RGBA8UI                      = 0x8D7C;\nconst RGBA8I                       = 0x8D8E;\nconst RGB10_A2UI                   = 0x906F;\nconst RGBA16UI                     = 0x8D76;\nconst RGBA16I                      = 0x8D88;\nconst RGBA32I                      = 0x8D82;\nconst RGBA32UI                     = 0x8D70;\n\nconst DEPTH_COMPONENT16$1            = 0x81A5;\nconst DEPTH_COMPONENT24$1            = 0x81A6;\nconst DEPTH_COMPONENT32F$1           = 0x8CAC;\nconst DEPTH32F_STENCIL8$1            = 0x8CAD;\nconst DEPTH24_STENCIL8$1             = 0x88F0;\n\n/* DataType */\nconst BYTE                         = 0x1400;\nconst UNSIGNED_BYTE$1                = 0x1401;\nconst SHORT                        = 0x1402;\nconst UNSIGNED_SHORT$1               = 0x1403;\nconst INT$1                          = 0x1404;\nconst UNSIGNED_INT$1                 = 0x1405;\nconst FLOAT$1                        = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5         = 0x8363;\nconst HALF_FLOAT                   = 0x140B;\nconst HALF_FLOAT_OES               = 0x8D61;  // Thanks Khronos for making this different >:(\nconst UNSIGNED_INT_2_10_10_10_REV  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nconst UNSIGNED_INT_24_8            = 0x84FA;\n\nconst RG                           = 0x8227;\nconst RG_INTEGER                   = 0x8228;\nconst RED                          = 0x1903;\nconst RED_INTEGER                  = 0x8D94;\nconst RGB_INTEGER                  = 0x8D98;\nconst RGBA_INTEGER                 = 0x8D99;\n\nconst formatInfo = {};\n{\n  // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle\n  // the name.\n  const f = formatInfo;\n  f[ALPHA]           = { numColorComponents: 1, };\n  f[LUMINANCE]       = { numColorComponents: 1, };\n  f[LUMINANCE_ALPHA] = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGBA$1]            = { numColorComponents: 4, };\n  f[RED]             = { numColorComponents: 1, };\n  f[RED_INTEGER]     = { numColorComponents: 1, };\n  f[RG]              = { numColorComponents: 2, };\n  f[RG_INTEGER]      = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGB_INTEGER]     = { numColorComponents: 3, };\n  f[RGBA$1]            = { numColorComponents: 4, };\n  f[RGBA_INTEGER]    = { numColorComponents: 4, };\n  f[DEPTH_COMPONENT$1] = { numColorComponents: 1, };\n  f[DEPTH_STENCIL$1]   = { numColorComponents: 2, };\n}\n\n/**\n * @typedef {Object} TextureFormatDetails\n * @property {number} textureFormat format to pass texImage2D and similar functions.\n * @property {boolean} colorRenderable true if you can render to this format of texture.\n * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.\n * @property {number[]} type Array of possible types you can pass to texImage2D and similar function\n * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element\n * @private\n */\n\nlet s_textureInternalFormatInfo;\nfunction getTextureInternalFormatInfo(internalFormat) {\n  if (!s_textureInternalFormatInfo) {\n    // NOTE: these properties need unique names so we can let Uglify mangle the name.\n    const t = {};\n    // unsized formats\n    t[ALPHA]              = { textureFormat: ALPHA,           colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1], };\n    t[LUMINANCE]          = { textureFormat: LUMINANCE,       colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1], };\n    t[LUMINANCE_ALPHA]    = { textureFormat: LUMINANCE_ALPHA, colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2, 4, 4, 8],        type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1], };\n    t[RGB]                = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 6, 6, 12, 2],    type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1, UNSIGNED_SHORT_5_6_5], };\n    t[RGBA$1]               = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 8, 8, 16, 2, 2], type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1, UNSIGNED_SHORT_4_4_4_4, UNSIGNED_SHORT_5_5_5_1], };\n    t[DEPTH_COMPONENT$1]    = { textureFormat: DEPTH_COMPONENT$1, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],              type: [UNSIGNED_INT$1, UNSIGNED_SHORT$1], };\n\n    // sized formats\n    t[R8]                 = { textureFormat: RED,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1],        type: [UNSIGNED_BYTE$1], };\n    t[R8_SNORM]           = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [1],        type: [BYTE], };\n    t[R16F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [4, 2],     type: [FLOAT$1, HALF_FLOAT], };\n    t[R32F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$1], };\n    t[R8UI]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [UNSIGNED_BYTE$1], };\n    t[R8I]                = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [BYTE], };\n    t[R16UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_SHORT$1], };\n    t[R16I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [SHORT], };\n    t[R32UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$1], };\n    t[R32I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [INT$1], };\n    t[RG8]                = { textureFormat: RG,              colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2],        type: [UNSIGNED_BYTE$1], };\n    t[RG8_SNORM]          = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [2],        type: [BYTE], };\n    t[RG16F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [8, 4],     type: [FLOAT$1, HALF_FLOAT], };\n    t[RG32F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: false, bytesPerElement: [8],        type: [FLOAT$1], };\n    t[RG8UI]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_BYTE$1], };\n    t[RG8I]               = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [BYTE], };\n    t[RG16UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_SHORT$1], };\n    t[RG16I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [SHORT], };\n    t[RG32UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_INT$1], };\n    t[RG32I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [INT$1], };\n    t[RGB8]               = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$1], };\n    t[SRGB8]              = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$1], };\n    t[RGB565$1]             = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 2],     type: [UNSIGNED_BYTE$1, UNSIGNED_SHORT_5_6_5], };\n    t[RGB8_SNORM]         = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [BYTE], };\n    t[R11F_G11F_B10F]     = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$1, HALF_FLOAT, UNSIGNED_INT_10F_11F_11F_REV], };\n    t[RGB9_E5]            = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$1, HALF_FLOAT, UNSIGNED_INT_5_9_9_9_REV], };\n    t[RGB16F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6],    type: [FLOAT$1, HALF_FLOAT], };\n    t[RGB32F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [FLOAT$1], };\n    t[RGB8UI]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [UNSIGNED_BYTE$1], };\n    t[RGB8I]              = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [BYTE], };\n    t[RGB16UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [UNSIGNED_SHORT$1], };\n    t[RGB16I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [SHORT], };\n    t[RGB32UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [UNSIGNED_INT$1], };\n    t[RGB32I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [INT$1], };\n    t[RGBA8]              = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$1], };\n    t[SRGB8_ALPHA8]       = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$1], };\n    t[RGBA8_SNORM]        = { textureFormat: RGBA$1,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [4],        type: [BYTE], };\n    t[RGB5_A1$1]            = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2, 4],  type: [UNSIGNED_BYTE$1, UNSIGNED_SHORT_5_5_5_1, UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA4$1]              = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2],     type: [UNSIGNED_BYTE$1, UNSIGNED_SHORT_4_4_4_4], };\n    t[RGB10_A2]           = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA16F]            = { textureFormat: RGBA$1,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [16, 8],    type: [FLOAT$1, HALF_FLOAT], };\n    t[RGBA32F]            = { textureFormat: RGBA$1,            colorRenderable: false, textureFilterable: false, bytesPerElement: [16],       type: [FLOAT$1], };\n    t[RGBA8UI]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_BYTE$1], };\n    t[RGBA8I]             = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [BYTE], };\n    t[RGB10_A2UI]         = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA16UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_SHORT$1], };\n    t[RGBA16I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [SHORT], };\n    t[RGBA32I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [INT$1], };\n    t[RGBA32UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [UNSIGNED_INT$1], };\n    // Sized Internal\n    t[DEPTH_COMPONENT16$1]  = { textureFormat: DEPTH_COMPONENT$1, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],     type: [UNSIGNED_SHORT$1, UNSIGNED_INT$1], };\n    t[DEPTH_COMPONENT24$1]  = { textureFormat: DEPTH_COMPONENT$1, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$1], };\n    t[DEPTH_COMPONENT32F$1] = { textureFormat: DEPTH_COMPONENT$1, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$1], };\n    t[DEPTH24_STENCIL8$1]   = { textureFormat: DEPTH_STENCIL$1,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_24_8], };\n    t[DEPTH32F_STENCIL8$1]  = { textureFormat: DEPTH_STENCIL$1,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT_32_UNSIGNED_INT_24_8_REV], };\n\n    Object.keys(t).forEach(function(internalFormat) {\n      const info = t[internalFormat];\n      info.bytesPerElementMap = {};\n      info.bytesPerElement.forEach(function(bytesPerElement, ndx) {\n        const type = info.type[ndx];\n        info.bytesPerElementMap[type] = bytesPerElement;\n      });\n    });\n    s_textureInternalFormatInfo = t;\n  }\n  return s_textureInternalFormatInfo[internalFormat];\n}\n\n/**\n * Gets the number of bytes per element for a given internalFormat / type\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @param {number} type The type parameter for texImage2D etc..\n * @return {number} the number of bytes per element for the given internalFormat, type combo\n * @memberOf module:twgl/textures\n */\nfunction getBytesPerElementForInternalFormat(internalFormat, type) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  const bytesPerElement = info.bytesPerElementMap[type];\n  if (bytesPerElement === undefined) {\n    throw \"unknown internal format\";\n  }\n  return bytesPerElement;\n}\n\n/**\n * Info related to a specific texture internalFormat as returned\n * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.\n *\n * @typedef {Object} TextureFormatInfo\n * @property {number} format Format to pass to texImage2D and related functions\n * @property {number} type Type to pass to texImage2D and related functions\n * @memberOf module:twgl/textures\n */\n\n/**\n * Gets the format and type for a given internalFormat\n *\n * @param {number} internalFormat The internal format\n * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,\n * @memberOf module:twgl/textures\n */\nfunction getFormatAndTypeForInternalFormat(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return {\n    format: info.textureFormat,\n    type: info.type[0],\n  };\n}\n\n/**\n * Returns true if value is power of 2\n * @param {number} value number to check.\n * @return true if value is power of 2\n * @private\n */\nfunction isPowerOf2(value) {\n  return (value & (value - 1)) === 0;\n}\n\n/**\n * Gets whether or not we can generate mips for the given\n * internal format.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number} width The width parameter from texImage2D etc..\n * @param {number} height The height parameter from texImage2D etc..\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canGenerateMipmap(gl, width, height, internalFormat) {\n  if (!isWebGL2(gl)) {\n    return isPowerOf2(width) && isPowerOf2(height);\n  }\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.colorRenderable && info.textureFilterable;\n}\n\n/**\n * Gets whether or not we can generate mips for the given format\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canFilter(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.textureFilterable;\n}\n\n/**\n * Gets the number of components for a given image format.\n * @param {number} format the format.\n * @return {number} the number of components for the format.\n * @memberOf module:twgl/textures\n */\nfunction getNumComponentsForFormat(format) {\n  const info = formatInfo[format];\n  if (!info) {\n    throw \"unknown format: \" + format;\n  }\n  return info.numColorComponents;\n}\n\n/**\n * Gets the texture type for a given array type.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @return {number} the gl texture type\n * @private\n */\nfunction getTextureTypeForArrayType(gl, src, defaultType) {\n  if (isArrayBuffer(src)) {\n    return getGLTypeForTypedArray(src);\n  }\n  return defaultType || UNSIGNED_BYTE$1;\n}\n\nfunction guessDimensions(gl, target, width, height, numElements) {\n  if (numElements % 1 !== 0) {\n    throw \"can't guess dimensions\";\n  }\n  if (!width && !height) {\n    const size = Math.sqrt(numElements / (target === TEXTURE_CUBE_MAP$1 ? 6 : 1));\n    if (size % 1 === 0) {\n      width = size;\n      height = size;\n    } else {\n      width = numElements;\n      height = 1;\n    }\n  } else if (!height) {\n    height = numElements / width;\n    if (height % 1) {\n      throw \"can't guess dimensions\";\n    }\n  } else if (!width) {\n    width = numElements / height;\n    if (width % 1) {\n      throw \"can't guess dimensions\";\n    }\n  }\n  return {\n    width: width,\n    height: height,\n  };\n}\n\n/**\n * Sets the default texture color.\n *\n * The default texture color is used when loading textures from\n * urls. Because the URL will be loaded async we'd like to be\n * able to use the texture immediately. By putting a 1x1 pixel\n * color in the texture we can start using the texture before\n * the URL has loaded.\n *\n * @param {number[]} color Array of 4 values in the range 0 to 1\n * @deprecated see {@link module:twgl.setDefaults}\n * @memberOf module:twgl/textures\n */\nfunction setDefaultTextureColor(color) {\n  defaults$1.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\nfunction setDefaults$1(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$1);\n  if (newDefaults.textureColor) {\n    setDefaultTextureColor(newDefaults.textureColor);\n  }\n}\n\n/**\n * A function to generate the source for a texture.\n * @callback TextureFunc\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options the texture options\n * @return {*} Returns any of the things documented for `src` for {@link module:twgl.TextureOptions}.\n * @memberOf module:twgl\n */\n\n/**\n * Texture options passed to most texture functions. Each function will use whatever options\n * are appropriate for its needs. This lets you pass the same options to all functions.\n *\n * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,\n * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.\n *\n * @typedef {Object} TextureOptions\n * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.\n * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.\n * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.\n * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.\n * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .\n * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`\n *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.\n * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`\n * @property {number} [minMag] both the min and mag filter settings.\n * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`\n * @property {number} [format] format for texture. Defaults to `gl.RGBA`.\n * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`\n *     is ArrayBufferView defaults to type that matches ArrayBufferView type.\n * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube\n * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [minLod] TEXTURE_MIN_LOD setting\n * @property {number} [maxLod] TEXTURE_MAX_LOD setting\n * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting\n * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting\n * @property {number} [compareFunc] TEXTURE_COMPARE_FUNC setting\n * @property {number} [compareMode] TEXTURE_COMPARE_MODE setting\n * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.\n * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.\n *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`\n *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink\n * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and\n *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above\n *    then then `auto` is assumed to be `false` unless explicity set to `true`.\n * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is\n *\n *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]\n *\n * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture\n *\n *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable\n *    1x1 pixel texture will be returned immediately. The texture will be updated once the image has downloaded.\n *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.\n *    The pieces will be uploaded in `cubeFaceOrder`\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then each entry is a slice of the a 2d array texture\n *    and will be scaled to the specified width and height OR to the size of the first image that loads.\n *\n *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,\n *    `HTMLCanvasElement`, `HTMLVideoElement`.\n *\n *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is\n *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`\n *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided\n *    by 6. Then\n *\n *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height\n *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.\n *\n *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.\n *\n * If `number[]` will be converted to `type`.\n *\n * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.\n * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`\n * an array etc...\n *\n * If `src` is undefined then an empty texture will be created of size `width` by `height`.\n *\n * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.\n *    default: undefined. Also see {@link module:twgl.setDefaults}.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets any packing state that will be set based on the options.\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setPackState(gl, options) {\n  if (options.colorspaceConversion !== undefined) {\n    gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);\n  }\n  if (options.premultiplyAlpha !== undefined) {\n    gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);\n  }\n  if (options.flipY !== undefined) {\n    gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, options.flipY);\n  }\n}\n\n/**\n * Set skip state to defaults\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setSkipStateToDefault(gl) {\n  gl.pixelStorei(UNPACK_ALIGNMENT, 4);\n  if (isWebGL2(gl)) {\n    gl.pixelStorei(UNPACK_ROW_LENGTH, 0);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_PIXELS, 0);\n    gl.pixelStorei(UNPACK_SKIP_ROWS, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n  }\n}\n\n/**\n * Sets the parameters of a texture or sampler\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number|WebGLSampler} target texture target or sampler\n * @param {function()} parameteriFn texParameteri or samplerParameteri fn\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @private\n */\nfunction setTextureSamplerParameters(gl, target, parameteriFn, options) {\n  if (options.minMag) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.minMag);\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.minMag);\n  }\n  if (options.min) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.min);\n  }\n  if (options.mag) {\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.mag);\n  }\n  if (options.wrap) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrap);\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrap);\n    if (target === TEXTURE_3D$1 || isSampler(gl, target)) {\n      parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrap);\n    }\n  }\n  if (options.wrapR) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrapR);\n  }\n  if (options.wrapS) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrapS);\n  }\n  if (options.wrapT) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrapT);\n  }\n  if (options.minLod !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_LOD, options.minLod);\n  }\n  if (options.maxLod !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LOD, options.maxLod);\n  }\n  if (options.baseLevel !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_BASE_LEVEL, options.baseLevel);\n  }\n  if (options.maxLevel !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LEVEL, options.maxLevel);\n  }\n  if (options.compareFunc !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_COMPARE_FUNC, options.compareFunc);\n  }\n  if (options.compareMode !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_COMPARE_MODE, options.compareMode);\n  }\n}\n\n/**\n * Sets the texture parameters of a texture.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureParameters(gl, tex, options) {\n  const target = options.target || TEXTURE_2D$2;\n  gl.bindTexture(target, tex);\n  setTextureSamplerParameters(gl, target, gl.texParameteri, options);\n}\n\n/**\n * Sets the sampler parameters of a sampler.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLSampler} sampler the WebGLSampler to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setSamplerParameters(gl, sampler, options) {\n  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);\n}\n\n/**\n * Creates a new sampler object and sets parameters.\n *\n * Example:\n *\n *      const sampler = twgl.createSampler(gl, {\n *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER\n *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.\n * @return {Object.<string,WebGLSampler>} the created samplers by name\n * @private\n */\nfunction createSampler(gl, options) {\n  const sampler = gl.createSampler();\n  setSamplerParameters(gl, sampler, options);\n  return sampler;\n}\n\n/**\n * Creates a multiple sampler objects and sets parameters on each.\n *\n * Example:\n *\n *      const samplers = twgl.createSamplers(gl, {\n *        nearest: {\n *          minMag: gl.NEAREST,\n *        },\n *        nearestClampS: {\n *          minMag: gl.NEAREST,\n *          wrapS: gl.CLAMP_TO_NEAREST,\n *        },\n *        linear: {\n *          minMag: gl.LINEAR,\n *        },\n *        nearestClamp: {\n *          minMag: gl.NEAREST,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClamp: {\n *          minMag: gl.LINEAR,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClampT: {\n *          minMag: gl.LINEAR,\n *          wrapT: gl.CLAMP_TO_EDGE,\n *        },\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler\n * @private\n */\nfunction createSamplers(gl, samplerOptions) {\n  const samplers = {};\n  Object.keys(samplerOptions).forEach(function(name) {\n    samplers[name] = createSampler(gl, samplerOptions[name]);\n  });\n  return samplers;\n}\n\n/**\n * Makes a 1x1 pixel\n * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.\n * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values\n * @return {Uint8Array} Unit8Array with color.\n * @private\n */\nfunction make1Pixel(color) {\n  color = color || defaults$1.textureColor;\n  if (isArrayBuffer(color)) {\n    return color;\n  }\n  return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\n/**\n * Sets filtering or generates mips for texture based on width or height\n * If width or height is not passed in uses `options.width` and//or `options.height`\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @param {number} [width] width of texture\n * @param {number} [height] height of texture\n * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..\n * @memberOf module:twgl/textures\n */\nfunction setTextureFilteringForSize(gl, tex, options, width, height, internalFormat) {\n  options = options || defaults$1.textureOptions;\n  internalFormat = internalFormat || RGBA$1;\n  const target = options.target || TEXTURE_2D$2;\n  width = width || options.width;\n  height = height || options.height;\n  gl.bindTexture(target, tex);\n  if (canGenerateMipmap(gl, width, height, internalFormat)) {\n    gl.generateMipmap(target);\n  } else {\n    const filtering = canFilter(internalFormat) ? LINEAR$1 : NEAREST;\n    gl.texParameteri(target, TEXTURE_MIN_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_MAG_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE$1);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE$1);\n  }\n}\n\nfunction shouldAutomaticallySetTextureFilteringForSize(options) {\n  return options.auto === true || (options.auto === undefined && options.level === undefined);\n}\n\n/**\n * Gets an array of cubemap face enums\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @return {number[]} cubemap face enums\n * @private\n */\nfunction getCubeFaceOrder(gl, options) {\n  options = options || {};\n  return options.cubeFaceOrder || [\n      TEXTURE_CUBE_MAP_POSITIVE_X,\n      TEXTURE_CUBE_MAP_NEGATIVE_X,\n      TEXTURE_CUBE_MAP_POSITIVE_Y,\n      TEXTURE_CUBE_MAP_NEGATIVE_Y,\n      TEXTURE_CUBE_MAP_POSITIVE_Z,\n      TEXTURE_CUBE_MAP_NEGATIVE_Z,\n    ];\n}\n\n/**\n * @typedef {Object} FaceInfo\n * @property {number} face gl enum for texImage2D\n * @property {number} ndx face index (0 - 5) into source data\n * @ignore\n */\n\n/**\n * Gets an array of FaceInfos\n * There's a bug in some NVidia drivers that will crash the driver if\n * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take\n * the user's desired order from his faces to WebGL and make sure we\n * do the faces in WebGL order\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundant but\n *    it's needed internally to sort the array of `ndx` properties by `face`.\n * @private\n */\nfunction getCubeFacesWithNdx(gl, options) {\n  const faces = getCubeFaceOrder(gl, options);\n  // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(\n  const facesWithNdx = faces.map(function(face, ndx) {\n    return { face: face, ndx: ndx };\n  });\n  facesWithNdx.sort(function(a, b) {\n    return a.face - b.face;\n  });\n  return facesWithNdx;\n}\n\n/**\n * Set a texture from the contents of an element. Will also set\n * texture filtering or generate mips based on the dimensions of the element\n * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will\n * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {HTMLElement} element a canvas, img, or video element.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @kind function\n */\nfunction setTextureFromElement(gl, tex, element, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D$2;\n  const level = options.level || 0;\n  let width = element.width;\n  let height = element.height;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP$1) {\n    // guess the parts\n    const imgWidth  = element.width;\n    const imgHeight = element.height;\n    let size;\n    let slices;\n    if (imgWidth / 6 === imgHeight) {\n      // It's 6x1\n      size = imgHeight;\n      slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n    } else if (imgHeight / 6 === imgWidth) {\n      // It's 1x6\n      size = imgWidth;\n      slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];\n    } else if (imgWidth / 3 === imgHeight / 2) {\n      // It's 3x2\n      size = imgWidth / 3;\n      slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];\n    } else if (imgWidth / 2 === imgHeight / 3) {\n      // It's 2x3\n      size = imgWidth / 2;\n      slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];\n    } else {\n      throw \"can't figure out cube map from element: \" + (element.src ? element.src : element.nodeName);\n    }\n    const ctx = getShared2DContext();\n    if (ctx) {\n      ctx.canvas.width = size;\n      ctx.canvas.height = size;\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);\n        gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);\n      });\n      // Free up the canvas memory\n      ctx.canvas.width = 1;\n      ctx.canvas.height = 1;\n    } else if (typeof createImageBitmap !== 'undefined') {\n      // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's\n      // note lossy? (alpha is not premultiplied? although I'm not sure what\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        // We can't easily use a default texture color here as it would have to match\n        // the type across all faces where as with a 2D one there's only one face\n        // so we're replacing everything all at once. It also has to be the correct size.\n        // On the other hand we need all faces to be the same size so as one face loads\n        // the rest match else the texture will be un-renderable.\n        gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);\n        createImageBitmap(element, xOffset, yOffset, size, size, {\n          premultiplyAlpha: 'none',\n          colorSpaceConversion: 'none',\n        })\n        .then(function(imageBitmap) {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n          gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n          }\n        });\n      });\n    }\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    const smallest = Math.min(element.width, element.height);\n    const largest = Math.max(element.width, element.height);\n    const depth = largest / smallest;\n    if (depth % 1 !== 0) {\n      throw \"can not compute 3D dimensions of element\";\n    }\n    const xMult = element.width  === largest ? 1 : 0;\n    const yMult = element.height === largest ? 1 : 0;\n    gl.pixelStorei(UNPACK_ALIGNMENT, 1);\n    gl.pixelStorei(UNPACK_ROW_LENGTH, element.width);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n    gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);\n    for (let d = 0; d < depth; ++d) {\n      const srcX = d * smallest * xMult;\n      const srcY = d * smallest * yMult;\n      gl.pixelStorei(UNPACK_SKIP_PIXELS, srcX);\n      gl.pixelStorei(UNPACK_SKIP_ROWS, srcY);\n      gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);\n    }\n    setSkipStateToDefault(gl);\n  } else {\n    gl.texImage2D(target, level, internalFormat, format, type, element);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n}\n\nfunction noop() {\n}\n\n/**\n * Checks whether the url's origin is the same so that we can set the `crossOrigin`\n * @param {string} url url to image\n * @returns {boolean} true if the window's origin is the same as image's url\n * @private\n */\nfunction urlIsSameOrigin(url) {\n  if (typeof document !== 'undefined') {\n    // for IE really\n    const a = document.createElement('a');\n    a.href = url;\n    return a.hostname === location.hostname &&\n           a.port     === location.port &&\n           a.protocol === location.protocol;\n  } else {\n    const localOrigin = (new URL(location.href)).origin;\n    const urlOrigin = (new URL(url, location.href)).origin;\n    return urlOrigin === localOrigin;\n  }\n}\n\nfunction setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {\n  return crossOrigin === undefined && !urlIsSameOrigin(url)\n     ? 'anonymous'\n     : crossOrigin;\n}\n\n/**\n * Loads an image\n * @param {string} url url to image\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @return {HTMLImageElement} the image being loaded.\n * @private\n */\nfunction loadImage(url, crossOrigin, callback) {\n  callback = callback || noop;\n  let img;\n  crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults$1.crossOrigin;\n  crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);\n  if (typeof Image !== 'undefined') {\n    img = new Image();\n    if (crossOrigin !== undefined) {\n      img.crossOrigin = crossOrigin;\n    }\n\n    const clearEventHandlers = function clearEventHandlers() {\n      img.removeEventListener('error', onError);  // eslint-disable-line\n      img.removeEventListener('load', onLoad);  // eslint-disable-line\n      img = null;\n    };\n\n    const onError = function onError() {\n      const msg = \"couldn't load image: \" + url;\n      error$1(msg);\n      callback(msg, img);\n      clearEventHandlers();\n    };\n\n    const onLoad = function onLoad() {\n      callback(null, img);\n      clearEventHandlers();\n    };\n\n    img.addEventListener('error', onError);\n    img.addEventListener('load', onLoad);\n    img.src = url;\n    return img;\n  } else if (typeof ImageBitmap !== 'undefined') {\n    let err;\n    let bm;\n    const cb = function cb() {\n      callback(err, bm);\n    };\n\n    const options = {};\n    if (crossOrigin) {\n      options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin\n    }\n    fetch(url, options).then(function(response) {\n      if (!response.ok) {\n        throw response;\n      }\n      return response.blob();\n    }).then(function(blob) {\n      return createImageBitmap(blob, {\n        premultiplyAlpha: 'none',\n        colorSpaceConversion: 'none',\n      });\n    }).then(function(bitmap) {\n      // not sure if this works. We don't want\n      // to catch the user's error. So, call\n      // the callback in a timeout so we're\n      // not in this scope inside the promise.\n      bm = bitmap;\n      setTimeout(cb);\n    }).catch(function(e) {\n      err = e;\n      setTimeout(cb);\n    });\n    img = null;\n  }\n  return img;\n}\n\n/**\n * check if object is a TexImageSource\n *\n * @param {Object} obj Object to test\n * @return {boolean} true if object is a TexImageSource\n * @private\n */\nfunction isTexImageSource(obj) {\n  return (typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap) ||\n         (typeof ImageData !== 'undefined'  && obj instanceof ImageData) ||\n         (typeof HTMLElement !== 'undefined'  && obj instanceof HTMLElement);\n}\n\n/**\n * if obj is an TexImageSource then just\n * uses it otherwise if obj is a string\n * then load it first.\n *\n * @param {string|TexImageSource} obj\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @private\n */\nfunction loadAndUseImage(obj, crossOrigin, callback) {\n  if (isTexImageSource(obj)) {\n    setTimeout(function() {\n      callback(null, obj);\n    });\n    return obj;\n  }\n\n  return loadImage(obj, crossOrigin, callback);\n}\n\n/**\n * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set\n * the default texture color is used which can be set by calling `setDefaultTextureColor`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction setTextureTo1PixelColor(gl, tex, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D$2;\n  gl.bindTexture(target, tex);\n  if (options.color === false) {\n    return;\n  }\n  // Assume it's a URL\n  // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\n  const color = make1Pixel(options.color);\n  if (target === TEXTURE_CUBE_MAP$1) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, RGBA$1, 1, 1, 0, RGBA$1, UNSIGNED_BYTE$1, color);\n    }\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    gl.texImage3D(target, 0, RGBA$1, 1, 1, 1, 0, RGBA$1, UNSIGNED_BYTE$1, color);\n  } else {\n    gl.texImage2D(target, 0, RGBA$1, 1, 1, 0, RGBA$1, UNSIGNED_BYTE$1, color);\n  }\n}\n\n/**\n * The src image(s) used to create a texture.\n *\n * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}\n * you can pass in urls for images to load into the textures. If it's a single url\n * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap\n * this will be a corresponding array of images for the cubemap.\n *\n * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback TextureReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} texture the texture.\n * @param {module:twgl.TextureSrc} source image(s) used to as the src for the texture\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when all images have finished downloading and been uploaded into their respective textures\n * @callback TexturesReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.\n * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback CubemapReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each face.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback ThreeDReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each slice.\n * @memberOf module:twgl\n */\n\n/**\n * Loads a texture from an image from a Url as specified in `options.src`\n * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is\n * immediately useable. It will be updated with the contents of the image once the image has finished\n * downloading. Filtering options will be set as appropriate for image unless `options.auto === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will\n *    be non null if there was an error.\n * @return {HTMLImageElement} the image being downloaded.\n * @memberOf module:twgl/textures\n */\nfunction loadTextureFromUrl(gl, tex, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  const img = loadAndUseImage(options.src, options.crossOrigin, function(err, img) {\n    if (err) {\n      callback(err, tex, img);\n    } else {\n      setTextureFromElement(gl, tex, img, options);\n      callback(null, tex, img);\n    }\n  });\n  return img;\n}\n\n/**\n * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction loadCubemapFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  if (urls.length !== 6) {\n    throw \"there must be 6 urls for a cubemap\";\n  }\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE$1;\n  const target = options.target || TEXTURE_2D$2;\n  if (target !== TEXTURE_CUBE_MAP$1) {\n    throw \"target must be TEXTURE_CUBE_MAP\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = 6;\n  const errors = [];\n  const faces = getCubeFaceOrder(gl, options);\n  let imgs;  // eslint-disable-line\n\n  function uploadImg(faceTarget) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        if (img.width !== img.height) {\n          errors.push(\"cubemap face img is not a square: \" + img.src);\n        } else {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n\n          // So assuming this is the first image we now have one face that's img sized\n          // and 5 faces that are 1x1 pixel so size the other faces\n          if (numToLoad === 5) {\n            // use the default order\n            getCubeFaceOrder().forEach(function(otherTarget) {\n              // Should we re-use the same face or a color?\n              gl.texImage2D(otherTarget, level, internalFormat, format, type, img);\n            });\n          } else {\n            gl.texImage2D(faceTarget, level, internalFormat, format, type, img);\n          }\n\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            gl.generateMipmap(target);\n          }\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));\n  });\n}\n\n/**\n * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.\n * Will set the texture to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n *\n * If the width and height is not specified the width and height of the first\n * image loaded will be used. Note that since images are loaded async\n * which image downloads first is unknown.\n *\n * If an image is not the same size as the width and height it will be scaled\n * to that width and height.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction loadSlicesFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE$1;\n  const target = options.target || TEXTURE_2D_ARRAY$1;\n  if (target !== TEXTURE_3D$1 && target !== TEXTURE_2D_ARRAY$1) {\n    throw \"target must be TEXTURE_3D or TEXTURE_2D_ARRAY\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = urls.length;\n  const errors = [];\n  let imgs;  // eslint-disable-line\n  const level = options.level || 0;\n  let width = options.width;\n  let height = options.height;\n  const depth = urls.length;\n  let firstImage = true;\n\n  function uploadImg(slice) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        setPackState(gl, options);\n        gl.bindTexture(target, tex);\n\n        if (firstImage) {\n          firstImage = false;\n          width = options.width || img.width;\n          height = options.height || img.height;\n          gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n\n          // put it in every slice otherwise some slices will be 0,0,0,0\n          for (let s = 0; s < depth; ++s) {\n            gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);\n          }\n        } else {\n          let src = img;\n          let ctx;\n          if (img.width !== width || img.height !== height) {\n            // Size the image to fix\n            ctx = getShared2DContext();\n            src = ctx.canvas;\n            ctx.canvas.width = width;\n            ctx.canvas.height = height;\n            ctx.drawImage(img, 0, 0, width, height);\n          }\n\n          gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src);\n\n          // free the canvas memory\n          if (ctx && src === ctx.canvas) {\n            ctx.canvas.width = 0;\n            ctx.canvas.height = 0;\n          }\n        }\n\n        if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n          gl.generateMipmap(target);\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));\n  });\n}\n\n/**\n * Sets a texture from an array or typed array. If the width or height is not provided will attempt to\n * guess the size. See {@link module:twgl.TextureOptions}.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureFromArray(gl, tex, src, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D$2;\n  gl.bindTexture(target, tex);\n  let width = options.width;\n  let height = options.height;\n  let depth = options.depth;\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  if (!isArrayBuffer(src)) {\n    const Type = getTypedArrayTypeForGLType(type);\n    src = new Type(src);\n  } else if (src instanceof Uint8ClampedArray) {\n    src = new Uint8Array(src.buffer);\n  }\n\n  const bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);\n  const numElements = src.byteLength / bytesPerElement;  // TODO: check UNPACK_ALIGNMENT?\n  if (numElements % 1) {\n    throw \"length wrong size for format: \" + glEnumToString(gl, format);\n  }\n  let dimensions;\n  if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    if (!width && !height && !depth) {\n      const size = Math.cbrt(numElements);\n      if (size % 1 !== 0) {\n        throw \"can't guess cube size of array of numElements: \" + numElements;\n      }\n      width = size;\n      height = size;\n      depth = size;\n    } else if (width && (!height || !depth)) {\n      dimensions = guessDimensions(gl, target, height, depth, numElements / width);\n      height = dimensions.width;\n      depth = dimensions.height;\n    } else if (height && (!width || !depth)) {\n      dimensions = guessDimensions(gl, target, width, depth, numElements / height);\n      width = dimensions.width;\n      depth = dimensions.height;\n    } else {\n      dimensions = guessDimensions(gl, target, width, height, numElements / depth);\n      width = dimensions.width;\n      height = dimensions.height;\n    }\n  } else {\n    dimensions = guessDimensions(gl, target, width, height, numElements);\n    width = dimensions.width;\n    height = dimensions.height;\n  }\n  setSkipStateToDefault(gl);\n  gl.pixelStorei(UNPACK_ALIGNMENT, options.unpackAlignment || 1);\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP$1) {\n    const elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;\n    const faceSize = numElements / 6 * elementsPerElement;\n\n    getCubeFacesWithNdx(gl, options).forEach(f => {\n      const offset = faceSize * f.ndx;\n      const data = src.subarray(offset, offset + faceSize);\n      gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);\n    });\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);\n  }\n  return {\n    width: width,\n    height: height,\n    depth: depth,\n    type: type,\n  };\n}\n\n/**\n * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.\n * You must set `options.width` and `options.height`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setEmptyTexture(gl, tex, options) {\n  const target = options.target || TEXTURE_2D$2;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP$1) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);\n  }\n}\n\n/**\n * Creates a texture based on the options passed in.\n *\n * Note: may reset UNPACK_ALIGNMENT, UNPACK_ROW_LENGTH, UNPACK_IMAGE_HEIGHT, UNPACK_SKIP_IMAGES\n * UNPACK_SKIP_PIXELS, and UNPACK_SKIP_ROWS\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.\n * @return {WebGLTexture} the created texture.\n * @memberOf module:twgl/textures\n */\nfunction createTexture(gl, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  const tex = gl.createTexture();\n  const target = options.target || TEXTURE_2D$2;\n  let width  = options.width  || 1;\n  let height = options.height || 1;\n  const internalFormat = options.internalFormat || RGBA$1;\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP$1) {\n    // this should have been the default for cubemaps :(\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE$1);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE$1);\n  }\n  let src = options.src;\n  if (src) {\n    if (typeof src === \"function\") {\n      src = src(gl, options);\n    }\n    if (typeof (src) === \"string\") {\n      loadTextureFromUrl(gl, tex, options, callback);\n    } else if (isArrayBuffer(src) ||\n               (Array.isArray(src) && (\n                    typeof src[0] === 'number' ||\n                    Array.isArray(src[0]) ||\n                    isArrayBuffer(src[0]))\n               )\n              ) {\n      const dimensions = setTextureFromArray(gl, tex, src, options);\n      width  = dimensions.width;\n      height = dimensions.height;\n    } else if (Array.isArray(src) && (typeof (src[0]) === 'string' || isTexImageSource(src[0]))) {\n      if (target === TEXTURE_CUBE_MAP$1) {\n        loadCubemapFromUrls(gl, tex, options, callback);\n      } else {\n        loadSlicesFromUrls(gl, tex, options, callback);\n      }\n    } else { // if (isTexImageSource(src))\n      setTextureFromElement(gl, tex, src, options);\n      width  = src.width;\n      height = src.height;\n    }\n  } else {\n    setEmptyTexture(gl, tex, options);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n  return tex;\n}\n\n/**\n * Resizes a texture based on the options passed in.\n *\n * Note: This is not a generic resize anything function.\n * It's mostly used by {@link module:twgl.resizeFramebufferInfo}\n * It will use `options.src` if it exists to try to determine a `type`\n * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided\n * for the texture. Texture parameters will be set accordingly\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the texture to resize\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {number} [width] the new width. If not passed in will use `options.width`\n * @param {number} [height] the new height. If not passed in will use `options.height`\n * @param {number} [depth] the new depth. If not passed in will use `options.depth`\n * @memberOf module:twgl/textures\n */\nfunction resizeTexture(gl, tex, options, width, height, depth) {\n  width = width || options.width;\n  height = height || options.height;\n  depth = depth || options.depth;\n  const target = options.target || TEXTURE_2D$2;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  let type;\n  const src = options.src;\n  if (!src) {\n    type = options.type || formatType.type;\n  } else if (isArrayBuffer(src) || (Array.isArray(src) && typeof (src[0]) === 'number')) {\n    type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  } else {\n    type = options.type || formatType.type;\n  }\n  if (target === TEXTURE_CUBE_MAP$1) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);\n  }\n}\n\n/**\n * Check if a src is an async request.\n * if src is a string we're going to download an image\n * if src is an array of strings we're going to download cubemap images\n * @param {*} src The src from a TextureOptions\n * @returns {bool} true if src is async.\n * @private\n */\nfunction isAsyncSrc(src) {\n  return typeof src === 'string' ||\n         (Array.isArray(src) && typeof src[0] === 'string');\n}\n\n/**\n * Creates a bunch of textures based on the passed in options.\n *\n * Example:\n *\n *     const textures = twgl.createTextures(gl, {\n *       // a power of 2 image\n *       hftIcon: { src: \"images/hft-icon-16.png\", mag: gl.NEAREST },\n *       // a non-power of 2 image\n *       clover: { src: \"images/clover.jpg\" },\n *       // From a canvas\n *       fromCanvas: { src: ctx.canvas },\n *       // A cubemap from 6 images\n *       yokohama: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: [\n *           'images/yokohama/posx.jpg',\n *           'images/yokohama/negx.jpg',\n *           'images/yokohama/posy.jpg',\n *           'images/yokohama/negy.jpg',\n *           'images/yokohama/posz.jpg',\n *           'images/yokohama/negz.jpg',\n *         ],\n *       },\n *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)\n *       goldengate: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: 'images/goldengate.jpg',\n *       },\n *       // A 2x2 pixel texture from a JavaScript array\n *       checker: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         src: [\n *           255,255,255,255,\n *           192,192,192,255,\n *           192,192,192,255,\n *           255,255,255,255,\n *         ],\n *       },\n *       // a 1x2 pixel texture from a typed array.\n *       stripe: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         format: gl.LUMINANCE,\n *         src: new Uint8Array([\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *         ]),\n *         width: 1,\n *       },\n *     });\n *\n * Now\n *\n * *   `textures.hftIcon` will be a 2d texture\n * *   `textures.clover` will be a 2d texture\n * *   `textures.fromCanvas` will be a 2d texture\n * *   `textures.yohohama` will be a cubemap texture\n * *   `textures.goldengate` will be a cubemap texture\n * *   `textures.checker` will be a 2d texture\n * *   `textures.stripe` will be a 2d texture\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.\n * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.\n * @return {Object.<string,WebGLTexture>} the created textures by name\n * @memberOf module:twgl/textures\n */\nfunction createTextures(gl, textureOptions, callback) {\n  callback = callback || noop;\n  let numDownloading = 0;\n  const errors = [];\n  const textures = {};\n  const images = {};\n\n  function callCallbackIfReady() {\n    if (numDownloading === 0) {\n      setTimeout(function() {\n        callback(errors.length ? errors : undefined, textures, images);\n      }, 0);\n    }\n  }\n\n  Object.keys(textureOptions).forEach(function(name) {\n    const options = textureOptions[name];\n    let onLoadFn;\n    if (isAsyncSrc(options.src)) {\n      onLoadFn = function(err, tex, img) {\n        images[name] = img;\n        --numDownloading;\n        if (err) {\n          errors.push(err);\n        }\n        callCallbackIfReady();\n      };\n      ++numDownloading;\n    }\n    textures[name] = createTexture(gl, options, onLoadFn);\n  });\n\n  // queue the callback if there are no images to download.\n  // We do this because if your code is structured to wait for\n  // images to download but then you comment out all the async\n  // images your code would break.\n  callCallbackIfReady();\n\n  return textures;\n}\n\nvar textures = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  setTextureDefaults_: setDefaults$1,\n  createSampler: createSampler,\n  createSamplers: createSamplers,\n  setSamplerParameters: setSamplerParameters,\n  createTexture: createTexture,\n  setEmptyTexture: setEmptyTexture,\n  setTextureFromArray: setTextureFromArray,\n  loadTextureFromUrl: loadTextureFromUrl,\n  setTextureFromElement: setTextureFromElement,\n  setTextureFilteringForSize: setTextureFilteringForSize,\n  setTextureParameters: setTextureParameters,\n  setDefaultTextureColor: setDefaultTextureColor,\n  createTextures: createTextures,\n  resizeTexture: resizeTexture,\n  canGenerateMipmap: canGenerateMipmap,\n  canFilter: canFilter,\n  getNumComponentsForFormat: getNumComponentsForFormat,\n  getBytesPerElementForInternalFormat: getBytesPerElementForInternalFormat,\n  getFormatAndTypeForInternalFormat: getFormatAndTypeForInternalFormat\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level shader program related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.programs` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/programs\n */\n\nconst error = error$1;\nconst warn = warn$1;\nfunction getElementById(id) {\n  return (typeof document !== 'undefined' && document.getElementById)\n      ? document.getElementById(id)\n      : null;\n}\n\nconst TEXTURE0                       = 0x84c0;\nconst DYNAMIC_DRAW                   = 0x88e8;\n\nconst ARRAY_BUFFER                   = 0x8892;\nconst ELEMENT_ARRAY_BUFFER$1           = 0x8893;\nconst UNIFORM_BUFFER                 = 0x8a11;\nconst TRANSFORM_FEEDBACK_BUFFER      = 0x8c8e;\n\nconst TRANSFORM_FEEDBACK             = 0x8e22;\n\nconst COMPILE_STATUS                 = 0x8b81;\nconst LINK_STATUS                    = 0x8b82;\nconst FRAGMENT_SHADER                = 0x8b30;\nconst VERTEX_SHADER                  = 0x8b31;\nconst SEPARATE_ATTRIBS               = 0x8c8d;\n\nconst ACTIVE_UNIFORMS                = 0x8b86;\nconst ACTIVE_ATTRIBUTES              = 0x8b89;\nconst TRANSFORM_FEEDBACK_VARYINGS    = 0x8c83;\nconst ACTIVE_UNIFORM_BLOCKS          = 0x8a36;\nconst UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER   = 0x8a44;\nconst UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46;\nconst UNIFORM_BLOCK_DATA_SIZE                     = 0x8a40;\nconst UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES        = 0x8a43;\n\nconst FLOAT                         = 0x1406;\nconst FLOAT_VEC2                    = 0x8B50;\nconst FLOAT_VEC3                    = 0x8B51;\nconst FLOAT_VEC4                    = 0x8B52;\nconst INT                           = 0x1404;\nconst INT_VEC2                      = 0x8B53;\nconst INT_VEC3                      = 0x8B54;\nconst INT_VEC4                      = 0x8B55;\nconst BOOL                          = 0x8B56;\nconst BOOL_VEC2                     = 0x8B57;\nconst BOOL_VEC3                     = 0x8B58;\nconst BOOL_VEC4                     = 0x8B59;\nconst FLOAT_MAT2                    = 0x8B5A;\nconst FLOAT_MAT3                    = 0x8B5B;\nconst FLOAT_MAT4                    = 0x8B5C;\nconst SAMPLER_2D                    = 0x8B5E;\nconst SAMPLER_CUBE                  = 0x8B60;\nconst SAMPLER_3D                    = 0x8B5F;\nconst SAMPLER_2D_SHADOW             = 0x8B62;\nconst FLOAT_MAT2x3                  = 0x8B65;\nconst FLOAT_MAT2x4                  = 0x8B66;\nconst FLOAT_MAT3x2                  = 0x8B67;\nconst FLOAT_MAT3x4                  = 0x8B68;\nconst FLOAT_MAT4x2                  = 0x8B69;\nconst FLOAT_MAT4x3                  = 0x8B6A;\nconst SAMPLER_2D_ARRAY              = 0x8DC1;\nconst SAMPLER_2D_ARRAY_SHADOW       = 0x8DC4;\nconst SAMPLER_CUBE_SHADOW           = 0x8DC5;\nconst UNSIGNED_INT                  = 0x1405;\nconst UNSIGNED_INT_VEC2             = 0x8DC6;\nconst UNSIGNED_INT_VEC3             = 0x8DC7;\nconst UNSIGNED_INT_VEC4             = 0x8DC8;\nconst INT_SAMPLER_2D                = 0x8DCA;\nconst INT_SAMPLER_3D                = 0x8DCB;\nconst INT_SAMPLER_CUBE              = 0x8DCC;\nconst INT_SAMPLER_2D_ARRAY          = 0x8DCF;\nconst UNSIGNED_INT_SAMPLER_2D       = 0x8DD2;\nconst UNSIGNED_INT_SAMPLER_3D       = 0x8DD3;\nconst UNSIGNED_INT_SAMPLER_CUBE     = 0x8DD4;\nconst UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\n\nconst TEXTURE_2D$1                    = 0x0DE1;\nconst TEXTURE_CUBE_MAP              = 0x8513;\nconst TEXTURE_3D                    = 0x806F;\nconst TEXTURE_2D_ARRAY              = 0x8C1A;\n\nconst typeMap = {};\n\n/**\n * Returns the corresponding bind point for a given sampler type\n * @private\n */\nfunction getBindPointForSamplerType(gl, type) {\n  return typeMap[type].bindPoint;\n}\n\n// This kind of sucks! If you could compose functions as in `var fn = gl[name];`\n// this code could be a lot smaller but that is sadly really slow (T_T)\n\nfunction floatSetter(gl, location) {\n  return function(v) {\n    gl.uniform1f(location, v);\n  };\n}\n\nfunction floatArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1fv(location, v);\n  };\n}\n\nfunction floatVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2fv(location, v);\n  };\n}\n\nfunction floatVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3fv(location, v);\n  };\n}\n\nfunction floatVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4fv(location, v);\n  };\n}\n\nfunction intSetter(gl, location) {\n  return function(v) {\n    gl.uniform1i(location, v);\n  };\n}\n\nfunction intArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1iv(location, v);\n  };\n}\n\nfunction intVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2iv(location, v);\n  };\n}\n\nfunction intVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3iv(location, v);\n  };\n}\n\nfunction intVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4iv(location, v);\n  };\n}\n\nfunction uintSetter(gl, location) {\n  return function(v) {\n    gl.uniform1ui(location, v);\n  };\n}\n\nfunction uintArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1uiv(location, v);\n  };\n}\n\nfunction uintVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2uiv(location, v);\n  };\n}\n\nfunction uintVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3uiv(location, v);\n  };\n}\n\nfunction uintVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4uiv(location, v);\n  };\n}\n\nfunction floatMat2Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2fv(location, false, v);\n  };\n}\n\nfunction floatMat3Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3fv(location, false, v);\n  };\n}\n\nfunction floatMat4Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4fv(location, false, v);\n  };\n}\n\nfunction floatMat23Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x3fv(location, false, v);\n  };\n}\n\nfunction floatMat32Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x2fv(location, false, v);\n  };\n}\n\nfunction floatMat24Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x4fv(location, false, v);\n  };\n}\n\nfunction floatMat42Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x2fv(location, false, v);\n  };\n}\n\nfunction floatMat34Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x4fv(location, false, v);\n  };\n}\n\nfunction floatMat43Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x3fv(location, false, v);\n  };\n}\n\nfunction samplerSetter(gl, type, unit, location) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  return isWebGL2(gl) ? function(textureOrPair) {\n    let texture;\n    let sampler;\n    if (!textureOrPair || isTexture(gl, textureOrPair)) {\n      texture = textureOrPair;\n      sampler = null;\n    } else {\n      texture = textureOrPair.texture;\n      sampler = textureOrPair.sampler;\n    }\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n    gl.bindSampler(unit, sampler);\n  } : function(texture) {\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n  };\n}\n\nfunction samplerArraySetter(gl, type, unit, location, size) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  const units = new Int32Array(size);\n  for (let ii = 0; ii < size; ++ii) {\n    units[ii] = unit + ii;\n  }\n\n  return isWebGL2(gl) ? function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(textureOrPair, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      let texture;\n      let sampler;\n      if (!textureOrPair || isTexture(gl, textureOrPair)) {\n        texture = textureOrPair;\n        sampler = null;\n      } else {\n        texture = textureOrPair.texture;\n        sampler = textureOrPair.sampler;\n      }\n      gl.bindSampler(unit, sampler);\n      gl.bindTexture(bindPoint, texture);\n    });\n  } : function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(texture, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      gl.bindTexture(bindPoint, texture);\n    });\n  };\n}\n\ntypeMap[FLOAT]                         = { Type: Float32Array, size:  4, setter: floatSetter,      arraySetter: floatArraySetter, };\ntypeMap[FLOAT_VEC2]                    = { Type: Float32Array, size:  8, setter: floatVec2Setter,  cols: 2, };\ntypeMap[FLOAT_VEC3]                    = { Type: Float32Array, size: 12, setter: floatVec3Setter,  cols: 3, };\ntypeMap[FLOAT_VEC4]                    = { Type: Float32Array, size: 16, setter: floatVec4Setter,  cols: 4, };\ntypeMap[INT]                           = { Type: Int32Array,   size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[INT_VEC2]                      = { Type: Int32Array,   size:  8, setter: intVec2Setter,    cols: 2, };\ntypeMap[INT_VEC3]                      = { Type: Int32Array,   size: 12, setter: intVec3Setter,    cols: 3, };\ntypeMap[INT_VEC4]                      = { Type: Int32Array,   size: 16, setter: intVec4Setter,    cols: 4, };\ntypeMap[UNSIGNED_INT]                  = { Type: Uint32Array,  size:  4, setter: uintSetter,       arraySetter: uintArraySetter, };\ntypeMap[UNSIGNED_INT_VEC2]             = { Type: Uint32Array,  size:  8, setter: uintVec2Setter,   cols: 2, };\ntypeMap[UNSIGNED_INT_VEC3]             = { Type: Uint32Array,  size: 12, setter: uintVec3Setter,   cols: 3, };\ntypeMap[UNSIGNED_INT_VEC4]             = { Type: Uint32Array,  size: 16, setter: uintVec4Setter,   cols: 4, };\ntypeMap[BOOL]                          = { Type: Uint32Array,  size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[BOOL_VEC2]                     = { Type: Uint32Array,  size:  8, setter: intVec2Setter,    cols: 2, };\ntypeMap[BOOL_VEC3]                     = { Type: Uint32Array,  size: 12, setter: intVec3Setter,    cols: 3, };\ntypeMap[BOOL_VEC4]                     = { Type: Uint32Array,  size: 16, setter: intVec4Setter,    cols: 4, };\ntypeMap[FLOAT_MAT2]                    = { Type: Float32Array, size: 32, setter: floatMat2Setter,  rows: 2, cols: 2, };\ntypeMap[FLOAT_MAT3]                    = { Type: Float32Array, size: 48, setter: floatMat3Setter,  rows: 3, cols: 3, };\ntypeMap[FLOAT_MAT4]                    = { Type: Float32Array, size: 64, setter: floatMat4Setter,  rows: 4, cols: 4, };\ntypeMap[FLOAT_MAT2x3]                  = { Type: Float32Array, size: 32, setter: floatMat23Setter, rows: 2, cols: 3, };\ntypeMap[FLOAT_MAT2x4]                  = { Type: Float32Array, size: 32, setter: floatMat24Setter, rows: 2, cols: 4, };\ntypeMap[FLOAT_MAT3x2]                  = { Type: Float32Array, size: 48, setter: floatMat32Setter, rows: 3, cols: 2, };\ntypeMap[FLOAT_MAT3x4]                  = { Type: Float32Array, size: 48, setter: floatMat34Setter, rows: 3, cols: 4, };\ntypeMap[FLOAT_MAT4x2]                  = { Type: Float32Array, size: 64, setter: floatMat42Setter, rows: 4, cols: 2, };\ntypeMap[FLOAT_MAT4x3]                  = { Type: Float32Array, size: 64, setter: floatMat43Setter, rows: 4, cols: 3, };\ntypeMap[SAMPLER_2D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[SAMPLER_CUBE]                  = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[SAMPLER_3D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[SAMPLER_2D_SHADOW]             = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[SAMPLER_2D_ARRAY]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[SAMPLER_2D_ARRAY_SHADOW]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[SAMPLER_CUBE_SHADOW]           = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[INT_SAMPLER_2D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[INT_SAMPLER_3D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[INT_SAMPLER_CUBE]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[INT_SAMPLER_2D_ARRAY]          = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[UNSIGNED_INT_SAMPLER_3D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[UNSIGNED_INT_SAMPLER_CUBE]     = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\n\nfunction floatAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      switch (b.value.length) {\n        case 4:\n          gl.vertexAttrib4fv(index, b.value);\n          break;\n        case 3:\n          gl.vertexAttrib3fv(index, b.value);\n          break;\n        case 2:\n          gl.vertexAttrib2fv(index, b.value);\n          break;\n        case 1:\n          gl.vertexAttrib1fv(index, b.value);\n          break;\n        default:\n          throw new Error('the length of a float constant value must be between 1 and 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribPointer(\n          index, b.numComponents || b.size, b.type || FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction intAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4iv(index, b.value);\n      } else {\n        throw new Error('The length of an integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || INT, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction uintAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4uiv(index, b.value);\n      } else {\n        throw new Error('The length of an unsigned integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || UNSIGNED_INT, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction matAttribSetter(gl, index, typeInfo) {\n  const defaultSize = typeInfo.size;\n  const count = typeInfo.count;\n\n  return function(b) {\n    gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n    const numComponents = b.size || b.numComponents || defaultSize;\n    const size = numComponents / count;\n    const type = b.type || FLOAT;\n    const typeInfo = typeMap[type];\n    const stride = typeInfo.size * numComponents;\n    const normalize = b.normalize || false;\n    const offset = b.offset || 0;\n    const rowOffset = stride / count;\n    for (let i = 0; i < count; ++i) {\n      gl.enableVertexAttribArray(index + i);\n      gl.vertexAttribPointer(\n          index + i, size, type, normalize, stride, offset + rowOffset * i);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index + i, b.divisor || 0);\n      }\n    }\n  };\n}\n\n\n\nconst attrTypeMap = {};\nattrTypeMap[FLOAT]             = { size:  4, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC2]        = { size:  8, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC3]        = { size: 12, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC4]        = { size: 16, setter: floatAttribSetter, };\nattrTypeMap[INT]               = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC2]          = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC3]          = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC4]          = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[UNSIGNED_INT]      = { size:  4, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC2] = { size:  8, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC3] = { size: 12, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC4] = { size: 16, setter: uintAttribSetter,  };\nattrTypeMap[BOOL]              = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC2]         = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC3]         = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC4]         = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[FLOAT_MAT2]        = { size:  4, setter: matAttribSetter,   count: 2, };\nattrTypeMap[FLOAT_MAT3]        = { size:  9, setter: matAttribSetter,   count: 3, };\nattrTypeMap[FLOAT_MAT4]        = { size: 16, setter: matAttribSetter,   count: 4, };\n\nconst errorRE = /ERROR:\\s*\\d+:(\\d+)/gi;\nfunction addLineNumbersWithError(src, log = '', lineOffset = 0) {\n  // Note: Error message formats are not defined by any spec so this may or may not work.\n  const matches = [...log.matchAll(errorRE)];\n  const lineNoToErrorMap = new Map(matches.map((m, ndx) => {\n    const lineNo = parseInt(m[1]);\n    const next = matches[ndx + 1];\n    const end = next ? next.index : log.length;\n    const msg = log.substring(m.index, end);\n    return [lineNo - 1, msg];\n  }));\n  return src.split('\\n').map((line, lineNo) => {\n    const err = lineNoToErrorMap.get(lineNo);\n    return `${lineNo + 1 + lineOffset}: ${line}${err ? `\\n\\n^^^ ${err}` : ''}`;\n  }).join('\\n');\n}\n\n/**\n * Error Callback\n * @callback ErrorCallback\n * @param {string} msg error message.\n * @param {number} [lineOffset] amount to add to line number\n * @memberOf module:twgl\n */\n\n/**\n * Program Callback\n * @callback ProgramCallback\n * @param {string} [err] error message, falsy if no error\n * @param {WebGLProgram|module:twgl.ProgramInfo} [result] the program or programInfo\n */\n\nconst spaceRE = /^[ \\t]*\\n/;\n\n/**\n * Remove the first end of line because WebGL 2.0 requires\n * #version 300 es\n * as the first line. No whitespace allowed before that line\n * so\n *\n * <script>\n * #version 300 es\n * </script>\n *\n * Has one line before it which is invalid according to GLSL ES 3.00\n *\n * @param {string} shaderSource The source of the shader\n * @returns {{shaderSource: string, lineOffset: number}}\n * @private\n */\nfunction prepShaderSource(shaderSource) {\n  let lineOffset = 0;\n  if (spaceRE.test(shaderSource)) {\n    lineOffset = 1;\n    shaderSource = shaderSource.replace(spaceRE, '');\n  }\n  return {lineOffset, shaderSource};\n}\n\n/**\n * @param {module:twgl.ProgramOptions} progOptions\n * @param {string} msg\n * @return null\n * @private\n */\nfunction reportError(progOptions, msg) {\n  progOptions.errorCallback(msg);\n  if (progOptions.callback) {\n    setTimeout(() => {\n      progOptions.callback(`${msg}\\n${progOptions.errors.join('\\n')}`);\n    });\n  }\n  return null;\n}\n\n/**\n * Check Shader status\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {number} shaderType The shader type\n * @param {WebGLShader} shader The shader\n * @param {ErrorCallback} [errFn] function to receive error message.\n * @return {string} errors or empty string\n * @private\n */\nfunction checkShaderStatus(gl, shaderType, shader, errFn) {\n  errFn = errFn || error;\n  // Check the compile status\n  const compiled = gl.getShaderParameter(shader, COMPILE_STATUS);\n  if (!compiled) {\n    // Something went wrong during compilation; get the error\n    const lastError = gl.getShaderInfoLog(shader);\n    const {lineOffset, shaderSource} = prepShaderSource(gl.getShaderSource(shader));\n    const error = `${addLineNumbersWithError(shaderSource, lastError, lineOffset)}\\nError compiling ${glEnumToString(gl, shaderType)}: ${lastError}`;\n    errFn(error);\n    return error;\n  }\n  return '';\n}\n\n/**\n * @typedef {Object} FullProgramSpec\n * @property {string[]} shaders the shader source or element ids.\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>|string[]} [attribLocations] a attribute name to location map, or array of attribute names where index = location.\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @property {ProgramCallback} [callback] callback for async program compilation.\n * @memberOf module:twgl\n */\n\n/**\n * @typedef {string[]|module:twgl.FullProgramSpec} ProgramSpec\n * @memberOf module:twgl\n */\n\n/**\n * @typedef {Object} ProgramOptions\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>|string[]} [attribLocations] a attribute name to location map, or array of attribute names where index = location.\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @property {ProgramCallback} [callback] callback for async program compilation.\n * @memberOf module:twgl\n */\n\n/**\n * Gets the program options based on all these optional arguments\n * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments passed in\n * @private\n */\nfunction getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {\n  let transformFeedbackVaryings;\n  let transformFeedbackMode;\n  let callback;\n  if (typeof opt_locations === 'function') {\n    opt_errorCallback = opt_locations;\n    opt_locations = undefined;\n  }\n  if (typeof opt_attribs === 'function') {\n    opt_errorCallback = opt_attribs;\n    opt_attribs = undefined;\n  } else if (opt_attribs && !Array.isArray(opt_attribs)) {\n    const opt = opt_attribs;\n    opt_errorCallback = opt.errorCallback;\n    opt_attribs = opt.attribLocations;\n    transformFeedbackVaryings = opt.transformFeedbackVaryings;\n    transformFeedbackMode = opt.transformFeedbackMode;\n    callback = opt.callback;\n  }\n\n  const errorCallback = opt_errorCallback || error;\n  const errors = [];\n  const options = {\n    errorCallback(msg, ...args) {\n      errors.push(msg);\n      errorCallback(msg, ...args);\n    },\n    transformFeedbackVaryings,\n    transformFeedbackMode,\n    callback,\n    errors,\n  };\n\n  {\n    let attribLocations = {};\n    if (Array.isArray(opt_attribs)) {\n      opt_attribs.forEach(function(attrib,  ndx) {\n        attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;\n      });\n    } else {\n      attribLocations = opt_attribs || {};\n    }\n    options.attribLocations = attribLocations;\n  }\n\n  return options;\n}\n\nconst defaultShaderType = [\n  \"VERTEX_SHADER\",\n  \"FRAGMENT_SHADER\",\n];\n\nfunction getShaderTypeFromScriptType(gl, scriptType) {\n  if (scriptType.indexOf(\"frag\") >= 0) {\n    return FRAGMENT_SHADER;\n  } else if (scriptType.indexOf(\"vert\") >= 0) {\n    return VERTEX_SHADER;\n  }\n  return undefined;\n}\n\nfunction deleteProgramAndShaders(gl, program, notThese) {\n  const shaders = gl.getAttachedShaders(program);\n  for (const shader of shaders) {\n    if (notThese.has(shader)) {\n      gl.deleteShader(shader);\n    }\n  }\n  gl.deleteProgram(program);\n}\n\nconst wait = (ms = 0) => new Promise(resolve => setTimeout(resolve, ms));\n\nfunction createProgramNoCheck(gl, shaders, programOptions) {\n  const program = gl.createProgram();\n  const {\n    attribLocations,\n    transformFeedbackVaryings,\n    transformFeedbackMode,\n  } = getProgramOptions(programOptions);\n\n  for (let ndx = 0; ndx < shaders.length; ++ndx) {\n    let shader = shaders[ndx];\n    if (typeof shader === 'string') {\n      const elem = getElementById(shader);\n      const src = elem ? elem.text : shader;\n      let type = gl[defaultShaderType[ndx]];\n      if (elem && elem.type) {\n        type = getShaderTypeFromScriptType(gl, elem.type) || type;\n      }\n      shader = gl.createShader(type);\n      gl.shaderSource(shader, prepShaderSource(src).shaderSource);\n      gl.compileShader(shader);\n      gl.attachShader(program, shader);\n    }\n  }\n\n  Object.entries(attribLocations).forEach(([attrib, loc]) => gl.bindAttribLocation(program, loc, attrib));\n\n  {\n    let varyings = transformFeedbackVaryings;\n    if (varyings) {\n      if (varyings.attribs) {\n        varyings = varyings.attribs;\n      }\n      if (!Array.isArray(varyings)) {\n        varyings = Object.keys(varyings);\n      }\n      gl.transformFeedbackVaryings(program, varyings, transformFeedbackMode || SEPARATE_ATTRIBS);\n    }\n  }\n\n  gl.linkProgram(program);\n  return program;\n}\n\n/**\n * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the\n * program.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgram(gl, [vs, fs], options);\n *     twgl.createProgram(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error of a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgram(\n    gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n  // This code is really convoluted, because it may or may not be async\n  // Maybe it would be better to have a separate function\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaderSet = new Set(shaders);\n  const program = createProgramNoCheck(gl, shaders, progOptions);\n\n  function hasErrors(gl, program) {\n    const errors = getProgramErrors(gl, program, progOptions.errorCallback);\n    if (errors) {\n      deleteProgramAndShaders(gl, program, shaderSet);\n    }\n    return errors;\n  }\n\n  if (progOptions.callback) {\n    waitForProgramLinkCompletionAsync(gl, program).then(() => {\n      const errors = hasErrors(gl, program);\n      progOptions.callback(errors, errors ? undefined : program);\n    });\n    return undefined;\n  }\n\n  return hasErrors(gl, program) ? undefined : program;\n}\n\n/**\n * This only works because the functions it wraps the first 2 arguments\n * are gl and any, followed by things that become programOptions\n * @private\n */\nfunction wrapCallbackFnToAsyncFn(fn) {\n  return function(gl, arg1, ...args) {\n    return new Promise((resolve, reject) => {\n      const programOptions = getProgramOptions(...args);\n      programOptions.callback = (err, program) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(program);\n        }\n      };\n      fn(gl, arg1, programOptions);\n    });\n  };\n}\n\n/**\n * Same as createProgram but returns a promise\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramAsync(gl, [vs, fs], options);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @function\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {Promise<WebGLProgram>} The created program\n * @memberOf module:twgl/programs\n */\nconst createProgramAsync = wrapCallbackFnToAsyncFn(createProgram);\n\n/**\n * Same as createProgramInfo but returns a promise\n * @function\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {Promise<module:twgl.ProgramInfo>} The created ProgramInfo\n * @memberOf module:twgl/programs\n */\nconst createProgramInfoAsync = wrapCallbackFnToAsyncFn(createProgramInfo);\n\nasync function waitForProgramLinkCompletionAsync(gl, program) {\n  const ext = gl.getExtension('KHR_parallel_shader_compile');\n  const checkFn = ext\n      ? (gl, program) => gl.getProgramParameter(program, ext.COMPLETION_STATUS_KHR)\n      : () => true;\n\n  let waitTime = 0;\n  do {\n    await wait(waitTime);  // must wait at least once\n    waitTime = 1000 / 60;\n  } while (!checkFn(gl, program));\n}\n\nasync function waitForAllProgramsLinkCompletionAsync(gl, programs) {\n  for (const program of Object.values(programs)) {\n    await waitForProgramLinkCompletionAsync(gl, program);\n  }\n}\n\n/**\n * Check a program's link status\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program Program to check\n * @param {ErrorCallback} [errFn] func for errors\n * @return {string?} errors if program is failed, else undefined\n * @private\n */\nfunction getProgramErrors(gl, program, errFn) {\n  errFn = errFn || error;\n  // Check the link status\n  const linked = gl.getProgramParameter(program, LINK_STATUS);\n  if (!linked) {\n    // something went wrong with the link\n    const lastError = gl.getProgramInfoLog(program);\n    errFn(`Error in program linking: ${lastError}`);\n    // print any errors from these shaders\n    const shaders = gl.getAttachedShaders(program);\n    const errors = shaders.map(shader => checkShaderStatus(gl, gl.getShaderParameter(shader, gl.SHADER_TYPE), shader, errFn));\n    return `${lastError}\\n${errors.filter(_ => _).join('\\n')}`;\n  }\n  return undefined;\n}\n\n/**\n * Creates a program from 2 script tags.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderScriptIds Array of ids of the script\n *        tags for the shaders. The first is assumed to be the\n *        vertex shader, the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromScripts(\n    gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (const scriptId of shaderScriptIds) {\n    const shaderScript = getElementById(scriptId);\n    if (!shaderScript) {\n      return reportError(progOptions, `unknown script element: ${scriptId}`);\n    }\n    shaders.push(shaderScript.text);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Creates a program from 2 sources.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromSources(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  return createProgram(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback);\n}\n\n/**\n * Returns true if attribute/uniform is a reserved/built in\n *\n * It makes no sense to me why GL returns these because it's\n * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`\n * with names that start with `gl_` (and `webgl_` in WebGL)\n *\n * I can only assume they are there because they might count\n * when computing the number of uniforms/attributes used when you want to\n * know if you are near the limit. That doesn't really make sense\n * to me but the fact that these get returned are in the spec.\n *\n * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or\n *    `gl.getActiveAttrib`.\n * @return {bool} true if it's reserved\n * @private\n */\nfunction isBuiltIn(info) {\n  const name = info.name;\n  return name.startsWith(\"gl_\") || name.startsWith(\"webgl_\");\n}\n\nconst tokenRE = /(\\.|\\[|]|\\w+)/g;\nconst isDigit = s => s >= '0' && s <= '9';\nfunction addSetterToUniformTree(fullPath, setter, node, uniformSetters) {\n  const tokens = fullPath.split(tokenRE).filter(s => s !== '');\n  let tokenNdx = 0;\n  let path = '';\n\n  for (;;) {\n    const token = tokens[tokenNdx++];  // has to be name or number\n    path += token;\n    const isArrayIndex = isDigit(token[0]);\n    const accessor = isArrayIndex\n        ? parseInt(token)\n        : token;\n    if (isArrayIndex) {\n      path += tokens[tokenNdx++];  // skip ']'\n    }\n    const isLastToken = tokenNdx === tokens.length;\n    if (isLastToken) {\n      node[accessor] = setter;\n      break;\n    } else {\n      const token = tokens[tokenNdx++];  // has to be . or [\n      const isArray = token === '[';\n      const child = node[accessor] || (isArray ? [] : {});\n      node[accessor] = child;\n      node = child;\n      uniformSetters[path] = uniformSetters[path] || function(node) {\n        return function(value) {\n          setUniformTree(node, value);\n        };\n      }(child);\n      path += token;\n    }\n  }\n}\n\n/**\n * Creates setter functions for all uniforms of a shader\n * program.\n *\n * @see {@link module:twgl.setUniforms}\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @returns {Object.<string, function>} an object with a setter by name for each uniform\n * @memberOf module:twgl/programs\n */\nfunction createUniformSetters(gl, program) {\n  let textureUnit = 0;\n\n  /**\n   * Creates a setter for a uniform of the given program with it's\n   * location embedded in the setter.\n   * @param {WebGLProgram} program\n   * @param {WebGLUniformInfo} uniformInfo\n   * @returns {function} the created setter.\n   */\n  function createUniformSetter(program, uniformInfo, location) {\n    const isArray = uniformInfo.name.endsWith(\"[0]\");\n    const type = uniformInfo.type;\n    const typeInfo = typeMap[type];\n    if (!typeInfo) {\n      throw new Error(`unknown type: 0x${type.toString(16)}`); // we should never get here.\n    }\n    let setter;\n    if (typeInfo.bindPoint) {\n      // it's a sampler\n      const unit = textureUnit;\n      textureUnit += uniformInfo.size;\n      if (isArray) {\n        setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n      } else {\n        setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);\n      }\n    } else {\n      if (typeInfo.arraySetter && isArray) {\n        setter = typeInfo.arraySetter(gl, location);\n      } else {\n        setter = typeInfo.setter(gl, location);\n      }\n    }\n    setter.location = location;\n    return setter;\n  }\n\n  const uniformSetters = {};\n  const uniformTree = {};\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    if (isBuiltIn(uniformInfo)) {\n      continue;\n    }\n    let name = uniformInfo.name;\n    // remove the array suffix.\n    if (name.endsWith(\"[0]\")) {\n      name = name.substr(0, name.length - 3);\n    }\n    const location = gl.getUniformLocation(program, uniformInfo.name);\n    // the uniform will have no location if it's in a uniform block\n    if (location) {\n      const setter = createUniformSetter(program, uniformInfo, location);\n      uniformSetters[name] = setter;\n      addSetterToUniformTree(name, setter, uniformTree, uniformSetters);\n    }\n  }\n\n  return uniformSetters;\n}\n\n/**\n * @typedef {Object} TransformFeedbackInfo\n * @property {number} index index of transform feedback\n * @property {number} type GL type\n * @property {number} size 1 - 4\n * @memberOf module:twgl\n */\n\n/**\n * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {Object<string, module:twgl.TransformFeedbackInfo>}\n * @memberOf module:twgl\n */\nfunction createTransformFeedbackInfo(gl, program) {\n  const info = {};\n  const numVaryings = gl.getProgramParameter(program, TRANSFORM_FEEDBACK_VARYINGS);\n  for (let ii = 0; ii < numVaryings; ++ii) {\n    const varying = gl.getTransformFeedbackVarying(program, ii);\n    info[varying.name] = {\n      index: ii,\n      type: varying.type,\n      size: varying.size,\n    };\n  }\n  return info;\n}\n\n/**\n * Binds buffers for transform feedback.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @memberOf module:twgl\n */\nfunction bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {\n  if (transformFeedbackInfo.transformFeedbackInfo) {\n    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\n  }\n  if (bufferInfo.attribs) {\n    bufferInfo = bufferInfo.attribs;\n  }\n  for (const name in bufferInfo) {\n    const varying = transformFeedbackInfo[name];\n    if (varying) {\n      const buf = bufferInfo[name];\n      if (buf.offset) {\n        gl.bindBufferRange(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);\n      } else {\n        gl.bindBufferBase(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);\n      }\n    }\n  }\n}\n\n/**\n * Creates a transform feedback and sets the buffers\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @return {WebGLTransformFeedback} the created transform feedback\n * @memberOf module:twgl\n */\nfunction createTransformFeedback(gl, programInfo, bufferInfo) {\n  const tf = gl.createTransformFeedback();\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, tf);\n  gl.useProgram(programInfo.program);\n  bindTransformFeedbackInfo(gl, programInfo, bufferInfo);\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, null);\n  return tf;\n}\n\n/**\n * @typedef {Object} UniformData\n * @property {string} name The name of the uniform\n * @property {number} type The WebGL type enum for this uniform\n * @property {number} size The number of elements for this uniform\n * @property {number} blockNdx The block index this uniform appears in\n * @property {number} offset The byte offset in the block for this uniform's value\n * @memberOf module:twgl\n */\n\n/**\n * The specification for one UniformBlockObject\n *\n * @typedef {Object} BlockSpec\n * @property {number} index The index of the block.\n * @property {number} size The size in bytes needed for the block\n * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices\n *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.\n * @property {bool} usedByVertexShader Self explanatory\n * @property {bool} usedByFragmentShader Self explanatory\n * @property {bool} used Self explanatory\n * @memberOf module:twgl\n */\n\n/**\n * A `UniformBlockSpec` represents the data needed to create and bind\n * UniformBlockObjects for a given program\n *\n * @typedef {Object} UniformBlockSpec\n * @property {Object.<string, module:twgl.BlockSpec>} blockSpecs The BlockSpec for each block by block name\n * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a UniformBlockSpec for the given program.\n *\n * A UniformBlockSpec represents the data needed to create and bind\n * UniformBlockObjects\n *\n * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context\n * @param {WebGLProgram} program A WebGLProgram for a successfully linked program\n * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockSpecFromProgram(gl, program) {\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n  const uniformData = [];\n  const uniformIndices = [];\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    uniformIndices.push(ii);\n    uniformData.push({});\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    uniformData[ii].name = uniformInfo.name;\n  }\n\n  [\n    [ \"UNIFORM_TYPE\", \"type\" ],\n    [ \"UNIFORM_SIZE\", \"size\" ],  // num elements\n    [ \"UNIFORM_BLOCK_INDEX\", \"blockNdx\" ],\n    [ \"UNIFORM_OFFSET\", \"offset\", ],\n  ].forEach(function(pair) {\n    const pname = pair[0];\n    const key = pair[1];\n    gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function(value, ndx) {\n      uniformData[ndx][key] = value;\n    });\n  });\n\n  const blockSpecs = {};\n\n  const numUniformBlocks = gl.getProgramParameter(program, ACTIVE_UNIFORM_BLOCKS);\n  for (let ii = 0; ii < numUniformBlocks; ++ii) {\n    const name = gl.getActiveUniformBlockName(program, ii);\n    const blockSpec = {\n      index: gl.getUniformBlockIndex(program, name),\n      usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n      usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n      size: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_DATA_SIZE),\n      uniformIndices: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),\n    };\n    blockSpec.used = blockSpec.usedByVertexShader || blockSpec.usedByFragmentShader;\n    blockSpecs[name] = blockSpec;\n  }\n\n  return {\n    blockSpecs: blockSpecs,\n    uniformData: uniformData,\n  };\n}\n\nconst arraySuffixRE = /\\[\\d+\\]\\.$/;  // better way to check?\n\nconst pad = (v, padding) => ((v + (padding - 1)) / padding | 0) * padding;\n\nfunction createUniformBlockUniformSetter(view, isArray, rows, cols) {\n  if (isArray || rows) {\n    cols = cols || 1;\n    const numElements = view.length;\n    const totalRows = numElements / 4;\n    return function(value) {\n      let dst = 0;\n      let src = 0;\n      for (let row = 0; row < totalRows; ++row) {\n        for (let col = 0; col < cols; ++col) {\n          view[dst++] = value[src++];\n        }\n        dst += 4 - cols;\n      }\n    };\n  } else {\n    return function(value) {\n      if (value.length) {\n        view.set(value);\n      } else {\n        view[0] = value;\n      }\n    };\n  }\n}\n\n/**\n * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values\n * and a corresponding WebGLBuffer to hold those values on the GPU\n *\n * @typedef {Object} UniformBlockInfo\n * @property {string} name The name of the block\n * @property {ArrayBuffer} array The array buffer that contains the uniform values\n * @property {Float32Array} asFloat A float view on the array buffer. This is useful\n *    inspecting the contents of the buffer in the debugger.\n * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.\n * @property {number} [offset] offset into buffer\n * @property {Object<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.\n *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset\n *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`\n *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an\n *   `Int32Array` view, etc.\n * @property {Object<string, function>} setters A setter for this uniform.\n *   The reason to use setters is elements of arrays are padded to vec4 sizes which\n *   means if you want to set an array of 4 floats you'd need to set 16 values\n *   (or set elements 0, 4, 8, 12). In other words\n *   `someBlockInfo.uniforms.some4FloatArrayUniform.set([0, , , , 1, , , , 2, , , , 3])`\n *   where as the setter handles just passing in [0, 1, 2, 3] either directly as in\n *   `someBlockInfo.setter.some4FloatArrayUniform.set([0, 1, 2, 3])` (not recommended)\n *   or via {@link module:twgl.setBlockUniforms}\n * @memberOf module:twgl\n */\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {WebGLProgram} program A WebGLProgram\n * @param {module:twgl.UniformBlockSpec} uniformBlockSpec. A UniformBlockSpec as returned\n *     from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {\n  const blockSpecs = uniformBlockSpec.blockSpecs;\n  const uniformData = uniformBlockSpec.uniformData;\n  const blockSpec = blockSpecs[blockName];\n  if (!blockSpec) {\n    warn(\"no uniform block object named:\", blockName);\n    return {\n      name: blockName,\n      uniforms: {},\n    };\n  }\n  const array = new ArrayBuffer(blockSpec.size);\n  const buffer = gl.createBuffer();\n  const uniformBufferIndex = blockSpec.index;\n  gl.bindBuffer(UNIFORM_BUFFER, buffer);\n  gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);\n\n  let prefix = blockName + \".\";\n  if (arraySuffixRE.test(prefix)) {\n    prefix = prefix.replace(arraySuffixRE, \".\");\n  }\n  const uniforms = {};\n  const setters = {};\n  const setterTree = {};\n  blockSpec.uniformIndices.forEach(function(uniformNdx) {\n    const data = uniformData[uniformNdx];\n    let name = data.name;\n    if (name.startsWith(prefix)) {\n      name = name.substr(prefix.length);\n    }\n    const isArray = name.endsWith('[0]');\n    if (isArray) {\n      name = name.substr(0, name.length - 3);\n    }\n    const typeInfo = typeMap[data.type];\n    const Type = typeInfo.Type;\n    const byteLength = isArray\n        ? pad(typeInfo.size, 16) * data.size\n        : typeInfo.size * data.size;\n    const uniformView = new Type(array, data.offset, byteLength / Type.BYTES_PER_ELEMENT);\n    uniforms[name] = uniformView;\n    // Note: I'm not sure what to do here. The original\n    // idea was to create TypedArray views into each part\n    // of the block. This is useful, for example if you have\n    // a block with { mat4: model; mat4 view; mat4 projection; }\n    // you'll get a Float32Array for each one suitable for\n    // passing to most JS math libraries including twgl's and glMatrix.js.\n    //\n    // But, if you have a an array of structures, especially if that\n    // array is large, you get a whole bunch of TypedArray views.\n    // Every one of them has overhead and switching between them all\n    // is probably a cache miss. In that case it would really be better\n    // to just have one view (asFloat) and have all the setters\n    // just reference the correct portion. But, then you can't easily\n    // treat a matrix, or a vec4, as a standalone thing like you can\n    // with all the views.\n    //\n    // Another problem with the views is they are not shared. With\n    // uniforms you have one set of setters. With UniformBlockInfo\n    // you have a set of setters *pre block instance*. That's because\n    // TypedArray views can't be mapped to different buffers.\n    //\n    // My gut right now is if you really want the speed and compactness\n    // then you should probably roll your own solution. TWGL's goal\n    // here is ease of use as AFAICT there is no simple generic efficient\n    // solution.\n    const setter = createUniformBlockUniformSetter(uniformView, isArray, typeInfo.rows, typeInfo.cols);\n    setters[name] = setter;\n    addSetterToUniformTree(name, setter, setterTree, setters);\n  });\n  return {\n    name: blockName,\n    array,\n    asFloat: new Float32Array(array),  // for debugging\n    buffer,\n    uniforms,\n    setters,\n  };\n}\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo}\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfo(gl, programInfo, blockName) {\n  return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);\n}\n\n/**\n * Binds a uniform block to the matching uniform block point.\n * Matches by blocks by name so blocks must have the same name not just the same\n * structure.\n *\n * If you have changed any values and you upload the values into the corresponding WebGLBuffer\n * call {@link module:twgl.setUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name\n *     no buffer is bound.\n * @memberOf module:twgl/programs\n */\nfunction bindUniformBlock(gl, programInfo, uniformBlockInfo) {\n  const uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;\n  const blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];\n  if (blockSpec) {\n    const bufferBindIndex = blockSpec.index;\n    gl.bindBufferRange(UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Uploads the current uniform values to the corresponding WebGLBuffer\n * and binds that buffer to the program's corresponding bind point for the uniform block object.\n *\n * If you haven't changed any values and you only need to bind the uniform block object\n * call {@link module:twgl.bindUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @memberOf module:twgl/programs\n */\nfunction setUniformBlock(gl, programInfo, uniformBlockInfo) {\n  if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {\n    gl.bufferData(UNIFORM_BUFFER, uniformBlockInfo.array, DYNAMIC_DRAW);\n  }\n}\n\n/**\n * Sets values of a uniform block object\n *\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.\n * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given\n *    type of uniform. So for example given a block like\n *\n *       uniform SomeBlock {\n *         float someFloat;\n *         vec2 someVec2;\n *         vec3 someVec3Array[2];\n *         int someInt;\n *       }\n *\n *  You can set the values of the uniform block with\n *\n *       twgl.setBlockUniforms(someBlockInfo, {\n *          someFloat: 12.3,\n *          someVec2: [1, 2],\n *          someVec3Array: [1, 2, 3, 4, 5, 6],\n *          someInt: 5,\n *       }\n *\n *  Arrays can be JavaScript arrays or typed arrays\n *\n *  You can also fill out structure and array values either via\n *  shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *       float nearFar[2];\n *     };\n *     uniform Lights {\n *       Light lights[2];\n *     };\n *\n *     // in JavaScript\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[0].nearFar\": [0.1, 10],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *       \"lights[1].nearFar\": [0.2, 15],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\n *     });\n *\n *   But you can not specify leaf array indices.\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\n *       'lights[1].nearFar': [0.2, 15], // GOOD\n *     });\n *\n *  **IMPORTANT!**, packing in a UniformBlock is unintuitive.\n *  For example the actual layout of `someVec3Array` above in memory\n *  is `1, 2, 3, unused, 4, 5, 6, unused`. twgl takes in 6 values\n *  as shown about and copies them, skipping the padding. This might\n *  be confusing if you're already familiar with Uniform blocks.\n *\n *  If you want to deal with the padding yourself you can access the array\n *  buffer views directly. eg:\n *\n *      someBlockInfo.someVec3Array.set([1, 2, 3, 0, 4, 5, 6, 0]);\n *\n *  Any name that doesn't match will be ignored\n * @memberOf module:twgl/programs\n */\nfunction setBlockUniforms(uniformBlockInfo, values) {\n  const setters = uniformBlockInfo.setters;\n  for (const name in values) {\n    const setter = setters[name];\n    if (setter) {\n      const value = values[name];\n      setter(value);\n    }\n  }\n}\n\nfunction setUniformTree(tree, values) {\n  for (const name in values) {\n    const prop = tree[name];\n    if (typeof prop === 'function') {\n      prop(values[name]);\n    } else {\n      setUniformTree(tree[name], values[name]);\n    }\n  }\n}\n\n/**\n * Set uniforms and binds related textures.\n *\n * example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\"]);\n *\n *     const tex1 = gl.createTexture();\n *     const tex2 = gl.createTexture();\n *\n *     ... assume we setup the textures with data ...\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the textures AND set the\n * uniforms.\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *\n * For the example above it is equivalent to\n *\n *     let texUnit = 0;\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n *     gl.uniformMatrix4fv(u_someMatrix, false, [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ]);\n *\n * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *     };\n *\n *     const moreUniforms {\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *     twgl.setUniforms(programInfo, moreUniforms);\n *\n * You can also add WebGLSamplers to uniform samplers as in\n *\n *     const uniforms = {\n *       u_someSampler: {\n *         texture: someWebGLTexture,\n *         sampler: someWebGLSampler,\n *       },\n *     };\n *\n * In which case both the sampler and texture will be bound to the\n * same unit.\n *\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n *        uniforms.\n *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example\n *\n *     const sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     const localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, sharedUniforms);\n *     twgl.setUniforms(programInfo, localUniforms};\n *\n *   You can also fill out structure and array values either via\n *   shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *       float nearFar[2];\n *     };\n *     uniform Light lights[2];\n *\n *     // in JavaScript\n *\n *     twgl.setUniforms(programInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setUniforms(programInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[0].nearFar\": [0.1, 10],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *       \"lights[1].nearFar\": [0.2, 15],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\n *     });\n *\n *   But you can not specify leaf array indices\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\n *       'lights[1].nearFar': [0.2, 15], // GOOD\n *     });\n *\n * @memberOf module:twgl/programs\n */\nfunction setUniforms(setters, ...args) {  // eslint-disable-line\n  const actualSetters = setters.uniformSetters || setters;\n  const numArgs = args.length;\n  for (let aNdx = 0; aNdx < numArgs; ++aNdx) {\n    const values = args[aNdx];\n    if (Array.isArray(values)) {\n      const numValues = values.length;\n      for (let ii = 0; ii < numValues; ++ii) {\n        setUniforms(actualSetters, values[ii]);\n      }\n    } else {\n      for (const name in values) {\n        const setter = actualSetters[name];\n        if (setter) {\n          setter(values[name]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Alias for `setUniforms`\n * @function\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n * @memberOf module:twgl/programs\n */\nconst setUniformsAndBindTextures = setUniforms;\n\n/**\n * Creates setter functions for all attributes of a shader\n * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.\n *\n * @see {@link module:twgl.setAttributes} for example\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @return {Object.<string, function>} an object with a setter for each attribute by name.\n * @memberOf module:twgl/programs\n */\nfunction createAttributeSetters(gl, program) {\n  const attribSetters = {\n  };\n\n  const numAttribs = gl.getProgramParameter(program, ACTIVE_ATTRIBUTES);\n  for (let ii = 0; ii < numAttribs; ++ii) {\n    const attribInfo = gl.getActiveAttrib(program, ii);\n    if (isBuiltIn(attribInfo)) {\n      continue;\n    }\n    const index = gl.getAttribLocation(program, attribInfo.name);\n    const typeInfo = attrTypeMap[attribInfo.type];\n    const setter = typeInfo.setter(gl, index, typeInfo);\n    setter.location = index;\n    attribSetters[attribInfo.name] = setter;\n  }\n\n  return attribSetters;\n}\n\n/**\n * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})\n *\n * Example:\n *\n *     const program = createProgramFromScripts(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const attribSetters = createAttributeSetters(program);\n *\n *     const positionBuffer = gl.createBuffer();\n *     const texcoordBuffer = gl.createBuffer();\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setAttributes(attribSetters, attribs);\n *\n * Properties of attribs. For each attrib you can add\n * properties:\n *\n * *   type: the type of data in the buffer. Default = gl.FLOAT\n * *   normalize: whether or not to normalize the data. Default = false\n * *   stride: the stride. Default = 0\n * *   offset: offset into the buffer. Default = 0\n * *   divisor: the divisor for instances. Default = undefined\n *\n * For example if you had 3 value float positions, 2 value\n * float texcoord and 4 value uint8 colors you'd setup your\n * attribs like this\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *       a_color: {\n *         buffer: colorBuffer,\n *         numComponents: 4,\n *         type: gl.UNSIGNED_BYTE,\n *         normalize: true,\n *       },\n *     };\n *\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.\n * @memberOf module:twgl/programs\n * @deprecated use {@link module:twgl.setBuffersAndAttributes}\n * @private\n */\nfunction setAttributes(setters, buffers) {\n  for (const name in buffers) {\n    const setter = setters[name];\n    if (setter) {\n      setter(buffers[name]);\n    }\n  }\n}\n\n/**\n * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n *\n * Example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *     };\n *\n *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setBuffersAndAttributes(gl, programInfo, bufferInfo);\n *\n * For the example above it is equivalent to\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n *     gl.enableVertexAttribArray(a_positionLocation);\n *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n *     gl.enableVertexAttribArray(a_texcoordLocation);\n *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgramInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.\n *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}\n * @memberOf module:twgl/programs\n */\nfunction setBuffersAndAttributes(gl, programInfo, buffers) {\n  if (buffers.vertexArrayObject) {\n    gl.bindVertexArray(buffers.vertexArrayObject);\n  } else {\n    setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);\n    if (buffers.indices) {\n      gl.bindBuffer(ELEMENT_ARRAY_BUFFER$1, buffers.indices);\n    }\n  }\n}\n\n/**\n * @typedef {Object} ProgramInfo\n * @property {WebGLProgram} program A shader program\n * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,\n * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,\n * @property {module:twgl.UniformBlockSpec} [uniformBlockSpec] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..\n * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks\n * @memberOf module:twgl\n */\n\n/**\n * Creates a ProgramInfo from an existing program.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {module:twgl.ProgramInfo} The created ProgramInfo.\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfoFromProgram(gl, program) {\n  const uniformSetters = createUniformSetters(gl, program);\n  const attribSetters = createAttributeSetters(gl, program);\n  const programInfo = {\n    program,\n    uniformSetters,\n    attribSetters,\n  };\n\n  if (isWebGL2(gl)) {\n    programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);\n    programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);\n  }\n\n  return programInfo;\n}\n\nconst notIdRE = /\\s|{|}|;/;\n\n/**\n * Creates a ProgramInfo from 2 sources.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramInfo(gl, [vs, fs], options);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfo(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const errors = [];\n  shaderSources = shaderSources.map(function(source) {\n    // Lets assume if there is no \\n it's an id\n    if (!notIdRE.test(source)) {\n      const script = getElementById(source);\n      if (!script) {\n        const err = `no element with id: ${source}`;\n        progOptions.errorCallback(err);\n        errors.push(err);\n      } else {\n        source = script.text;\n      }\n    }\n    return source;\n  });\n\n  if (errors.length) {\n    return reportError(progOptions, '');\n  }\n\n  const origCallback = progOptions.callback;\n  if (origCallback) {\n    progOptions.callback = (err, program) => {\n      origCallback(err, err ? undefined : createProgramInfoFromProgram(gl, program));\n    };\n  }\n\n  const program = createProgramFromSources(gl, shaderSources, progOptions);\n  if (!program) {\n    return null;\n  }\n\n  return createProgramInfoFromProgram(gl, program);\n}\n\nfunction checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions) {\n  // check errors for everything.\n  for (const [name, program] of Object.entries(programs)) {\n    const options = {...programOptions};\n    const spec = programSpecs[name];\n    if (!Array.isArray(spec)) {\n      Object.assign(options, spec);\n    }\n    const errors = getProgramErrors(gl, program, options.errorCallback);\n    if (errors) {\n      // delete everything we created\n      for (const program of Object.values(programs)) {\n        const shaders = gl.getAttachedShaders(program);\n        gl.deleteProgram(program);\n        for (const shader of shaders) {\n          // Don't delete it if we didn't create it.\n          if (!noDeleteShadersSet.has(shader)) {\n            gl.deleteShader(shader);\n          }\n        }\n      }\n      return errors;\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Creates multiple programs\n *\n * Note: the reason this function exists is because the fastest way to create multiple\n * programs in WebGL is to create and compile all shaders and link all programs and only\n * afterwards check if they succeeded. In that way, giving all your shaders\n *\n * @see {@link module:twgl.createProgram}\n *\n * Example:\n *\n *     const programs = twgl.createPrograms(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Object.<string, WebGLProgram>?} the created programInfos by name\n */\nfunction createPrograms(gl, programSpecs, programOptions = {}) {\n  // Remember existing shaders so that if there is an error we don't delete them\n  const noDeleteShadersSet = new Set();\n\n  // compile and link everything\n  const programs = Object.fromEntries(Object.entries(programSpecs).map(([name, spec]) => {\n    const options = {...programOptions};\n    const shaders = Array.isArray(spec) ? spec : spec.shaders;\n    if (!Array.isArray(spec)) {\n      Object.assign(options, spec);\n    }\n    shaders.forEach(noDeleteShadersSet.add, noDeleteShadersSet);\n    return [name, createProgramNoCheck(gl, shaders, options)];\n  }));\n\n  if (programOptions.callback) {\n    waitForAllProgramsLinkCompletionAsync(gl, programs).then(() => {\n      const errors = checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions);\n      programOptions.callback(errors, errors ? undefined : programs);\n    });\n    return undefined;\n  }\n\n  const errors = checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions);\n  return errors ? undefined : programs;\n}\n\n/**\n * Creates multiple programInfos\n *\n * Note: the reason this function exists is because the fastest way to create multiple\n * programs in WebGL is to create and compile all shaders and link all programs and only\n * afterwards check if they succeeded. In that way, giving all your shaders\n *\n * @see {@link module:twgl.createProgramInfo}\n *\n * Examples:\n *\n *     const programInfos = twgl.createProgramInfos(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * or\n *\n *     const {lambert, phong, particles} = twgl.createProgramInfos(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Object.<string, module:twgl.ProgramInfo>?} the created programInfos by name\n */\nfunction createProgramInfos(gl, programSpecs, programOptions) {\n  programOptions = getProgramOptions(programOptions);\n\n  function createProgramInfosForPrograms(gl, programs) {\n    return Object.fromEntries(Object.entries(programs).map(([name, program]) =>\n      [name, createProgramInfoFromProgram(gl, program)]\n    ));\n  }\n\n  const origCallback = programOptions.callback;\n  if (origCallback) {\n    programOptions.callback = (err, programs) => {\n      origCallback(err, err ? undefined : createProgramInfosForPrograms(gl, programs));\n    };\n  }\n\n  const programs = createPrograms(gl, programSpecs, programOptions);\n  if (origCallback || !programs) {\n    return undefined;\n  }\n\n  return createProgramInfosForPrograms(gl, programs);\n}\n\n/**\n * Creates multiple programs asynchronously\n *\n * @see {@link module:twgl.createProgramAsync}\n *\n * Example:\n *\n *     const programs = await twgl.createProgramsAsync(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * @function\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Object.<string, WebGLProgram>?} the created programInfos by name\n */\nconst createProgramsAsync = wrapCallbackFnToAsyncFn(createPrograms);\n\n/**\n * Creates multiple programInfos asynchronously\n *\n * @see {@link module:twgl.createProgramInfoAsync}\n *\n * Example:\n *\n *     const programInfos = await twgl.createProgramInfosAsync(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * @function\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Promise<Object.<string, module:twgl.ProgramInfo>>} the created programInfos by name\n */\nconst createProgramInfosAsync = wrapCallbackFnToAsyncFn(createProgramInfos);\n\nvar programs = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttributeSetters: createAttributeSetters,\n  createProgram: createProgram,\n  createProgramAsync: createProgramAsync,\n  createPrograms: createPrograms,\n  createProgramsAsync: createProgramsAsync,\n  createProgramFromScripts: createProgramFromScripts,\n  createProgramFromSources: createProgramFromSources,\n  createProgramInfo: createProgramInfo,\n  createProgramInfoAsync: createProgramInfoAsync,\n  createProgramInfos: createProgramInfos,\n  createProgramInfosAsync: createProgramInfosAsync,\n  createProgramInfoFromProgram: createProgramInfoFromProgram,\n  createUniformSetters: createUniformSetters,\n  createUniformBlockSpecFromProgram: createUniformBlockSpecFromProgram,\n  createUniformBlockInfoFromProgram: createUniformBlockInfoFromProgram,\n  createUniformBlockInfo: createUniformBlockInfo,\n  createTransformFeedback: createTransformFeedback,\n  createTransformFeedbackInfo: createTransformFeedbackInfo,\n  bindTransformFeedbackInfo: bindTransformFeedbackInfo,\n  setAttributes: setAttributes,\n  setBuffersAndAttributes: setBuffersAndAttributes,\n  setUniforms: setUniforms,\n  setUniformsAndBindTextures: setUniformsAndBindTextures,\n  setUniformBlock: setUniformBlock,\n  setBlockUniforms: setBlockUniforms,\n  bindUniformBlock: bindUniformBlock\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst TRIANGLES                      = 0x0004;\nconst UNSIGNED_SHORT                 = 0x1403;\n\n/**\n * Drawing related functions\n *\n * For backward compatibility they are available at both `twgl.draw` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/draw\n */\n\n/**\n * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n *\n * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n * but calling this means if you switch from indexed data to non-indexed\n * data you don't have to remember to update your draw call.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or\n *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`\n * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n * @param {number} [offset] An optional offset. Defaults to 0.\n * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called\n * @memberOf module:twgl/draw\n */\nfunction drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {\n  type = type === undefined ? TRIANGLES : type;\n  const indices = bufferInfo.indices;\n  const elementType = bufferInfo.elementType;\n  const numElements = count === undefined ? bufferInfo.numElements : count;\n  offset = offset === undefined ? 0 : offset;\n  if (elementType || indices) {\n    if (instanceCount !== undefined) {\n      gl.drawElementsInstanced(type, numElements, elementType === undefined ? UNSIGNED_SHORT : bufferInfo.elementType, offset, instanceCount);\n    } else {\n      gl.drawElements(type, numElements, elementType === undefined ? UNSIGNED_SHORT : bufferInfo.elementType, offset);\n    }\n  } else {\n    if (instanceCount !== undefined) {\n      gl.drawArraysInstanced(type, offset, numElements, instanceCount);\n    } else {\n      gl.drawArrays(type, offset, numElements);\n    }\n  }\n}\n\n/**\n * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.\n *\n * You need either a `BufferInfo` or a `VertexArrayInfo`.\n *\n * @typedef {Object} DrawObject\n * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In other words `undefined` = `true`\n * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...\n * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}\n * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @property {Object<string, ?>} uniforms The values for the uniforms.\n *   You can pass multiple objects by putting them in an array. For example\n *\n *     var sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     var localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     var drawObj = {\n *       ...\n *       uniforms: [sharedUniforms, localUniforms],\n *     };\n *\n * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.\n * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to bufferInfo.numElements.\n * @property {number} [instanceCount] the number of instances. Defaults to undefined.\n * @memberOf module:twgl\n */\n\n/**\n * Draws a list of objects\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n * @memberOf module:twgl/draw\n */\nfunction drawObjectList(gl, objectsToDraw) {\n  let lastUsedProgramInfo = null;\n  let lastUsedBufferInfo = null;\n\n  objectsToDraw.forEach(function(object) {\n    if (object.active === false) {\n      return;\n    }\n\n    const programInfo = object.programInfo;\n    const bufferInfo = object.vertexArrayInfo || object.bufferInfo;\n    let bindBuffers = false;\n    const type = object.type === undefined ? TRIANGLES : object.type;\n\n    if (programInfo !== lastUsedProgramInfo) {\n      lastUsedProgramInfo = programInfo;\n      gl.useProgram(programInfo.program);\n\n      // We have to rebind buffers when changing programs because we\n      // only bind buffers the program uses. So if 2 programs use the same\n      // bufferInfo but the 1st one uses only positions the when the\n      // we switch to the 2nd one some of the attributes will not be on.\n      bindBuffers = true;\n    }\n\n    // Setup all the needed attributes.\n    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {\n        gl.bindVertexArray(null);\n      }\n      lastUsedBufferInfo = bufferInfo;\n      setBuffersAndAttributes(gl, programInfo, bufferInfo);\n    }\n\n    // Set the uniforms.\n    setUniforms(programInfo, object.uniforms);\n\n    // Draw\n    drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);\n  });\n\n  if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject) {\n    gl.bindVertexArray(null);\n  }\n}\n\nvar draw = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  drawBufferInfo: drawBufferInfo,\n  drawObjectList: drawObjectList\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst FRAMEBUFFER                    = 0x8d40;\nconst RENDERBUFFER                   = 0x8d41;\nconst TEXTURE_2D                     = 0x0de1;\n\nconst UNSIGNED_BYTE                  = 0x1401;\n\n/* PixelFormat */\nconst DEPTH_COMPONENT                = 0x1902;\nconst RGBA                           = 0x1908;\nconst DEPTH_COMPONENT24              = 0x81a6;\nconst DEPTH_COMPONENT32F             = 0x8cac;\nconst DEPTH24_STENCIL8               = 0x88f0;\nconst DEPTH32F_STENCIL8              = 0x8cad;\n\n/* Framebuffer Object. */\nconst RGBA4                          = 0x8056;\nconst RGB5_A1                        = 0x8057;\nconst RGB565                         = 0x8D62;\nconst DEPTH_COMPONENT16              = 0x81A5;\nconst STENCIL_INDEX                  = 0x1901;\nconst STENCIL_INDEX8                 = 0x8D48;\nconst DEPTH_STENCIL                  = 0x84F9;\nconst COLOR_ATTACHMENT0              = 0x8CE0;\nconst DEPTH_ATTACHMENT               = 0x8D00;\nconst STENCIL_ATTACHMENT             = 0x8D20;\nconst DEPTH_STENCIL_ATTACHMENT       = 0x821A;\n\n/* TextureWrapMode */\nconst CLAMP_TO_EDGE                  = 0x812F;\n\n/* TextureMagFilter */\nconst LINEAR                         = 0x2601;\n\n/**\n * The options for a framebuffer attachment.\n *\n * Note: For a `format` that is a texture include all the texture\n * options from {@link module:twgl.TextureOptions} for example\n * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}\n * `auto` defaults to `false` for attachment textures but `min` and `mag` default\n * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`\n *\n * @typedef {Object} AttachmentOptions\n * @property {number} [attachmentPoint] The attachment point. Defaults\n *   to `gl.COLOR_ATTACHMENT0 + ndx` unless type is a depth or stencil type\n *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending\n *   on the format or attachment type.\n * @property {number} [format] The format. If one of `gl.RGBA4`,\n *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,\n *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a\n *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`\n * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.\n * @property {number} [target] The texture target for `gl.framebufferTexture2D`.\n *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.\n * @property {number} [samples] The number of samples. Default = 1\n * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.\n * @property {number} [layer] layer for `gl.framebufferTextureLayer`. Defaults to undefined.\n *   If set then `gl.framebufferTextureLayer` is called, if not then `gl.framebufferTexture2D`\n * @property {(WebGLRenderbuffer | WebGLTexture)} [attachment] An existing renderbuffer or texture.\n *    If provided will attach this Object. This allows you to share\n *    attachments across framebuffers.\n * @memberOf module:twgl\n * @mixes module:twgl.TextureOptions\n */\n\nconst defaultAttachments = [\n  { format: RGBA, type: UNSIGNED_BYTE, min: LINEAR, wrap: CLAMP_TO_EDGE, },\n  { format: DEPTH_STENCIL, },\n];\n\nconst attachmentsByFormat = {};\nattachmentsByFormat[DEPTH_STENCIL] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT16] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT24] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT32F] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH24_STENCIL8] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH32F_STENCIL8] = DEPTH_STENCIL_ATTACHMENT;\n\nfunction getAttachmentPointForFormat(format, internalFormat) {\n  return attachmentsByFormat[format] || attachmentsByFormat[internalFormat];\n}\n\nconst renderbufferFormats = {};\nrenderbufferFormats[RGBA4] = true;\nrenderbufferFormats[RGB5_A1] = true;\nrenderbufferFormats[RGB565] = true;\nrenderbufferFormats[DEPTH_STENCIL] = true;\nrenderbufferFormats[DEPTH_COMPONENT16] = true;\nrenderbufferFormats[STENCIL_INDEX] = true;\nrenderbufferFormats[STENCIL_INDEX8] = true;\n\nfunction isRenderbufferFormat(format) {\n  return renderbufferFormats[format];\n}\n\nconst MAX_COLOR_ATTACHMENT_POINTS = 32;  // even an 3090 only supports 8 but WebGL/OpenGL ES define constants for 32\n\nfunction isColorAttachmentPoint(attachmentPoint) {\n  return attachmentPoint >= COLOR_ATTACHMENT0 && attachmentPoint < COLOR_ATTACHMENT0 + MAX_COLOR_ATTACHMENT_POINTS;\n}\n\n/**\n * @typedef {Object} FramebufferInfo\n * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo\n * @property {Array.<(WebGLRenderbuffer | WebGLTexture)>} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.\n * @property {number} width The width of the framebuffer and its attachments\n * @property {number} height The width of the framebuffer and its attachments\n * @memberOf module:twgl\n */\n\n/**\n * Creates a framebuffer and attachments.\n *\n * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.\n * It also leaves the framebuffer it just created as the currently bound `FRAMEBUFFER`.\n * Note: If this is WebGL2 or if you called {@link module:twgl.addExtensionsToContext} then it will set the drawBuffers\n * to `[COLOR_ATTACHMENT0, COLOR_ATTACHMENT1, ...]` for how ever many color attachments were created.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n * Passing in a specific size\n *\n *     const width = 256;\n *     const height = 256;\n *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);\n *\n * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.\n * [WebGL1 only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an\n *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.\n * @memberOf module:twgl/framebuffers\n */\nfunction createFramebufferInfo(gl, attachments, width, height) {\n  const target = FRAMEBUFFER;\n  const fb = gl.createFramebuffer();\n  gl.bindFramebuffer(target, fb);\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  attachments = attachments || defaultAttachments;\n  const usedColorAttachmentsPoints = [];\n  const framebufferInfo = {\n    framebuffer: fb,\n    attachments: [],\n    width: width,\n    height: height,\n  };\n\n  attachments.forEach(function(attachmentOptions, i) {\n    let attachment = attachmentOptions.attachment;\n    const samples = attachmentOptions.samples;\n    const format = attachmentOptions.format;\n    let attachmentPoint = attachmentOptions.attachmentPoint || getAttachmentPointForFormat(format, attachmentOptions.internalFormat);\n    if (!attachmentPoint) {\n      attachmentPoint = COLOR_ATTACHMENT0 + i;\n    }\n    if (isColorAttachmentPoint(attachmentPoint)) {\n      usedColorAttachmentsPoints.push(attachmentPoint);\n    }\n    if (!attachment) {\n      if (samples !== undefined || isRenderbufferFormat(format)) {\n        attachment = gl.createRenderbuffer();\n        gl.bindRenderbuffer(RENDERBUFFER, attachment);\n        if (samples > 1) {\n          gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);\n        } else {\n          gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n        }\n      } else {\n        const textureOptions = Object.assign({}, attachmentOptions);\n        textureOptions.width = width;\n        textureOptions.height = height;\n        if (textureOptions.auto === undefined) {\n          textureOptions.auto = false;\n          textureOptions.min = textureOptions.min || textureOptions.minMag || LINEAR;\n          textureOptions.mag = textureOptions.mag || textureOptions.minMag || LINEAR;\n          textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || CLAMP_TO_EDGE;\n          textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || CLAMP_TO_EDGE;\n        }\n        attachment = createTexture(gl, textureOptions);\n      }\n    }\n    if (isRenderbuffer(gl, attachment)) {\n      gl.framebufferRenderbuffer(target, attachmentPoint, RENDERBUFFER, attachment);\n    } else if (isTexture(gl, attachment)) {\n      if (attachmentOptions.layer !== undefined) {\n        gl.framebufferTextureLayer(\n          target,\n          attachmentPoint,\n          attachment,\n          attachmentOptions.level || 0,\n          attachmentOptions.layer);\n      } else {\n        gl.framebufferTexture2D(\n            target,\n            attachmentPoint,\n            attachmentOptions.target || TEXTURE_2D,\n            attachment,\n            attachmentOptions.level || 0);\n      }\n    } else {\n      throw new Error('unknown attachment type');\n    }\n    framebufferInfo.attachments.push(attachment);\n  });\n  if (gl.drawBuffers) {\n    gl.drawBuffers(usedColorAttachmentsPoints);\n  }\n  return framebufferInfo;\n}\n\n/**\n * Resizes the attachments of a framebuffer.\n *\n * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}\n * because TWGL has no idea the format/type of each attachment.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments\n *         twgl.resizeFramebufferInfo(gl, fbi);\n *       }\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments to match\n *         twgl.resizeFramebufferInfo(gl, fbi, attachments);\n *       }\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @memberOf module:twgl/framebuffers\n */\nfunction resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  framebufferInfo.width = width;\n  framebufferInfo.height = height;\n  attachments = attachments || defaultAttachments;\n  attachments.forEach(function(attachmentOptions, ndx) {\n    const attachment = framebufferInfo.attachments[ndx];\n    const format = attachmentOptions.format;\n    const samples = attachmentOptions.samples;\n    if (samples !== undefined || isRenderbuffer(gl, attachment)) {\n      gl.bindRenderbuffer(RENDERBUFFER, attachment);\n      if (samples > 1) {\n        gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);\n      } else {\n        gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n      }\n    } else if (isTexture(gl, attachment)) {\n      resizeTexture(gl, attachment, attachmentOptions, width, height);\n    } else {\n      throw new Error('unknown attachment type');\n    }\n  });\n}\n\n/**\n * Binds a framebuffer\n *\n * This function pretty much solely exists because I spent hours\n * trying to figure out why something I wrote wasn't working only\n * to realize I forget to set the viewport dimensions.\n * My hope is this function will fix that.\n *\n * It is effectively the same as\n *\n *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\n *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo|null} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n *   If falsy will bind the canvas.\n * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\n * @memberOf module:twgl/framebuffers\n */\n\nfunction bindFramebufferInfo(gl, framebufferInfo, target) {\n  target = target || FRAMEBUFFER;\n  if (framebufferInfo) {\n    gl.bindFramebuffer(target, framebufferInfo.framebuffer);\n    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\n  } else {\n    gl.bindFramebuffer(target, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  }\n}\n\nvar framebuffers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  bindFramebufferInfo: bindFramebufferInfo,\n  createFramebufferInfo: createFramebufferInfo,\n  resizeFramebufferInfo: resizeFramebufferInfo\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * vertex array object related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/vertexArrays\n */\n\nconst ELEMENT_ARRAY_BUFFER           = 0x8893;\n\n/**\n * @typedef {Object} VertexArrayInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object\n * @memberOf module:twgl\n */\n\n/**\n * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects\n *   assign buffers to specific attributes at creation time. That means they can only be used with programs\n *   who's attributes use the same attribute locations for the same purposes.\n *\n * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}\n *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.\n *\n * also\n *\n * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object\n *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**\n *   will affect the Vertex Array Object state.\n *\n * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n *\n *    You need to make sure every attribute that will be used is bound. So for example assume shader 1\n *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo\n *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't\n *    now attribute D's location.\n *\n *    So, you can pass in both shader 1 and shader 2's programInfo\n *\n * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVertexArrayInfo(gl, programInfos, bufferInfo) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  if (!programInfos.length) {\n    programInfos = [programInfos];\n  }\n  programInfos.forEach(function(programInfo) {\n    setBuffersAndAttributes(gl, programInfo, bufferInfo);\n  });\n  gl.bindVertexArray(null);\n  return {\n    numElements: bufferInfo.numElements,\n    elementType: bufferInfo.elementType,\n    vertexArrayObject: vao,\n  };\n}\n\n/**\n * Creates a vertex array object and then sets the attributes on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n *\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOAndSetAttributes(gl, setters, attribs, indices) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  setAttributes(setters, attribs);\n  if (indices) {\n    gl.bindBuffer(ELEMENT_ARRAY_BUFFER, indices);\n  }\n  // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n  // like when creating buffers for other stuff will mess up this VAO's binding\n  gl.bindVertexArray(null);\n  return vao;\n}\n\n/**\n * Creates a vertex array object and then sets the attributes\n * on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n *\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n  return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n}\n\nvar vertexArrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createVertexArrayInfo: createVertexArrayInfo,\n  createVAOAndSetAttributes: createVAOAndSetAttributes,\n  createVAOFromBufferInfo: createVAOFromBufferInfo\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nconst defaults = {\n  addExtensionsToContext: true,\n};\n\n/**\n * Various default settings for twgl.\n *\n * Note: You can call this any number of times. Example:\n *\n *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });\n *     twgl.setDefaults({ attribPrefix: 'a_' });\n *\n * is equivalent to\n *\n *     twgl.setDefaults({\n *       textureColor: [1, 0, 0, 1],\n *       attribPrefix: 'a_',\n *     });\n *\n * @typedef {Object} Defaults\n * @property {string} [attribPrefix] The prefix to stick on attributes\n *\n *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n *   as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n *   In other words I'll create arrays of geometry like this\n *\n *       const arrays = {\n *         position: ...\n *         normal: ...\n *         texcoord: ...\n *       };\n *\n *   But need those mapped to attributes and my attributes start with `a_`.\n *\n *   Default: `\"\"`\n *\n * @property {number[]} [textureColor] Array of 4 values in the range 0 to 1\n *\n *   The default texture color is used when loading textures from\n *   urls. Because the URL will be loaded async we'd like to be\n *   able to use the texture immediately. By putting a 1x1 pixel\n *   color in the texture we can start using the texture before\n *   the URL has loaded.\n *\n *   Default: `[0.5, 0.75, 1, 1]`\n *\n * @property {string} [crossOrigin]\n *\n *   If not undefined sets the crossOrigin attribute on images\n *   that twgl creates when downloading images for textures.\n *\n *   Also see {@link module:twgl.TextureOptions}.\n *\n * @property {bool} [addExtensionsToContext]\n *\n *   If true, then, when twgl will try to add any supported WebGL extensions\n *   directly to the context under their normal GL names. For example\n *   if ANGLE_instances_arrays exists then twgl would enable it,\n *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,\n *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`\n *   to the `WebGLRenderingContext`.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets various defaults for twgl.\n *\n * In the interest of terseness which is kind of the point\n * of twgl I've integrated a few of the older functions here\n *\n * @param {module:twgl.Defaults} newDefaults The default settings.\n * @memberOf module:twgl\n */\nfunction setDefaults(newDefaults) {\n  copyExistingProperties(newDefaults, defaults);\n  setDefaults$2(newDefaults);  // eslint-disable-line\n  setDefaults$1(newDefaults);  // eslint-disable-line\n}\n\nconst prefixRE = /^(.*?)_/;\nfunction addExtensionToContext(gl, extensionName) {\n  glEnumToString(gl, 0);\n  const ext = gl.getExtension(extensionName);\n  if (ext) {\n    const enums = {};\n    const fnSuffix = prefixRE.exec(extensionName)[1];\n    const enumSuffix = '_' + fnSuffix;\n    for (const key in ext) {\n      const value = ext[key];\n      const isFunc = typeof (value) === 'function';\n      const suffix = isFunc ? fnSuffix : enumSuffix;\n      let name = key;\n      // examples of where this is not true are WEBGL_compressed_texture_s3tc\n      // and WEBGL_compressed_texture_pvrtc\n      if (key.endsWith(suffix)) {\n        name = key.substring(0, key.length - suffix.length);\n      }\n      if (gl[name] !== undefined) {\n        if (!isFunc && gl[name] !== value) {\n          warn$1(name, gl[name], value, key);\n        }\n      } else {\n        if (isFunc) {\n          gl[name] = function(origFn) {\n            return function() {\n              return origFn.apply(ext, arguments);\n            };\n          }(value);\n        } else {\n          gl[name] = value;\n          enums[name] = value;\n        }\n      }\n    }\n    // pass the modified enums to glEnumToString\n    enums.constructor = {\n      name: ext.constructor.name,\n    };\n    glEnumToString(enums, 0);\n  }\n  return ext;\n}\n\n/*\n * If you're wondering why the code doesn't just iterate\n * over all extensions using `gl.getExtensions` is that it's possible\n * some future extension is incompatible with this code. Rather than\n * have thing suddenly break it seems better to manually add to this\n * list.\n *\n */\nconst supportedExtensions = [\n  'ANGLE_instanced_arrays',\n  'EXT_blend_minmax',\n  'EXT_color_buffer_float',\n  'EXT_color_buffer_half_float',\n  'EXT_disjoint_timer_query',\n  'EXT_disjoint_timer_query_webgl2',\n  'EXT_frag_depth',\n  'EXT_sRGB',\n  'EXT_shader_texture_lod',\n  'EXT_texture_filter_anisotropic',\n  'OES_element_index_uint',\n  'OES_standard_derivatives',\n  'OES_texture_float',\n  'OES_texture_float_linear',\n  'OES_texture_half_float',\n  'OES_texture_half_float_linear',\n  'OES_vertex_array_object',\n  'WEBGL_color_buffer_float',\n  'WEBGL_compressed_texture_atc',\n  'WEBGL_compressed_texture_etc1',\n  'WEBGL_compressed_texture_pvrtc',\n  'WEBGL_compressed_texture_s3tc',\n  'WEBGL_compressed_texture_s3tc_srgb',\n  'WEBGL_depth_texture',\n  'WEBGL_draw_buffers',\n];\n\n/**\n * Attempts to enable all of the following extensions\n * and add their functions and constants to the\n * `WebGLRenderingContext` using their normal non-extension like names.\n *\n *      ANGLE_instanced_arrays\n *      EXT_blend_minmax\n *      EXT_color_buffer_float\n *      EXT_color_buffer_half_float\n *      EXT_disjoint_timer_query\n *      EXT_disjoint_timer_query_webgl2\n *      EXT_frag_depth\n *      EXT_sRGB\n *      EXT_shader_texture_lod\n *      EXT_texture_filter_anisotropic\n *      OES_element_index_uint\n *      OES_standard_derivatives\n *      OES_texture_float\n *      OES_texture_float_linear\n *      OES_texture_half_float\n *      OES_texture_half_float_linear\n *      OES_vertex_array_object\n *      WEBGL_color_buffer_float\n *      WEBGL_compressed_texture_atc\n *      WEBGL_compressed_texture_etc1\n *      WEBGL_compressed_texture_pvrtc\n *      WEBGL_compressed_texture_s3tc\n *      WEBGL_compressed_texture_s3tc_srgb\n *      WEBGL_depth_texture\n *      WEBGL_draw_buffers\n *\n * For example if `ANGLE_instanced_arrays` exists then the functions\n * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`\n * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the\n * `WebGLRenderingContext`.\n *\n * Note that if you want to know if the extension exists you should\n * probably call `gl.getExtension` for each extension. Alternatively\n * you can check for the existence of the functions or constants that\n * are expected to be added. For example\n *\n *    if (gl.drawBuffers) {\n *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2\n *      ....\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @memberOf module:twgl\n */\nfunction addExtensionsToContext(gl) {\n  for (let ii = 0; ii < supportedExtensions.length; ++ii) {\n    addExtensionToContext(gl, supportedExtensions[ii]);\n  }\n}\n\n/**\n * Creates a webgl context.\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n * @private\n */\nfunction create3DContext(canvas, opt_attribs) {\n  const names = [\"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL1 context.\n *\n * Note: Will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n * @deprecated\n * @private\n */\nfunction getWebGLContext(canvas, opt_attribs) {\n  const gl = create3DContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Creates a webgl context.\n *\n * Will return a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *     twgl.isWebGL2(gl);\n *\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n */\nfunction createContext(canvas, opt_attribs) {\n  const names = [\"webgl2\", \"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL context.  Will create a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *    function isWebGL2(gl) {\n *      return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0 \") == 0;\n *    }\n *\n * Note: For a WebGL1 context will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\nfunction getContext(canvas, opt_attribs) {\n  const gl = createContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Resize a canvas to match the size it's displayed.\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.\n * @return {boolean} true if the canvas was resized.\n * @memberOf module:twgl\n */\nfunction resizeCanvasToDisplaySize(canvas, multiplier) {\n  multiplier = multiplier || 1;\n  multiplier = Math.max(0, multiplier);\n  const width  = canvas.clientWidth  * multiplier | 0;\n  const height = canvas.clientHeight * multiplier | 0;\n  if (canvas.width !== width || canvas.height !== height) {\n    canvas.width = width;\n    canvas.height = height;\n    return true;\n  }\n  return false;\n}\n\nexport { addExtensionsToContext, attributes, bindFramebufferInfo, bindTransformFeedbackInfo, bindUniformBlock, canFilter, canGenerateMipmap, createAttribsFromArrays, createAttributeSetters, createBufferFromArray, createBufferFromTypedArray, createBufferInfoFromArrays, createBuffersFromArrays, createFramebufferInfo, createProgram, createProgramAsync, createProgramFromScripts, createProgramFromSources, createProgramInfo, createProgramInfoAsync, createProgramInfoFromProgram, createProgramInfos, createProgramInfosAsync, createPrograms, createProgramsAsync, createSampler, createSamplers, createTexture, createTextures, createTransformFeedback, createTransformFeedbackInfo, createUniformBlockInfo, createUniformBlockInfoFromProgram, createUniformBlockSpecFromProgram, createUniformSetters, createVAOAndSetAttributes, createVAOFromBufferInfo, createVertexArrayInfo, draw, drawBufferInfo, drawObjectList, framebuffers, getArray$1 as getArray_, getBytesPerElementForInternalFormat, getContext, getFormatAndTypeForInternalFormat, getGLTypeForTypedArray, getGLTypeForTypedArrayType, getNumComponentsForFormat, getNumComponents$1 as getNumComponents_, getTypedArrayTypeForGLType, getWebGLContext, glEnumToString, isArrayBuffer$1 as isArrayBuffer, isWebGL1, isWebGL2, loadTextureFromUrl, m4, primitives, programs, resizeCanvasToDisplaySize, resizeFramebufferInfo, resizeTexture, setAttribInfoBufferFromArray, setDefaults$2 as setAttributeDefaults_, setAttributePrefix, setAttributes, setBlockUniforms, setBuffersAndAttributes, setDefaultTextureColor, setDefaults, setEmptyTexture, setSamplerParameters, setDefaults$1 as setTextureDefaults_, setTextureFilteringForSize, setTextureFromArray, setTextureFromElement, setTextureParameters, setUniformBlock, setUniforms, setUniformsAndBindTextures, textures, typedarrays, utils, v3, vertexArrays };\n",null,null,null,null,null,null,null,null,null,null,null,null],"names":["FlipnoteRegion","FlipnoteFormat","FlipnoteThumbImageFormat","FlipnoteStereoscopicEye","FlipnoteAudioTrack","FlipnoteSoundEffectTrack","__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","call","value","get","__classPrivateFieldSet","set","exports","SuppressedError","ByteArray","constructor","this","pageSize","allocSize","realSize","pages","numPages","pageIdx","pagePtr","realPtr","newPage","pointer","ptr","setPointer","Uint8Array","length","Math","floor","writeByte","writeBytes","bytes","srcPtr","l","i","writeChars","str","charCodeAt","writeU8","writeU16","writeU32","getBytes","page","slice","getBuffer","buffer","hexFromBytes","reverse","hex","push","toString","padStart","join","DataStream","data","DataView","numBytes","byteLength","seek","offset","whence","readUint8","val","getUint8","writeUint8","setUint8","readInt8","getInt8","writeInt8","setInt8","readUint16","littleEndian","getUint16","writeUint16","setUint16","readInt16","getInt16","writeInt16","setInt16","readUint32","getUint32","writeUint32","setUint32","readInt32","getInt32","writeInt32","setInt32","readBytes","count","forEach","byte","readHex","readChar","char","String","fromCharCode","readWideChar","readChars","chars","string","readWideChars","Uint16Array","end","clamp","n","h","assert","condition","errMsg","err","assertRange","min","max","name","Error","getGlobalObject","isNode","global","window","self","isBrowser","document","assertBrowserEnv","process","versions","node","isWebWorker","createElement","BaseParser","_a","titleFormats","COMMENT","FLIPNOTE","ICON","soundMeta","Map","layerVisibility","isFolderIcon","isComment","isDsiLibraryNote","getTitle","formats","replace","meta","current","username","Symbol","toStringTag","iterator","frameCount","getLayerPixels","frameIndex","layerIndex","imageBuffer","imageWidth","imageHeight","depthStrength","depthEye","Left","numLayers","palette","getFramePaletteIndices","palettePtr","numLayerColors","layerBuffer","decodeFrame","depth","getFrameLayerDepths","depthShift","srcStride","srcWidth","dstStride","width","height","xOffs","imageOffsetX","yOffs","imageOffsetY","fill","srcY","dstY","srcX","dstX","dstPtr","pixel","getLayerPixelsRgba","Uint32Array","paletteBuffer","getFramePaletteUint32","getFramePixels","layerOrder","getFrameLayerOrder","layerDepth","layers","getFramePixelsRgba","colors","getFramePalette","r","g","b","a","getSoundEffectFlagsForTrack","trackId","getSoundEffectFlags","map","flags","isSoundEffectUsedOnFrame","soundEffectTracks","includes","getFrameSoundEffectFlags","hasAudioTrack","REGEX_PPM_FSID","PPM_FSID_SPECIAL_CASE","isPpmFsid","fsid","test","getPpmFsidRegion","charAt","JPN","USA","EUR","UNKNOWN","ADPCM_INDEX_TABLE_2BIT","Int8Array","ADPCM_INDEX_TABLE_4BIT","ADPCM_STEP_TABLE","Int16Array","pcmGetSample","src","srcSize","pcmGetClippingRatio","numSamples","numClippedSamples","sample","pcmGetRms","rms","pow","sqrt","NINTENDO_UNIX_EPOCH","dateFromNintendoTimestamp","timestamp","Date","dateToNintendoTimestamp","date","getTime","timeGetNoteDuration","framerate","SUBTLE_CRYPTO","crypto","msCrypto","subtle","nodeModule","p","require","dynamicRequire","module","webcrypto","ALGORITHM","rsaLoadPublicKey","async","pemKey","hashType","lines","split","filter","line","startsWith","endsWith","keyPlaintext","atob","keyBytes","_","importKey","hash","rsaVerify","key","signature","verify","PPM_FRAMERATES","PPM_PALETTE","WHITE","BLACK","RED","BLUE","PPM_THUMB_PALETTE","PPM_PUBLIC_KEY","PpmParser","matchBuffer","magicBytes","arrayBuffer","settings","super","format","PPM","aspect","publicKey","audioTracks","rawSampleRate","sampleRate","globalPalette","_PpmParser_layerBuffers","_PpmParser_soundFlags","_PpmParser_prevLayerBuffers","_PpmParser_lineEncodingBuffers","_PpmParser_prevDecodedFrame","_PpmParser_frameDataLength","_PpmParser_soundDataLength","_PpmParser_soundDataOffset","_PpmParser_frameOffsets","_PpmParser_instances","_PpmParser_decodeHeader","_PpmParser_decodeAnimationHeader","_PpmParser_decodeSoundHeader","version","_PpmParser_decodeMeta","getThumbnailImage","pixels","tileY","tileX","x","y","Rgba","_PpmParser_isKeyFrame","header","isKeyFrame","isTranslated","translateX","translateY","lineEncodingBuffer","pixelBuffer","pixelBufferPtr","lineHeader","chunk","layer1","layer2","layer1Prev","layer2Prev","w","startX","startY","endX","endY","shift","dest","size","isInverted","penMap","colorIndex","getIsKeyFrame","flag","getFrameAuthor","getFrameCameraFlags","decodeSoundFlags","undefined","numFlags","Array","frameFlags","SE1","SE2","SE3","SE4","getAudioTrackRaw","trackMeta","decodeAudioTrack","dst","stepIndex","predictor","lowNibble","step","diff","getAudioTrackPcm","dstFreq","srcPcm","srcFreq","BGM","bgmAdjust","bgmrate","srcLength","dstLength","adjFreq","pcmResampleNearestNeighbour","getAudioMasterPcm","dstSize","ceil","duration","master","hasBgm","hasSe1","hasSe2","hasSe3","bgmPcm","_PpmParser_pcmAudioMix","samplesPerFrame","se1Pcm","se2Pcm","se3Pcm","seFlags","frame","seOffset","audioClipRatio","getBody","bodyEnd","subarray","getSignature","WeakMap","WeakSet","soundDataOffset","_PpmParser_readFilename","lock","thumbIndex","rootAuthorName","parentAuthorName","currentAuthorName","parentAuthorId","currentAuthorId","parentFilename","currentFilename","rootAuthorId","thumbFrameIndex","isSpinoff","loop","frameSpeed","bgmSpeed","root","region","filename","parent","offsetTableLength","numOffsets","frameOffsets","bgmLen","se1Len","se2Len","se3Len","dstOffset","samp","defaultSettings","REGEX_KWZ_FSID","REGEX_KWZ_DSI_LIBRARY_FSID","KWZ_DSI_LIBRARY_FSID_SPECIAL_CASE_SUFFIX","isKwzFsid","isKwzDsiLibraryFsid","suffix","getKwzFsidRegion","kwzFsidFormat","toLowerCase","kwzFsidUnformat","toUpperCase","KWZ_FRAMERATES","KWZ_PALETTE","YELLOW","GREEN","NONE","KWZ_PUBLIC_KEY","BITMASKS","KWZ_LINE_TABLE","KWZ_LINE_TABLE_SHIFT","c","d","e","KWZ_LINE_TABLE_COMMON","KWZ_LINE_TABLE_COMMON_SHIFT","lineTablePtr","shiftPixels","KwzParser","magic","KWZ","_KwzParser_settings","_KwzParser_sectionMap","_KwzParser_bodyEndOffset","_KwzParser_layerBuffers","_KwzParser_soundFlags","_KwzParser_prevDecodedFrame","_KwzParser_frameMetaOffsets","_KwzParser_frameDataOffsets","_KwzParser_frameLayerSizes","_KwzParser_bitIndex","_KwzParser_bitValue","_KwzParser_instances","_KwzParser_buildSectionMap","_KwzParser_getFrameOffsets","_KwzParser_decodeMeta","_KwzParser_decodeSoundHeader","dsiLibraryNote","borderCrop","ktn","Jpeg","getFrameDiffingFlag","_KwzParser_readFsid","cameraFlags","depths","sort","diffingFlag","isPrevFrame","framePtr","layerSizes","layerSize","skipTileCounter","tileOffsetY","tileOffsetX","subTileOffsetY","subTileOffsetX","tileType","_KwzParser_readBits","linePtr","mask","pattern","linePtrA","linePtrB","decodeFrameSoundFlags","soundFlags","decodeAdpcm","currByte","currBit","doGuess","initialBgmPredictor","initialBgmStepIndex","guessInitialBgmState","bestRms","bestStepIndex","trackIndex","indexOf","isArray","initialSePredictors","initialSeStepIndices","adj","weight","pcmResampleLinear","pcmAudioMix","hasSe4","se4Pcm","soundEffectFlags","fileSize","sectionMap","sectionCount","substring","num","nextBits","result","_KwzParser_readFilename","mac","random","edits","quickMeta","_KwzParser_decodeMetaQuick","creationTime","modifiedTime","rootFilename","layerFlags","creationTimestamp","isDsiFilename","numFrames","kmiSection","kmcSection","frameMetaOffsets","frameDataOffsets","frameLayerSizes","frameMetaPtr","frameDataPtr","layerASize","layerBSize","layerCSize","trackSizes","ppmFsidToKwzFsidSuffix","toLocaleLowerCase","kwzIdSuffix","REGEX_PPM_LOCAL_FILENAME","REGEX_PPM_FILENAME","REGEX_KWZ_FILENAME","BASE32_ALPHABET","base32Decode","created","edited","hexSize","j","parseInt","hexToBytes","base32Encode","XOR_KEY","BasePlaylistParser","entries","addEntry","full","parts","at","lastDot","lastIndexOf","base","ext","folder","parentFolder","PpmPlaylist","currPath","KwzPlaylist","separator","urlLoader","source","load","response","fetch","status","fileLoader","File","FileReader","blobLoader","Blob","Response","nodeBufferLoader","Buffer","arrayBufferLoader","ArrayBuffer","LOADER_REGISTRY","loader","matches","register","clear","Object","fromEntries","parse","parserConfig","parseSource","PlayerEvent","supportedEvents","Play","Pause","CanPlay","CanPlayThrough","SeekStart","SeekEnd","Duration","Loop","Ended","VolumeChange","Progress","TimeUpdate","FrameUpdate","FrameNext","FramePrev","FrameFirst","FrameLast","Ready","Load","LoadStart","LoadedData","LoadedMeta","Emptied","Close","createTimeRanges","ranges","start","padNumber","strLength","formatTime","seconds","m","s","CanvasStereoscopicMode","BYTE$2","UNSIGNED_BYTE$3","SHORT$2","UNSIGNED_SHORT$3","INT$3","UNSIGNED_INT$3","FLOAT$3","glTypeToTypedArray","tt","Int32Array","Float32Array","getGLTypeForTypedArray","typedArray","Uint8ClampedArray","getGLTypeForTypedArrayType","typedArrayType","isArrayBuffer$1","SharedArrayBuffer","isTypeWeakMaps","isType","object","type","weakMap","isOfType","prototype","isTexture","gl","t","WebGLTexture","STATIC_DRAW","ARRAY_BUFFER$1","FLOAT$2","defaults$2","createBufferFromTypedArray","drawType","WebGLBuffer","createBuffer","array","bindBuffer","bufferData","setBufferFromTypedArray","isIndices","texcoordRE","colorRE","makeTypedArray","Type","typedArrayTypeFromGLTypeOrTypedArrayCtor","glTypeOrTypedArrayCtor","CTOR","getTypedArrayTypeForGLType","attribBufferFromBuffer","numValues","arrayType","attribBufferFromSize","BYTES_PER_ELEMENT","attribBufferFromArrayLike","arrayName","createAttribsFromArrays","arrays","attribs","keys","attribName","attrib","fn","normalization","normalize","numComponents","guessNumComponentsFromName","getArray$1","getNumComponents$1","stride","divisor","positionKeys","isWebGL2","texStorage2D","TEXTURE0","ARRAY_BUFFER","INT","TEXTURE_2D$1","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","typeMap","getBindPointForSamplerType","bindPoint","intSetter","location","v","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","samplerSetter","unit","textureOrPair","texture","sampler","activeTexture","bindTexture","bindSampler","samplerArraySetter","units","ii","textures","index","floatAttribSetter","disableVertexAttribArray","vertexAttrib4fv","vertexAttrib3fv","vertexAttrib2fv","vertexAttrib1fv","enableVertexAttribArray","vertexAttribPointer","vertexAttribDivisor","intAttribSetter","vertexAttrib4iv","vertexAttribIPointer","uintAttribSetter","vertexAttrib4uiv","matAttribSetter","typeInfo","defaultSize","rowOffset","FLOAT","setter","uniform1f","arraySetter","uniform1fv","uniform2fv","cols","uniform3fv","uniform4fv","UNSIGNED_INT","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","rows","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","attrTypeMap","isBuiltIn","info","tokenRE","isDigit","addSetterToUniformTree","fullPath","uniformSetters","tokens","tokenNdx","path","token","isArrayIndex","accessor","child","setUniformTree","tree","values","prop","setUniforms","setters","args","actualSetters","numArgs","aNdx","WebglCanvas","isSupported","testCanvas","testCtx","getContext","supported","options","supportedStereoscopeModes","None","Dual","stereoscopeMode","stereoscopeStrength","_WebglCanvas_options","_WebglCanvas_layerProgram","_WebglCanvas_upscaleProgram","_WebglCanvas_quadBuffer","_WebglCanvas_paletteBuffer","_WebglCanvas_layerTexture","_WebglCanvas_layerTexturePixelBuffer","_WebglCanvas_layerTexturePixels","_WebglCanvas_frameTexture","_WebglCanvas_frameBuffer","_WebglCanvas_textureTypes","_WebglCanvas_textureSizes","_WebglCanvas_frameBufferTextures","_WebglCanvas_applyFirefoxFix","_WebglCanvas_refs","programs","shaders","buffers","frameBuffers","_WebglCanvas_isCtxLost","_WebglCanvas_handleContextLoss","destroy","preventDefault","onlost","_WebglCanvas_handleContextRestored","_WebglCanvas_instances","_WebglCanvas_init","onrestored","defaultOptions","canvas","addEventListener","className","antialias","alpha","appendChild","setCanvasSize","dpi","useDpi","devicePixelRatio","internalWidth","internalHeight","dstWidth","dstHeight","style","_WebglCanvas_checkContextLoss","setNote","note","srcHeight","_WebglCanvas_resizeFramebuffer","_WebglCanvas_resizeTexture","title","color","paperColor","clearColor","COLOR_BUFFER_BIT","drawFrame","mode","strength","_WebglCanvas_drawLayers","_WebglCanvas_useFramebuffer","_WebglCanvas_upscale","drawingBufferWidth","drawingBufferHeight","Right","requestStereoScopeMode","forceUpdate","isErrorState","getError","NO_ERROR","getDataUrl","quality","toDataURL","getBlob","Promise","resolve","reject","toBlob","refs","shader","deleteShader","deleteTexture","deleteBuffer","fb","deleteFramebuffer","program","deleteProgram","parentElement","parentNode","removeChild","_WebglCanvas_createProgram","_WebglCanvas_setBuffersAndAttribs","RGBA","LINEAR","CLAMP_TO_EDGE","_WebglCanvas_createFramebuffer","debugInfo","getExtension","renderer","getParameter","UNMASKED_RENDERER_WEBGL","userAgent","navigator","isMacFirefox","shouldClear","layerDepths","useProgram","u_flipY","u_tex","u_textureSize","u_3d_mode","u_3d_eye","u_3d_depth","u_3d_strength","texImage2D","TEXTURE_2D","UNSIGNED_BYTE","drawElements","TRIANGLES","numElements","elementType","u_screenSize","vertexShaderSource","fragmentShaderSource","vert","VERTEX_SHADER","frag","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","log","getProgramInfoLog","programInfo","textureUnit","createUniformSetter","uniformInfo","uniformTree","numUniforms","getActiveUniform","substr","getUniformLocation","createUniformSetters","attribSetters","numAttribs","attribInfo","getActiveAttrib","getAttribLocation","createAttributeSetters","uniformBlockSpec","uniformData","uniformIndices","pair","pname","getActiveUniforms","ndx","blockSpecs","numUniformBlocks","getActiveUniformBlockName","blockSpec","getUniformBlockIndex","usedByVertexShader","getActiveUniformBlockParameter","usedByFragmentShader","used","createUniformBlockSpecFromProgram","transformFeedbackInfo","numVaryings","varying","getTransformFeedbackVarying","createTransformFeedbackInfo","createProgramInfoFromProgram","_WebglCanvas_createShader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","_WebglCanvas_createScreenQuad","x0","y0","xSubdivs","ySubdivs","numVerts","numVertsAcross","positions","texCoords","positionPtr","texCoordPtr","u","indices","indicesPtr","bufferInfo","srcBufferInfo","newAttribs","assign","newIndices","getBufferParameter","totalElements","getNumElementsFromAttributes","createBufferInfoFromArrays","position","texcoord","vertexArrayObject","bindVertexArray","setAttributes","_WebglCanvas_createTexture","minMag","wrap","tex","createTexture","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","textureType","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewX","viewY","viewWidth","viewHeight","sx","sy","viewport","isLost","Html5Canvas","_Html5Canvas_options","_Html5Canvas_srcCanvas","_Html5Canvas_srcCtx","_Html5Canvas_frameImage","_Html5Canvas_paletteBuffer","_Html5Canvas_frameBuffer","ctx","createImageData","clearRect","fillStyle","fillRect","useSmoothing","imageSmoothingEnabled","putImageData","drawImage","UniversalCanvas","isReady","isHtml5","_UniversalCanvas_rendererStack","_UniversalCanvas_rendererStackIdx","_UniversalCanvas_parent","_UniversalCanvas_options","_UniversalCanvas_instances","_UniversalCanvas_setSubRenderer","fallbackIfPossible","switchToHtml5","Canvas","immediateLoss","_AudioContext","AudioContext","webkitAudioContext","WebAudioPlayer","useEq","useAnalyser","eqSettings","_WebAudioPlayer_volume","_WebAudioPlayer_loop","_WebAudioPlayer_startTime","_WebAudioPlayer_ctxStartTime","_WebAudioPlayer_nodeRefs","_WebAudioPlayer_buffer","_WebAudioPlayer_gainNode","_WebAudioPlayer_source","volume","setVolume","setBuffer","inputBuffer","audioBuffer","channelData","getChannelData","setAnalyserEnabled","on","_WebAudioPlayer_instances","_WebAudioPlayer_initNodes","gain","playFrom","currentTime","stop","getCurrentTime","disconnect","analyser","close","inNode","lastNode","frequency","createBiquadFilter","connect","createBufferSource","gainNode","createGain","_WebAudioPlayer_connectEqNodesTo","analyserNode","createAnalyser","destination","Player","parserSettings","autoplay","_src","_loop","_volume","_muted","_frame","_hasEnded","isNoteLoaded","events","playbackStartTime","playbackTime","playbackLoopId","showThumbnail","hasPlaybackStarted","isPlaying","wasPlaying","isSeeking","playbackLoop","now","currAudioTime","audio","currPlaybackTime","abs","pause","emit","setCurrentTime","requestAnimationFrame","mountPoint","querySelector","reload","el","paused","isPaused","play","currentFrame","setCurrentFrame","progress","setProgress","getVolume","muted","getMuted","setMuted","getLoop","setLoop","buffered","seekable","currentSrc","videoWidth","videoHeight","closeNote","openNote","promise","catch","error","until","message","updateSettings","noteFormat","assertNoteLoaded","getTimeCounter","getFrameCounter","getProgress","performance","_Player_instances","_Player_playAudio","cancelAnimationFrame","_Player_stopAudio","togglePlay","getPaused","getDuration","toggleLoop","newFrameValue","newFrameIndex","nextFrame","prevFrame","lastFrame","firstFrame","thumbnailFrame","startSeek","endSeek","resize","console","warn","setLayerVisibility","layer","getLayerVisibility","toggleLayerVisibility","toggleAudioEq","setAudioEq","mute","unmute","isMute","toggleMuted","seekToNextFrame","fastSeek","time","canPlayType","mediaType","getVideoPlaybackQuality","droppedVideoFrames","corruptedVideoFrames","totalVideoFrames","requestPictureInPicture","captureStream","eventType","listener","off","callback","callbackList","splice","__Any","apply","listenerName","thisAsAny","clearEvents","Destroy","EncoderBase","dataUrl","from","getArrayBuffer","mimeType","getUrl","URL","createObjectURL","revokeUrl","revokeObjectURL","HSIZE","masks","LzwCompressor","colorDepth","accum","htab","codetab","cur_accum","cur_bits","curPixel","free_ent","clear_flg","g_init_bits","ClearCode","EOFCode","reset","initCodeSize","maxcode","char_out","outs","a_count","flush_char","cl_block","cl_hash","output","hsize","compress","init_bits","fcode","ent","disp","hsize_reg","hshift","n_bits","get_maxcode","nextPixel","outer_loop","encode","remaining","code","GifImage","_GifImage_data","_GifImage_compressor","fromFlipnote","flipnote","gif","delay","repeat","writeFrame","finish","fromFlipnoteFrame","_GifImage_instances","_GifImage_writeFirstFrame","_GifImage_writeAdditionalFrame","getImage","img","Image","_GifImage_writeHeader","_GifImage_writeLogicalScreenDescriptor","_GifImage_writeColorTable","_GifImage_writeNetscapeExt","_GifImage_writeGraphicControlExt","_GifImage_writeImageDescriptor","_GifImage_writePixels","fields","colorTableLength","_GifImage_colorTableSize","log2","WavAudio","channels","bitsPerSample","_WavAudio_header","_WavAudio_pcmData","headerBuffer","wav","pcm","writeSamples","fromFlipnoteTrack","pcmData","headerBytes","pcmBytes","resultBytes","Target","PlayerMixinClass","player","Reflect","ownKeys","desc","getOwnPropertyDescriptor","defineProperty"],"mappings":"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","x_google_ignoreList":[1,34]}
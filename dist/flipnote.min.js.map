{"version":3,"sources":["webpack://flipnote/webpack/universalModuleDefinition","webpack://flipnote/webpack/bootstrap","webpack://flipnote/./utils/dataStream.js","webpack://flipnote/./webgl/canvas.js","webpack://flipnote/./parser/index.js","webpack://flipnote/./parser/ppm.js","webpack://flipnote/./utils/adpcm.js","webpack://flipnote/./encoders/bmp.js","webpack://flipnote/./parser/kwz.js","webpack://flipnote/./flipnote.js","webpack://flipnote/./player/index.js","webpack://flipnote/./webgl/shader.vert","webpack://flipnote/./webgl/shader.frag","webpack://flipnote/./loader/index.js","webpack://flipnote/./loader/urlLoader.js","webpack://flipnote/./loader/fileLoader.js","webpack://flipnote/./loader/arrayBufferLoader.js","webpack://flipnote/./player/audio.js","webpack://flipnote/./encoders/wav.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","dataStream","arrayBuffer","_classCallCheck","buffer","_data","DataView","_offset","offset","whence","byteLength","val","getUint8","setUint8","getInt8","setInt8","littleEndian","arguments","length","undefined","getUint16","setUint16","getInt16","setInt16","getUint32","setUint32","getInt32","setInt32","count","bytes","Uint8Array","reverse","readBytes","hex","push","toString","padStart","join","toUpperCase","chars","str","char","String","fromCharCode","string","charCodeAt","writeUint8","Uint16Array","webglCanvas","el","width","height","params","antialias","alpha","gl","getContext","program","createProgram","refs","shaders","textures","buffers","vShader","_createShader","VERTEX_SHADER","vertexShader","fShader","FRAGMENT_SHADER","fragmentShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","log","getProgramInfoLog","deleteProgram","Error","useProgram","vertBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","activeTexture","TEXTURE0","tex","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","uniforms","uniformCount","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","uniform1i","u_bitmap","setFilter","setMode","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","encoderOptions","toDataURL","filter","LINEAR","NEAREST","u_isSmooth","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","textureType","ALPHA","LUMINANCE_ALPHA","color","uniform4f","clearColor","color1","color2","depth","texImage2D","UNSIGNED_BYTE","setColor","drawArrays","TRIANGLES","viewport","clear","COLOR_BUFFER_BIT","forEach","texture","deleteTexture","deleteBuffer","canvas","magic","ppmParser","kwzParser","_adpcm","_bmp","FRAMERATES","1","2","3","4","5","6","7","8","WIDTH","HEIGHT","PALETTE","WHITE","BLACK","RED","BLUE","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","_decodeHeader","_decodeAnimationHeader","_decodeSoundHeader","_decodeMeta","sampleRate","palette","_layers","_prevLayers","_prevFrameIndex","readHex","readUtf8","readUint16","unpacked","byteOffset","byte","readUint8","bitOffset","seek","readUint32","_frameDataLength","_soundDataLength","frameCount","version","lock","thumbIndex","readInt16","rootAuthorName","readUtf16","parentAuthorName","currentAuthorName","parentAuthorId","currentAuthorId","parentFilename","readFilename","currentFilename","rootAuthorId","timestamp","Date","flags","thumbFrameIndex","meta","loop","frame_count","frame_speed","frameSpeed","bgm_speed","bgmSpeed","thumb_index","spinoff","filename","username","fsid","parent","current","_this2","offsetTableLength","_frameOffsets","Uint32Array","map","bgmLen","se1Len","se2Len","se3Len","framerate","bgmrate","soundMeta","bgm","se1","se2","se3","index","header","paperColor","pen","isNewFrame","decodeFrame","isTranslated","translateX","translateY","set","fill","readInt8","layerEncoding","readLineEncoding","layer","layerBitmap","line","chunkOffset","lineType","lineHeader","chunk","pixel","dest","src","y","x","frameIndex","layers","image","a","bmp","BitmapEncoder","setPixels","getFramePixels","setPalette","getFramePalette","trackIndex","id","track","sample","diff","stepIndex","adpcm","output","Int16Array","outputOffset","prevDiff","prevStepIndex","bitPos","ADPCM_SAMPLE_TABLE_4","ADPCM_INDEX_TABLE_4","Math","max","min","_this3","Array","test","ADPCM_INDEX_TABLE_2","Int8Array","ADPCM_STEP_TABLE","ADPCM_SAMPLE_TABLE_2","step","roundToNearest","ceil","bpp","vWidth","vHeight","fileHeader","ArrayBuffer","writeUtf8","dibHeader","writeUint32","writeInt32","writeUint16","colors","pow","setPaletteCount","setCompression","pixelData","pixels","pixelsLength","w","srcOffset","destOffset","slice","sections","headerByteLength","setFilelength","setPixelOffset","concat","Blob","window","URL","createObjectURL","getBlob","img","Image","getUrl","YELLOW","GREEN","NONE","PALETTE_INDEX_MAP","TABLE_1","TABLE_2","TABLE_3","values","b","LINE_TABLE","e","f","g","h","_bitIndex","_bitValue","load","size","sectionCount","sectionMagic","substring","sectionLength","_decodeFrameMeta","_prevDecodedFrame","num","nextBits","mask","result","creationTimestamp","modifiedTimestamp","rootFilename","creation_timestamp","frameMeta","frameOffsets","frame","layerSize","frameAuthor","layerDepth","soundFlags","cameraFlag","trackSizes","se4","diffingFlag","isPrevFrame","getDiffingFlag","layerIndex","skip","tileOffsetY","tileOffsetX","subTileOffsetY","subTileOffsetX","pixelOffset","pixelBuffer","readBits","lineIndex","subarray","lineValue","lineIndexA","lineIndexB","pattern","VERSION","player","parser","default","flipnotePlayer","document","querySelector","_imgCanvas","createElement","preserveDrawingBuffer","_isOpen","_events","currentFrame","paused","customPalette","audioTracks","audioTrack","smoothRendering","note","fileLength","hasAudioTrack","decodeAudio","_audiorate","_seFlags","decodeSoundFlags","_playbackLoop","_hasPlaybackStarted","layerVisiblity","setFrame","emit","close","_loader2","then","_load","catch","err","console","error","pause","_frame","unset","destroy","active","start","currentTime","stop","_playBgm","setInterval","clearInterval","_stopAudio","firstFrame","_playFrameSe","nextFrame","resize","drawFrame","toImage","forceUpdate","floor","_playbackFrameTime","layerBuffers","setPaperColor","drawLayer","eventType","callback","events","callbackList","splice","indexOf","_len","args","_key","apply","duration","round","audio","volume","muted","Promise","resolve","reject","loaders","loader","matches","urlLoader","fileLoader","arrayBufferLoader","xhr","XMLHttpRequest","open","responseType","onreadystatechange","readyState","status","response","statusText","send","File","reader","FileReader","onload","event","target","onerror","readAsArrayBuffer","channelCount","bitsPerSample","playbackRate","preload","pcmData","wav","wavEncoder","writeFrames","url","revokeObjectURL","play","channels","headerBuffer"],"mappings":";;;;;;;CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,UAAAH,GACA,iBAAAC,QACAA,QAAA,SAAAD,IAEAD,EAAA,SAAAC,IARA,CASC,oBAAAK,UAAAC,KAAA,WACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAR,QAGA,IAAAC,EAAAK,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAV,YAUA,OANAW,EAAAH,GAAAI,KAAAX,EAAAD,QAAAC,IAAAD,QAAAO,GAGAN,EAAAS,GAAA,EAGAT,EAAAD,QA0DA,OArDAO,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAf,EAAAgB,EAAAC,GACAV,EAAAW,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAvB,GACA,oBAAAwB,eAAAC,aACAN,OAAAC,eAAApB,EAAAwB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAApB,EAAA,cAAiD0B,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAjC,GACA,IAAAgB,EAAAhB,KAAA4B,WACA,WAA2B,OAAA5B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAM,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,gVCjFqBC,aAKnB,SAAAA,EAAYC,gGAAaC,CAAAtC,KAAAoC,GACvBpC,KAAKuC,OAASF,EACdrC,KAAKwC,MAAQ,IAAIC,SAASJ,GAC1BrC,KAAK0C,QAAU,yCAkBZC,EAAQC,GACX,OAAQA,GACN,KAAK,EACH5C,KAAK0C,QAAU1C,KAAKwC,MAAMK,WAAaF,EACvC,MACF,KAAK,EACH3C,KAAK0C,SAAWC,EAChB,MACF,KAAK,EACL,QACE3C,KAAK0C,QAAUC,uCAUnB,IAAIG,EAAM9C,KAAKwC,MAAMO,SAAS/C,KAAK0C,SAEnC,OADA1C,KAAK0C,SAAW,EACTI,qCAOEzB,GACTrB,KAAKwC,MAAMQ,SAAShD,KAAK0C,QAASrB,GAClCrB,KAAK0C,SAAW,qCAQhB,IAAII,EAAM9C,KAAKwC,MAAMS,QAAQjD,KAAK0C,SAElC,OADA1C,KAAK0C,SAAW,EACTI,oCAOCzB,GACRrB,KAAKwC,MAAMU,QAAQlD,KAAK0C,QAASrB,GACjCrB,KAAK0C,SAAW,uCAQY,IAAnBS,IAAmBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACxBN,EAAM9C,KAAKwC,MAAMe,UAAUvD,KAAK0C,QAASS,GAE7C,OADAnD,KAAK0C,SAAW,EACTI,sCAQGzB,GAA0B,IAAnB8B,IAAmBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACpCpD,KAAKwC,MAAMgB,UAAUxD,KAAK0C,QAASrB,EAAO8B,GAC1CnD,KAAK0C,SAAW,sCAQW,IAAnBS,IAAmBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACvBN,EAAM9C,KAAKwC,MAAMiB,SAASzD,KAAK0C,QAASS,GAE5C,OADAnD,KAAK0C,SAAW,EACTI,qCAQEzB,GAA0B,IAAnB8B,IAAmBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACnCpD,KAAKwC,MAAMkB,SAAS1D,KAAK0C,QAASrB,EAAO8B,GACzCnD,KAAK0C,SAAW,uCAQY,IAAnBS,IAAmBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACxBN,EAAM9C,KAAKwC,MAAMmB,UAAU3D,KAAK0C,QAASS,GAE7C,OADAnD,KAAK0C,SAAW,EACTI,sCAQGzB,GAA0B,IAAnB8B,IAAmBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACpCpD,KAAKwC,MAAMoB,UAAU5D,KAAK0C,QAASrB,EAAO8B,GAC1CnD,KAAK0C,SAAW,sCAQW,IAAnBS,IAAmBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACvBN,EAAM9C,KAAKwC,MAAMqB,SAAS7D,KAAK0C,QAASS,GAE5C,OADAnD,KAAK0C,SAAW,EACTI,qCAQEzB,GAA0B,IAAnB8B,IAAmBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACnCpD,KAAKwC,MAAMsB,SAAS9D,KAAK0C,QAASrB,EAAO8B,GACzCnD,KAAK0C,SAAW,oCAGRqB,GACR,IAAIC,EAAQ,IAAIC,WAAWjE,KAAKwC,MAAMD,OAAQvC,KAAK0C,QAASqB,GAE5D,OADA/D,KAAK0C,SAAWsB,EAAMnB,WACfmB,kCASDD,GAGN,IAH4B,IAAfG,EAAed,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GACxBY,EAAQhE,KAAKmE,UAAUJ,GACvBK,KACKhE,EAAI,EAAGA,EAAI4D,EAAMX,OAAQjD,IAChCgE,EAAIC,KAAKL,EAAM5D,GAAGkE,SAAS,IAAIC,SAAS,EAAG,MAG7C,OADIL,GAASE,EAAIF,UACVE,EAAII,KAAK,IAAIC,+CAQbV,GAGP,IAFA,IAAIW,EAAQ1E,KAAKmE,UAAUJ,GACvBY,EAAM,GACDvE,EAAI,EAAGA,EAAIsE,EAAMrB,OAAQjD,IAAK,CACrC,IAAIwE,EAAOF,EAAMtE,GACjB,GAAY,GAARwE,EAAW,MACfD,GAAOE,OAAOC,aAAaF,GAE7B,OAAOD,oCAOCI,GACR,IAAK,IAAI3E,EAAI,EAAGA,EAAI2E,EAAO1B,OAAQjD,IAAK,CACtC,IAAIwE,EAAOG,EAAOC,WAAW5E,GAC7BJ,KAAKiF,WAAWL,sCASVb,GACR,IAAIW,EAAQ,IAAIQ,YAAYlF,KAAKwC,MAAMD,OAAQvC,KAAK0C,QAASqB,GAC7D/D,KAAK0C,SAAWgC,EAAM7B,WAEtB,IADA,IAAI8B,EAAM,GACDvE,EAAI,EAAGA,EAAIsE,EAAMrB,OAAQjD,IAAK,CACrC,IAAIwE,EAAOF,EAAMtE,GACjB,GAAY,GAARwE,EAAW,MACfD,GAAOE,OAAOC,aAAaF,GAE7B,OAAOD,qCAlNP,OAAO3E,KAAKwC,MAAMK,8BAhBDT,8UCDrBlC,EAAA,SACAA,EAAA,4DAGqBiF,aAQnB,SAAAA,EAAYC,GAAoE,IAAhEC,EAAgEjC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA1D,IAAKkC,EAAqDlC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA9C,IAAKmC,EAAyCnC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,IAAjCoC,WAAW,EAAOC,OAAO,gGAAQnD,CAAAtC,KAAAmF,GAC9EnF,KAAKqF,MAAQD,EAAGC,MAAQA,EACxBrF,KAAKsF,OAASF,EAAGE,OAASA,EAC1B,IAAII,EAAKN,EAAGO,WAAW,QAASJ,GAC5BK,EAAUF,EAAGG,gBACjB7F,KAAK4F,QAAUA,EACf5F,KAAKoF,GAAKA,EACVpF,KAAK0F,GAAKA,EACV1F,KAAK8F,MACHC,WACAC,YACAC,YAGF,IAAIC,EAAUlG,KAAKmG,cAAcT,EAAGU,cAAeC,WAC/CC,EAAUtG,KAAKmG,cAAcT,EAAGa,gBAAiBC,WAKrD,GAJAd,EAAGe,aAAab,EAASM,GACzBR,EAAGe,aAAab,EAASU,GAEzBZ,EAAGgB,YAAYd,IACVF,EAAGiB,oBAAoBf,EAASF,EAAGkB,aAAc,CACpD,IAAIC,EAAMnB,EAAGoB,kBAAkBlB,GAE/B,MADAF,EAAGqB,cAAcnB,GACX,IAAIoB,MAAMH,GAGlBnB,EAAGuB,WAAWrB,GAEd,IAAIsB,EAAaxB,EAAGyB,eACpBzB,EAAG0B,WAAW1B,EAAG2B,aAAcH,GAC/BxB,EAAG4B,WAAW5B,EAAG2B,aAAc,IAAIE,cAAc,EAAI,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,IAAK7B,EAAG8B,aACjG9B,EAAG+B,wBAAwB,GAC3B/B,EAAGgC,oBAAoB,EAAG,EAAGhC,EAAGiC,OAAO,EAAO,EAAG,GACjD3H,KAAK8F,KAAKG,QAAQ5B,KAAK6C,GAEvBxB,EAAGkC,cAAclC,EAAGmC,UACpB,IAAIC,EAAMpC,EAAGqC,gBACbrC,EAAGsC,YAAYtC,EAAGuC,WAAYH,GAC9BpC,EAAGwC,cAAcxC,EAAGuC,WAAYvC,EAAGyC,eAAgBzC,EAAG0C,eACtD1C,EAAGwC,cAAcxC,EAAGuC,WAAYvC,EAAG2C,eAAgB3C,EAAG0C,eAEtDpI,KAAKsI,YAEL,IADA,IAAIC,EAAe7C,EAAGiB,oBAAoBf,EAASF,EAAG8C,iBAC7CpI,EAAI,EAAGA,EAAImI,EAAcnI,IAAK,CACrC,IAAIO,EAAO+E,EAAG+C,iBAAiB7C,EAASxF,GAAGO,KAC3CX,KAAKsI,SAAS3H,GAAQ+E,EAAGgD,mBAAmB9C,EAASjF,GAEvD+E,EAAGiD,UAAU3I,KAAKsI,SAASM,SAAU,GACrC5I,KAAK6I,UAAU,UACf7I,KAAK8I,QAAQ,OACb9I,KAAK8F,KAAKE,SAAS3B,KAAKyD,GACxBpC,EAAGqD,OAAOrD,EAAGsD,OACbtD,EAAGuD,UAAUvD,EAAGwD,IAAKxD,EAAGyD,qEAUZC,EAAMC,GAClB,IAAI3D,EAAK1F,KAAK0F,GACV4D,EAAS5D,EAAG6D,aAAaH,GAI7B,GAHA1D,EAAG8D,aAAaF,EAAQD,GACxB3D,EAAG+D,cAAcH,IAEZ5D,EAAGgE,mBAAmBJ,EAAQ5D,EAAGiE,gBAAiB,CACrD,IAAI9C,EAAMnB,EAAGkE,iBAAiBN,GAE9B,MADA5D,EAAGmE,aAAaP,GACV,IAAItC,MAAMH,GAGlB,OADA7G,KAAK8F,KAAKC,QAAQ1B,KAAKiF,GAChBA,kCASDF,EAAMU,GACZ,OAAO9J,KAAKoF,GAAG2E,UAAUX,EAAMU,qCAOvBE,GACR,IAAItE,EAAK1F,KAAK0F,GACdsE,EAAmB,UAAVA,EAAqBtE,EAAGuE,OAASvE,EAAGwE,QAC7CxE,EAAGiD,UAAU3I,KAAKsI,SAAS6B,WAAsB,UAAVH,EAAqB,EAAI,GAChEtE,EAAGkC,cAAclC,EAAGmC,UACpBnC,EAAGwC,cAAcxC,EAAGuC,WAAYvC,EAAG0E,mBAAoBJ,GACvDtE,EAAGwC,cAAcxC,EAAGuC,WAAYvC,EAAG2E,mBAAoBL,mCAOjDzI,GAAM,IACJmE,EAAO1F,KAAP0F,GACK,QAATnE,EACFvB,KAAKsK,YAAc5E,EAAG6E,MACJ,QAAThJ,IACTvB,KAAKsK,YAAc5E,EAAG8E,kDASjBC,EAAOpJ,GACdrB,KAAK0F,GAAGgF,UAAU1K,KAAKsI,SAASmC,GAAQpJ,EAAM,GAAG,IAAKA,EAAM,GAAG,IAAKA,EAAM,GAAG,IAAK,yCAOtEA,GACZrB,KAAK0F,GAAGiF,WAAWtJ,EAAM,GAAK,IAAKA,EAAM,GAAK,IAAKA,EAAM,GAAK,IAAK,qCAY3DkB,EAAQ8C,EAAOC,EAAQsF,EAAQC,EAAQC,GAC/C,IAAIpF,EAAK1F,KAAK0F,GACdA,EAAGkC,cAAclC,EAAGmC,UACpBnC,EAAGqF,WAAWrF,EAAGuC,WAAY,EAAGjI,KAAKsK,YAAajF,EAAOC,EAAQ,EAAGtF,KAAKsK,YAAa5E,EAAGsF,cAAezI,GAExGvC,KAAKiL,SAAS,WAAYL,GAC1B5K,KAAKiL,SAAS,WAAYJ,GAC1BnF,EAAGwF,WAAWxF,EAAGyF,UAAW,EAAG,oCAQH,IAAvB9F,EAAuBjC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjB,IAAKkC,EAAYlC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAL,IACvBpD,KAAKoF,GAAGC,MAAQA,EAChBrF,KAAKoF,GAAGE,OAASA,EACjBtF,KAAKqF,MAAQA,EACbrF,KAAKsF,OAASA,EACdtF,KAAK0F,GAAG0F,SAAS,EAAG,EAAG/F,EAAOC,mCAO9BtF,KAAK0F,GAAG2F,MAAMrL,KAAK0F,GAAG4F,oDAQtB,IAAIxF,EAAO9F,KAAK8F,KACZJ,EAAK1F,KAAK0F,GACdI,EAAKC,QAAQwF,QAAQ,SAACjC,GACpB5D,EAAGmE,aAAaP,KAElBxD,EAAKC,WACLD,EAAKE,SAASuF,QAAQ,SAACC,GACrB9F,EAAG+F,cAAcD,KAEnB1F,EAAKE,YACLF,EAAKG,QAAQsF,QAAQ,SAAChJ,GACpBmD,EAAGgG,aAAanJ,KAElBuD,EAAKG,WACLP,EAAGqB,cAAc/G,KAAK4F,SAEtBF,EAAGiG,OAAOtG,MAAQ,EAClBK,EAAGiG,OAAOrG,OAAS,qBAvMFH,2FCDN,SAAgB9C,GAE7B,IACIuJ,EADO,IAAInJ,SAASJ,EAAa,EAAG,GACvBsB,UAAU,GAE3B,GAAa,YAATiI,EACF,OAAO,IAAIC,UAAUxJ,GAGlB,GAA4B,aAAf,WAARuJ,GACR,OAAO,IAAIE,UAAUzJ,GAEvB,OAAO,MAfT,QAAAnC,EAAA,QACAA,EAAA,obCuBAA,EAAA,IAEA6L,EAAA7L,EAAA,GAKA8L,EAAA9L,EAAA,GAGA,IAAM+L,GACJC,EAAG,GACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,GACHC,EAAG,GACHC,EAAG,IAGCC,EAAQ,IACRC,EAAS,IAETC,GACJC,OAAQ,IAAM,IAAM,KACpBC,OAAQ,GAAM,GAAM,IACpBC,KAAQ,IAAM,GAAM,IACpBC,MAAQ,GAAM,GAAM,MAGDnB,cAKnB,SAAAA,EAAYxJ,gGAAaC,CAAAtC,KAAA6L,GAAA,IAAAoB,mKAAAC,CAAAlN,MAAA6L,EAAAsB,WAAArM,OAAAsM,eAAAvB,IAAAtL,KAAAP,KACjBqC,IADiB,OAEvB4K,EAAK7D,KAAO,MACZ6D,EAAKI,gBACLJ,EAAKK,yBACLL,EAAKM,qBACLN,EAAKO,cACLP,EAAKQ,WAAa,KAClBR,EAAKS,QAAUd,EAEdK,EAAKU,SACJ,IAAI1J,WAAWyI,EAAQC,GACvB,IAAI1I,WAAWyI,EAAQC,IAEzBM,EAAKW,aACH,IAAI3J,WAAWyI,EAAQC,GACvB,IAAI1I,WAAWyI,EAAQC,IAEzBM,EAAKY,gBAAkB,KAlBAZ,qUALY7K,qDAwCnC,OACEpC,KAAK8N,QAAQ,GACb9N,KAAK+N,SAAS,IACd/N,KAAKgO,aAAa1J,WAAWC,SAAS,EAAG,MACzCC,KAAK,gDAUP,IADA,IAAIyJ,EAAW,IAAIhK,WAAW0I,GACrBuB,EAAa,EAAGA,EAAa,GAAIA,IAGxC,IAFA,IAAIC,EAAOnO,KAAKoO,YAEPC,EAAY,EAAGA,EAAY,EAAGA,GAAa,EAClDJ,EAAsB,EAAbC,EAAiBG,EAAY,GAAMF,GAAQE,EAAa,EAGrE,OAAOJ,0CAIPjO,KAAKsO,KAAK,GAGEtO,KAAKuO,aACjBvO,KAAKwO,iBAAmBxO,KAAKuO,aAC7BvO,KAAKyO,iBAAmBzO,KAAKuO,aAC7BvO,KAAK0O,WAAa1O,KAAKgO,aAAe,EACtChO,KAAK2O,QAAU3O,KAAKgO,mDAKpBhO,KAAKsO,KAAK,IACV,IAAIM,EAAO5O,KAAKgO,aACZa,EAAa7O,KAAK8O,YAClBC,EAAiB/O,KAAKgP,UAAU,IAChCC,EAAmBjP,KAAKgP,UAAU,IAClCE,EAAoBlP,KAAKgP,UAAU,IACnCG,EAAiBnP,KAAK8N,QAAQ,GAAG,GACjCsB,EAAkBpP,KAAK8N,QAAQ,GAAG,GAClCuB,EAAiBrP,KAAKsP,eACtBC,EAAkBvP,KAAKsP,eACvBE,EAAexP,KAAK8N,QAAQ,GAAG,GACnC9N,KAAKsO,KAAK,KACV,IAAImB,EAAY,IAAIC,KAAuC,KAAjC1P,KAAKuO,aAAe,YAC9CvO,KAAKsO,KAAK,MACV,IAAIqB,EAAQ3P,KAAKgO,aACjBhO,KAAK4P,gBAAkBf,EACvB7O,KAAK6P,MACHjB,KAAMA,EACNkB,KAAMH,GAAS,EAAI,EACnBI,YAAa/P,KAAK0O,WAClBsB,YAAahQ,KAAKiQ,WAClBC,UAAWlQ,KAAKmQ,SAChBC,YAAavB,EACbY,UAAWA,EACXY,QAAUjB,IAAoBD,GAAoBC,IAAoBI,EACtE/P,MACE6Q,SAAU,KACVC,SAAUxB,EACVyB,KAAMhB,GAERiB,QACEF,SAAUtB,EACVuB,KAAMrB,EACNmB,SAAUjB,GAEZqB,SACEH,SAAUrB,EACVsB,KAAMpB,EACNkB,SAAUf,qDAKS,IAAAoB,EAAA3Q,KAGvBA,KAAKsO,KAAK,MACV,IAAIsC,EAAoB5Q,KAAKgO,aAE7BhO,KAAKsO,KAAK,MAEVtO,KAAK6Q,cAAgB,IAAIC,YAAYF,EAAoB,GAAGG,IAAI,SAAA1P,GAC9D,OAAO,KAASuP,EAAoBD,EAAKpC,4DAO3C,IAAI5L,EAAS,KAAS3C,KAAKwO,iBAAmBxO,KAAK0O,WAE/C/L,EAAS,GAAK,IAAGA,GAAU,EAAKA,EAAS,GAC7C3C,KAAKsO,KAAK3L,GACV,IAAIqO,EAAShR,KAAKuO,aACd0C,EAASjR,KAAKuO,aACd2C,EAASlR,KAAKuO,aACd4C,EAASnR,KAAKuO,aAClBvO,KAAKiQ,WAAa,EAAIjQ,KAAKoO,YAC3BpO,KAAKmQ,SAAW,EAAInQ,KAAKoO,YACzBzL,GAAU,GACV3C,KAAKoR,UAAYnF,EAAWjM,KAAKiQ,YACjCjQ,KAAKqR,QAAUpF,EAAWjM,KAAKmQ,UAC/BnQ,KAAKsR,WACHC,KAAQ5O,OAAQA,EAAkBU,OAAQ2N,GAC1CQ,KAAQ7O,OAAQA,GAAUqO,EAAQ3N,OAAQ4N,GAC1CQ,KAAQ9O,OAAQA,GAAUsO,EAAQ5N,OAAQ6N,GAC1CQ,KAAQ/O,OAAQA,GAAUuO,EAAQ7N,OAAQ8N,uCASnCQ,GAGT,OAFA3R,KAAKsO,KAAKtO,KAAK6Q,cAAcc,IAChB3R,KAAKoO,aACA,EAAK,0CAQTuD,GACd3R,KAAKsO,KAAKtO,KAAK6Q,cAAcc,IAC7B,IAAMjE,EAAU1N,KAAK0N,QACjBkE,EAAS5R,KAAKoO,YACdyD,EAAsB,EAATD,EACbE,GACFpE,EAAQZ,MACM,GAAd+E,EAAkBnE,EAAQZ,MAAQY,EAAQb,MAC1Ca,EAAQX,IACRW,EAAQV,MAEV,OACgB,GAAd6E,EAAkBnE,EAAQb,MAAQa,EAAQZ,MAC1CgF,EAAKF,GAAU,EAAK,GACpBE,EAAKF,GAAU,EAAK,wCASZD,GACK,IAAVA,GAAiB3R,KAAK6N,kBAAoB8D,EAAQ,GAAQ3R,KAAK+R,WAAWJ,IAC7E3R,KAAKgS,YAAYL,EAAQ,GAE3B3R,KAAKsO,KAAKtO,KAAK6Q,cAAcc,IAC7B,IAAIC,EAAS5R,KAAKoO,YACd2D,EAAcH,GAAU,EAAK,EAC7BK,EAAgBL,GAAU,EAAK,EAC/BM,EAAa,EACbC,EAAa,EAEjBnS,KAAK4N,YAAY,GAAGwE,IAAIpS,KAAK2N,QAAQ,IACrC3N,KAAK4N,YAAY,GAAGwE,IAAIpS,KAAK2N,QAAQ,IACrC3N,KAAK6N,gBAAkB8D,EAEvB3R,KAAK2N,QAAQ,GAAG0E,KAAK,GACrBrS,KAAK2N,QAAQ,GAAG0E,KAAK,GAEjBJ,IACFC,EAAalS,KAAKsS,WAClBH,EAAanS,KAAKsS,YAQpB,IALA,IAAIC,GACFvS,KAAKwS,mBACLxS,KAAKwS,oBAGEC,EAAQ,EAAGA,EAAQ,EAAGA,IAE7B,IADA,IAAIC,EAAc1S,KAAK2N,QAAQ8E,GACtBE,EAAO,EAAGA,EAAOhG,EAAQgG,IAAQ,CACxC,IAAIC,EAAcD,EAAOjG,EACrBmG,EAAWN,EAAcE,GAAOE,GACpC,OAAOE,GAEL,KAAK,EACH,MAEF,KAAK,EACL,KAAK,EACH,IAAIC,EAAa9S,KAAKuO,YAAW,GAIjC,IAFgB,GAAZsE,GAAeH,EAAYL,KAAK,IAAMO,EAAaA,EAAclG,GAEjD,WAAboG,GAAyB,CAG9B,GAAiB,WAAbA,EAGF,IAFA,IAAIC,EAAQ/S,KAAKoO,YAER4E,EAAQ,EAAGA,EAAQ,EAAGA,IAC7BN,EAAYE,EAAcI,GAAUD,GAASC,EAAQ,EAAO,IAAO,EAGvEJ,GAAe,EAEfE,IAAe,EAEjB,MAEF,KAAK,EACH,KAAMF,GAAeD,EAAO,GAAKjG,GAAO,CAEtC,IADIqG,EAAQ/S,KAAKoO,YACR4E,EAAQ,EAAGA,EAAQ,EAAGA,IAC7BN,EAAYE,EAAcI,GAAUD,GAASC,EAAQ,EAAO,IAAO,EAErEJ,GAAe,IAOzB,IAAKb,EAGH,IAFA,IAAIkB,EAAMC,EAEDC,EAAI,EAAGA,EAAIxG,EAAQwG,IAE1B,KAAIA,EAAIhB,EAAa,GAArB,CAEA,GAAIgB,EAAIhB,GAAcxF,EAAQ,MAE9B,IAAK,IAAIyG,EAAI,EAAGA,EAAI1G,EAAO0G,IAEzB,KAAIA,EAAIlB,EAAa,GAArB,CAEA,GAAIkB,EAAIlB,GAAcxF,EAAO,MAE7BwG,GADAD,EAAOG,EAAID,EAAIzG,IACDwF,EAAaC,EAAazF,GAExC1M,KAAK2N,QAAQ,GAAGsF,IAASjT,KAAK4N,YAAY,GAAGsF,GAC7ClT,KAAK2N,QAAQ,GAAGsF,IAASjT,KAAK4N,YAAY,GAAGsF,IAInD,OAAOlT,KAAK2N,+CAGC0F,GAGb,IAFA,IAAIC,EAAStT,KAAKgS,YAAYqB,GAC1BE,EAAQ,IAAItP,WAAY,OACnB+O,EAAQ,EAAGA,EAAQO,EAAMlQ,OAAQ2P,IAAS,CACjD,IAAIQ,EAAIF,EAAO,GAAGN,GACVM,EAAO,GAAGN,KACXO,EAAMP,GAAS,GAClBQ,IAAGD,EAAMP,GAAS,GAExB,OAAOO,yCAGMF,GACb,IAAII,EAAM,IAAIC,gBAAc,IAAK,IAAK,GAGtC,OAFAD,EAAIE,UAAU3T,KAAK4T,eAAeP,IAClCI,EAAII,WAAW7T,KAAK8T,gBAAgBT,IAC7BI,wCAGKM,GACZ,IAAIC,GAAM,MAAO,MAAO,MAAO,OAAOD,GACtC,OAAO/T,KAAKsR,UAAU0C,GAAI3Q,OAAS,sCAQzB4Q,GAUV,IATA,IAOIC,EAAQC,EAAMC,EAPdvE,EAAO7P,KAAKsR,UAAU2C,GACtBI,EAAQ,IAAIpQ,WAAWjE,KAAKuC,OAAQsN,EAAKlN,OAAQkN,EAAKxM,QACtDiR,EAAS,IAAIC,WAA0B,EAAfF,EAAMhR,QAC9BmR,EAAe,EAEfC,EAAW,EACXC,EAAgB,EAGX/C,EAAQ,EAAGA,EAAQ0C,EAAMhR,OAAQsO,IAGxC,IAFA,IAAIxD,EAAOkG,EAAM1C,GACbgD,EAAS,EACNA,EAAS,GAEdT,EAAU/F,GAAQwG,EAAU,GAE5BR,EAAOM,EAAWG,uBAAqBV,EAAS,GAAKQ,GAErDN,EAAYM,EAAgBG,sBAAoBX,GAEhDE,EAAYU,KAAKC,IAAI,EAAGD,KAAKE,IAAIZ,EAAW,KAC5CD,EAAOW,KAAKC,KAAK,MAAOD,KAAKE,IAAIb,EAAM,QAEvCG,EAAOE,GAAiBL,EACxBK,GAAgB,EAEhBE,EAAgBN,EAChBK,EAAWN,EAEXQ,GAAU,EAGd,OAAOL,6CAOU,IAAAW,EAAAjV,KAKjB,OAJAA,KAAKsO,KAAK,KAAStO,KAAKwO,kBAGd,IAAI0G,MAAMlV,KAAK0O,YAAY2D,SAC1BtB,IAAI,SAAA1P,GACb,IAAI8M,EAAO8G,EAAK7G,YAChB,OAAe,EAAPD,EAAaA,GAAQ,EAAK,EAAMA,GAAQ,EAAK,4CAxVrCqC,GAClB,MAAO,mCAAmC2E,KAAK3E,4CAGzBF,GACtB,MAAO,oCAAoC6E,KAAK7E,sBA/B/BzE,iFCvDRuJ,sBAAsB,IAAIC,YACpC,EAAG,GAAI,EAAG,IAGAR,sBAAsB,IAAIQ,YACpC,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GACxB,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,IAiB3B,IAvBO,IAUMC,qBAAmB,IAAIf,YAClC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACjC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IACrC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC7C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC7C,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACpD,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACtD,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,MAAO,MAAO,MACzD,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,IAGpDgB,yBAAuB,IAAIhB,WAAW,KAC1CL,EAAS,EAAGA,EAAS,EAAGA,IAC/B,IAAK,IAAIE,EAAY,EAAGA,EAAY,GAAIA,IAAa,CACnD,IAAIoB,EAAOF,EAAiBlB,GACxBD,EAAOqB,GAAQ,EACN,EAATtB,IAAYC,GAAQqB,GACX,EAATtB,IAAYC,GAAQA,GACxBoB,EAAqBrB,EAAS,EAAIE,GAAaD,EAKnD,IADO,IAAMS,yBAAuB,IAAIL,WAAW,MAC1CL,EAAS,EAAGA,EAAS,GAAIA,IAChC,IAAK,IAAIE,EAAY,EAAGA,EAAY,GAAIA,IAAa,CACnD,IAAIoB,EAAOF,EAAiBlB,GACxBD,EAAOqB,GAAQ,EACN,EAATtB,IAAYC,GAAQqB,GACX,EAATtB,IAAYC,GAAQqB,GAAQ,GACnB,EAATtB,IAAYC,GAAQqB,GAAQ,GACnB,EAATtB,IAAYC,GAAQA,GACxBS,EAAqBV,EAAS,GAAKE,GAAaD,oWCvCpCsB,iBAHhB,wDAAAvV,EAAA,IAGO,SAASuV,EAAepU,EAAOQ,GACpC,OAAOiT,KAAKY,KAAKrU,EAAQQ,GAAKA,IAMnB6R,yBAEX,SAAAA,EAAYrO,EAAOC,EAAQqQ,gGAAKrT,CAAAtC,KAAA0T,GAC9B1T,KAAKqF,MAAQA,EACbrF,KAAKsF,OAASA,EACdtF,KAAK4V,OAASH,EAAepQ,EAAO,GACpCrF,KAAK6V,QAAUJ,EAAenQ,EAAQ,GACtCtF,KAAK2V,IAAMA,EACX3V,KAAK8V,WAAa,IAAI1T,UAAW,IAAI2T,YAAY,KACjD/V,KAAK8V,WAAWE,UAAU,MAE1BhW,KAAKiW,UAAY,IAAI7T,UAAW,IAAI2T,YAAY,MAChD/V,KAAKiW,UAAUC,YAAY,KAC3BlW,KAAKiW,UAAUE,WAAW9Q,GAC1BrF,KAAKiW,UAAUE,WAAW7Q,GAC1BtF,KAAKiW,UAAUG,YAAY,GAC3BpW,KAAKiW,UAAUG,YAAYT,GAC3B3V,KAAKiW,UAAUC,YAAY,GAC3BlW,KAAKiW,UAAUC,YAAalW,KAAK4V,OAAS5V,KAAKsF,QAAWqQ,EAAM,IAChE3V,KAAKiW,UAAUC,YAAY,MAC3BlW,KAAKiW,UAAUC,YAAY,MAC3BlW,KAAKiW,UAAUC,YAAY,GAC3BlW,KAAKiW,UAAUC,YAAY,GAC3BlW,KAAKiW,UAAUC,YAAY,UAC3BlW,KAAKiW,UAAUC,YAAY,OAC3BlW,KAAKiW,UAAUC,YAAY,KAC3BlW,KAAKiW,UAAUC,YAAY,YAC3BlW,KAAKiW,UAAUD,UAAU,wDAIb3U,GACZrB,KAAK8V,WAAWxH,KAAK,GACrBtO,KAAK8V,WAAWI,YAAY7U,0CAGfA,GACbrB,KAAK8V,WAAWxH,KAAK,IACrBtO,KAAK8V,WAAWI,YAAY7U,0CAGfA,GACbrB,KAAKiW,UAAU3H,KAAK,IACpBtO,KAAKiW,UAAUC,YAAY7U,2CAGbA,GACdrB,KAAKiW,UAAU3H,KAAK,IACpBtO,KAAKiW,UAAUC,YAAY7U,sCAGlBgV,GAET,IADA,IAAI3I,EAAU,IAAIoD,YAAYgE,KAAKwB,IAAI,EAAGtW,KAAK2V,MACtChE,EAAQ,EAAGA,EAAQ0E,EAAOhT,OAAQsO,IAAS,CAClD,IAAIlH,EAAQ4L,EAAO1E,EAAQ0E,EAAOhT,QAElCqK,EAAQiE,GAAS,WAAclH,EAAM,IAAM,GAAOA,EAAM,IAAM,EAAMA,EAAM,GAE5EzK,KAAKuW,gBAAgB7I,EAAQrK,QAC7BrD,KAAKwW,eAAe,GACpBxW,KAAK0N,QAAUA,oCAGP+I,GACR,IAAIC,SACAC,EAAe3W,KAAK4V,OAAS5V,KAAKsF,OACtC,OAAQtF,KAAK2V,KACX,KAAK,EACHe,EAAS,IAAIzS,WAAW0S,GACxB,MACF,KAAK,GACHD,EAAS,IAAI5F,YAAY6F,GAK7B,IADA,IAAIC,EAAI5W,KAAKqF,MACJ8N,EAAI,EAAGA,EAAInT,KAAKsF,OAAQ6N,IAAK,CACpC,IAAI0D,EAAaD,EAAI5W,KAAKsF,QAAY6N,EAAI,GAAKyD,EAC3CE,EAAc3D,EAAInT,KAAKqF,MAC3BqR,EAAOtE,IAAIqE,EAAUM,MAAMF,EAAWA,EAAY7W,KAAKqF,OAAQyR,GAEjE9W,KAAK0W,OAASA,oCAId,IAAIM,GAAYhX,KAAK8V,WAAWvT,OAAQvC,KAAKiW,UAAU1T,QACnD0U,EAAmBjX,KAAK8V,WAAWjT,WAAa7C,KAAKiW,UAAUpT,WACnE,OAAQ7C,KAAK2V,KACX,KAAK,EACL,KAAK,EACL,KAAK,EACH3V,KAAKkX,cAAcD,EAAmBjX,KAAK0W,OAAO7T,WAAa7C,KAAK0N,QAAQ7K,YAC5E7C,KAAKmX,eAAeF,EAAmBjX,KAAK0N,QAAQ7K,YACpDmU,EAAWA,EAASI,QAAQpX,KAAK0N,QAAQnL,OAAQvC,KAAK0W,OAAOnU,SAC7D,MACF,KAAK,GACL,KAAK,GACHvC,KAAKkX,cAAcD,EAAmBjX,KAAK0W,OAAO7T,YAClD7C,KAAKmX,eAAeF,GACpBD,EAAWA,EAASI,QAAQpX,KAAK0W,OAAOnU,SAG5C,OAAO,IAAI8U,KAAKL,GAAW5N,KAAM,kDAIjC,OAAOkO,OAAOC,IAAIC,gBAAgBxX,KAAKyX,8CAIvC,IAAIC,EAAM,IAAIC,MAAM3X,KAAKqF,MAAOrF,KAAKsF,QAErC,OADAoS,EAAIxE,IAAMlT,KAAK4X,SACRF,uYC1HXxX,EAAA,IAEA6L,EAAA7L,EAAA,GAOA8L,EAAA9L,EAAA,GAsDA,IApDA,IAAM+L,GACJ,GACA,GACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,IAGIW,GACJC,OAAS,IAAM,IAAM,KACrBC,OAAS,GAAM,GAAM,IACrBC,KAAS,IAAM,GAAM,IACrB8K,QAAS,IAAM,IAAM,GACrBC,OAAS,EAAM,IAAM,IACrB9K,MAAS,EAAM,GAAM,KACrB+K,MAAS,IAAM,IAAM,MAGjBC,GACJ,QACA,QACA,MACA,SACA,QACA,OACA,QAIIC,EAAU,IAAI/S,aAClB,EAAQ,KAAQ,KAAQ,IAAQ,KAAQ,GAAQ,IAAQ,EACxD,GAAQ,EAAQ,EAAQ,KAAQ,KAAQ,IAAQ,IAAQ,GACxD,GAAQ,EAAQ,EAAQ,KAAQ,KAAQ,IAAQ,IAAQ,GACxD,GAAQ,EAAQ,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,OAGpDgT,EAAU,IAAIhT,aAClB,EAAQ,KAAQ,KAAQ,EAAQ,IAAQ,KAAQ,GAAQ,IACxD,EAAQ,GAAQ,EAAQ,EAAQ,KAAQ,KAAQ,IAAQ,IACxD,GAAQ,GAAQ,EAAQ,IAAQ,KAAQ,KAAQ,IAAQ,IACxD,GAAQ,GAAQ,KAAQ,IAAQ,KAAQ,KAAQ,KAAQ,OAGpDiT,EAAU,IAAIjT,YAAY,MAC5BkT,GAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClCzG,EAAQ,EACH6B,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAI6E,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAI5X,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrByX,EAAQxG,GAAyD,GAAjB,GAAjB,EAAZyG,EAAO5E,GAAS4E,EAAOC,IAAUD,EAAO3X,IAAU2X,EAAO1X,GAC5EiR,IAOR,IAHA,IAAM2G,EAAa,IAAIpT,YAAY,OAE/BvC,GADAyV,GAAU,EAAQ,MAAQ,KACjB,GACJ5E,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAI6E,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAI5X,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAI6X,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrBJ,EAAWlG,KACTgG,EAAOC,GACPD,EAAO5E,GACP4E,EAAO1X,GACP0X,EAAO3X,GACP2X,EAAOI,GACPJ,EAAOG,GACPH,EAAOM,GACPN,EAAOK,IACN9V,GACHA,GAAU,MAGLmJ,cAEnB,SAAAA,EAAYzJ,gGAAaC,CAAAtC,KAAA8L,GAAA,IAAAmB,mKAAAC,CAAAlN,MAAA8L,EAAAqB,WAAArM,OAAAsM,eAAAtB,IAAAvL,KAAAP,KACjBqC,IADiB,OAEvB4K,EAAK7D,KAAO,MACZ6D,EAAKU,SACH,IAAIzI,YAAY,OAChB,IAAIA,YAAY,OAChB,IAAIA,YAAY,QAElB+H,EAAK0L,UAAY,EACjB1L,EAAK2L,UAAY,EACjB3L,EAAK4L,OAVkB5L,qUAFY7K,6CAgBnCpC,KAAKsO,KAAK,GACVtO,KAAKgX,YAKL,IAJA,IAAI8B,EAAO9Y,KAAK6C,WAAa,IACzBF,EAAS,EACToW,EAAe,EAEXpW,EAASmW,GAAUC,EAAe,GAAI,CAC5C/Y,KAAKsO,KAAK3L,GACV,IAAIqW,EAAehZ,KAAK+N,SAAS,GAAGkL,UAAU,EAAG,GAC7CC,EAAgBlZ,KAAKuO,aACzBvO,KAAKgX,SAASgC,IACZrW,OAAQA,EACRU,OAAQ6V,GAEVvW,GAAUuW,EAAgB,EAC1BH,GAAgB,EAGlB/Y,KAAKwN,cACLxN,KAAKmZ,mBACLnZ,KAAKuN,qBACLvN,KAAKyN,WAAa,MAClBzN,KAAK0N,QAAUd,EACf5M,KAAKoZ,kBAAoB,sCAGlBC,GACP,GAAIrZ,KAAK2Y,UAAYU,EAAM,GAAI,CAC7B,IAAIC,EAAWtZ,KAAKgO,aACpBhO,KAAK4Y,WAAaU,GAAa,GAAKtZ,KAAK2Y,UACzC3Y,KAAK2Y,WAAa,GAEpB,IAAIY,GAAQ,GAAKF,GAAO,EACpBG,EAASxZ,KAAK4Y,UAAYW,EAG9B,OAFAvZ,KAAK4Y,YAAcS,EACnBrZ,KAAK2Y,WAAaU,EACXG,wCAIPxZ,KAAKsO,KAAKtO,KAAKgX,SAAL,IAAqBrU,OAAS,IACxC,IAAI8W,EAAoB,IAAI/J,KAAuC,KAAjC1P,KAAKuO,aAAe,YAClDmL,EAAoB,IAAIhK,KAAuC,KAAjC1P,KAAKuO,aAAe,YAElDiB,GADaxP,KAAKuO,aACHvO,KAAK8N,QAAQ,KAC5BqB,EAAiBnP,KAAK8N,QAAQ,IAC9BsB,EAAkBpP,KAAK8N,QAAQ,IAC/BiB,EAAiB/O,KAAKgP,UAAU,IAChCC,EAAmBjP,KAAKgP,UAAU,IAClCE,EAAoBlP,KAAKgP,UAAU,IACnC2K,EAAe3Z,KAAK+N,SAAS,IAC7BsB,EAAiBrP,KAAK+N,SAAS,IAC/BwB,EAAkBvP,KAAK+N,SAAS,IAChCW,EAAa1O,KAAKgO,aAClBa,EAAa7O,KAAKgO,aAClB2B,EAAQ3P,KAAKgO,aACbiC,EAAajQ,KAAKoO,YACLpO,KAAKoO,YACtBpO,KAAK0O,WAAaA,EAClB1O,KAAK4P,gBAAkBf,EACvB7O,KAAKiQ,WAAaA,EAClBjQ,KAAKoR,UAAYnF,EAAWgE,GAC5BjQ,KAAK6P,MACHjB,KAAc,EAARe,EACNG,KAAOH,GAAS,EAAK,EACrBI,YAAarB,EACbsB,YAAaC,EACbG,YAAavB,EACbY,UAAWiK,EACXE,mBAAoBH,EACpBha,MACE8Q,SAAUxB,EACVyB,KAAMhB,EACNc,SAAUqJ,GAEZlJ,QACEF,SAAUtB,EACVuB,KAAMrB,EACNmB,SAAUjB,GAEZqB,SACEH,SAAUrB,EACVsB,KAAMpB,EACNkB,SAAUf,+CAMdvP,KAAK6Z,aACL7Z,KAAK8Z,gBACL9Z,KAAKsO,KAAKtO,KAAKgX,SAAL,IAAqBrU,OAAS,GACxCA,EAAS3C,KAAKgX,SAAL,IAAqBrU,OAAS,GACvC,IAAK,IAAIvC,EAAI,EAAGA,EAAIJ,KAAK0O,WAAYtO,IAAK,CACxC,IAAI2Z,GACFpK,MAAO3P,KAAKuO,aACZyL,WACEha,KAAKgO,aACLhO,KAAKgO,aACLhO,KAAKgO,cAEPiM,YAAaja,KAAK+N,SAAS,IAC3BmM,YACEla,KAAKoO,YACLpO,KAAKoO,YACLpO,KAAKoO,aAEP+L,WAAYna,KAAKoO,YACjBgM,WAAYpa,KAAKuO,cAEnBvO,KAAK6Z,UAAUxV,KAAK0V,GACpB/Z,KAAK8Z,aAAazV,KAAK1B,GACvBA,GAAUoX,EAAMC,UAAU,GAAKD,EAAMC,UAAU,GAAKD,EAAMC,UAAU,iDAKtE,IAAIrX,EAAS3C,KAAKgX,SAAL,IAAqBrU,OAAS,EAC3C3C,KAAKsO,KAAK3L,GACV,IAAIwN,EAAWnQ,KAAKuO,aACpBvO,KAAKmQ,SAAWA,EAChBnQ,KAAKqR,QAAUpF,EAAWkE,GAC1B,IAAIkK,EAAa,IAAIvJ,YAAY9Q,KAAKuC,OAAQI,EAAS,EAAG,IAC1D3C,KAAKsR,WACHC,KAAQ5O,OAAQA,GAAU,GAAeU,OAAQgX,EAAW,IAC5D7I,KAAQ7O,OAAQA,GAAU0X,EAAW,GAAIhX,OAAQgX,EAAW,IAC5D5I,KAAQ9O,OAAQA,GAAU0X,EAAW,GAAIhX,OAAQgX,EAAW,IAC5D3I,KAAQ/O,OAAQA,GAAU0X,EAAW,GAAIhX,OAAQgX,EAAW,IAC5DC,KAAQ3X,OAAQA,GAAU0X,EAAW,GAAIhX,OAAQgX,EAAW,4CAIjDhH,GACb,OAAkD,IAAzCrT,KAAK6Z,UAAUxG,GAAY1D,OAAS,0CAGhC0D,GACb,OAAOrT,KAAK6Z,UAAUxG,GAAY6G,+CAGxB7G,GAAgD,IAApCkH,EAAoCnX,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAxB,EAAKoX,EAAmBpX,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAEtDoX,IACFD,GAAeva,KAAKya,eAAepH,EAAa,IAE9B,IAAfA,GAAsBrT,KAAKoZ,oBAAsB/F,EAAa,GAAOkH,GACxEva,KAAKgS,YAAYqB,EAAa,EAAGkH,EAAYA,EAAaC,GAAY,GAKxE,IAHA,IAAI3K,EAAO7P,KAAK6Z,UAAUxG,GACtB1Q,EAAS3C,KAAK8Z,aAAazG,GAEtBqH,EAAa,EAAGA,EAAa,EAAGA,IAAc,CACrD1a,KAAKsO,KAAK3L,GACV,IAAIqX,EAAYnK,EAAKmK,UAAUU,GAI/B,GAHA/X,GAAUqX,EAGQ,KAAdA,KAECO,GAAeG,GAAc,GAAlC,CAEA1a,KAAK2Y,UAAY,GACjB3Y,KAAK4Y,UAAY,EAGjB,IAFA,IAAI+B,EAAO,EAEFC,EAAc,EAAGA,EAAc,IAAKA,GAAe,IAC1D,IAAK,IAAIC,EAAc,EAAGA,EAAc,IAAKA,GAAe,IAC1D,IAAK,IAAIC,EAAiB,EAAGA,EAAiB,IAAKA,GAAkB,EAAG,CACtE,IAAI3H,EAAIyH,EAAcE,EACtB,GAAI3H,GAAK,IAAK,MAEd,IAAK,IAAI4H,EAAiB,EAAGA,EAAiB,IAAKA,GAAkB,EAAG,CACtE,IAAI3H,EAAIyH,EAAcE,EACtB,GAAI3H,GAAK,IAAK,MAEd,GAAIuH,EACFA,GAAQ,MADV,CAKA,IAAIK,EAAkB,IAAJ7H,EAAUC,EACxB6H,EAAcjb,KAAK2N,QAAQ+M,GAE3BtR,EAAOpJ,KAAKkb,SAAS,GAEzB,GAAY,GAAR9R,EAAW,CACb,IAAI+R,EAAYlD,EAAQjY,KAAKkb,SAAS,IAClCxE,EAAS4B,EAAW8C,SAAqB,EAAZD,EAA2B,EAAZA,EAAgB,GAChEF,EAAY7I,IAAIsE,EAAQsE,GACxBC,EAAY7I,IAAIsE,EAAQsE,EAAc,KACtCC,EAAY7I,IAAIsE,EAAQsE,EAAc,KACtCC,EAAY7I,IAAIsE,EAAQsE,EAAc,KACtCC,EAAY7I,IAAIsE,EAAQsE,EAAc,MACtCC,EAAY7I,IAAIsE,EAAQsE,EAAc,MACtCC,EAAY7I,IAAIsE,EAAQsE,EAAc,MACtCC,EAAY7I,IAAIsE,EAAQsE,EAAc,WAGnC,GAAY,GAAR5R,EAAW,CAClB,IAAI+R,EAAYnb,KAAKkb,SAAS,IAC1BxE,EAAS4B,EAAW8C,SAAqB,EAAZD,EAA2B,EAAZA,EAAgB,GAChEF,EAAY7I,IAAIsE,EAAQsE,GACxBC,EAAY7I,IAAIsE,EAAQsE,EAAc,KACtCC,EAAY7I,IAAIsE,EAAQsE,EAAc,KACtCC,EAAY7I,IAAIsE,EAAQsE,EAAc,KACtCC,EAAY7I,IAAIsE,EAAQsE,EAAc,MACtCC,EAAY7I,IAAIsE,EAAQsE,EAAc,MACtCC,EAAY7I,IAAIsE,EAAQsE,EAAc,MACtCC,EAAY7I,IAAIsE,EAAQsE,EAAc,WAGnC,GAAY,GAAR5R,EAAW,CAClB,IAAIiS,EAAYrb,KAAKkb,SAAS,GAC1BI,EAAarD,EAAQoD,GACrBE,EAAarD,EAAQmD,GACrB7H,EAAI8E,EAAW8C,SAAsB,EAAbE,EAA6B,EAAbA,EAAiB,GACzDjD,EAAIC,EAAW8C,SAAsB,EAAbG,EAA6B,EAAbA,EAAiB,GAC7DN,EAAY7I,IAAIoB,EAAGwH,GACnBC,EAAY7I,IAAIiG,EAAG2C,EAAc,KACjCC,EAAY7I,IAAIoB,EAAGwH,EAAc,KACjCC,EAAY7I,IAAIiG,EAAG2C,EAAc,KACjCC,EAAY7I,IAAIoB,EAAGwH,EAAc,MACjCC,EAAY7I,IAAIiG,EAAG2C,EAAc,MACjCC,EAAY7I,IAAIoB,EAAGwH,EAAc,MACjCC,EAAY7I,IAAIiG,EAAG2C,EAAc,WAG9B,GAAY,GAAR5R,EAAW,CAClB,IAAIkS,EAAatb,KAAKkb,SAAS,IAC3BK,EAAapD,EAAQmD,GACrB9H,EAAI8E,EAAW8C,SAAsB,EAAbE,EAA6B,EAAbA,EAAiB,GACzDjD,EAAIC,EAAW8C,SAAsB,EAAbG,EAA6B,EAAbA,EAAiB,GAC7DN,EAAY7I,IAAIoB,EAAGwH,GACnBC,EAAY7I,IAAIiG,EAAG2C,EAAc,KACjCC,EAAY7I,IAAIoB,EAAGwH,EAAc,KACjCC,EAAY7I,IAAIiG,EAAG2C,EAAc,KACjCC,EAAY7I,IAAIoB,EAAGwH,EAAc,MACjCC,EAAY7I,IAAIiG,EAAG2C,EAAc,MACjCC,EAAY7I,IAAIoB,EAAGwH,EAAc,MACjCC,EAAY7I,IAAIiG,EAAG2C,EAAc,WAG9B,GAAY,GAAR5R,EAEP,IADA,IAAImQ,EAAOvZ,KAAKkb,SAAS,GAChBvI,EAAO,EAAGA,EAAO,EAAGA,IAAQ,CACnC,IAAIwI,EAAY,EAEdA,EADE5B,EAAQ,GAAK5G,EACHsF,EAAQjY,KAAKkb,SAAS,IAEtBlb,KAAKkb,SAAS,IAE5B,IAAIxE,EAAS4B,EAAW8C,SAAqB,EAAZD,EAA2B,EAAZA,EAAgB,GAChEF,EAAY7I,IAAIsE,EAAQsE,EAAqB,IAAPrI,OAIrC,IAAY,GAARvJ,EAAW,CAClBuR,EAAO3a,KAAKkb,SAAS,GACrB,SAKG,GAAY,GAAR9R,EAAW,CAClB,IAAIoS,EAAUxb,KAAKkb,SAAS,GAExBI,EAAa,EACbC,EAAa,EAFFvb,KAAKkb,SAAS,IAK3BI,EAAarD,EAAQjY,KAAKkb,SAAS,IACnCK,EAAatD,EAAQjY,KAAKkb,SAAS,IACnCM,GAAWA,EAAU,GAAK,IAE1BF,EAAatb,KAAKkb,SAAS,IAC3BK,EAAavb,KAAKkb,SAAS,KAG7B,IAAI1H,EAAI8E,EAAW8C,SAAsB,EAAbE,EAA6B,EAAbA,EAAiB,GACzDjD,EAAIC,EAAW8C,SAAsB,EAAbG,EAA6B,EAAbA,EAAiB,GAE9C,GAAXC,GACFP,EAAY7I,IAAIoB,EAAGwH,GACnBC,EAAY7I,IAAIiG,EAAG2C,EAAc,KACjCC,EAAY7I,IAAIoB,EAAGwH,EAAc,KACjCC,EAAY7I,IAAIiG,EAAG2C,EAAc,KACjCC,EAAY7I,IAAIoB,EAAGwH,EAAc,MACjCC,EAAY7I,IAAIiG,EAAG2C,EAAc,MACjCC,EAAY7I,IAAIoB,EAAGwH,EAAc,MACjCC,EAAY7I,IAAIiG,EAAG2C,EAAc,OACb,GAAXQ,GACTP,EAAY7I,IAAIoB,EAAGwH,GACnBC,EAAY7I,IAAIoB,EAAGwH,EAAc,KACjCC,EAAY7I,IAAIiG,EAAG2C,EAAc,KACjCC,EAAY7I,IAAIoB,EAAGwH,EAAc,KACjCC,EAAY7I,IAAIoB,EAAGwH,EAAc,MACjCC,EAAY7I,IAAIiG,EAAG2C,EAAc,MACjCC,EAAY7I,IAAIoB,EAAGwH,EAAc,MACjCC,EAAY7I,IAAIoB,EAAGwH,EAAc,OACb,GAAXQ,GACTP,EAAY7I,IAAIoB,EAAGwH,GACnBC,EAAY7I,IAAIiG,EAAG2C,EAAc,KACjCC,EAAY7I,IAAIoB,EAAGwH,EAAc,KACjCC,EAAY7I,IAAIoB,EAAGwH,EAAc,KACjCC,EAAY7I,IAAIiG,EAAG2C,EAAc,MACjCC,EAAY7I,IAAIoB,EAAGwH,EAAc,MACjCC,EAAY7I,IAAIoB,EAAGwH,EAAc,MACjCC,EAAY7I,IAAIiG,EAAG2C,EAAc,OACb,GAAXQ,IACTP,EAAY7I,IAAIoB,EAAGwH,GACnBC,EAAY7I,IAAIiG,EAAG2C,EAAc,KACjCC,EAAY7I,IAAIiG,EAAG2C,EAAc,KACjCC,EAAY7I,IAAIoB,EAAGwH,EAAc,KACjCC,EAAY7I,IAAIiG,EAAG2C,EAAc,MACjCC,EAAY7I,IAAIiG,EAAG2C,EAAc,MACjCC,EAAY7I,IAAIoB,EAAGwH,EAAc,MACjCC,EAAY7I,IAAIiG,EAAG2C,EAAc,aAW/C,OAFAhb,KAAKoZ,kBAAoB/F,GAGvB,IAAIpP,WAAWjE,KAAK2N,QAAQ,GAAGpL,QAC/B,IAAI0B,WAAWjE,KAAK2N,QAAQ,GAAGpL,QAC/B,IAAI0B,WAAWjE,KAAK2N,QAAQ,GAAGpL,iDAInB8Q,GACd,IAAI1D,EAAQ3P,KAAK6Z,UAAUxG,GAAY1D,MACvC,OACE3P,KAAK0N,QAAQsK,EAA0B,GAARrI,IAC/B3P,KAAK0N,QAAQsK,EAAmBrI,GAAS,EAAK,KAC9C3P,KAAK0N,QAAQsK,EAAmBrI,GAAS,GAAM,KAC/C3P,KAAK0N,QAAQsK,EAAmBrI,GAAS,GAAM,KAC/C3P,KAAK0N,QAAQsK,EAAmBrI,GAAS,GAAM,KAC/C3P,KAAK0N,QAAQsK,EAAmBrI,GAAS,GAAM,KAC/C3P,KAAK0N,QAAQsK,EAAmBrI,GAAS,GAAM,6CAIpC0D,GAGb,IAFA,IAAIC,EAAStT,KAAKgS,YAAYqB,GAC1BE,EAAQ,IAAItP,WAAY,OACnB+O,EAAQ,EAAGA,EAAS,MAAYA,IAAS,CAEhD,IAAIgI,EAAsB,EAARhI,EACdM,EAAO,GAAG0H,KAAczH,EAAMP,GAAS,GACvCM,EAAO,GAAG0H,EAAc,KAAIzH,EAAMP,GAAS,GAC3CM,EAAO,GAAG0H,KAAczH,EAAMP,GAAS,GACvCM,EAAO,GAAG0H,EAAc,KAAIzH,EAAMP,GAAS,GAC3CM,EAAO,GAAG0H,KAAczH,EAAMP,GAAS,GACvCM,EAAO,GAAG0H,EAAc,KAAIzH,EAAMP,GAAS,GAEjD,OAAOO,yCAGMF,GACb,IAAII,EAAM,IAAIC,gBAAc,IAAK,IAAK,GAGtC,OAFAD,EAAIE,UAAU3T,KAAK4T,eAAeP,IAClCI,EAAII,WAAW7T,KAAK8T,gBAAgBT,IAC7BI,6CAIP,OAAOzT,KAAK6Z,UAAU9I,IAAI,SAAAgJ,GACxB,IAAII,EAAaJ,EAAMI,WACvB,OACe,EAAbA,EACCA,GAAc,EAAK,EACnBA,GAAc,EAAK,EACnBA,GAAc,EAAK,2CAKZpG,GACZ,IAAIC,GAAM,MAAO,MAAO,MAAO,MAAO,OAAOD,GAC7C,OAAO/T,KAAKsR,UAAU0C,GAAI3Q,OAAS,sCAGzB4Q,GAUV,IATA,IAOIC,EAAQC,EAAMC,EAPdvE,EAAO7P,KAAKsR,UAAU2C,GACtBK,EAAS,IAAIC,WAAW,QACxBC,EAAe,EACfH,EAAQ,IAAIpQ,WAAWjE,KAAKuC,OAAQsN,EAAKlN,OAAQkN,EAAKxM,QAEtDoR,EAAW,EACXC,EAAgB,GAGX/C,EAAQ,EAAGA,EAAQ0C,EAAMhR,OAAQsO,IAGxC,IAFA,IAAIxD,EAAOkG,EAAM1C,GACbgD,EAAS,EACNA,EAAS,GACVD,EAAgB,IAAgB,GAAVC,GAExBT,EAAU/F,GAAQwG,EAAU,EAE5BR,EAAOM,EAAWc,uBAAqBrB,EAAS,EAAIQ,GAEpDN,EAAYM,EAAgBU,sBAAoBlB,GAChDS,GAAU,IAIVT,EAAU/F,GAAQwG,EAAU,GAE5BR,EAAOM,EAAWG,uBAAqBV,EAAS,GAAKQ,GAErDN,EAAYM,EAAgBG,sBAAoBX,GAChDS,GAAU,GAGZP,EAAYU,KAAKC,IAAI,EAAGD,KAAKE,IAAIZ,EAAW,KAC5CD,EAAOW,KAAKC,KAAK,KAAMD,KAAKE,IAAIb,EAAM,OAEtCG,EAAOE,GAAwB,GAAPL,EACxBK,GAAgB,EAEhBE,EAAgBN,EAChBK,EAAWN,EAIf,OAAOG,EAAOyC,MAAM,EAAGvC,sBA/bN1I,mKChGrB,QAAA5L,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,uDAEA,IAAMN,GACJ+O,QAAS8M,QACTC,iBACAC,iBACA9P,oBACAC,uBAIU8P,QAAVhc,IACA+b,mBACA9P,sBACAC,gWCjBF5L,EAAA,QACAA,EAAA,QACAA,EAAA,SACAA,EAAA,OACAA,EAAA,2DAGqB2b,aAOnB,SAAAA,EAAYzW,EAAIC,EAAOC,gGAAQhD,CAAAtC,KAAA6b,GAE7BzW,EAAM,iBAAmBA,EAAM0W,SAASC,cAAc3W,GAAMA,EAC5DpF,KAAK2L,OAAS,IAAIA,UAAOvG,EAAIC,EAAOC,GACpCtF,KAAKgc,WAAa,IAAIrQ,UAAOmQ,SAASG,cAAc,UAAW5W,EAAOC,GACpEE,WAAW,EACX0W,uBAAuB,IAEzBlc,KAAKmc,SAAU,EACfnc,KAAKoc,WACLpc,KAAK8P,MAAO,EACZ9P,KAAKqc,aAAe,EACpBrc,KAAKsc,QAAS,EACdtc,KAAKuc,cAAgB,KACrBvc,KAAKwc,aACH,IAAIC,UAAW,OACf,IAAIA,UAAW,OACf,IAAIA,UAAW,OACf,IAAIA,UAAW,OACf,IAAIA,UAAW,QAEjBzc,KAAK0c,iBAAkB,0CA4FnBna,GACJ,IAAIoa,EAAO,IAAIhB,UAAOpZ,GACtBvC,KAAK2c,KAAOA,EACZ3c,KAAK6P,KAAO8M,EAAK9M,KACjB7P,KAAKoJ,KAAOuT,EAAKvT,KACjBpJ,KAAK0O,WAAaiO,EAAKjO,WACvB1O,KAAKiQ,WAAa0M,EAAK1M,WACvBjQ,KAAK4c,WAAaD,EAAK9Z,WACvB7C,KAAK8P,KAAyB,GAAlB6M,EAAK9M,KAAKC,KACtB9P,KAAKsc,QAAS,EACdtc,KAAKmc,SAAU,EACfnc,KAAKwc,YAAYjR,QAAQ,SAAA0I,GACvBA,EAAMxG,WAAakP,EAAKlP,aAEtBzN,KAAKuc,eACPvc,KAAK6T,WAAW7T,KAAKuc,eAEnBvc,KAAK2c,KAAKE,cAAc,IAAI7c,KAAKwc,YAAY,GAAGpK,IAAIpS,KAAK2c,KAAKG,YAAY,OAAQ,GAClF9c,KAAK2c,KAAKE,cAAc,IAAI7c,KAAKwc,YAAY,GAAGpK,IAAIpS,KAAK2c,KAAKG,YAAY,OAAQ,GAClF9c,KAAK2c,KAAKE,cAAc,IAAI7c,KAAKwc,YAAY,GAAGpK,IAAIpS,KAAK2c,KAAKG,YAAY,OAAQ,GACpE,QAAd9c,KAAKoJ,MAAkBpJ,KAAK2c,KAAKE,cAAc,IAAI7c,KAAKwc,YAAY,GAAGpK,IAAIpS,KAAK2c,KAAKG,YAAY,OAAQ,GACzG9c,KAAK2c,KAAKE,cAAc,IAAI7c,KAAKwc,YAAY,GAAGpK,IAAIpS,KAAK2c,KAAKG,YAAY,OAAQ9c,KAAK+c,YAC3F/c,KAAKgd,SAAWhd,KAAK2c,KAAKM,mBAC1Bjd,KAAKkd,cAAgB,KACrBld,KAAKmd,qBAAsB,EAC3Bnd,KAAKod,gBACHlR,GAAG,EACHC,GAAG,EACHC,GAAG,GAELpM,KAAK8I,QAAQ9I,KAAKoJ,MAClBpJ,KAAKqd,SAASrd,KAAK2c,KAAK/M,iBACxB5P,KAAKsd,KAAK,qCAOPjU,GAAQ,IAAA4D,EAAAjN,KAEX,OADIA,KAAKmc,SAASnc,KAAKud,SAChB,EAAAC,EAAA5B,SAAOvS,GACXoU,KAAK,SAAClb,GACL0K,EAAKyQ,MAAMnb,KAEZob,MAAM,SAACC,GACNC,QAAQC,MAAM,0BAA2BF,qCAQ7C5d,KAAK+d,QACL/d,KAAK2c,KAAO,KACZ3c,KAAKmc,SAAU,EACfnc,KAAKsc,QAAS,EACdtc,KAAK8P,KAAO,KACZ9P,KAAK6P,KAAO,KACZ7P,KAAK0O,WAAa,KAClB1O,KAAKiQ,WAAa,KAClBjQ,KAAKge,OAAS,EACd,IAAK,IAAI5d,EAAI,EAAGA,EAAIJ,KAAKwc,YAAYnZ,OAAQjD,IAC3CJ,KAAKwc,YAAYpc,GAAG6d,QAEtBje,KAAKgd,SAAW,KAChBhd,KAAKmd,oBAAsB,KAC3Bnd,KAAK2L,OAAON,QACZrL,KAAKgc,WAAW3Q,0CAOhBrL,KAAKud,QACLvd,KAAK2L,OAAOuS,UACZle,KAAKgc,WAAWkC,+CAQLvM,GAEX,IADA,IAAIhC,EAAQ3P,KAAKgd,SAASrL,GACjBvR,EAAI,EAAGA,EAAIuP,EAAMtM,OAAQjD,IAC5BuP,EAAMvP,IAAMJ,KAAKwc,YAAYpc,GAAG+d,QAAQne,KAAKwc,YAAYpc,GAAGge,2CASlEpe,KAAKwc,YAAY,GAAG4B,MAAMpe,KAAKqe,kDAQ/B,IAAK,IAAIje,EAAI,EAAGA,EAAIJ,KAAKwc,YAAYnZ,OAAQjD,IAC3CJ,KAAKwc,YAAYpc,GAAGke,sCAOjB,IAAA3N,EAAA3Q,KACL,IAAMA,KAAKmc,UAAcnc,KAAKsc,OAAS,OAAO,KAC9Ctc,KAAKsc,QAAS,EACRtc,KAAKmd,sBAA2Bnd,KAAK8P,MAAU9P,KAAKqc,cAAgBrc,KAAK0O,WAAa,KAAK1O,KAAKge,OAAS,GAC/Ghe,KAAKue,WACLve,KAAKkd,cAAgBsB,YAAY,WAC3B7N,EAAK2L,QAAQmC,cAAc9N,EAAKuM,eAEhCvM,EAAK0L,cAAgB1L,EAAKjC,WAAY,GACxCiC,EAAK+N,aACD/N,EAAKb,MACPa,EAAKgO,aACLhO,EAAK4N,SAAS,GACd5N,EAAK2M,KAAK,mBAEV3M,EAAKoN,QACLpN,EAAK2M,KAAK,mBAGZ3M,EAAKiO,aAAajO,EAAK0L,cACvB1L,EAAKkO,cAEN,IAAO7e,KAAKoR,WACfpR,KAAKmd,qBAAsB,EAC3Bnd,KAAKsd,KAAK,kDAOV,IAAMtd,KAAKmc,SAAanc,KAAKsc,OAAS,OAAO,KAE7CmC,cAAcze,KAAKkd,eACnBld,KAAKsc,QAAS,EACdtc,KAAK0e,aACL1e,KAAKsd,KAAK,uDASE3L,EAAOtM,EAAOC,EAAQ8D,EAAMU,GACxC,IAAK9J,KAAKmc,QAAS,OAAO,KAC1B,IAAIxQ,EAAS3L,KAAKgc,WAKlB,OAJIrQ,EAAOtG,QAAUA,GAASsG,EAAOrG,SAAWA,GAAQqG,EAAOmT,OAAOzZ,EAAOC,GAE7EqM,EAAkB,SAATA,EAAqB3R,KAAK2c,KAAK/M,gBAAoBkF,KAAKC,IAAI,EAAGD,KAAKE,IAAIrD,EAAO3R,KAAK0O,WAAa,IAC1G1O,KAAK+e,UAAUpN,EAAOhG,GACfA,EAAOqT,QAAQ5V,EAAMU,sCAGnB4D,GACT1N,KAAKuc,cAAgB7O,EACrB1N,KAAK2c,KAAKjP,QAAUA,EACpB1N,KAAKif,+CAOEtN,GACP,IAAM3R,KAAKmc,SAAaxK,IAAU3R,KAAKqc,aAAe,OAAO,KAE7D1K,EAAQmD,KAAKC,IAAI,EAAGD,KAAKE,IAAIF,KAAKoK,MAAMvN,GAAQ3R,KAAK0O,WAAa,IAClE1O,KAAKge,OAASrM,EACd3R,KAAKmf,mBAAqB,EAC1Bnf,KAAK+e,UAAUpN,EAAO3R,KAAK2L,QAC3B3L,KAAKsd,KAAK,eAAgBtd,KAAKqc,gDAQvBhJ,EAAY1H,GACpB,IAAI0K,EAASrW,KAAK2c,KAAK7I,gBAAgBT,GACnC+L,EAAepf,KAAK2c,KAAK3K,YAAYqB,GACzC1H,EAAO0T,cAAchJ,EAAO,IAC5B1K,EAAON,QACe,OAAlBrL,KAAK2c,KAAKvT,MACRpJ,KAAKod,eAAe,IAAIzR,EAAO2T,UAAUF,EAAa,GAAI,IAAK,IAAK/I,EAAO,IAAK,EAAE,EAAE,EAAE,IACtFrW,KAAKod,eAAe,IAAIzR,EAAO2T,UAAUF,EAAa,GAAI,IAAK,IAAK/I,EAAO,IAAK,EAAE,EAAE,EAAE,KAC/D,OAAlBrW,KAAK2c,KAAKvT,OACfpJ,KAAKod,eAAe,IAAIzR,EAAO2T,UAAUF,EAAa,GAAI,IAAK,IAAK/I,EAAO,GAAIA,EAAO,IACtFrW,KAAKod,eAAe,IAAIzR,EAAO2T,UAAUF,EAAa,GAAI,IAAK,IAAK/I,EAAO,GAAIA,EAAO,IACtFrW,KAAKod,eAAe,IAAIzR,EAAO2T,UAAUF,EAAa,GAAI,IAAK,IAAK/I,EAAO,GAAIA,EAAO,8CAQ5FrW,KAAKqc,aAAerc,KAAK2c,KAAK/M,oDAOzB5P,KAAK8P,MAAU9P,KAAKqc,cAAgBrc,KAAK0O,WAAY,EACxD1O,KAAKqc,aAAe,EAEpBrc,KAAKqc,cAAgB,sCAQlBrc,KAAK8P,MAAU9P,KAAKqc,cAAgB,EACvCrc,KAAKqc,aAAerc,KAAK0O,WAAa,EAEtC1O,KAAKqc,cAAgB,sCAQvBrc,KAAKqc,aAAerc,KAAK0O,WAAa,uCAOtC1O,KAAKqc,aAAe,iCAQfhX,EAAOC,GACZtF,KAAK2L,OAAOmT,OAAOzZ,EAAOC,GAC1BtF,KAAKif,yDAQYtN,EAAOtQ,GACxBrB,KAAKod,eAAezL,GAAStQ,EAC7BrB,KAAKif,yDAOY5d,GACjB,IAAI2I,EAAS3I,EAAQ,SAAW,UAChCrB,KAAK2L,OAAO9C,UAAUmB,GACtBhK,KAAKif,cACLjf,KAAK0c,gBAAkBrb,kCAOjBE,GACNvB,KAAK2L,OAAO7C,QAAQvH,GACpBvB,KAAKgc,WAAWlT,QAAQvH,yCAOpBvB,KAAKmc,SACPnc,KAAK+e,UAAU/e,KAAKqc,aAAcrc,KAAK2L,mCASxC4T,EAAWC,GACZ,IAAIC,EAASzf,KAAKoc,SACjBqD,EAAOF,KAAeE,EAAOF,QAAkBlb,KAAKmb,+BAQnDD,EAAWC,GACb,IAAIE,EAAe1f,KAAKoc,QAAQmD,GAC5BG,GAAcA,EAAaC,OAAOD,EAAaE,QAAQJ,GAAW,gCAQnED,GAAoB,IACvB,IAAIG,EAAe1f,KAAKoc,QAAQmD,OADTM,EAAAzc,UAAAC,OAANyc,EAAM5K,MAAA2K,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAND,EAAMC,EAAA,GAAA3c,UAAA2c,GAEvB,IAAK,IAAI3f,EAAI,EAAGA,EAAIsf,EAAarc,OAAQjD,IACvCsf,EAAatf,GAAG4f,MAAM,KAAMF,wCA9Z9B,OAAO9f,KAAKge,qBAMGrM,GACf3R,KAAKqd,SAAS1L,uCAOd,OAAO3R,KAAKmc,QAAUnc,KAAKqc,cAAgB,EAAIrc,KAAKoR,WAAa,mBAMnD/P,GACTrB,KAAKmc,SAAa9a,EAAQrB,KAAKigB,UAAc5e,EAAQ,GACxDrB,KAAKqd,SAASvI,KAAKoL,MAAM7e,GAAS,EAAIrB,KAAKoR,4CAQ7C,OAAOpR,KAAKwc,YAAY,GAAG2D,MAAMC,qBAMxB/e,GACT,IAAK,IAAIjB,EAAI,EAAGA,EAAIJ,KAAKwc,YAAYnZ,OAAQjD,IAC3CJ,KAAKwc,YAAYpc,GAAG+f,MAAMC,OAAS/e,gCAQrC,OAAOrB,KAAKwc,YAAY,GAAG2D,MAAME,oBAMzBhf,GACR,IAAK,IAAIjB,EAAI,EAAGA,EAAIJ,KAAKwc,YAAYnZ,OAAQjD,IAC3CJ,KAAKwc,YAAYpc,GAAG+f,MAAME,MAAQhf,mCAQpC,OAAOrB,KAAKmc,QAAUnc,KAAK0O,YAAc,EAAI1O,KAAKoR,WAAa,uCAO/D,OAAOpR,KAAK2c,KAAKvL,6CAQjB,OAAQ,EAAIpR,KAAK2c,KAAKtL,SAAY,EAAIrR,KAAK2c,KAAKvL,8BAhH/ByK,iBCPrBjc,EAAAD,QAAA,+LCAAC,EAAAD,QAAA,usBCUe,SAAc0J,GAC3B,OAAO,IAAIiX,QAAQ,SAAUC,EAASC,GACpC,IAAK,IAAIpgB,EAAI,EAAGA,EAAIqgB,EAAQpd,OAAQjD,IAAK,CACvC,IAAIsgB,EAASD,EAAQrgB,GACrB,GAAIsgB,EAAOC,QAAQtX,GAAS,CAC1BqX,EAAO7H,KAAKxP,EAAQkX,EAASC,GAC7B,WAhBR,QAAAtgB,EAAA,SACAA,EAAA,SACAA,EAAA,wDAEA,IAAMugB,GACJG,UACAC,UACAC,qGCLAH,QAAS,SAAStX,GAChB,MAAyB,iBAAXA,GAGhBwP,KAAM,SAASxP,EAAQkX,EAASC,GAC9B,IAAIO,EAAM,IAAIC,eACdD,EAAIE,KAAK,MAAO5X,GAAQ,GACxB0X,EAAIG,aAAe,cACnBH,EAAII,mBAAqB,SAAU5I,GACV,IAAnBwI,EAAIK,aACFL,EAAIM,QAAU,KAAON,EAAIM,OAAS,IACpCd,EAAQQ,EAAIO,UAEZd,GACEpX,KAAM,YACNiY,OAAQN,EAAIM,OACZE,WAAYR,EAAIQ,eAKxBR,EAAIS,KAAK,kGCrBXb,QAAS,SAAStX,GAChB,OAAQA,aAAkBoY,MAG5B5I,KAAM,SAASxP,EAAQkX,EAASC,GAC9B,IAAIkB,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAACC,GACftB,EAAQsB,EAAMC,OAAOtI,SAEvBkI,EAAOK,QAAU,SAACF,GAChBrB,GAAQpX,KAAM,mBAEhBsY,EAAOM,kBAAkB3Y,+FCZ3BsX,QAAS,SAAStX,GAChB,OAAQA,aAAkB0M,aAG5B8C,KAAM,SAASxP,EAAQkX,EAASC,GAC9BD,EAAQlX,iYCPZnJ,EAAA,SAEqBuc,aAInB,SAAAA,EAAazI,EAAI5K,gGAAM9G,CAAAtC,KAAAyc,GACrBzc,KAAKgU,GAAKA,EACVhU,KAAKiiB,aAAe,EACpBjiB,KAAKkiB,cAAgB,GACrBliB,KAAKyN,WAAa,EAClBzN,KAAKmiB,aAAe,EACpBniB,KAAKmgB,MAAQrE,SAASG,cAAc,SACpCjc,KAAKmgB,MAAMiC,SAAU,EACrBpiB,KAAKme,QAAS,wCAQZkE,EAASF,GAEX,IAAIG,EAAM,IAAIC,UAAWviB,KAAKyN,WAAa0U,EAAcniB,KAAKiiB,aAAcjiB,KAAKkiB,eACjFI,EAAIE,YAAYH,GAChBriB,KAAKyiB,IAAMnL,OAAOC,IAAIC,gBAAgB8K,EAAI7K,WAE1CzX,KAAKmgB,MAAMjN,IAAMlT,KAAKyiB,IACtBziB,KAAKme,QAAS,EACdne,KAAKmiB,aAAeA,EACpBniB,KAAKqD,OAASgf,EAAQhf,uCAWlBrD,KAAKme,SACP7G,OAAOC,IAAImL,gBAAgB1iB,KAAKyiB,KAChCziB,KAAKmgB,MAAMjN,IAAM,GACjBlT,KAAKmgB,MAAMtH,OACX7Y,KAAKme,QAAS,EACdne,KAAKmiB,aAAe,EACpBniB,KAAKqD,OAAS,oCAQZV,GACA3C,KAAKme,SACPne,KAAKmgB,MAAM9B,YAAc1b,GAAU,EACnC3C,KAAKmgB,MAAMwC,uCAQT3iB,KAAKme,QACPne,KAAKmgB,MAAMpC,yCAjCb,OAAO/d,KAAKmgB,MAAMF,4BAjCDxD,8XCFrBvc,EAAA,QAEqBqiB,aACnB,SAAAA,EAAY9U,GAA0C,IAA9BmV,EAA8Bxf,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAArB,EAAG8e,EAAkB9e,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,gGAAId,CAAAtC,KAAAuiB,GACpDviB,KAAKyN,WAAaA,EAClBzN,KAAK4iB,SAAWA,EAChB5iB,KAAKkiB,cAAgBA,EAGrB,IAAIW,EAAe,IAAI9M,YAAY,IAC/BnE,EAAS,IAAIxP,UAAWygB,GAE5BjR,EAAOoE,UAAU,QAEjBpE,EAAOsE,YAAY,GAEnBtE,EAAOoE,UAAU,QAEjBpE,EAAOoE,UAAU,QAEjBpE,EAAOsE,YAAY,IAEnBtE,EAAOwE,YAAY,GAEnBxE,EAAOwE,YAAYpW,KAAK4iB,UAExBhR,EAAOsE,YAAYlW,KAAKyN,YAExBmE,EAAOsE,YAAalW,KAAKyN,WAAazN,KAAKkiB,cAAgBliB,KAAK4iB,SAAY,GAE5EhR,EAAOwE,YAAapW,KAAKkiB,cAAgBliB,KAAK4iB,SAAY,GAE1DhR,EAAOwE,YAAYpW,KAAKkiB,eAExBtQ,EAAOoE,UAAU,QAEjBpE,EAAOsE,YAAY,GACnBlW,KAAK4R,OAASA,EACd5R,KAAKqiB,QAAU,mDAGLA,GACV,IAAIzQ,EAAS5R,KAAK4R,OAElBA,EAAOtD,KAAK,GACZsD,EAAOsE,YAAYtE,EAAO/O,WAAawf,EAAQxf,YAE/C+O,EAAOtD,KAAK,IACZsD,EAAOsE,YAAYmM,EAAQxf,YAC3B7C,KAAKqiB,QAAUA,oCAIf,OAAO,IAAIhL,MAAMrX,KAAK4R,OAAOrP,OAAQvC,KAAKqiB,QAAQ9f,SAAU6G,KAAM,iCAnDjDmZ","file":"flipnote.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"flipnote\"] = factory();\n\telse\n\t\troot[\"flipnote\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","/** datastream serves as a wrapper around the DataView API to help keep track of the offset into the stream */\nexport default class dataStream {\n  /**\n  * Create a fileReader instance\n  * @param {ArrayBuffer} arrayBuffer - data to read from\n  */\n  constructor(arrayBuffer) {\n    this.buffer = arrayBuffer;\n    this._data = new DataView(arrayBuffer);\n    this._offset = 0;\n  }\n\n  /**\n  * Get the length of the stream\n  * @returns {number}\n  */\n  get byteLength() {\n    return this._data.byteLength;\n  }\n\n  /**\n  * based on the seek method from Python's file objects - https://www.tutorialspoint.com/python/file_seek.htm\n  * @param {number} offset - position of the read pointer within the stream\n  * @param {number} whence - (optional) defaults to absolute file positioning,\n  *                          1 = offset is relative to the current position\n  *                          2 = offset is relative to the stream's end\n  */\n  seek(offset, whence) {\n    switch (whence) {\n      case 2:\n        this._offset = this._data.byteLength + offset;\n        break;\n      case 1:\n        this._offset += offset;\n        break;\n      case 0:\n      default:\n        this._offset = offset;\n        break;\n    }\n  }\n\n  /**\n  * Read an unsigned 8-bit integer from the stream, and automatically increment the offset\n  * @returns {number}\n  */\n  readUint8() {\n    var val = this._data.getUint8(this._offset);\n    this._offset += 1;\n    return val;\n  }\n\n  /**\n  * Write an unsigned 8-bit integer to the stream, and automatically increment the offset\n  * @param {number} value - value to write\n  */\n  writeUint8(value) {\n    this._data.setUint8(this._offset, value);\n    this._offset += 1;\n  }\n\n  /**\n  * Read a signed 8-bit integer from the stream, and automatically increment the offset\n  * @returns {number}\n  */\n  readInt8() {\n    var val = this._data.getInt8(this._offset);\n    this._offset += 1;\n    return val;\n  }\n\n  /**\n  * Write a signed 8-bit integer to the stream, and automatically increment the offset\n  * @param {number} value - value to write\n  */\n  writeInt8(value) {\n    this._data.setInt8(this._offset, value);\n    this._offset += 1;\n  }\n\n  /**\n  * Read an unsigned 16-bit integer from the stream, and automatically increment the offset\n  * @param {boolean} littleEndian - defaults to true, set to false to read data in big endian byte order\n  * @returns {number}\n  */\n  readUint16(littleEndian=true) {\n    var val = this._data.getUint16(this._offset, littleEndian);\n    this._offset += 2;\n    return val;\n  }\n\n  /**\n  * Write an unsigned 16-bit integer to the stream, and automatically increment the offset\n  * @param {number} value - value to write\n  * @param {boolean} littleEndian - defaults to true, set to false to write data in big endian byte order\n  */\n  writeUint16(value, littleEndian=true) {\n    this._data.setUint16(this._offset, value, littleEndian);\n    this._offset += 2;\n  }\n\n  /**\n  * Read a signed 16-bit integer from the stream, and automatically increment the offset\n  * @param {boolean} littleEndian - defaults to true, set to false to read data in big endian byte order\n  * @returns {number}\n  */\n  readInt16(littleEndian=true) {\n    var val = this._data.getInt16(this._offset, littleEndian);\n    this._offset += 2;\n    return val;\n  }\n\n  /**\n  * Write a signed 16-bit integer to the stream, and automatically increment the offset\n  * @param {number} value - value to write\n  * @param {boolean} littleEndian - defaults to true, set to false to write data in big endian byte order\n  */\n  writeInt16(value, littleEndian=true) {\n    this._data.setInt16(this._offset, value, littleEndian);\n    this._offset += 2;\n  }\n\n  /**\n  * Read an unsigned 32-bit integer from the stream, and automatically increment the offset\n  * @param {boolean} littleEndian - defaults to true, set to false to read data in big endian byte order\n  * @returns {number}\n  */\n  readUint32(littleEndian=true) {\n    var val = this._data.getUint32(this._offset, littleEndian);\n    this._offset += 4;\n    return val;\n  }\n\n  /**\n  * Write an unsigned 32-bit integer to the stream, and automatically increment the offset\n  * @param {number} value - value to write\n  * @param {boolean} littleEndian - defaults to true, set to false to write data in big endian byte order\n  */\n  writeUint32(value, littleEndian=true) {\n    this._data.setUint32(this._offset, value, littleEndian);\n    this._offset += 4;\n  }\n\n  /**\n  * Read a signed 32-bit integer from the stream, and automatically increment the offset\n  * @param {boolean} littleEndian - defaults to true, set to false to read data in big endian byte order\n  * @returns {number}\n  */\n  readInt32(littleEndian=true) {\n    var val = this._data.getInt32(this._offset, littleEndian);\n    this._offset += 4;\n    return val;\n  }\n\n  /**\n  * Write a signed 32-bit integer to the stream, and automatically increment the offset\n  * @param {number} value - value to write\n  * @param {boolean} littleEndian - defaults to true, set to false to write data in big endian byte order\n  */\n  writeInt32(value, littleEndian=true) {\n    this._data.setInt32(this._offset, value, littleEndian);\n    this._offset += 4;\n  }\n\n  readBytes(count) {\n    var bytes = new Uint8Array(this._data.buffer, this._offset, count);\n    this._offset += bytes.byteLength;\n    return bytes;\n  }\n\n  /**\n  * Read bytes and return a hex string\n  * @param {number} count - number of bytes to read\n  * @param {bool} reverse - pass true to reverse byte order\n  * @returns {string}\n  */\n  readHex(count, reverse=false) {\n    var bytes = this.readBytes(count);\n    let hex = [];\n    for (let i = 0; i < bytes.length; i++) {\n      hex.push(bytes[i].toString(16).padStart(2, \"0\"));\n    }\n    if (reverse) hex.reverse();\n    return hex.join(\"\").toUpperCase();\n  }\n\n  /**\n  * Read (simple) utf8 string\n  * @param {number} count - number of characters to read\n  * @returns {string}\n  */\n  readUtf8(count) {\n    var chars = this.readBytes(count);\n    var str = \"\";\n    for (let i = 0; i < chars.length; i++) {\n      let char = chars[i];\n      if (char == 0) break;\n      str += String.fromCharCode(char);\n    }\n    return str;\n  }\n\n  /**\n  * Write (simple) utf8 string\n  * @param {string} string - string to write\n  */\n  writeUtf8(string) {\n    for (let i = 0; i < string.length; i++) {\n      let char = string.charCodeAt(i);\n      this.writeUint8(char);\n    }\n  }\n\n  /**\n  * Read (simple) utf16 string\n  * @param {number} count - number of characters to read\n  * @returns {string}\n  */\n  readUtf16(count) {\n    var chars = new Uint16Array(this._data.buffer, this._offset, count);\n    this._offset += chars.byteLength;\n    var str = \"\";\n    for (let i = 0; i < chars.length; i++) {\n      let char = chars[i];\n      if (char == 0) break;\n      str += String.fromCharCode(char);\n    }\n    return str;\n  }\n}","import vertexShader from \"./shader.vert\";\nimport fragmentShader from \"./shader.frag\";\n\n/** webgl canvas wrapper class */\nexport default class webglCanvas {\n  /**\n  * Create a rendering canvas\n  * @param {HTMLCanvasElement} el - The HTML canvas element\n  * @param {number} width - width of the canvas in pixels\n  * @param {number} height - height of the canvas in pixels\n  * @param {Object} params - optional params to pass to web gl context\n  */\n  constructor(el, width=640, height=480, params={antialias: false, alpha: false}) {\n    this.width = el.width = width;\n    this.height = el.height = height; \n    var gl = el.getContext(\"webgl\", params);\n    var program = gl.createProgram();\n    this.program = program;\n    this.el = el;\n    this.gl = gl;\n    this.refs = {\n      shaders:[],\n      textures:[],\n      buffers: []\n    };\n    // set up shaders\n    var vShader = this._createShader(gl.VERTEX_SHADER, vertexShader);\n    var fShader = this._createShader(gl.FRAGMENT_SHADER, fragmentShader);\n    gl.attachShader(program, vShader);\n    gl.attachShader(program, fShader);\n    // link program\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      let log = gl.getProgramInfoLog(program);\n      gl.deleteProgram(program);\n      throw new Error(log);\n    }\n    // activate the program\n    gl.useProgram(program);\n    // create quad that fills the screen, this will be our drawing surface\n    var vertBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1,  1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1]), gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(0);\n    gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n    this.refs.buffers.push(vertBuffer);\n    // create texture to use as the layer bitmap\n    gl.activeTexture(gl.TEXTURE0);\n    var tex = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, tex);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    // get uniform locations\n    this.uniforms = {};\n    let uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < uniformCount; i++) {\n      let name = gl.getActiveUniform(program, i).name;\n      this.uniforms[name] = gl.getUniformLocation(program, name);\n    }\n    gl.uniform1i(this.uniforms.u_bitmap, 0);\n    this.setFilter(\"linear\");\n    this.setMode(\"PPM\");\n    this.refs.textures.push(tex);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n  }\n  \n  /**\n  * Util to compile and attach a new shader\n  * @param {shader type} type - gl.VERTEX_SHADER | gl.FRAGMENT_SHADER\n  * @param {string} source - GLSL code for the shader\n  * @returns {shader} compiled webgl shader\n  * @access protected \n  */\n  _createShader(type, source) {\n    var gl = this.gl;\n    var shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    // test if shader compilation was successful\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      let log = gl.getShaderInfoLog(shader);\n      gl.deleteShader(shader);\n      throw new Error(log);\n    }\n    this.refs.shaders.push(shader);\n    return shader;\n  }\n\n  /**\n  * get the canvas content as an image\n  * @param {string} type - image MIME type, default is image/png\n  * @param {number} encoderOptions - number between 0 and 1 indicating image quality if type is image/jpeg or image/webp\n  * @returns {DataUrl}\n  */\n  toImage(type, encoderOptions) {\n    return this.el.toDataURL(type, encoderOptions);\n  }\n\n  /**\n  * Set the texture filter\n  * @param {string} filter - \"linear\" | \"nearest\"\n  */\n  setFilter(filter) {\n    var gl = this.gl;\n    filter = filter == \"linear\" ? gl.LINEAR : gl.NEAREST;\n    gl.uniform1i(this.uniforms.u_isSmooth, filter == \"linear\" ? 0 : 1);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);\n  }\n\n  /**\n  * Set the canvas mode depending on format\n  * @param {string} mode - \"KWZ\" | \"PPM\"\n  */\n  setMode(mode) {\n    const { gl } = this;\n    if (mode === \"PPM\") {\n      this.textureType = gl.ALPHA;\n    } else if (mode === \"KWZ\") {\n      this.textureType = gl.LUMINANCE_ALPHA;\n    }\n  }\n\n  /**\n  * Set a color\n  * @param {string} color - name of the color's uniform variable\n  * @param {array} value - r,g,b color, each channel's value should be between 0 and 255\n  */\n  setColor(color, value) {\n    this.gl.uniform4f(this.uniforms[color], value[0]/255, value[1]/255, value[2]/255, 1);\n  }\n\n  /**\n  * Set an palette individual color\n  * @param {array} value - r,g,b color, each channel's value should be between 0 and 255\n  */\n  setPaperColor(value) {\n    this.gl.clearColor(value[0] / 255, value[1] / 255, value[2] / 255, 1);\n  }\n\n  /**\n  * Draw a single frame layer\n  * @param {Uint16Array} buffer - layer pixels\n  * @param {number} width - layer width\n  * @param {number} height - layer height\n  * @param {array} color1 - r,g,b for layer color 1, each channel's value should be between 0 and 255\n  * @param {array} color2 - r,g,b for layer color 2, each channel's value should be between 0 and 255\n  * @param {number} depth - layer depth (kwz only, but currently unused)\n  */\n  drawLayer(buffer, width, height, color1, color2, depth) {\n    let gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0);\n    gl.texImage2D(gl.TEXTURE_2D, 0, this.textureType, width, height, 0, this.textureType, gl.UNSIGNED_BYTE, buffer);\n    // gl.uniform1f(gl.getUniformLocation(this.program, \"u_layerDepth\"), -depth/6);\n    this.setColor(\"u_color1\", color1);\n    this.setColor(\"u_color2\", color2);\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n  }\n\n  /**\n  * Resize canvas\n  * @param {number} width - width of the canvas in pixels\n  * @param {number} height - height of the canvas in pixels\n  */\n  resize(width=640, height=480) {\n    this.el.width = width;\n    this.el.height = height; \n    this.width = width;\n    this.height = height;\n    this.gl.viewport(0, 0, width, height);\n  }\n\n  /**\n  * Clear canvas\n  */\n  clear() {\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n  }\n\n  /** \n  * Destroy this canvas instance\n  */\n  destroy() {\n    // free resources\n    var refs = this.refs;\n    var gl = this.gl;\n    refs.shaders.forEach((shader) => {\n      gl.deleteShader(shader);\n    });\n    refs.shaders = [];\n    refs.textures.forEach((texture) => {\n      gl.deleteTexture(texture);\n    });\n    refs.textures = [];\n    refs.buffers.forEach((buffer) => {\n      gl.deleteBuffer(buffer);\n    });\n    refs.buffers = [];\n    gl.deleteProgram(this.program);\n    // shrink the canvas to reduce memory usage until it is garbage collected\n    gl.canvas.width = 1;\n    gl.canvas.height = 1;\n  }\n}","import ppmParser from \"./ppm\";\nimport kwzParser from \"./kwz\";\n\nexport default function parser(arrayBuffer) {\n  // check the buffer's magic to identify which format it uses\n  let data = new DataView(arrayBuffer, 0, 4);\n  let magic = data.getUint32(0);\n  // check if magic is PARA (ppm magic)\n  if (magic == 0x50415241) {\n    return new ppmParser(arrayBuffer);\n  } \n  // check if magic is KFH (kwz magic)\n  else if ((magic & 0xFFFFFF00) == 0x4B464800) {\n    return new kwzParser(arrayBuffer);\n  }\n  return null;\n}","/**\n * PPM decoder\n * Reads frames, audio, and metadata from Flipnote Studio PPM files \n * Based on my Python PPM decoder implementation (https://github.com/jaames/flipnote-tools)\n *  \n * Credits:\n *  PPM format reverse-engineering and documentation:\n *   - bricklife (http://ugomemo.g.hatena.ne.jp/bricklife/20090307/1236391313)\n *   - mirai-iro (http://mirai-iro.hatenablog.jp/entry/20090116/ugomemo_ppm)\n *   - harimau_tigris (http://ugomemo.g.hatena.ne.jp/harimau_tigris)\n *   - steven (http://www.dsibrew.org/wiki/User:Steven)\n *   - yellows8 (http://www.dsibrew.org/wiki/User:Yellows8)\n *   - PBSDS (https://github.com/pbsds)\n *   - jaames (https://github.com/jaames)\n *  Identifying the PPM sound codec:\n *   - Midmad from Hatena Haiku\n *   - WDLMaster from hcs64.com\n *  Helping me to identify issues with the Python decoder that this is based on:\n *   - Austin Burk (https://sudomemo.net)\n * \n *  Lastly, a huge thanks goes to Nintendo for creating Flipnote Studio, \n *  and to Hatena for providing the Flipnote Hatena online service, both of which inspired so many c:\n*/\n\nimport dataStream from \"utils/dataStream\";\n\nimport {\n  ADPCM_INDEX_TABLE_4,\n  ADPCM_SAMPLE_TABLE_4\n} from \"utils/adpcm\";\n\nimport { BitmapEncoder } from \"encoders/bmp\";\n\n// internal framerate value -> FPS table\nconst FRAMERATES = {\n  1: 0.5,\n  2: 1,\n  3: 2,\n  4: 4,\n  5: 6,\n  6: 12,\n  7: 20,\n  8: 30,\n};\n\nconst WIDTH = 256;\nconst HEIGHT = 192;\n\nconst PALETTE = {\n  WHITE: [0xff, 0xff, 0xff],\n  BLACK: [0x0e, 0x0e, 0x0e],\n  RED:   [0xff, 0x2a, 0x2a],\n  BLUE:  [0x0a, 0x39, 0xff],\n};\n\nexport default class ppmParser extends dataStream {\n  /**\n  * Create a ppmDecoder instance\n  * @param {ArrayBuffer} arrayBuffer - data to read from\n  */\n  constructor(arrayBuffer) {\n    super(arrayBuffer);\n    this.type = \"PPM\";\n    this._decodeHeader();\n    this._decodeAnimationHeader();\n    this._decodeSoundHeader();\n    this._decodeMeta();\n    this.sampleRate = 8192;\n    this.palette = PALETTE;\n    // create image buffers\n     this._layers = [\n      new Uint8Array(WIDTH * HEIGHT),\n      new Uint8Array(WIDTH * HEIGHT)\n    ];\n    this._prevLayers = [\n      new Uint8Array(WIDTH * HEIGHT),\n      new Uint8Array(WIDTH * HEIGHT)\n    ];\n    this._prevFrameIndex = null;\n  }\n\n  static validateFSID(fsid) {\n    return /[0159]{1}[0-9A-F]{6}0[0-9A-F]{8}/.test(fsid);\n  }\n\n  static validateFilename(filename) {\n    return /[0-9A-F]{6}_[0-9A-F]{13}_[0-9]{3}/.test(filename);\n  }\n\n  /**\n  * Read a packed filename\n  * @returns {string}\n  * @access protected\n  */\n  readFilename() {\n    return [\n      this.readHex(3),\n      this.readUtf8(13),\n      this.readUint16().toString().padStart(3, \"0\")\n    ].join(\"_\");\n  }\n\n  /**\n  * Unpack the line encoding flags for all 192 lines in a layer\n  * @returns {array}\n  * @access protected\n  */\n  readLineEncoding() {\n    var unpacked = new Uint8Array(HEIGHT);\n    for (var byteOffset = 0; byteOffset < 48; byteOffset ++) {\n      var byte = this.readUint8();\n      // each line's encoding type is stored as a 2-bit value\n      for (var bitOffset = 0; bitOffset < 8; bitOffset += 2) {\n        unpacked[byteOffset * 4 + bitOffset / 2] = (byte >> bitOffset) & 0x03;\n      }\n    }\n    return unpacked;\n  }\n\n  _decodeHeader() {\n    this.seek(0);\n    // decode header\n    // https://github.com/pbsds/hatena-server/wiki/PPM-format#file-header\n    let magic = this.readUint32();\n    this._frameDataLength = this.readUint32();\n    this._soundDataLength = this.readUint32();\n    this.frameCount = this.readUint16() + 1;\n    this.version = this.readUint16();\n  }\n\n  _decodeMeta() {\n    // https://github.com/pbsds/hatena-server/wiki/PPM-format#file-header\n    this.seek(0x10);\n    var lock = this.readUint16(),\n        thumbIndex = this.readInt16(),\n        rootAuthorName = this.readUtf16(11),\n        parentAuthorName = this.readUtf16(11),\n        currentAuthorName = this.readUtf16(11),\n        parentAuthorId = this.readHex(8, true),\n        currentAuthorId = this.readHex(8, true),\n        parentFilename = this.readFilename(),\n        currentFilename = this.readFilename(),\n        rootAuthorId = this.readHex(8, true);\n    this.seek(0x9A);\n    var timestamp = new Date((this.readUint32() + 946684800) * 1000);\n    this.seek(0x06A6);\n    var flags = this.readUint16();\n    this.thumbFrameIndex = thumbIndex;\n    this.meta = {\n      lock: lock,\n      loop: flags >> 1 & 0x01,\n      frame_count: this.frameCount,\n      frame_speed: this.frameSpeed,\n      bgm_speed: this.bgmSpeed,\n      thumb_index: thumbIndex,\n      timestamp: timestamp,\n      spinoff: (currentAuthorId !== parentAuthorId) || (currentAuthorId !== rootAuthorId),\n      root: {\n        filename: null,\n        username: rootAuthorName,\n        fsid: rootAuthorId,\n      },\n      parent: {\n        username: parentAuthorName,\n        fsid: parentAuthorId,\n        filename: parentFilename\n      },\n      current: {\n        username: currentAuthorName,\n        fsid: currentAuthorId,\n        filename: currentFilename\n      },\n    };\n  }\n\n  _decodeAnimationHeader() {\n    // jump to the start of the animation data section\n    // https://github.com/pbsds/hatena-server/wiki/PPM-format#animation-data-section\n    this.seek(0x06A0);\n    var offsetTableLength = this.readUint16();\n    // skip padding + flags\n    this.seek(0x06A8);\n    // read frame offsets and build them into a table\n    this._frameOffsets = new Uint32Array(offsetTableLength / 4).map(value => {\n      return 0x06A8 + offsetTableLength + this.readUint32();\n    });\n  }\n\n  _decodeSoundHeader() {\n    // https://github.com/pbsds/hatena-server/wiki/PPM-format#sound-data-section\n    // offset = frame data offset + frame data length + sound effect flags\n    var offset = 0x06A0 + this._frameDataLength + this.frameCount;\n    // account for multiple-of-4 padding\n    if (offset % 4 != 0) offset += 4 - (offset % 4);\n    this.seek(offset);\n    var bgmLen = this.readUint32();\n    var se1Len = this.readUint32();\n    var se2Len = this.readUint32();\n    var se3Len = this.readUint32();\n    this.frameSpeed = 8 - this.readUint8();\n    this.bgmSpeed = 8 - this.readUint8();\n    offset += 32;\n    this.framerate = FRAMERATES[this.frameSpeed];\n    this.bgmrate = FRAMERATES[this.bgmSpeed];\n    this.soundMeta = {\n      \"bgm\": {offset: offset,           length: bgmLen},\n      \"se1\": {offset: offset += bgmLen, length: se1Len},\n      \"se2\": {offset: offset += se1Len, length: se2Len},\n      \"se3\": {offset: offset += se2Len, length: se3Len},\n    };\n  }\n\n  /**\n  * Check whether or not a given frame is based on the previous one\n  * @param {number} index - zero-based frame index \n  * @returns {boolean}\n  */\n  isNewFrame(index) {\n    this.seek(this._frameOffsets[index]);\n    var header = this.readUint8();\n    return (header >> 7) & 0x1;\n  }\n\n  /**\n  * Get the color palette for a given frame\n  * @param {number} index - zero-based frame index \n  * @returns {array} rgba palette in order of paper, layer1, layer2\n  */\n  getFramePalette(index) {\n    this.seek(this._frameOffsets[index]);\n    const palette = this.palette;\n    var header = this.readUint8();\n    var paperColor = header & 0x1;\n    var pen = [\n      palette.BLACK,\n      paperColor == 1 ? palette.BLACK : palette.WHITE,\n      palette.RED,\n      palette.BLUE,\n    ];\n    return [\n      paperColor == 1 ? palette.WHITE : palette.BLACK,\n      pen[(header >> 1) & 0x3], // layer 1 color\n      pen[(header >> 3) & 0x3], // layer 2 color\n    ];\n  }\n\n  /**\n  * Decode a frame\n  * @param {number} index - zero-based frame index \n  * @returns {array} - 2 uint8 arrays representing each layer\n  * */\n  decodeFrame(index) {\n    if ((index !== 0) && (this._prevFrameIndex !== index - 1) && (!this.isNewFrame(index)))\n      this.decodeFrame(index - 1);\n    // https://github.com/pbsds/hatena-server/wiki/PPM-format#animation-frame\n    this.seek(this._frameOffsets[index]);\n    var header = this.readUint8();\n    var isNewFrame = (header >> 7) & 0x1;\n    var isTranslated = (header >> 5) & 0x3;\n    var translateX = 0;\n    var translateY = 0;\n    // copy the current layer buffers to the previous ones\n    this._prevLayers[0].set(this._layers[0]);\n    this._prevLayers[1].set(this._layers[1]);\n    this._prevFrameIndex = index;\n    // reset current layer buffers\n    this._layers[0].fill(0);\n    this._layers[1].fill(0);\n\n    if (isTranslated) {\n      translateX = this.readInt8();\n      translateY = this.readInt8();\n    }\n\n    var layerEncoding = [\n      this.readLineEncoding(),\n      this.readLineEncoding(),\n    ];\n     // start decoding layer bitmaps\n    for (var layer = 0; layer < 2; layer++) {\n      var layerBitmap = this._layers[layer];\n      for (var line = 0; line < HEIGHT; line++) {\n        var chunkOffset = line * WIDTH;\n        var lineType = layerEncoding[layer][line];\n        switch(lineType) {\n          // line type 0 = blank line, decode nothing\n          case 0:\n            break;\n          // line types 1 + 2 = compressed bitmap line\n          case 1:\n          case 2:\n            var lineHeader = this.readUint32(false);\n            // line type 2 starts as an inverted line\n            if (lineType == 2) layerBitmap.fill(0xFF, chunkOffset, chunkOffset + WIDTH);\n            // loop through each bit in the line header\n            while (lineHeader & 0xFFFFFFFF) {\n              // if the bit is set, this 8-pix wide chunk is stored\n              // else we can just leave it blank and move on to the next chunk\n              if (lineHeader & 0x80000000) {\n                var chunk = this.readUint8();\n                // unpack chunk bits\n                for (var pixel = 0; pixel < 8; pixel++) {\n                  layerBitmap[chunkOffset + pixel] = (chunk >> pixel & 0x1) ? 0xFF : 0x00;\n                }\n              }\n              chunkOffset += 8;\n              // shift lineheader to the left by 1 bit, now on the next loop cycle the next bit will be checked\n              lineHeader <<= 1;\n            }\n            break;\n          // line type 3 = raw bitmap line\n          case 3:\n            while(chunkOffset < (line + 1) * WIDTH) {\n              var chunk = this.readUint8();\n              for (var pixel = 0; pixel < 8; pixel++) {\n                layerBitmap[chunkOffset + pixel] = (chunk >> pixel & 0x1) ? 0xFF : 0x00;\n              }\n              chunkOffset += 8;\n            }\n            break;\n        }\n      }\n    }\n    // if the current frame is based on changes from the preivous one, merge them by XORing their values\n    if (!isNewFrame) {\n      var dest, src;\n      // loop through each line\n      for (var y = 0; y < HEIGHT; y++) {\n        // skip to next line if this one falls off the top edge of the screen\n        if (y - translateY < 0) continue;\n        // stop once the bottom screen edge has been reached\n        if (y - translateY >= HEIGHT) break;\n        // loop through each pixel in the line\n        for (var x = 0; x < WIDTH; x++) {\n          // skip to the next pixel if this one falls off the left edge of the screen\n          if (x - translateX < 0) continue;\n          // stop diffing this line once the right screen edge has been reached\n          if (x - translateX >= WIDTH) break;\n          dest = x + y * WIDTH;\n          src = dest - (translateX + translateY * WIDTH);\n          // diff pixels with a binary XOR\n          this._layers[0][dest] ^= this._prevLayers[0][src];\n          this._layers[1][dest] ^= this._prevLayers[1][src];\n        }\n      }\n    }\n    return this._layers;\n  }\n\n  getFramePixels(frameIndex) {\n    let layers = this.decodeFrame(frameIndex);\n    let image = new Uint8Array((256 * 192));\n    for (let pixel = 0; pixel < image.length; pixel++) {\n      let a = layers[0][pixel];\n      let b = layers[1][pixel];\n      if (b) image[pixel] = 2;\n      if (a) image[pixel] = 1;\n    }\n    return image;\n  }\n\n  getFrameBitmap(frameIndex) {\n    let bmp = new BitmapEncoder(256, 192, 8);\n    bmp.setPixels(this.getFramePixels(frameIndex));\n    bmp.setPalette(this.getFramePalette(frameIndex));\n    return bmp;\n  }\n\n  hasAudioTrack(trackIndex) {\n    let id = [\"bgm\", \"se1\", \"se2\", \"se3\"][trackIndex];\n    return this.soundMeta[id].length > 0;\n  }\n\n  /**\n  * Decode an audio track to 32-bit adpcm\n  * @param {string} track - track name, \"bgm\" | \"se1\" | \"se2\" | \"se3\"\n  * @returns {Int16Array}\n  */\n  decodeAudio(track) {\n    let meta = this.soundMeta[track];\n    let adpcm = new Uint8Array(this.buffer, meta.offset, meta.length);\n    let output = new Int16Array(adpcm.length * 2);\n    let outputOffset = 0;\n    // initial decoder state\n    var prevDiff = 0;\n    var prevStepIndex = 0;\n    var sample, diff, stepIndex;\n    // loop through each byte in the raw adpcm data\n    for (let index = 0; index < adpcm.length; index++) {\n      let byte = adpcm[index];\n      var bitPos = 0;\n      while (bitPos < 8) {\n        // isolate 4-bit sample\n        sample = (byte >> bitPos) & 0xF;\n        // get diff\n        diff = prevDiff + ADPCM_SAMPLE_TABLE_4[sample + 16 * prevStepIndex];\n        // get step index\n        stepIndex = prevStepIndex + ADPCM_INDEX_TABLE_4[sample];\n        // clamp step index and diff\n        stepIndex = Math.max(0, Math.min(stepIndex, 79));\n        diff = Math.max(-32767, Math.min(diff, 32767));\n        // add result to output buffer\n        output[outputOffset] = (diff);\n        outputOffset += 1;\n        // set prev decoder state\n        prevStepIndex = stepIndex;\n        prevDiff = diff;\n        // move to next sample\n        bitPos += 4;\n      }\n    }\n    return output;\n  }\n\n  /**\n  * Decode the sound effect usage for each frame\n  * @returns {array}\n  */\n  decodeSoundFlags() {\n    this.seek(0x06A0 + this._frameDataLength);\n    // per msdn docs - the array map callback is only invoked for array indicies that have assigned values\n    // so when we create an array, we need to fill it with something before we can map over it\n    var arr = new Array(this.frameCount).fill([]);\n    return arr.map(value => {\n      var byte = this.readUint8();\n      return [byte & 0x1, (byte >> 1) & 0x1, (byte >> 2) & 0x1];\n    });\n  }\n}","export const ADPCM_INDEX_TABLE_2 = new Int8Array([\n  -1, 2, -1, 2\n]);\n\nexport const ADPCM_INDEX_TABLE_4 = new Int8Array([\n  -1, -1, -1, -1, 2, 4, 6, 8,\n  -1, -1, -1, -1, 2, 4, 6, 8\n]);\n\n// note that this is a slight deviation from the normal adpcm table\nexport const ADPCM_STEP_TABLE = new Int16Array([\n  7, 8, 9, 10, 11, 12, 13, 14, 16, 17,\n  19, 21, 23, 25, 28, 31, 34, 37, 41, 45,\n  50, 55, 60, 66, 73, 80, 88, 97, 107, 118,\n  130, 143, 157, 173, 190, 209, 230, 253, 279, 307,\n  337, 371, 408, 449, 494, 544, 598, 658, 724, 796,\n  876, 963, 1060, 1166, 1282, 1411, 1552, 1707, 1878, 2066,\n  2272, 2499, 2749, 3024, 3327, 3660, 4026, 4428, 4871, 5358,\n  5894, 6484, 7132, 7845, 8630, 9493, 10442, 11487, 12635, 13899,\n  15289, 16818, 18500, 20350, 22385, 24623, 27086, 29794, 32767, 0\n]);\n\nexport const ADPCM_SAMPLE_TABLE_2 = new Int16Array(90 * 4);\nfor (let sample = 0; sample < 4; sample++) {\n  for (let stepIndex = 0; stepIndex < 90; stepIndex++) {\n    let step = ADPCM_STEP_TABLE[stepIndex];\n    let diff = step >> 3;\n    if (sample & 1) diff += step;\n    if (sample & 2) diff = -diff;\n    ADPCM_SAMPLE_TABLE_2[sample + 4 * stepIndex] = diff;\n  }\n}\n\nexport const ADPCM_SAMPLE_TABLE_4 = new Int16Array(90 * 16);\nfor (let sample = 0; sample < 16; sample++) {\n  for (let stepIndex = 0; stepIndex < 90; stepIndex++) {\n    let step = ADPCM_STEP_TABLE[stepIndex];\n    let diff = step >> 3;\n    if (sample & 4) diff += step;\n    if (sample & 2) diff += step >> 1;\n    if (sample & 1) diff += step >> 2;\n    if (sample & 8) diff = -diff;\n    ADPCM_SAMPLE_TABLE_4[sample + 16 * stepIndex] = diff;\n  }\n}","import dataStream from \"utils/dataStream\";\n\n// round number to nearest multiple of n\nexport function roundToNearest(value, n) {\n  return Math.ceil(value / n) * n;\n}\n\n// simple bitmap class for rendering images\n// https://en.wikipedia.org/wiki/BMP_file_format\n\nexport class BitmapEncoder {\n\n  constructor(width, height, bpp) {\n    this.width = width;\n    this.height = height;\n    this.vWidth = roundToNearest(width, 4);\n    this.vHeight = roundToNearest(height, 4);\n    this.bpp = bpp;\n    this.fileHeader = new dataStream(new ArrayBuffer(14));\n    this.fileHeader.writeUtf8(\"BM\"); // \"BM\" file magic\n    // using BITMAPV4HEADER dib header variant:\n    this.dibHeader = new dataStream(new ArrayBuffer(108))\n    this.dibHeader.writeUint32(108); // DIB header length\n    this.dibHeader.writeInt32(width); // width\n    this.dibHeader.writeInt32(height); // height\n    this.dibHeader.writeUint16(1); // color panes (always 1)\n    this.dibHeader.writeUint16(bpp); // bits per pixel\n    this.dibHeader.writeUint32(3); // compression method (3 = BI_BITFIELDS for rgba, 0 = no compression for 8 bit)\n    this.dibHeader.writeUint32((this.vWidth * this.height) / (bpp / 8)); // image data size, (width * height) / bits per pixel\n    this.dibHeader.writeUint32(3780); // x res, pixel per meter\n    this.dibHeader.writeUint32(3780); // y res, pixel per meter\n    this.dibHeader.writeUint32(0); // the number of colors in the color palette, set by setPalette() method\n    this.dibHeader.writeUint32(0); // the number of important colors used, or 0 when every color is important; generally ignored\n    this.dibHeader.writeUint32(0x00FF0000); // red channel bitmask\n    this.dibHeader.writeUint32(0x0000FF00); // green channel bitmask\n    this.dibHeader.writeUint32(0x000000FF); // blue channel bitmask\n    this.dibHeader.writeUint32(0xFF000000); // alpha channel bitmask\n    this.dibHeader.writeUtf8(\"Win \"); // LCS_WINDOWS_COLOR_SPACE \"Win \"\n    /// rest can be left as nulls\n  }\n\n  setFilelength(value) {\n    this.fileHeader.seek(2);\n    this.fileHeader.writeUint32(value);\n  }\n\n  setPixelOffset(value) {\n    this.fileHeader.seek(10);\n    this.fileHeader.writeUint32(value);\n  }\n\n  setCompression(value) {\n    this.dibHeader.seek(16);\n    this.dibHeader.writeUint32(value);\n  }\n\n  setPaletteCount(value) {\n    this.dibHeader.seek(32);\n    this.dibHeader.writeUint32(value);\n  }\n\n  setPalette(colors) {\n    let palette = new Uint32Array(Math.pow(2, this.bpp));\n    for (let index = 0; index < colors.length; index++) {\n      let color = colors[index % colors.length];\n      // bmp color order is ARGB\n      palette[index] = 0xFF000000 | (color[0] << 16) | (color[1] << 8) | (color[2]);\n    }\n    this.setPaletteCount(palette.length); // set number of colors in DIB header\n    this.setCompression(0); // set compression to 0 so we're not using 32 bit\n    this.palette = palette;\n  }\n\n  setPixels(pixelData) {\n    let pixels;\n    let pixelsLength = this.vWidth * this.height;\n    switch (this.bpp) {\n      case 8:\n        pixels = new Uint8Array(pixelsLength);\n        break;\n      case 32:\n        pixels = new Uint32Array(pixelsLength);\n        break;\n    }\n    // pixel rows are stored \"upside down\" in bmps\n    let w = this.width;\n    for (let y = 0; y < this.height; y++) {\n      let srcOffset = (w * this.height) - ((y + 1) * w);\n      let destOffset = (y * this.width);\n      pixels.set(pixelData.slice(srcOffset, srcOffset + this.width), destOffset);\n    }\n    this.pixels = pixels;\n  }\n\n  getBlob() {\n    let sections = [this.fileHeader.buffer, this.dibHeader.buffer];\n    let headerByteLength = this.fileHeader.byteLength + this.dibHeader.byteLength;\n    switch (this.bpp) {\n      case 1:\n      case 4:\n      case 8:\n        this.setFilelength(headerByteLength + this.pixels.byteLength + this.palette.byteLength);\n        this.setPixelOffset(headerByteLength + this.palette.byteLength);\n        sections = sections.concat([this.palette.buffer, this.pixels.buffer]);\n        break;\n      case 16:\n      case 32:\n        this.setFilelength(headerByteLength + this.pixels.byteLength);\n        this.setPixelOffset(headerByteLength);\n        sections = sections.concat([this.pixels.buffer]);\n        break;\n    }\n    return new Blob(sections, {type: \"image/bitmap\"})\n  }\n\n  getUrl() {\n    return window.URL.createObjectURL(this.getBlob());\n  }\n\n  getImage() {\n    var img = new Image(this.width, this.height);\n    img.src = this.getUrl();\n    return img;\n  }\n\n}\n","import dataStream from \"utils/dataStream\";\n\nimport {\n  ADPCM_INDEX_TABLE_2,\n  ADPCM_INDEX_TABLE_4,\n  ADPCM_SAMPLE_TABLE_2,\n  ADPCM_SAMPLE_TABLE_4\n} from \"utils/adpcm\";\n\nimport { BitmapEncoder } from \"encoders/bmp\";\n\nconst FRAMERATES = [\n  0.2,\n  0.5,\n  1,\n  2,\n  4, \n  6,\n  8,\n  12, \n  20,\n  24,\n  30\n];\n\nconst PALETTE = {\n  WHITE:  [0xff, 0xff, 0xff],\n  BLACK:  [0x10, 0x10, 0x10],\n  RED:    [0xff, 0x10, 0x10],\n  YELLOW: [0xff, 0xe7, 0x00],\n  GREEN:  [0x00, 0x86, 0x31],\n  BLUE:   [0x00, 0x38, 0xce],\n  NONE:   [0xff, 0xff, 0xff]\n};\n\nconst PALETTE_INDEX_MAP = [\n  'WHITE',\n  'BLACK',\n  'RED',\n  'YELLOW',\n  'GREEN',\n  'BLUE',\n  'NONE'\n];\n\n// table1 - commonly occuring line offsets\nconst TABLE_1 = new Uint16Array([\n  0x0000, 0x0CD0, 0x19A0, 0x02D9, 0x088B, 0x0051, 0x00F3, 0x0009,\n  0x001B, 0x0001, 0x0003, 0x05B2, 0x1116, 0x00A2, 0x01E6, 0x0012,\n  0x0036, 0x0002, 0x0006, 0x0B64, 0x08DC, 0x0144, 0x00FC, 0x0024,\n  0x001C, 0x0004, 0x0334, 0x099C, 0x0668, 0x1338, 0x1004, 0x166C\n]);\n// table2 - commonly occuring line offsets, but the lines are shifted to the left by one pixel\nconst TABLE_2 = new Uint16Array([\n  0x0000, 0x0CD0, 0x19A0, 0x0003, 0x02D9, 0x088B, 0x0051, 0x00F3, \n  0x0009, 0x001B, 0x0001, 0x0006, 0x05B2, 0x1116, 0x00A2, 0x01E6, \n  0x0012, 0x0036, 0x0002, 0x02DC, 0x0B64, 0x08DC, 0x0144, 0x00FC, \n  0x0024, 0x001C, 0x099C, 0x0334, 0x1338, 0x0668, 0x166C, 0x1004\n]);\n// table3 - line offsets, but the lines are shifted to the left by one pixel\nconst TABLE_3 = new Uint16Array(6561);\nvar values = [0, 3, 7, 1, 4, 8, 2, 5, 6];\nlet index = 0;\nfor (let a = 0; a < 9; a++)\n  for (let b = 0; b < 9; b++)\n    for (let c = 0; c < 9; c++)\n      for (let d = 0; d < 9; d++) {\n        TABLE_3[index] = ((values[a] * 9 + values[b]) * 9 + values[c]) * 9 + values[d];\n        index++;\n      }\n\n// linetable - contains every possible sequence of pixels for each tile line\nconst LINE_TABLE = new Uint16Array(6561 * 8);\nvar values = [0x0000, 0xFF00, 0x00FF];\nlet offset = 0;\nfor (let a = 0; a < 3; a++)\n  for (let b = 0; b < 3; b++)\n    for (let c = 0; c < 3; c++)\n      for (let d = 0; d < 3; d++)\n        for (let e = 0; e < 3; e++)\n          for (let f = 0; f < 3; f++)\n            for (let g = 0; g < 3; g++)\n              for (let h = 0; h < 3; h++) {\n                LINE_TABLE.set([\n                  values[b], \n                  values[a], \n                  values[d], \n                  values[c], \n                  values[f], \n                  values[e], \n                  values[h], \n                  values[g]\n                ], offset);\n                offset += 8;\n              }\n\nexport default class kwzParser extends dataStream {\n\n  constructor(arrayBuffer) {\n    super(arrayBuffer);\n    this.type = \"KWZ\";\n    this._layers = [\n      new Uint16Array(320 * 240),\n      new Uint16Array(320 * 240),\n      new Uint16Array(320 * 240),\n    ];\n    this._bitIndex = 0;\n    this._bitValue = 0;\n    this.load();\n  }\n\n  load() {\n    this.seek(0);\n    this.sections = {};\n    let size = this.byteLength - 256;\n    let offset = 0;\n    let sectionCount = 0;\n    // counting sections should mitigate against one of mrnbayoh's notehax exploits\n    while ((offset < size) && (sectionCount < 6)) {\n      this.seek(offset);\n      let sectionMagic = this.readUtf8(4).substring(0, 3);\n      let sectionLength = this.readUint32();\n      this.sections[sectionMagic] = {\n        offset: offset,\n        length: sectionLength\n      };\n      offset += sectionLength + 8;\n      sectionCount += 1;\n    }\n\n    this._decodeMeta();\n    this._decodeFrameMeta();\n    this._decodeSoundHeader();\n    this.sampleRate = 16364;\n    this.palette = PALETTE;\n    this._prevDecodedFrame = null;\n  }\n\n  readBits(num) {\n    if (this._bitIndex + num > 16) {\n      let nextBits = this.readUint16();\n      this._bitValue |= nextBits << (16 - this._bitIndex);\n      this._bitIndex -= 16;\n    }\n    let mask = (1 << num) - 1;\n    let result = this._bitValue & mask;\n    this._bitValue >>= num;\n    this._bitIndex += num;\n    return result;\n  }\n\n  _decodeMeta() {\n    this.seek(this.sections[\"KFH\"].offset + 12);\n    let creationTimestamp = new Date((this.readUint32() + 946684800) * 1000),\n        modifiedTimestamp = new Date((this.readUint32() + 946684800) * 1000),\n        appVersion = this.readUint32(),\n        rootAuthorId = this.readHex(10),\n        parentAuthorId = this.readHex(10),\n        currentAuthorId = this.readHex(10),\n        rootAuthorName = this.readUtf16(11),\n        parentAuthorName = this.readUtf16(11),\n        currentAuthorName = this.readUtf16(11),\n        rootFilename = this.readUtf8(28),\n        parentFilename = this.readUtf8(28),\n        currentFilename = this.readUtf8(28),\n        frameCount = this.readUint16(),\n        thumbIndex = this.readUint16(),\n        flags = this.readUint16(),\n        frameSpeed = this.readUint8(),\n        layerFlags = this.readUint8();\n    this.frameCount = frameCount;\n    this.thumbFrameIndex = thumbIndex;\n    this.frameSpeed = frameSpeed;\n    this.framerate = FRAMERATES[frameSpeed];\n    this.meta = {\n      lock: flags & 0x1,\n      loop: (flags >> 1) & 0x01,\n      frame_count: frameCount,\n      frame_speed: frameSpeed,\n      thumb_index: thumbIndex,\n      timestamp: modifiedTimestamp,\n      creation_timestamp: creationTimestamp,\n      root: {\n        username: rootAuthorName,\n        fsid: rootAuthorId,\n        filename: rootFilename,\n      },\n      parent: {\n        username: parentAuthorName,\n        fsid: parentAuthorId,\n        filename: parentFilename,\n      },\n      current: {\n        username: currentAuthorName,\n        fsid: currentAuthorId,\n        filename: currentFilename,\n      },\n    };\n  }\n\n  _decodeFrameMeta() {\n    this.frameMeta = [];\n    this.frameOffsets = [];\n    this.seek(this.sections[\"KMI\"].offset + 8);\n    offset = this.sections[\"KMC\"].offset + 12;\n    for (let i = 0; i < this.frameCount; i++) {\n      let frame = {\n        flags: this.readUint32(),\n        layerSize: [\n          this.readUint16(),\n          this.readUint16(),\n          this.readUint16()\n        ],\n        frameAuthor: this.readUtf8(10),\n        layerDepth: [\n          this.readUint8(),\n          this.readUint8(),\n          this.readUint8(),\n        ],\n        soundFlags: this.readUint8(),\n        cameraFlag: this.readUint32(),\n      };\n      this.frameMeta.push(frame);\n      this.frameOffsets.push(offset);\n      offset += frame.layerSize[0] + frame.layerSize[1] + frame.layerSize[2];\n    }\n  }\n\n  _decodeSoundHeader() {\n    let offset = this.sections[\"KSN\"].offset + 8;\n    this.seek(offset);\n    let bgmSpeed = this.readUint32();\n    this.bgmSpeed = bgmSpeed;\n    this.bgmrate = FRAMERATES[bgmSpeed];\n    let trackSizes = new Uint32Array(this.buffer, offset + 4, 20);\n    this.soundMeta = {\n      \"bgm\": {offset: offset += 28,            length: trackSizes[0]},\n      \"se1\": {offset: offset += trackSizes[0], length: trackSizes[1]},\n      \"se2\": {offset: offset += trackSizes[1], length: trackSizes[2]},\n      \"se3\": {offset: offset += trackSizes[2], length: trackSizes[3]},\n      \"se4\": {offset: offset += trackSizes[3], length: trackSizes[4]},\n    };\n  }\n\n  getDiffingFlag(frameIndex) {\n    return ~(this.frameMeta[frameIndex].flags >> 4) & 0x07;\n  }\n\n  getLayerDepths(frameIndex) {\n    return this.frameMeta[frameIndex].layerDepth;\n  }\n\n  decodeFrame(frameIndex, diffingFlag=0x7, isPrevFrame=false) {\n    // if this frame is being decoded as a prev frame, then we only want to decode the layers necessary\n    if (isPrevFrame)\n      diffingFlag &= this.getDiffingFlag(frameIndex + 1);\n    // the prevDecodedFrame check is an optimisation for decoding frames in full sequence\n    if ((frameIndex !== 0) && (this._prevDecodedFrame !== frameIndex - 1) && (diffingFlag))\n      this.decodeFrame(frameIndex - 1, diffingFlag=diffingFlag, isPrevFrame=true);\n\n    let meta = this.frameMeta[frameIndex];\n    let offset = this.frameOffsets[frameIndex];\n\n    for (let layerIndex = 0; layerIndex < 3; layerIndex++) {\n      this.seek(offset);\n      let layerSize = meta.layerSize[layerIndex];\n      offset += layerSize;\n\n      // if the layer is 38 bytes then it hasn't changed at all since the previous frame, so we can skip it\n      if (layerSize === 38) continue;\n\n      if ((diffingFlag >> layerIndex) & 0x1 === 0) continue;\n\n      this._bitIndex = 16;\n      this._bitValue = 0;\n      let skip = 0;\n\n      for (let tileOffsetY = 0; tileOffsetY < 240; tileOffsetY += 128) {\n        for (let tileOffsetX = 0; tileOffsetX < 320; tileOffsetX += 128) {\n          for (let subTileOffsetY = 0; subTileOffsetY < 128; subTileOffsetY += 8) {\n            let y = tileOffsetY + subTileOffsetY;\n            if (y >= 240) break;\n\n            for (let subTileOffsetX = 0; subTileOffsetX < 128; subTileOffsetX += 8) {\n              let x = tileOffsetX + subTileOffsetX;\n              if (x >= 320) break;\n\n              if (skip) {\n                skip -= 1;\n                continue;\n              }\n\n              let pixelOffset = y * 320 + x;\n              let pixelBuffer = this._layers[layerIndex];\n\n              let type = this.readBits(3);\n\n              if (type == 0) {\n                let lineIndex = TABLE_1[this.readBits(5)];\n                let pixels = LINE_TABLE.subarray(lineIndex * 8, lineIndex * 8 + 8);\n                pixelBuffer.set(pixels, pixelOffset);\n                pixelBuffer.set(pixels, pixelOffset + 320);\n                pixelBuffer.set(pixels, pixelOffset + 640);\n                pixelBuffer.set(pixels, pixelOffset + 960);\n                pixelBuffer.set(pixels, pixelOffset + 1280);\n                pixelBuffer.set(pixels, pixelOffset + 1600);\n                pixelBuffer.set(pixels, pixelOffset + 1920);\n                pixelBuffer.set(pixels, pixelOffset + 2240);\n              } \n\n              else if (type == 1) {\n                let lineIndex = this.readBits(13);\n                let pixels = LINE_TABLE.subarray(lineIndex * 8, lineIndex * 8 + 8);\n                pixelBuffer.set(pixels, pixelOffset);\n                pixelBuffer.set(pixels, pixelOffset + 320);\n                pixelBuffer.set(pixels, pixelOffset + 640);\n                pixelBuffer.set(pixels, pixelOffset + 960);\n                pixelBuffer.set(pixels, pixelOffset + 1280);\n                pixelBuffer.set(pixels, pixelOffset + 1600);\n                pixelBuffer.set(pixels, pixelOffset + 1920);\n                pixelBuffer.set(pixels, pixelOffset + 2240);\n              } \n              \n              else if (type == 2) {\n                let lineValue = this.readBits(5);\n                let lineIndexA = TABLE_1[lineValue];\n                let lineIndexB = TABLE_2[lineValue];\n                let a = LINE_TABLE.subarray(lineIndexA * 8, lineIndexA * 8 + 8);\n                let b = LINE_TABLE.subarray(lineIndexB * 8, lineIndexB * 8 + 8);\n                pixelBuffer.set(a, pixelOffset);\n                pixelBuffer.set(b, pixelOffset + 320);\n                pixelBuffer.set(a, pixelOffset + 640);\n                pixelBuffer.set(b, pixelOffset + 960);\n                pixelBuffer.set(a, pixelOffset + 1280);\n                pixelBuffer.set(b, pixelOffset + 1600);\n                pixelBuffer.set(a, pixelOffset + 1920);\n                pixelBuffer.set(b, pixelOffset + 2240);\n              } \n              \n              else if (type == 3) {\n                let lineIndexA = this.readBits(13);\n                let lineIndexB = TABLE_3[lineIndexA];\n                let a = LINE_TABLE.subarray(lineIndexA * 8, lineIndexA * 8 + 8);\n                let b = LINE_TABLE.subarray(lineIndexB * 8, lineIndexB * 8 + 8);\n                pixelBuffer.set(a, pixelOffset);\n                pixelBuffer.set(b, pixelOffset + 320);\n                pixelBuffer.set(a, pixelOffset + 640);\n                pixelBuffer.set(b, pixelOffset + 960);\n                pixelBuffer.set(a, pixelOffset + 1280);\n                pixelBuffer.set(b, pixelOffset + 1600);\n                pixelBuffer.set(a, pixelOffset + 1920);\n                pixelBuffer.set(b, pixelOffset + 2240);\n              }\n\n              else if (type == 4) {\n                let mask = this.readBits(8);\n                for (let line = 0; line < 8; line++) {\n                  let lineIndex = 0;\n                  if (mask & (1 << line)) {\n                    lineIndex = TABLE_1[this.readBits(5)];\n                  } else {\n                    lineIndex = this.readBits(13);\n                  }\n                  let pixels = LINE_TABLE.subarray(lineIndex * 8, lineIndex * 8 + 8);\n                  pixelBuffer.set(pixels, pixelOffset + line * 320);\n                }\n              }\n\n              else if (type == 5) {\n                skip = this.readBits(5);\n                continue;\n              }\n\n              // type 6 doesnt exist\n\n              else if (type == 7) {\n                let pattern = this.readBits(2);\n                let useTable = this.readBits(1);\n                let lineIndexA = 0;\n                let lineIndexB = 0;\n\n                if (useTable) {\n                  lineIndexA = TABLE_1[this.readBits(5)];\n                  lineIndexB = TABLE_1[this.readBits(5)];\n                  pattern = (pattern + 1) % 4;\n                } else {\n                  lineIndexA = this.readBits(13);\n                  lineIndexB = this.readBits(13);\n                }\n\n                let a = LINE_TABLE.subarray(lineIndexA * 8, lineIndexA * 8 + 8);\n                let b = LINE_TABLE.subarray(lineIndexB * 8, lineIndexB * 8 + 8);\n\n                if (pattern == 0) {\n                  pixelBuffer.set(a, pixelOffset);\n                  pixelBuffer.set(b, pixelOffset + 320);\n                  pixelBuffer.set(a, pixelOffset + 640);\n                  pixelBuffer.set(b, pixelOffset + 960);\n                  pixelBuffer.set(a, pixelOffset + 1280);\n                  pixelBuffer.set(b, pixelOffset + 1600);\n                  pixelBuffer.set(a, pixelOffset + 1920);\n                  pixelBuffer.set(b, pixelOffset + 2240);\n                } else if (pattern == 1) {\n                  pixelBuffer.set(a, pixelOffset);\n                  pixelBuffer.set(a, pixelOffset + 320);\n                  pixelBuffer.set(b, pixelOffset + 640);\n                  pixelBuffer.set(a, pixelOffset + 960);\n                  pixelBuffer.set(a, pixelOffset + 1280);\n                  pixelBuffer.set(b, pixelOffset + 1600);\n                  pixelBuffer.set(a, pixelOffset + 1920);\n                  pixelBuffer.set(a, pixelOffset + 2240);\n                } else if (pattern == 2) {\n                  pixelBuffer.set(a, pixelOffset);\n                  pixelBuffer.set(b, pixelOffset + 320);\n                  pixelBuffer.set(a, pixelOffset + 640);\n                  pixelBuffer.set(a, pixelOffset + 960);\n                  pixelBuffer.set(b, pixelOffset + 1280);\n                  pixelBuffer.set(a, pixelOffset + 1600);\n                  pixelBuffer.set(a, pixelOffset + 1920);\n                  pixelBuffer.set(b, pixelOffset + 2240);\n                } else if (pattern == 3) {\n                  pixelBuffer.set(a, pixelOffset);\n                  pixelBuffer.set(b, pixelOffset + 320);\n                  pixelBuffer.set(b, pixelOffset + 640);\n                  pixelBuffer.set(a, pixelOffset + 960);\n                  pixelBuffer.set(b, pixelOffset + 1280);\n                  pixelBuffer.set(b, pixelOffset + 1600);\n                  pixelBuffer.set(a, pixelOffset + 1920);\n                  pixelBuffer.set(b, pixelOffset + 2240);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    this._prevDecodedFrame = frameIndex;\n    // return this._layers;\n    return [\n      new Uint8Array(this._layers[0].buffer),\n      new Uint8Array(this._layers[1].buffer),\n      new Uint8Array(this._layers[2].buffer),\n    ];\n  }\n\n  getFramePalette(frameIndex) {\n    let flags = this.frameMeta[frameIndex].flags;\n    return [\n      this.palette[PALETTE_INDEX_MAP[flags & 0xF]], // paper color\n      this.palette[PALETTE_INDEX_MAP[(flags >> 8) & 0xF]], // layer A color 1\n      this.palette[PALETTE_INDEX_MAP[(flags >> 12) & 0xF]], // layer A color 2\n      this.palette[PALETTE_INDEX_MAP[(flags >> 16) & 0xF]], // layer B color 1\n      this.palette[PALETTE_INDEX_MAP[(flags >> 20) & 0xF]], // layer B color 2\n      this.palette[PALETTE_INDEX_MAP[(flags >> 24) & 0xF]], // layer C color 1\n      this.palette[PALETTE_INDEX_MAP[(flags >> 28) & 0xF]], // layer C color 2\n    ];\n  }\n\n  getFramePixels(frameIndex) {\n    let layers = this.decodeFrame(frameIndex);\n    let image = new Uint8Array((320 * 240));\n    for (let pixel = 0; pixel < (320 * 240); pixel++) {\n      // because kwz layers use 2 items per pixel, one for color 1, one for color 2\n      let pixelOffset = pixel * 2;\n      if (layers[0][pixelOffset]) image[pixel] = 2;\n      if (layers[0][pixelOffset + 1]) image[pixel] = 1;\n      if (layers[1][pixelOffset]) image[pixel] = 4;\n      if (layers[1][pixelOffset + 1]) image[pixel] = 3;\n      if (layers[2][pixelOffset]) image[pixel] = 6;\n      if (layers[2][pixelOffset + 1]) image[pixel] = 5;\n    }\n    return image;\n  }\n\n  getFrameBitmap(frameIndex) {\n    let bmp = new BitmapEncoder(320, 240, 8);\n    bmp.setPixels(this.getFramePixels(frameIndex));\n    bmp.setPalette(this.getFramePalette(frameIndex));\n    return bmp;\n  }\n\n  decodeSoundFlags() {\n    return this.frameMeta.map(frame => {\n      let soundFlags = frame.soundFlags;\n      return [\n        soundFlags & 0x1,\n        (soundFlags >> 1) & 0x1,\n        (soundFlags >> 2) & 0x1,\n        (soundFlags >> 3) & 0x1,\n      ];\n    });\n  }\n\n  hasAudioTrack(trackIndex) {\n    let id = [\"bgm\", \"se1\", \"se2\", \"se3\", \"se4\"][trackIndex];\n    return this.soundMeta[id].length > 0\n  }\n\n  decodeAudio(track) {\n    let meta = this.soundMeta[track];\n    let output = new Int16Array(16364 * 60);\n    let outputOffset = 0;\n    let adpcm = new Uint8Array(this.buffer, meta.offset, meta.length);\n    // initial decoder state\n    var prevDiff = 0;\n    var prevStepIndex = 40;\n    var sample, diff, stepIndex;\n    // loop through each byte in the raw adpcm data\n    for (let index = 0; index < adpcm.length; index++) {\n      var byte = adpcm[index];\n      var bitPos = 0;\n      while (bitPos < 8) {\n        if (prevStepIndex < 18 || bitPos == 6) {\n          // isolate 2-bit sample\n          sample = (byte >> bitPos) & 0x3;\n          // get diff\n          diff = prevDiff + ADPCM_SAMPLE_TABLE_2[sample + 4 * prevStepIndex];\n          // get step index\n          stepIndex = prevStepIndex + ADPCM_INDEX_TABLE_2[sample];\n          bitPos += 2;\n        }\n        else {\n          // isolate 4-bit sample\n          sample = (byte >> bitPos) & 0xF;\n          // get diff\n          diff = prevDiff + ADPCM_SAMPLE_TABLE_4[sample + 16 * prevStepIndex];\n          // get step index\n          stepIndex = prevStepIndex + ADPCM_INDEX_TABLE_4[sample];\n          bitPos += 4;\n        }\n        // clamp step index and diff\n        stepIndex = Math.max(0, Math.min(stepIndex, 79));\n        diff = Math.max(-2048, Math.min(diff, 2048));\n        // add result to output buffer\n        output[outputOffset] = (diff * 16);\n        outputOffset += 1;\n        // set prev decoder state\n        prevStepIndex = stepIndex;\n        prevDiff = diff;\n      }\n\n    }\n    return output.slice(0, outputOffset);\n  }\n\n}","import player from \"./player\";\nimport parser from \"./parser\";\nimport ppmParser from \"./parser/ppm\";\nimport kwzParser from \"./parser/kwz\";\n\nconst module = {\n  version: VERSION,\n  player,\n  parser,\n  ppmParser,\n  kwzParser,\n};\n\nexport {\n  module as default,\n  parser,\n  ppmParser,\n  kwzParser\n}\n\n","import canvas from \"webgl/canvas\";\nimport parser from \"parser\";\nimport loader from \"loader\";\nimport audioTrack from \"./audio\";\nimport webglCanvas from \"../webgl/canvas\";\n\n/** flipnote player API, based on HTMLMediaElement (https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement) */ \nexport default class flipnotePlayer {\n  /**\n  * Create new flipnote player\n  * @param {string | HTMLCanvasElement} el - HTML Canvas Element to use, or CSS selector for one\n  * @param {number} width - canvas width in pixels\n  * @param {number} height - canvas height in pixels\n  */\n  constructor(el, width, height) {\n    // if `el` is a string, use it to select an Element, else assume it's an element\n    el = (\"string\" == typeof el) ? document.querySelector(el) : el;\n    this.canvas = new canvas(el, width, height);\n    this._imgCanvas = new canvas(document.createElement(\"canvas\"), width, height, {\n      antialias: true,\n      preserveDrawingBuffer: true,\n    });\n    this._isOpen = false;\n    this._events = {};\n    this.loop = false;\n    this.currentFrame = 0;\n    this.paused = true;\n    this.customPalette = null;\n    this.audioTracks = [\n      new audioTrack(\"se1\"),\n      new audioTrack(\"se2\"),\n      new audioTrack(\"se3\"),\n      new audioTrack(\"se4\"),\n      new audioTrack(\"bgm\"),\n    ];\n    this.smoothRendering = false;\n  }\n\n  /**\n  * Get the index of the current frame \n  */\n  get currentFrame() {\n    return this._frame;\n  }\n\n  /**\n  * Set the current frame\n  */\n  set currentFrame(index) {\n    this.setFrame(index);\n  }\n\n  /**\n  * Get current playback time in seconds\n  */\n  get currentTime() {\n    return this._isOpen ? this.currentFrame * (1 / this.framerate) : null;\n  }\n\n  /**\n  * Set current playback time in seconds\n  */\n  set currentTime(value) {\n    if ((this._isOpen) && (value < this.duration) && (value > 0)) {\n      this.setFrame(Math.round(value / (1 / this.framerate)));\n    }\n  }\n\n  /**\n  * Get audio volume\n  */\n  get volume() {\n    return this.audioTracks[3].audio.volume;\n  }\n\n  /**\n  * Set audio volume\n  */\n  set volume(value) {\n    for (let i = 0; i < this.audioTracks.length; i++) {\n      this.audioTracks[i].audio.volume = value;\n    }\n  }\n\n  /**\n  * Get audio mute\n  */\n  get muted() {\n    return this.audioTracks[3].audio.muted;\n  }\n\n  /**\n  * Set audio mute\n  */\n  set muted(value) {\n    for (let i = 0; i < this.audioTracks.length; i++) {\n      this.audioTracks[i].audio.muted = value;\n    }\n  }\n\n  /**\n  * Get the duration of the Flipnote in seconds\n  */\n  get duration() {\n    return this._isOpen ? this.frameCount * (1 / this.framerate) : null;\n  }\n\n  /**\n  * Get the Flipnote framerate in frames-per-second\n  */\n  get framerate() {\n    return this.note.framerate;\n  }\n\n  /**\n  * Get the audio playback rate by comparing audio and frame speeds\n  * @access protected\n  */\n  get _audiorate() {\n    return (1 / this.note.bgmrate) / (1 / this.note.framerate);\n  }\n\n  /**\n  * Load a Flipnote into the player\n  * @param {ArrayBuffer} buffer - ppm data\n  * @access protected\n  */\n  _load(buffer) {\n    var note = new parser(buffer);\n    this.note = note;\n    this.meta = note.meta;\n    this.type = note.type;\n    this.frameCount = note.frameCount;\n    this.frameSpeed = note.frameSpeed;\n    this.fileLength = note.byteLength;\n    this.loop = note.meta.loop == 1;\n    this.paused = true;\n    this._isOpen = true;\n    this.audioTracks.forEach(track => {\n      track.sampleRate = note.sampleRate;\n    });\n    if (this.customPalette) {\n      this.setPalette(this.customPalette);\n    }\n    if (this.note.hasAudioTrack(1)) this.audioTracks[0].set(this.note.decodeAudio(\"se1\"), 1);\n    if (this.note.hasAudioTrack(2)) this.audioTracks[1].set(this.note.decodeAudio(\"se2\"), 1);\n    if (this.note.hasAudioTrack(3)) this.audioTracks[2].set(this.note.decodeAudio(\"se3\"), 1);\n    if (this.type === \"KWZ\" && this.note.hasAudioTrack(4)) this.audioTracks[3].set(this.note.decodeAudio(\"se4\"), 1);\n    if (this.note.hasAudioTrack(0)) this.audioTracks[4].set(this.note.decodeAudio(\"bgm\"), this._audiorate);\n    this._seFlags = this.note.decodeSoundFlags();\n    this._playbackLoop = null;\n    this._hasPlaybackStarted = false;\n    this.layerVisiblity = {\n      1: true,\n      2: true,\n      3: true\n    };\n    this.setMode(this.type);\n    this.setFrame(this.note.thumbFrameIndex);\n    this.emit(\"load\");\n  }\n\n  /**\n  * Load a Flipnote into the player\n  * @param {String} source - ppm url\n  */\n  open(source) {\n    if (this._isOpen) this.close();\n    return loader(source)\n      .then((buffer) => {\n        this._load(buffer);\n      })\n      .catch((err) => {\n        console.error(\"Error loading Flipnote:\", err);\n      });\n  }\n\n  /**\n  * Close the currently loaded Flipnote and clear the player canvas\n  */\n  close() {\n    this.pause();\n    this.note = null;\n    this._isOpen = false;\n    this.paused = true;\n    this.loop = null;\n    this.meta = null;\n    this.frameCount = null;\n    this.frameSpeed = null;\n    this._frame = 0;\n    for (let i = 0; i < this.audioTracks.length; i++) {\n      this.audioTracks[i].unset();\n    }\n    this._seFlags = null;\n    this._hasPlaybackStarted = null;\n    this.canvas.clear();\n    this._imgCanvas.clear();\n  }\n\n  /**\n  * Destroy this player instance cleanly\n  */\n  destroy() {\n    this.close();\n    this.canvas.destroy();\n    this._imgCanvas.destroy();\n  }\n\n  /**\n  * Play the sound effects for a given frame\n  * @param {number} index - zero-based frame index\n  * @access protected\n  */\n  _playFrameSe(index) {\n    var flags = this._seFlags[index];\n    for (let i = 0; i < flags.length; i++) {\n      if (flags[i] && this.audioTracks[i].active) this.audioTracks[i].start();\n    }\n  }\n\n  /**\n  * Play the Flipnote BGM\n  * @access protected\n  */\n  _playBgm() {\n    this.audioTracks[4].start(this.currentTime);\n  }\n\n  /**\n  * Stop all audio tracks\n  * @access protected\n  */\n  _stopAudio() {\n    for (let i = 0; i < this.audioTracks.length; i++) {\n      this.audioTracks[i].stop();\n    }\n  }\n\n  /**\n  * Begin Flipnote playback\n  */\n  play() {\n    if ((!this._isOpen) || (!this.paused)) return null;\n    this.paused = false;\n    if ((!this._hasPlaybackStarted) || ((!this.loop) && (this.currentFrame == this.frameCount - 1))) this._frame = 0;\n    this._playBgm();\n    this._playbackLoop = setInterval(() => {\n      if (this.paused) clearInterval(this._playbackLoop);\n      // if the end of the flipnote has been reached\n      if (this.currentFrame >= this.frameCount -1) {\n        this._stopAudio();\n        if (this.loop) {\n          this.firstFrame();\n          this._playBgm(0);\n          this.emit(\"playback:loop\");\n        } else {\n          this.pause();\n          this.emit(\"playback:end\");\n        }\n      } else {\n        this._playFrameSe(this.currentFrame);\n        this.nextFrame();\n      }\n    }, 1000 / this.framerate);\n    this._hasPlaybackStarted = true;\n    this.emit(\"playback:start\");\n  }\n\n  /**\n  * Pause Flipnote playback\n  */\n  pause() {\n    if ((!this._isOpen) || (this.paused)) return null;\n    // break the playback loop\n    clearInterval(this._playbackLoop);\n    this.paused = true;\n    this._stopAudio();\n    this.emit(\"playback:stop\");\n  }\n\n  /**\n  * Get a specific frame as an image data URL\n  * @param {number|string} index - zero-based frame index, or pass \"thumb\" to get the thumbnail frame\n  * @param {string} type - image MIME type, default is image/png\n  * @param {number} encoderOptions - number between 0 and 1 indicating image quality if type is image/jpeg or image/webp\n  */\n  getFrameImage(index, width, height, type, encoderOptions) {\n    if (!this._isOpen) return null;\n    var canvas = this._imgCanvas;\n    if (canvas.width !== width || canvas.height !== height) canvas.resize(width, height);\n    // clamp frame index\n    index = (index == \"thumb\") ? (this.note.thumbFrameIndex) : (Math.max(0, Math.min(index, this.frameCount - 1)));\n    this.drawFrame(index, canvas);\n    return canvas.toImage(type, encoderOptions);\n  }\n\n  setPalette(palette) {\n    this.customPalette = palette;\n    this.note.palette = palette;\n    this.forceUpdate();\n  }\n\n  /**\n  * Jump to a specific frame\n  * @param {number} index - zero-based frame index\n  */\n  setFrame(index) {\n    if ((!this._isOpen) || (index === this.currentFrame)) return null;\n    // clamp frame index\n    index = Math.max(0, Math.min(Math.floor(index), this.frameCount - 1));\n    this._frame = index;\n    this._playbackFrameTime = 0;\n    this.drawFrame(index, this.canvas);\n    this.emit(\"frame:update\", this.currentFrame);\n  }\n\n  /**\n  * Draw a frame to a given canvas\n  * @param {number} index - zero-based frame index\n  * @param {webglCanvas} canvas - webgl frame canvas\n  */\n  drawFrame(frameIndex, canvas) {\n    let colors = this.note.getFramePalette(frameIndex);\n    let layerBuffers = this.note.decodeFrame(frameIndex);\n    canvas.setPaperColor(colors[0]);\n    canvas.clear();\n    if (this.note.type == \"PPM\") {\n      if (this.layerVisiblity[2]) canvas.drawLayer(layerBuffers[1], 256, 192, colors[2], [0,0,0,0]);\n      if (this.layerVisiblity[1]) canvas.drawLayer(layerBuffers[0], 256, 192, colors[1], [0,0,0,0]);\n    } else if (this.note.type == \"KWZ\") {\n      if (this.layerVisiblity[3]) canvas.drawLayer(layerBuffers[2], 320, 240, colors[5], colors[6]);\n      if (this.layerVisiblity[2]) canvas.drawLayer(layerBuffers[1], 320, 240, colors[3], colors[4]);\n      if (this.layerVisiblity[1]) canvas.drawLayer(layerBuffers[0], 320, 240, colors[1], colors[2]);\n    }\n  }\n\n  /**\n  * Jump to the thumbnail frame\n  */\n  thumbnailFrame() {\n    this.currentFrame = this.note.thumbFrameIndex;\n  }\n\n  /**\n  * Jump to the next frame in the animation\n  */\n  nextFrame() {\n    if ((this.loop) && (this.currentFrame >= this.frameCount -1)) {\n      this.currentFrame = 0;\n    } else {\n      this.currentFrame += 1;\n    }\n  }\n\n  /**\n  * Jump to the previous frame in the animation\n  */\n  prevFrame() {\n    if ((this.loop) && (this.currentFrame <= 0)) {\n      this.currentFrame = this.frameCount - 1;\n    } else {\n      this.currentFrame -= 1;\n    }\n  }\n\n  /**\n  * Jump to the last frame in the animation\n  */\n  lastFrame() {\n    this.currentFrame = this.frameCount - 1;\n  }\n\n  /**\n  * Jump to the first frame in the animation\n  */\n  firstFrame() {\n    this.currentFrame = 0;\n  }\n\n  /**\n  * Resize player canvas\n  * @param {number} width - canvas width in pixels\n  * @param {number} height - canvas height in pixels\n  */\n  resize(width, height) {\n    this.canvas.resize(width, height);\n    this.forceUpdate();\n  }\n\n  /**\n  * Set layer visibility\n  * @param {number} index - layer number = 1, 2, 3\n  * @param {boolean} value\n  */\n  setLayerVisibility(index, value) {\n    this.layerVisiblity[index] = value;\n    this.forceUpdate();\n  }\n\n  /**\n  * Set smooth rendering\n  * @param {boolean} value\n  */\n  setSmoothRendering(value) {\n    var filter = value ? \"linear\" : \"nearest\";\n    this.canvas.setFilter(filter);\n    this.forceUpdate();\n    this.smoothRendering = value;\n  }\n\n  /**\n  * Set the mode depending on format\n  * @param {string} mode - \"KWZ\" | \"PPM\"\n  */\n  setMode(mode) {\n    this.canvas.setMode(mode);\n    this._imgCanvas.setMode(mode);\n  }\n\n  /**\n  * Force the player to redraw\n  */\n  forceUpdate() {\n    if (this._isOpen) {\n      this.drawFrame(this.currentFrame, this.canvas);\n    }\n  }\n\n  /**\n  * Register an event callback\n  * @param {string} eventType - event type\n  * @param {function} callback - event callback function\n  */\n  on(eventType, callback) {\n    var events = this._events;\n    (events[eventType] || (events[eventType] = [])).push(callback);\n  }\n\n  /**\n  * Remove an event callback\n  * @param {string} eventType - event type\n  * @param {function} callback - event callback function\n  */\n  off(eventType, callback) {\n    var callbackList = this._events[eventType];\n    if (callbackList) callbackList.splice(callbackList.indexOf(callback), 1);\n  }\n\n  /**\n  * Emit an event (used internally)\n  * @param {string} eventType - event type\n  * @param {...} args - arguments to be passed to event callback\n  */\n  emit(eventType, ...args) {\n    var callbackList = this._events[eventType] || [];\n    for (var i = 0; i < callbackList.length; i++) {\n      callbackList[i].apply(null, args); \n    }\n  }\n\n}","module.exports = \"#define GLSLIFY 1\\nattribute vec4 a_position;\\nvarying vec2 v_texcoord;\\nvoid main() {\\n  gl_Position = a_position;\\n  v_texcoord = a_position.xy * vec2(0.5, -0.5) + 0.5;\\n}\"","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\nvarying vec2 v_texcoord;\\nuniform vec4 u_color1;\\nuniform vec4 u_color2;\\nuniform sampler2D u_bitmap;\\nuniform bool u_isSmooth;\\nvoid main() {\\n  float weightColor1 = texture2D(u_bitmap, v_texcoord).a;\\n  float weightColor2 = texture2D(u_bitmap, v_texcoord).r;\\n  float alpha = 1.0;\\n  if (u_isSmooth) {\\n    weightColor1 = smoothstep(0.0, .9, weightColor1);\\n    weightColor2 = smoothstep(0.0, .9, weightColor2);\\n    float alpha = weightColor1 + weightColor2;\\n  }\\n  gl_FragColor = vec4(u_color1.rgb, alpha) * weightColor1 + vec4(u_color2.rgb, alpha) * weightColor2;\\n}\\n\"","import urlLoader from \"./urlLoader\";\nimport fileLoader from \"./fileLoader\";\nimport arrayBufferLoader from \"./arrayBufferLoader\";\n\nconst loaders = [\n  urlLoader,\n  fileLoader,\n  arrayBufferLoader\n];\n\nexport default function load(source) {\n  return new Promise(function (resolve, reject) {\n    for (var i = 0; i < loaders.length; i++) {\n      var loader = loaders[i];\n      if (loader.matches(source)) {\n        loader.load(source, resolve, reject);\n        break;\n      }\n    }\n  });\n}","export default {\n\n  matches: function(source) {\n    return typeof source === \"string\";\n  },\n\n  load: function(source, resolve, reject) {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", source, true);\n    xhr.responseType = \"arraybuffer\"; \n    xhr.onreadystatechange = function (e) {\n      if (xhr.readyState === 4) {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          resolve(xhr.response);\n        } else {\n          reject({\n            type: \"httpError\",\n            status: xhr.status,\n            statusText: xhr.statusText\n          });\n        }\n      }\n    };\n    xhr.send(null);\n  }\n\n}","export default {\n\n  matches: function(source) {\n    return (source instanceof File);\n  },\n\n  load: function(source, resolve, reject) {\n    var reader = new FileReader();\n    reader.onload = (event) => {\n      resolve(event.target.result)\n    };\n    reader.onerror = (event) => {\n      reject({type: \"fileReadError\"});\n    };\n    reader.readAsArrayBuffer(source);\n  }\n\n}","export default {\n\n  matches: function(source) {\n    return (source instanceof ArrayBuffer);\n  },\n\n  load: function(source, resolve, reject) {\n    resolve(source);\n  }\n\n}","import wavEncoder from \"encoders/wav\";\n\nexport default class audioTrack {\n  /**\n  * Create a new audio player\n  */\n  constructor (id, type) {\n    this.id = id;\n    this.channelCount = 1;\n    this.bitsPerSample = 16;\n    this.sampleRate = 0;\n    this.playbackRate = 1;\n    this.audio = document.createElement(\"audio\");\n    this.audio.preload = true;\n    this.active = false;\n  }\n  \n  /**\n  * Set the audio track\n  * @param {Int16Array} pcmData - mono-channel 16-bit PCM audio\n  * @param {number} playbackRate - audio playback rate (1 = default)\n  */\n  set(pcmData, playbackRate) {\n    // the HTML5 audio element supports PCM audio if it's in a WAV wrapper\n    let wav = new wavEncoder(this.sampleRate * playbackRate, this.channelCount, this.bitsPerSample);\n    wav.writeFrames(pcmData);\n    this.url = window.URL.createObjectURL(wav.getBlob());\n    // use the blob url for the audio element\n    this.audio.src = this.url;\n    this.active = true;\n    this.playbackRate = playbackRate;\n    this.length = pcmData.length;\n  }\n\n  get duration() {\n    return this.audio.duration;\n  }\n\n  /**\n  * Clear the audio track\n  */\n  unset() {\n    if (this.active) {\n      window.URL.revokeObjectURL(this.url);\n      this.audio.src = \"\";\n      this.audio.load();\n      this.active = false;\n      this.playbackRate = 1;\n      this.length = null;\n    }\n  }\n\n  /**\n  * Start audio playback\n  * @param {number} offset - offset to begin playback at\n  */\n  start(offset) {\n    if (this.active) {\n      this.audio.currentTime = offset || 0;\n      this.audio.play();\n    }\n  }\n\n  /**\n  * Stop audio playback\n  */\n  stop() {\n    if (this.active) {\n      this.audio.pause();\n    }\n  }\n}","import dataStream from \"utils/dataStream\";\n\nexport default class wavEncoder {\n  constructor(sampleRate, channels=1, bitsPerSample=16) {\n    this.sampleRate = sampleRate;\n    this.channels = channels;\n    this.bitsPerSample = bitsPerSample;\n    // Write WAV file header\n    // Reference: http://www.topherlee.com/software/pcm-tut-wavformat.html\n    let headerBuffer = new ArrayBuffer(44);\n    let header = new dataStream(headerBuffer);\n    // \"RIFF\" indent\n    header.writeUtf8(\"RIFF\");\n    // filesize (set later)\n    header.writeUint32(0);\n    // \"WAVE\" indent\n    header.writeUtf8(\"WAVE\");\n    // \"fmt \" section header\n    header.writeUtf8(\"fmt \");\n    // fmt section length\n    header.writeUint32(16);\n    // specify audio format is pcm (type 1)\n    header.writeUint16(1);\n    // number of audio channels\n    header.writeUint16(this.channels);\n    // audio sample rate\n    header.writeUint32(this.sampleRate);\n    // byterate = (sampleRate * bitsPerSample * channelCount) / 8\n    header.writeUint32((this.sampleRate * this.bitsPerSample * this.channels) / 8);\n    // blockalign = (bitsPerSample * channels) / 8\n    header.writeUint16((this.bitsPerSample * this.channels) / 8);\n    // bits per sample\n    header.writeUint16(this.bitsPerSample);\n    // \"data\" section header\n    header.writeUtf8(\"data\");\n    // data section length (set later)\n    header.writeUint32(0);\n    this.header = header;\n    this.pcmData = null;\n  }\n\n  writeFrames(pcmData) {\n    let header = this.header;\n    // fill in filesize\n    header.seek(4);\n    header.writeUint32(header.byteLength + pcmData.byteLength);\n    // fill in data section length\n    header.seek(40);\n    header.writeUint32(pcmData.byteLength);\n    this.pcmData = pcmData;\n  }\n\n  getBlob() {\n    return new Blob([this.header.buffer, this.pcmData.buffer], {type: \"audio/wav\"});\n  }\n}"],"sourceRoot":""}
{"version":3,"file":"flipnote.min.js.map","sources":["../src/utils/ByteArray.ts","../src/utils/DataStream.ts","../src/utils/audio.ts","../src/utils/assert.ts","../src/utils/env.ts","../src/utils/rsa.ts","../src/utils/datetime.ts","../src/utils/fsid.ts","../src/parsers/FlipnoteParserBase.ts","../src/utils/saveData.ts","../src/parsers/PpmParser.ts","../src/parsers/KwzParser.ts","../src/loaders/webUrlLoader.ts","../src/loaders/index.ts","../src/loaders/nodeUrlLoader.ts","../src/loaders/fileLoader.ts","../src/loaders/blobLoader.ts","../src/loaders/nodeBufferLoader.ts","../src/loaders/arrayBufferLoader.ts","../src/player/PlayerEvent.ts","../src/player/playerUtils.ts","../src/renderers/CanvasInterface.ts","../node_modules/twgl.js/dist/4.x/twgl-full.module.js","../src/renderers/WebGlCanvas.ts","../src/renderers/Html5Canvas.ts","../src/renderers/UniversalCanvas.ts","../src/webaudio/WebAudioPlayer.ts","../src/player/Player.ts","../src/utils/promises.ts","../src/encoders/EncoderBase.ts","../src/encoders/LwzCompressor.ts","../src/encoders/GifImage.ts","../src/encoders/WavAudio.ts","../src/components/PlayerMixin.ts","../src/parseSource.ts","../src/flipnote.ts"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/* @license twgl.js 4.24.0 Copyright (c) 2015, Gregg Tavares All Rights Reserved.\nAvailable via the MIT license.\nsee: http://github.com/greggman/twgl.js for details */\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n *\n * Vec3 math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new Vec3. In other words you can do this\n *\n *     var v = v3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.\n *\n * or\n *\n *     var v = v3.create();\n *     v3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any vector as the destination. So for example\n *\n *     v3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n * @module twgl/v3\n */\n\nlet VecType = Float32Array;\n\n/**\n * A JavaScript array with 3 values or a Float32Array with 3 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/v3.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Vec3\n * @memberOf module:twgl/v3\n */\n\n/**\n * Sets the type this library creates for a Vec3\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Vec3\n * @memberOf module:twgl/v3\n */\nfunction setDefaultType(ctor) {\n  const oldType = VecType;\n  VecType = ctor;\n  return oldType;\n}\n\n/**\n * Creates a vec3; may be called with x, y, z to set initial values.\n * @param {number} [x] Initial x value.\n * @param {number} [y] Initial y value.\n * @param {number} [z] Initial z value.\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\nfunction create(x, y, z) {\n  const dst = new VecType(3);\n  if (x) {\n    dst[0] = x;\n  }\n  if (y) {\n    dst[1] = y;\n  }\n  if (z) {\n    dst[2] = z;\n  }\n  return dst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector tha tis the sum of a and b.\n * @memberOf module:twgl/v3\n */\nfunction add(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + b[0];\n  dst[1] = a[1] + b[1];\n  dst[2] = a[2] + b[2];\n\n  return dst;\n}\n\n/**\n * Subtracts two vectors.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector that is the difference of a and b.\n * @memberOf module:twgl/v3\n */\nfunction subtract(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] - b[0];\n  dst[1] = a[1] - b[1];\n  dst[2] = a[2] - b[2];\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {number} t Interpolation coefficient.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The linear interpolated result.\n * @memberOf module:twgl/v3\n */\nfunction lerp(a, b, t, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t * (b[0] - a[0]);\n  dst[1] = a[1] + t * (b[1] - a[1]);\n  dst[2] = a[2] + t * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} t Interpolation coefficients vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} the linear interpolated result.\n * @memberOf module:twgl/v3\n */\nfunction lerpV(a, b, t, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t[0] * (b[0] - a[0]);\n  dst[1] = a[1] + t[1] * (b[1] - a[1]);\n  dst[2] = a[2] + t[2] * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The max components vector.\n * @memberOf module:twgl/v3\n */\nfunction max(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.max(a[0], b[0]);\n  dst[1] = Math.max(a[1], b[1]);\n  dst[2] = Math.max(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The min components vector.\n * @memberOf module:twgl/v3\n */\nfunction min(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.min(a[0], b[0]);\n  dst[1] = Math.min(a[1], b[1]);\n  dst[2] = Math.min(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\nfunction mulScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] * k;\n  dst[1] = v[1] * k;\n  dst[2] = v[2] * k;\n\n  return dst;\n}\n\n/**\n * Divides a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\nfunction divScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] / k;\n  dst[1] = v[1] / k;\n  dst[2] = v[2] / k;\n\n  return dst;\n}\n\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of a cross b.\n * @memberOf module:twgl/v3\n */\nfunction cross(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  const t1 = a[2] * b[0] - a[0] * b[2];\n  const t2 = a[0] * b[1] - a[1] * b[0];\n  dst[0] = a[1] * b[2] - a[2] * b[1];\n  dst[1] = t1;\n  dst[2] = t2;\n\n  return dst;\n}\n\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @return {number} dot product\n * @memberOf module:twgl/v3\n */\nfunction dot(a, b) {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n}\n\n/**\n * Computes the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} length of vector.\n * @memberOf module:twgl/v3\n */\nfunction length$1(v) {\n  return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n}\n\n/**\n * Computes the square of the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} square of the length of vector.\n * @memberOf module:twgl/v3\n */\nfunction lengthSq(v) {\n  return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\n}\n\n/**\n * Computes the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} distance between a and b\n * @memberOf module:twgl/v3\n */\nfunction distance(a, b) {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n\n/**\n * Computes the square of the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} square of the distance between a and b\n * @memberOf module:twgl/v3\n */\nfunction distanceSq(a, b) {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return dx * dx + dy * dy + dz * dz;\n}\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param {module:twgl/v3.Vec3} a The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The normalized vector.\n * @memberOf module:twgl/v3\n */\nfunction normalize(a, dst) {\n  dst = dst || new VecType(3);\n\n  const lenSq = a[0] * a[0] + a[1] * a[1] + a[2] * a[2];\n  const len = Math.sqrt(lenSq);\n  if (len > 0.00001) {\n    dst[0] = a[0] / len;\n    dst[1] = a[1] / len;\n    dst[2] = a[2] / len;\n  } else {\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n  }\n\n  return dst;\n}\n\n/**\n * Negates a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} -v.\n * @memberOf module:twgl/v3\n */\nfunction negate(v, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = -v[0];\n  dst[1] = -v[1];\n  dst[2] = -v[2];\n\n  return dst;\n}\n\n/**\n * Copies a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A copy of v.\n * @memberOf module:twgl/v3\n */\nfunction copy(v, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0];\n  dst[1] = v[1];\n  dst[2] = v[2];\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of products of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\nfunction multiply(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] * b[0];\n  dst[1] = a[1] * b[1];\n  dst[2] = a[2] * b[2];\n\n  return dst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of quotients of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\nfunction divide(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] / b[0];\n  dst[1] = a[1] / b[1];\n  dst[2] = a[2] / b[2];\n\n  return dst;\n}\n\nvar v3 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  add: add,\n  copy: copy,\n  create: create,\n  cross: cross,\n  distance: distance,\n  distanceSq: distanceSq,\n  divide: divide,\n  divScalar: divScalar,\n  dot: dot,\n  lerp: lerp,\n  lerpV: lerpV,\n  length: length$1,\n  lengthSq: lengthSq,\n  max: max,\n  min: min,\n  mulScalar: mulScalar,\n  multiply: multiply,\n  negate: negate,\n  normalize: normalize,\n  setDefaultType: setDefaultType,\n  subtract: subtract\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * 4x4 Matrix math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = m4.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = m4.create();\n *     m4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = m4.identity();\n *     const trans = m4.translation([1, 2, 3]);\n *     m4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n * @module twgl/m4\n */\nlet MatType = Float32Array;\n\n/**\n * A JavaScript array with 16 values or a Float32Array with 16 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/m4.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Mat4\n * @memberOf module:twgl/m4\n */\n\n/**\n * Sets the type this library creates for a Mat4\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Mat4\n * @memberOf module:twgl/m4\n */\nfunction setDefaultType$1(ctor) {\n  const oldType = MatType;\n  MatType = ctor;\n  return oldType;\n}\n\n/**\n * Negates a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} -m.\n * @memberOf module:twgl/m4\n */\nfunction negate$1(m, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = -m[ 0];\n  dst[ 1] = -m[ 1];\n  dst[ 2] = -m[ 2];\n  dst[ 3] = -m[ 3];\n  dst[ 4] = -m[ 4];\n  dst[ 5] = -m[ 5];\n  dst[ 6] = -m[ 6];\n  dst[ 7] = -m[ 7];\n  dst[ 8] = -m[ 8];\n  dst[ 9] = -m[ 9];\n  dst[10] = -m[10];\n  dst[11] = -m[11];\n  dst[12] = -m[12];\n  dst[13] = -m[13];\n  dst[14] = -m[14];\n  dst[15] = -m[15];\n\n  return dst;\n}\n\n/**\n * Creates a matrix.\n * @return {module:twgl/m4.Mat4} A new matrix.\n * @memberOf module:twgl/m4\n */\nfunction create$1() {\n  return new MatType(16).fill(0);\n}\n\n/**\n * Copies a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] The matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A copy of m.\n * @memberOf module:twgl/m4\n */\nfunction copy$1(m, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = m[ 0];\n  dst[ 1] = m[ 1];\n  dst[ 2] = m[ 2];\n  dst[ 3] = m[ 3];\n  dst[ 4] = m[ 4];\n  dst[ 5] = m[ 5];\n  dst[ 6] = m[ 6];\n  dst[ 7] = m[ 7];\n  dst[ 8] = m[ 8];\n  dst[ 9] = m[ 9];\n  dst[10] = m[10];\n  dst[11] = m[11];\n  dst[12] = m[12];\n  dst[13] = m[13];\n  dst[14] = m[14];\n  dst[15] = m[15];\n\n  return dst;\n}\n\n/**\n * Creates an n-by-n identity matrix.\n *\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} An n-by-n identity matrix.\n * @memberOf module:twgl/m4\n */\nfunction identity(dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Takes the transpose of a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The transpose of m.\n * @memberOf module:twgl/m4\n */\n function transpose(m, dst) {\n  dst = dst || new MatType(16);\n  if (dst === m) {\n    let t;\n\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n\n    t = m[3];\n    m[3] = m[12];\n    m[12] = t;\n\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n\n    t = m[7];\n    m[7] = m[13];\n    m[13] = t;\n\n    t = m[11];\n    m[11] = m[14];\n    m[14] = t;\n    return dst;\n  }\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  dst[ 0] = m00;\n  dst[ 1] = m10;\n  dst[ 2] = m20;\n  dst[ 3] = m30;\n  dst[ 4] = m01;\n  dst[ 5] = m11;\n  dst[ 6] = m21;\n  dst[ 7] = m31;\n  dst[ 8] = m02;\n  dst[ 9] = m12;\n  dst[10] = m22;\n  dst[11] = m32;\n  dst[12] = m03;\n  dst[13] = m13;\n  dst[14] = m23;\n  dst[15] = m33;\n\n  return dst;\n}\n\n/**\n * Computes the inverse of a 4-by-4 matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The inverse of m.\n * @memberOf module:twgl/m4\n */\nfunction inverse(m, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n  const tmp_0  = m22 * m33;\n  const tmp_1  = m32 * m23;\n  const tmp_2  = m12 * m33;\n  const tmp_3  = m32 * m13;\n  const tmp_4  = m12 * m23;\n  const tmp_5  = m22 * m13;\n  const tmp_6  = m02 * m33;\n  const tmp_7  = m32 * m03;\n  const tmp_8  = m02 * m23;\n  const tmp_9  = m22 * m03;\n  const tmp_10 = m02 * m13;\n  const tmp_11 = m12 * m03;\n  const tmp_12 = m20 * m31;\n  const tmp_13 = m30 * m21;\n  const tmp_14 = m10 * m31;\n  const tmp_15 = m30 * m11;\n  const tmp_16 = m10 * m21;\n  const tmp_17 = m20 * m11;\n  const tmp_18 = m00 * m31;\n  const tmp_19 = m30 * m01;\n  const tmp_20 = m00 * m21;\n  const tmp_21 = m20 * m01;\n  const tmp_22 = m00 * m11;\n  const tmp_23 = m10 * m01;\n\n  const t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\n      (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n  const t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\n      (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n  const t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\n      (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n  const t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\n      (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n\n  const d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n\n  dst[ 0] = d * t0;\n  dst[ 1] = d * t1;\n  dst[ 2] = d * t2;\n  dst[ 3] = d * t3;\n  dst[ 4] = d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -\n          (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\n  dst[ 5] = d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -\n          (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\n  dst[ 6] = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\n          (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\n  dst[ 7] = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\n          (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\n  dst[ 8] = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\n          (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\n  dst[ 9] = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\n          (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\n  dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\n          (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\n  dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\n          (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\n  dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\n          (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\n  dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\n          (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\n  dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\n          (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\n  dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\n          (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\n\n  return dst;\n}\n\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right\n * @param {module:twgl/m4.Mat4} a The matrix on the left.\n * @param {module:twgl/m4.Mat4} b The matrix on the right.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix product of a and b.\n * @memberOf module:twgl/m4\n */\nfunction multiply$1(a, b, dst) {\n  dst = dst || new MatType(16);\n\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[ 4 + 0];\n  const a11 = a[ 4 + 1];\n  const a12 = a[ 4 + 2];\n  const a13 = a[ 4 + 3];\n  const a20 = a[ 8 + 0];\n  const a21 = a[ 8 + 1];\n  const a22 = a[ 8 + 2];\n  const a23 = a[ 8 + 3];\n  const a30 = a[12 + 0];\n  const a31 = a[12 + 1];\n  const a32 = a[12 + 2];\n  const a33 = a[12 + 3];\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b03 = b[3];\n  const b10 = b[ 4 + 0];\n  const b11 = b[ 4 + 1];\n  const b12 = b[ 4 + 2];\n  const b13 = b[ 4 + 3];\n  const b20 = b[ 8 + 0];\n  const b21 = b[ 8 + 1];\n  const b22 = b[ 8 + 2];\n  const b23 = b[ 8 + 3];\n  const b30 = b[12 + 0];\n  const b31 = b[12 + 1];\n  const b32 = b[12 + 2];\n  const b33 = b[12 + 3];\n\n  dst[ 0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n  dst[ 1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n  dst[ 2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n  dst[ 3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n  dst[ 4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n  dst[ 5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n  dst[ 6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n  dst[ 7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n  dst[ 8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n  dst[ 9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n  dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n  dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n  dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n  dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n  dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n  dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n\n  return dst;\n}\n\n/**\n * Sets the translation component of a 4-by-4 matrix to the given\n * vector.\n * @param {module:twgl/m4.Mat4} a The matrix.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with translation set.\n * @memberOf module:twgl/m4\n */\nfunction setTranslation(a, v, dst) {\n  dst = dst || identity();\n  if (a !== dst) {\n    dst[ 0] = a[ 0];\n    dst[ 1] = a[ 1];\n    dst[ 2] = a[ 2];\n    dst[ 3] = a[ 3];\n    dst[ 4] = a[ 4];\n    dst[ 5] = a[ 5];\n    dst[ 6] = a[ 6];\n    dst[ 7] = a[ 7];\n    dst[ 8] = a[ 8];\n    dst[ 9] = a[ 9];\n    dst[10] = a[10];\n    dst[11] = a[11];\n  }\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The translation component of m.\n * @memberOf module:twgl/m4\n */\nfunction getTranslation(m, dst) {\n  dst = dst || create();\n  dst[0] = m[12];\n  dst[1] = m[13];\n  dst[2] = m[14];\n  return dst;\n}\n\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} axis The axis 0 = x, 1 = y, 2 = z;\n * @return {module:twgl/v3.Vec3} [dst] vector.\n * @return {module:twgl/v3.Vec3} The axis component of m.\n * @memberOf module:twgl/m4\n */\nfunction getAxis(m, axis, dst) {\n  dst = dst || create();\n  const off = axis * 4;\n  dst[0] = m[off + 0];\n  dst[1] = m[off + 1];\n  dst[2] = m[off + 2];\n  return dst;\n}\n\n/**\n * Sets an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v the axis vector\n * @param {number} axis The axis  0 = x, 1 = y, 2 = z;\n * @param {module:twgl/m4.Mat4} [dst] The matrix to set. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with axis set.\n * @memberOf module:twgl/m4\n */\nfunction setAxis(a, v, axis, dst) {\n  if (dst !== a) {\n    dst = copy$1(a, dst);\n  }\n  const off = axis * 4;\n  dst[off + 0] = v[0];\n  dst[off + 1] = v[1];\n  dst[off + 2] = v[2];\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 0 to 1 in the z dimension.\n * @param {number} fieldOfViewYInRadians The camera angle from top to bottom (in radians).\n * @param {number} aspect The aspect ratio width / height.\n * @param {number} zNear The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} zFar The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\nfunction perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n  dst = dst || new MatType(16);\n\n  const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n  const rangeInv = 1.0 / (zNear - zFar);\n\n  dst[0]  = f / aspect;\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = f;\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = (zNear + zFar) * rangeInv;\n  dst[11] = -1;\n\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = zNear * zFar * rangeInv * 2;\n  dst[15] = 0;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 orthogonal transformation matrix given the left, right,\n * bottom, and top dimensions of the near clipping plane as well as the\n * near and far clipping plane distances.\n * @param {number} left Left side of the near clipping plane viewport.\n * @param {number} right Right side of the near clipping plane viewport.\n * @param {number} bottom Bottom of the near clipping plane viewport.\n * @param {number} top Top of the near clipping plane viewport.\n * @param {number} near The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} far The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\nfunction ortho(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  dst[0]  = 2 / (right - left);\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = 2 / (top - bottom);\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = 2 / (near - far);\n  dst[11] = 0;\n\n  dst[12] = (right + left) / (left - right);\n  dst[13] = (top + bottom) / (bottom - top);\n  dst[14] = (far + near) / (near - far);\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n * dimension.\n * @param {number} left The x coordinate of the left plane of the box.\n * @param {number} right The x coordinate of the right plane of the box.\n * @param {number} bottom The y coordinate of the bottom plane of the box.\n * @param {number} top The y coordinate of the right plane of the box.\n * @param {number} near The negative z coordinate of the near plane of the box.\n * @param {number} far The negative z coordinate of the far plane of the box.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective projection matrix.\n * @memberOf module:twgl/m4\n */\nfunction frustum(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  const dx = (right - left);\n  const dy = (top - bottom);\n  const dz = (near - far);\n\n  dst[ 0] = 2 * near / dx;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 2 * near / dy;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = (left + right) / dx;\n  dst[ 9] = (top + bottom) / dy;\n  dst[10] = far / dz;\n  dst[11] = -1;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = near * far / dz;\n  dst[15] = 0;\n\n  return dst;\n}\n\nlet xAxis;\nlet yAxis;\nlet zAxis;\n\n/**\n * Computes a 4-by-4 look-at transformation.\n *\n * This is a matrix which positions the camera itself. If you want\n * a view matrix (a matrix which moves things in front of the camera)\n * take the inverse of this.\n *\n * @param {module:twgl/v3.Vec3} eye The position of the eye.\n * @param {module:twgl/v3.Vec3} target The position meant to be viewed.\n * @param {module:twgl/v3.Vec3} up A vector pointing up.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The look-at matrix.\n * @memberOf module:twgl/m4\n */\nfunction lookAt(eye, target, up, dst) {\n  dst = dst || new MatType(16);\n\n  xAxis = xAxis || create();\n  yAxis = yAxis || create();\n  zAxis = zAxis || create();\n\n  normalize(\n      subtract(eye, target, zAxis), zAxis);\n  normalize(cross(up, zAxis, xAxis), xAxis);\n  normalize(cross(zAxis, xAxis, yAxis), yAxis);\n\n  dst[ 0] = xAxis[0];\n  dst[ 1] = xAxis[1];\n  dst[ 2] = xAxis[2];\n  dst[ 3] = 0;\n  dst[ 4] = yAxis[0];\n  dst[ 5] = yAxis[1];\n  dst[ 6] = yAxis[2];\n  dst[ 7] = 0;\n  dst[ 8] = zAxis[0];\n  dst[ 9] = zAxis[1];\n  dst[10] = zAxis[2];\n  dst[11] = 0;\n  dst[12] = eye[0];\n  dst[13] = eye[1];\n  dst[14] = eye[2];\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which translates by the given vector v.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translation matrix.\n * @memberOf module:twgl/m4\n */\nfunction translation(v, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Translates the given 4-by-4 matrix by the given vector v.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translated matrix.\n * @memberOf module:twgl/m4\n */\nfunction translate(m, v, dst) {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  if (m !== dst) {\n    dst[ 0] = m00;\n    dst[ 1] = m01;\n    dst[ 2] = m02;\n    dst[ 3] = m03;\n    dst[ 4] = m10;\n    dst[ 5] = m11;\n    dst[ 6] = m12;\n    dst[ 7] = m13;\n    dst[ 8] = m20;\n    dst[ 9] = m21;\n    dst[10] = m22;\n    dst[11] = m23;\n  }\n\n  dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n  dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n  dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n  dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationX(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = c;\n  dst[ 6] = s;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = -s;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the x-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateX(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[4]  = c * m10 + s * m20;\n  dst[5]  = c * m11 + s * m21;\n  dst[6]  = c * m12 + s * m22;\n  dst[7]  = c * m13 + s * m23;\n  dst[8]  = c * m20 - s * m10;\n  dst[9]  = c * m21 - s * m11;\n  dst[10] = c * m22 - s * m12;\n  dst[11] = c * m23 - s * m13;\n\n  if (m !== dst) {\n    dst[ 0] = m[ 0];\n    dst[ 1] = m[ 1];\n    dst[ 2] = m[ 2];\n    dst[ 3] = m[ 3];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationY(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;\n  dst[ 1] = 0;\n  dst[ 2] = -s;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = s;\n  dst[ 9] = 0;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the y-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateY(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 - s * m20;\n  dst[ 1] = c * m01 - s * m21;\n  dst[ 2] = c * m02 - s * m22;\n  dst[ 3] = c * m03 - s * m23;\n  dst[ 8] = c * m20 + s * m00;\n  dst[ 9] = c * m21 + s * m01;\n  dst[10] = c * m22 + s * m02;\n  dst[11] = c * m23 + s * m03;\n\n  if (m !== dst) {\n    dst[ 4] = m[ 4];\n    dst[ 5] = m[ 5];\n    dst[ 6] = m[ 6];\n    dst[ 7] = m[ 7];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationZ(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;\n  dst[ 1] = s;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = -s;\n  dst[ 5] = c;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the z-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateZ(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 + s * m10;\n  dst[ 1] = c * m01 + s * m11;\n  dst[ 2] = c * m02 + s * m12;\n  dst[ 3] = c * m03 + s * m13;\n  dst[ 4] = c * m10 - s * m00;\n  dst[ 5] = c * m11 - s * m01;\n  dst[ 6] = c * m12 - s * m02;\n  dst[ 7] = c * m13 - s * m03;\n\n  if (m !== dst) {\n    dst[ 8] = m[ 8];\n    dst[ 9] = m[ 9];\n    dst[10] = m[10];\n    dst[11] = m[11];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A matrix which rotates angle radians\n *     around the axis.\n * @memberOf module:twgl/m4\n */\nfunction axisRotation(axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  dst[ 0] = xx + (1 - xx) * c;\n  dst[ 1] = x * y * oneMinusCosine + z * s;\n  dst[ 2] = x * z * oneMinusCosine - y * s;\n  dst[ 3] = 0;\n  dst[ 4] = x * y * oneMinusCosine - z * s;\n  dst[ 5] = yy + (1 - yy) * c;\n  dst[ 6] = y * z * oneMinusCosine + x * s;\n  dst[ 7] = 0;\n  dst[ 8] = x * z * oneMinusCosine + y * s;\n  dst[ 9] = y * z * oneMinusCosine - x * s;\n  dst[10] = zz + (1 - zz) * c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction axisRotate(m, axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  const r00 = xx + (1 - xx) * c;\n  const r01 = x * y * oneMinusCosine + z * s;\n  const r02 = x * z * oneMinusCosine - y * s;\n  const r10 = x * y * oneMinusCosine - z * s;\n  const r11 = yy + (1 - yy) * c;\n  const r12 = y * z * oneMinusCosine + x * s;\n  const r20 = x * z * oneMinusCosine + y * s;\n  const r21 = y * z * oneMinusCosine - x * s;\n  const r22 = zz + (1 - zz) * c;\n\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n\n  dst[ 0] = r00 * m00 + r01 * m10 + r02 * m20;\n  dst[ 1] = r00 * m01 + r01 * m11 + r02 * m21;\n  dst[ 2] = r00 * m02 + r01 * m12 + r02 * m22;\n  dst[ 3] = r00 * m03 + r01 * m13 + r02 * m23;\n  dst[ 4] = r10 * m00 + r11 * m10 + r12 * m20;\n  dst[ 5] = r10 * m01 + r11 * m11 + r12 * m21;\n  dst[ 6] = r10 * m02 + r11 * m12 + r12 * m22;\n  dst[ 7] = r10 * m03 + r11 * m13 + r12 * m23;\n  dst[ 8] = r20 * m00 + r21 * m10 + r22 * m20;\n  dst[ 9] = r20 * m01 + r21 * m11 + r22 * m21;\n  dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n  dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param {module:twgl/v3.Vec3} v A vector of\n *     three entries specifying the factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaling matrix.\n * @memberOf module:twgl/m4\n */\nfunction scaling(v, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = v[0];\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = v[1];\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = v[2];\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Scales the given 4-by-4 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param {module:twgl/m4.Mat4} m The matrix to be modified.\n * @param {module:twgl/v3.Vec3} v A vector of three entries specifying the\n *     factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaled matrix.\n * @memberOf module:twgl/m4\n */\nfunction scale(m, v, dst) {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[ 0] = v0 * m[0 * 4 + 0];\n  dst[ 1] = v0 * m[0 * 4 + 1];\n  dst[ 2] = v0 * m[0 * 4 + 2];\n  dst[ 3] = v0 * m[0 * 4 + 3];\n  dst[ 4] = v1 * m[1 * 4 + 0];\n  dst[ 5] = v1 * m[1 * 4 + 1];\n  dst[ 6] = v1 * m[1 * 4 + 2];\n  dst[ 7] = v1 * m[1 * 4 + 3];\n  dst[ 8] = v2 * m[2 * 4 + 0];\n  dst[ 9] = v2 * m[2 * 4 + 1];\n  dst[10] = v2 * m[2 * 4 + 2];\n  dst[11] = v2 * m[2 * 4 + 3];\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries,\n * interprets the vector as a point, transforms that point by the matrix, and\n * returns the result as a vector with 3 entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The point.\n * @param {module:twgl/v3.Vec3} [dst] optional vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed point.\n * @memberOf module:twgl/m4\n */\nfunction transformPoint(m, v, dst) {\n  dst = dst || create();\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];\n\n  dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;\n  dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;\n  dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a\n * direction, transforms that direction by the matrix, and returns the result;\n * assumes the transformation of 3-dimensional space represented by the matrix\n * is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion. Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The direction.\n * @param {module:twgl/v3.Vec3} [dst] optional Vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed direction.\n * @memberOf module:twgl/m4\n */\nfunction transformDirection(m, v, dst) {\n  dst = dst || create();\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n  dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n  dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector\n * as a normal to a surface, and computes a vector which is normal upon\n * transforming that surface by the matrix. The effect of this function is the\n * same as transforming v (as a direction) by the inverse-transpose of m.  This\n * function assumes the transformation of 3-dimensional space represented by the\n * matrix is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion.  Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The normal.\n * @param {module:twgl/v3.Vec3} [dst] The direction. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed normal.\n * @memberOf module:twgl/m4\n */\nfunction transformNormal(m, v, dst) {\n  dst = dst || create();\n  const mi = inverse(m);\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n  return dst;\n}\n\nvar m4 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  axisRotate: axisRotate,\n  axisRotation: axisRotation,\n  copy: copy$1,\n  create: create$1,\n  frustum: frustum,\n  getAxis: getAxis,\n  getTranslation: getTranslation,\n  identity: identity,\n  inverse: inverse,\n  lookAt: lookAt,\n  multiply: multiply$1,\n  negate: negate$1,\n  ortho: ortho,\n  perspective: perspective,\n  rotateX: rotateX,\n  rotateY: rotateY,\n  rotateZ: rotateZ,\n  rotationX: rotationX,\n  rotationY: rotationY,\n  rotationZ: rotationZ,\n  scale: scale,\n  scaling: scaling,\n  setAxis: setAxis,\n  setDefaultType: setDefaultType$1,\n  setTranslation: setTranslation,\n  transformDirection: transformDirection,\n  transformNormal: transformNormal,\n  transformPoint: transformPoint,\n  translate: translate,\n  translation: translation,\n  transpose: transpose\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* DataType */\nconst BYTE                           = 0x1400;\nconst UNSIGNED_BYTE                  = 0x1401;\nconst SHORT                          = 0x1402;\nconst UNSIGNED_SHORT                 = 0x1403;\nconst INT                            = 0x1404;\nconst UNSIGNED_INT                   = 0x1405;\nconst FLOAT                          = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5         = 0x8363;\nconst HALF_FLOAT                   = 0x140B;\nconst UNSIGNED_INT_2_10_10_10_REV  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nconst UNSIGNED_INT_24_8            = 0x84FA;\n\nconst glTypeToTypedArray = {};\n{\n  const tt = glTypeToTypedArray;\n  tt[BYTE]                           = Int8Array;\n  tt[UNSIGNED_BYTE]                  = Uint8Array;\n  tt[SHORT]                          = Int16Array;\n  tt[UNSIGNED_SHORT]                 = Uint16Array;\n  tt[INT]                            = Int32Array;\n  tt[UNSIGNED_INT]                   = Uint32Array;\n  tt[FLOAT]                          = Float32Array;\n  tt[UNSIGNED_SHORT_4_4_4_4]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_5_5_1]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_6_5]           = Uint16Array;\n  tt[HALF_FLOAT]                     = Uint16Array;\n  tt[UNSIGNED_INT_2_10_10_10_REV]    = Uint32Array;\n  tt[UNSIGNED_INT_10F_11F_11F_REV]   = Uint32Array;\n  tt[UNSIGNED_INT_5_9_9_9_REV]       = Uint32Array;\n  tt[FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array;\n  tt[UNSIGNED_INT_24_8]              = Uint32Array;\n}\n\n/**\n * Get the GL type for a typedArray\n * @param {ArrayBufferView} typedArray a typedArray\n * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)         { return BYTE; }           // eslint-disable-line\n  if (typedArray instanceof Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArray instanceof Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArray instanceof Int16Array)        { return SHORT; }          // eslint-disable-line\n  if (typedArray instanceof Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line\n  if (typedArray instanceof Int32Array)        { return INT; }            // eslint-disable-line\n  if (typedArray instanceof Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line\n  if (typedArray instanceof Float32Array)      { return FLOAT; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the GL type for a typedArray type\n * @param {ArrayBufferView} typedArrayType a typedArray constructor\n * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)         { return BYTE; }           // eslint-disable-line\n  if (typedArrayType === Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArrayType === Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArrayType === Int16Array)        { return SHORT; }          // eslint-disable-line\n  if (typedArrayType === Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line\n  if (typedArrayType === Int32Array)        { return INT; }            // eslint-disable-line\n  if (typedArrayType === Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line\n  if (typedArrayType === Float32Array)      { return FLOAT; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the typed array constructor for a given GL type\n * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)\n * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).\n * @memberOf module:twgl/typedArray\n */\nfunction getTypedArrayTypeForGLType(type) {\n  const CTOR = glTypeToTypedArray[type];\n  if (!CTOR) {\n    throw new Error('unknown gl type');\n  }\n  return CTOR;\n}\n\nconst isArrayBuffer = typeof SharedArrayBuffer !== 'undefined'\n  ? function isArrayBufferOrSharedArrayBuffer(a) {\n    return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);\n  }\n  : function isArrayBuffer(a) {\n    return a && a.buffer && a.buffer instanceof ArrayBuffer;\n  };\n\nvar typedarrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getGLTypeForTypedArray: getGLTypeForTypedArray,\n  getGLTypeForTypedArrayType: getGLTypeForTypedArrayType,\n  getTypedArrayTypeForGLType: getTypedArrayTypeForGLType,\n  isArrayBuffer: isArrayBuffer\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint no-console: \"off\" */\n\n/**\n * Copy named properties\n *\n * @param {string[]} names names of properties to copy\n * @param {object} src object to copy properties from\n * @param {object} dst object to copy properties to\n * @private\n */\nfunction copyNamedProperties(names, src, dst) {\n  names.forEach(function(name) {\n    const value = src[name];\n    if (value !== undefined) {\n      dst[name] = value;\n    }\n  });\n}\n\n/**\n * Copies properties from source to dest only if a matching key is in dest\n *\n * @param {Object.<string, ?>} src the source\n * @param {Object.<string, ?>} dst the dest\n * @private\n */\nfunction copyExistingProperties(src, dst) {\n  Object.keys(dst).forEach(function(key) {\n    if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {  /* eslint no-prototype-builtins: 0 */\n      dst[key] = src[key];\n    }\n  });\n}\n\nfunction error(...args) {\n  console.error(...args);\n}\n\nfunction warn(...args) {\n  console.warn(...args);\n}\n\nfunction isBuffer(gl, t) {\n  return typeof WebGLBuffer !== 'undefined' && t instanceof WebGLBuffer;\n}\n\nfunction isRenderbuffer(gl, t) {\n  return typeof WebGLRenderbuffer !== 'undefined' && t instanceof WebGLRenderbuffer;\n}\n\nfunction isShader(gl, t) {\n  return typeof WebGLShader !== 'undefined' && t instanceof WebGLShader;\n}\n\nfunction isTexture(gl, t) {\n  return typeof WebGLTexture !== 'undefined' && t instanceof WebGLTexture;\n}\n\nfunction isSampler(gl, t) {\n  return typeof WebGLSampler !== 'undefined' && t instanceof WebGLSampler;\n}\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst STATIC_DRAW                  = 0x88e4;\nconst ARRAY_BUFFER                 = 0x8892;\nconst ELEMENT_ARRAY_BUFFER         = 0x8893;\nconst BUFFER_SIZE                  = 0x8764;\n\nconst BYTE$1                         = 0x1400;\nconst UNSIGNED_BYTE$1                = 0x1401;\nconst SHORT$1                        = 0x1402;\nconst UNSIGNED_SHORT$1               = 0x1403;\nconst INT$1                          = 0x1404;\nconst UNSIGNED_INT$1                 = 0x1405;\nconst FLOAT$1                        = 0x1406;\nconst defaults = {\n  attribPrefix: \"\",\n};\n\n/**\n * Sets the default attrib prefix\n *\n * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n * as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n * In other words I'll create arrays of geometry like this\n *\n *     var arrays = {\n *       position: ...\n *       normal: ...\n *       texcoord: ...\n *     };\n *\n * But need those mapped to attributes and my attributes start with `a_`.\n *\n * @deprecated see {@link module:twgl.setDefaults}\n * @param {string} prefix prefix for attribs\n * @memberOf module:twgl/attributes\n */\nfunction setAttributePrefix(prefix) {\n  defaults.attribPrefix = prefix;\n}\n\nfunction setDefaults(newDefaults) {\n  copyExistingProperties(newDefaults, defaults);\n}\n\nfunction setBufferFromTypedArray(gl, type, buffer, array, drawType) {\n  gl.bindBuffer(type, buffer);\n  gl.bufferData(type, array, drawType || STATIC_DRAW);\n}\n\n/**\n * Given typed array creates a WebGLBuffer and copies the typed array\n * into it.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken\n * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.\n * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.\n * @return {WebGLBuffer} the created WebGLBuffer\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromTypedArray(gl, typedArray, type, drawType) {\n  if (isBuffer(gl, typedArray)) {\n    return typedArray;\n  }\n  type = type || ARRAY_BUFFER;\n  const buffer = gl.createBuffer();\n  setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);\n  return buffer;\n}\n\nfunction isIndices(name) {\n  return name === \"indices\";\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArray instanceof Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArrayType === Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\nfunction getArray(array) {\n  return array.length ? array : array.data;\n}\n\nconst texcoordRE = /coord|texture/i;\nconst colorRE = /color|colour/i;\n\nfunction guessNumComponentsFromName(name, length) {\n  let numComponents;\n  if (texcoordRE.test(name)) {\n    numComponents = 2;\n  } else if (colorRE.test(name)) {\n    numComponents = 4;\n  } else {\n    numComponents = 3;  // position, normals, indices ...\n  }\n\n  if (length % numComponents > 0) {\n    throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);\n  }\n\n  return numComponents;\n}\n\nfunction getNumComponents(array, arrayName) {\n  return array.numComponents || array.size || guessNumComponentsFromName(arrayName, getArray(array).length);\n}\n\nfunction makeTypedArray(array, name) {\n  if (isArrayBuffer(array)) {\n    return array;\n  }\n\n  if (isArrayBuffer(array.data)) {\n    return array.data;\n  }\n\n  if (Array.isArray(array)) {\n    array = {\n      data: array,\n    };\n  }\n\n  let Type = array.type;\n  if (!Type) {\n    if (isIndices(name)) {\n      Type = Uint16Array;\n    } else {\n      Type = Float32Array;\n    }\n  }\n  return new Type(array.data);\n}\n\n/**\n * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer\n * for the attribute.\n *\n * @typedef {Object} AttribInfo\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {number} [numComponents] the number of components for this attribute.\n * @property {number} [size] synonym for `numComponents`.\n * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n * @property {boolean} [normalize] whether or not to normalize the data. Default = false\n * @property {number} [offset] offset into buffer in bytes. Default = 0\n * @property {number} [stride] the stride in bytes per element. Default = 0\n * @property {number} [divisor] the divisor in instances. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor\n *    where as anything else = do call it with this value\n * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * Use this type of array spec when TWGL can't guess the type or number of components of an array\n * @typedef {Object} FullArraySpec\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {(number|number[]|ArrayBufferView)} data The data of the array. A number alone becomes the number of elements of type.\n * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.\n *    If `coord` is in the name assumes `numComponents = 2`.\n *    If `color` is in the name assumes `numComponents = 4`.\n *    otherwise assumes `numComponents = 3`\n * @property {constructor} [type] type. This is only used if `data` is a JavaScript array. It is the constructor for the typedarray. (eg. `Uint8Array`).\n * For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: Uint8Array, data: [255,0,255,255, ...], }`.\n * @property {number} [size] synonym for `numComponents`.\n * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.\n * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0\n * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0\n * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor\n *    where as anything else = do call it with this value\n * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.\n * @property {string} [name] synonym for `attrib`.\n * @property {string} [attribName] synonym for `attrib`.\n * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer\n *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`\n *    to provide this. Example:\n *\n *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {\n *           position: [1, 2, 3, ... ],\n *         });\n *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {\n *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1\n *         });\n *\n * @memberOf module:twgl\n */\n\n/**\n * An individual array in {@link module:twgl.Arrays}\n *\n * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`\n * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will\n * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.\n *\n * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec\n * @memberOf module:twgl\n */\n\n/**\n * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your\n * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * Objects with various fields. See {@link module:twgl.FullArraySpec}.\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays\n * @memberOf module:twgl\n */\n\n\n/**\n * Creates a set of attribute data and WebGLBuffers from set of arrays\n *\n * Given\n *\n *      var arrays = {\n *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *      };\n *\n * returns something like\n *\n *      var attribs = {\n *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n *      };\n *\n * notes:\n *\n * *   Arrays can take various forms\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * @param {WebGLRenderingContext} gl The webgl rendering context.\n * @param {module:twgl.Arrays} arrays The arrays\n * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from\n *   This lets you share buffers. Any arrays you supply will override\n *   the buffers from srcBufferInfo.\n * @return {Object.<string, module:twgl.AttribInfo>} the attribs\n * @memberOf module:twgl/attributes\n */\nfunction createAttribsFromArrays(gl, arrays) {\n  const attribs = {};\n  Object.keys(arrays).forEach(function(arrayName) {\n    if (!isIndices(arrayName)) {\n      const array = arrays[arrayName];\n      const attribName = array.attrib || array.name || array.attribName || (defaults.attribPrefix + arrayName);\n      if (array.value) {\n        if (!Array.isArray(array.value) && !isArrayBuffer(array.value)) {\n          throw new Error('array.value is not array or typedarray');\n        }\n        attribs[attribName] = {\n          value: array.value,\n        };\n      } else {\n        let buffer;\n        let type;\n        let normalization;\n        let numComponents;\n        if (array.buffer && array.buffer instanceof WebGLBuffer) {\n          buffer = array.buffer;\n          numComponents = array.numComponents || array.size;\n          type = array.type;\n          normalization = array.normalize;\n        } else if (typeof array === \"number\" || typeof array.data === \"number\") {\n          const numValues = array.data || array;\n          const arrayType = array.type || Float32Array;\n          const numBytes = numValues * arrayType.BYTES_PER_ELEMENT;\n          type = getGLTypeForTypedArrayType(arrayType);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);\n          numComponents = array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues);\n          buffer = gl.createBuffer();\n          gl.bindBuffer(ARRAY_BUFFER, buffer);\n          gl.bufferData(ARRAY_BUFFER, numBytes, array.drawType || STATIC_DRAW);\n        } else {\n          const typedArray = makeTypedArray(array, arrayName);\n          buffer = createBufferFromTypedArray(gl, typedArray, undefined, array.drawType);\n          type = getGLTypeForTypedArray(typedArray);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArray(typedArray);\n          numComponents = getNumComponents(array, arrayName);\n        }\n        attribs[attribName] = {\n          buffer:        buffer,\n          numComponents: numComponents,\n          type:          type,\n          normalize:     normalization,\n          stride:        array.stride || 0,\n          offset:        array.offset || 0,\n          divisor:       array.divisor === undefined ? undefined : array.divisor,\n          drawType:      array.drawType,\n        };\n      }\n    }\n  });\n  gl.bindBuffer(ARRAY_BUFFER, null);\n  return attribs;\n}\n\n/**\n * Sets the contents of a buffer attached to an attribInfo\n *\n * This is helper function to dynamically update a buffer.\n *\n * Let's say you make a bufferInfo\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n *\n *  And you want to dynamically update the positions. You could do this\n *\n *     // assuming arrays.position has already been updated with new data.\n *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);\n *\n * @param {WebGLRenderingContext} gl\n * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix\n *   the name of the attribute will include the prefix.\n * @param {ArraySpec} array Note: it is arguably inefficient to pass in anything but a typed array because anything\n *    else will have to be converted to a typed array before it can be used by WebGL. During init time that\n *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.\n * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer\n *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`\n *    for the portion of the array you want to use.\n *\n *        var someArray = new Float32Array(1000); // an array with 1000 floats\n *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray\n *\n *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`\n * @memberOf module:twgl/attributes\n */\nfunction setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {\n  array = makeTypedArray(array);\n  if (offset !== undefined) {\n    gl.bindBuffer(ARRAY_BUFFER, attribInfo.buffer);\n    gl.bufferSubData(ARRAY_BUFFER, offset, array);\n  } else {\n    setBufferFromTypedArray(gl, ARRAY_BUFFER, attribInfo.buffer, array, attribInfo.drawType);\n  }\n}\n\nfunction getBytesPerValueForGLType(gl, type) {\n  if (type === BYTE$1)           return 1;  // eslint-disable-line\n  if (type === UNSIGNED_BYTE$1)  return 1;  // eslint-disable-line\n  if (type === SHORT$1)          return 2;  // eslint-disable-line\n  if (type === UNSIGNED_SHORT$1) return 2;  // eslint-disable-line\n  if (type === INT$1)            return 4;  // eslint-disable-line\n  if (type === UNSIGNED_INT$1)   return 4;  // eslint-disable-line\n  if (type === FLOAT$1)          return 4;  // eslint-disable-line\n  return 0;\n}\n\n// Tries to get the number of elements from a set of arrays.\nconst positionKeys = ['position', 'positions', 'a_position'];\nfunction getNumElementsFromNonIndexedArrays(arrays) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in arrays) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(arrays)[0];\n  }\n  const array = arrays[key];\n  const length = getArray(array).length;\n  if (length === undefined) {\n    return 1;   // There's no arrays\n  }\n  const numComponents = getNumComponents(array, key);\n  const numElements = length / numComponents;\n  if (length % numComponents > 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\nfunction getNumElementsFromAttributes(gl, attribs) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in attribs) {\n      break;\n    }\n    key = defaults.attribPrefix + key;\n    if (key in attribs) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(attribs)[0];\n  }\n  const attrib = attribs[key];\n  if (!attrib.buffer) {\n    return 1; // There's no buffer\n  }\n  gl.bindBuffer(ARRAY_BUFFER, attrib.buffer);\n  const numBytes = gl.getBufferParameter(ARRAY_BUFFER, BUFFER_SIZE);\n  gl.bindBuffer(ARRAY_BUFFER, null);\n\n  const bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);\n  const totalElements = numBytes / bytesPerValue;\n  const numComponents = attrib.numComponents || attrib.size;\n  // TODO: check stride\n  const numElements = totalElements / numComponents;\n  if (numElements % 1 !== 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\n/**\n * @typedef {Object} BufferInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs appropriate to call `setAttributes`\n * @memberOf module:twgl\n */\n\n/**\n * Creates a BufferInfo from an object of arrays.\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * Given an object like\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n *  Creates an BufferInfo like this\n *\n *     bufferInfo = {\n *       numElements: 4,        // or whatever the number of elements is\n *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n *       attribs: {\n *         position: { buffer: WebGLBuffer, numComponents: 3, },\n *         normal:   { buffer: WebGLBuffer, numComponents: 3, },\n *         texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n *       },\n *     };\n *\n *  The properties of arrays can be JavaScript arrays in which case the number of components\n *  will be guessed.\n *\n *     var arrays = {\n *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n *        indices:  [0, 1, 2, 1, 2, 3],\n *     };\n *\n *  They can also be TypedArrays\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *\n *  Or AugmentedTypedArrays\n *\n *     var positions = createAugmentedTypedArray(3, 4);\n *     var texcoords = createAugmentedTypedArray(2, 4);\n *     var normals   = createAugmentedTypedArray(3, 4);\n *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n *\n *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n *     indices.push([0, 1, 2, 1, 2, 3]);\n *\n *     var arrays = {\n *        position: positions,\n *        texcoord: texcoords,\n *        normal:   normals,\n *        indices:  indices,\n *     };\n *\n * For the last example it is equivalent to\n *\n *     var bufferInfo = {\n *       attribs: {\n *         position: { numComponents: 3, buffer: gl.createBuffer(), },\n *         texcoord: { numComponents: 2, buffer: gl.createBuffer(), },\n *         normal: { numComponents: 3, buffer: gl.createBuffer(), },\n *       },\n *       indices: gl.createBuffer(),\n *       numElements: 6,\n *     };\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.position.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.texcoord.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.normal.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.Arrays} arrays Your data\n * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing\n *        buffer info to start from. WebGLBuffers etc specified\n *        in the srcBufferInfo will be used in a new BufferInfo\n *        with any arrays specified overriding the ones in\n *        srcBufferInfo.\n * @return {module:twgl.BufferInfo} A BufferInfo\n * @memberOf module:twgl/attributes\n */\nfunction createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {\n  const newAttribs = createAttribsFromArrays(gl, arrays);\n  const bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});\n  bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);\n  const indices = arrays.indices;\n  if (indices) {\n    const newIndices = makeTypedArray(indices, \"indices\");\n    bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, ELEMENT_ARRAY_BUFFER);\n    bufferInfo.numElements = newIndices.length;\n    bufferInfo.elementType = getGLTypeForTypedArray(newIndices);\n  } else if (!bufferInfo.numElements) {\n    bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);\n  }\n\n  return bufferInfo;\n}\n\n/**\n * Creates a buffer from an array, typed array, or array spec\n *\n * Given something like this\n *\n *     [1, 2, 3],\n *\n * or\n *\n *     new Uint16Array([1,2,3]);\n *\n * or\n *\n *     {\n *        data: [1, 2, 3],\n *        type: Uint8Array,\n *     }\n *\n * returns a WebGLBuffer that contains the given data.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.\n * @param {string} arrayName name of array. Used to guess the type if type can not be derived otherwise.\n * @return {WebGLBuffer} a WebGLBuffer containing the data in array.\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromArray(gl, array, arrayName) {\n  const type = arrayName === \"indices\" ? ELEMENT_ARRAY_BUFFER : ARRAY_BUFFER;\n  const typedArray = makeTypedArray(array, arrayName);\n  return createBufferFromTypedArray(gl, typedArray, type);\n}\n\n/**\n * Creates buffers from arrays or typed arrays\n *\n * Given something like this\n *\n *     var arrays = {\n *        positions: [1, 2, 3],\n *        normals: [0, 0, 1],\n *     }\n *\n * returns something like\n *\n *     buffers = {\n *       positions: WebGLBuffer,\n *       normals: WebGLBuffer,\n *     }\n *\n * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.Arrays} arrays\n * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n * @memberOf module:twgl/attributes\n */\nfunction createBuffersFromArrays(gl, arrays) {\n  const buffers = { };\n  Object.keys(arrays).forEach(function(key) {\n    buffers[key] = createBufferFromArray(gl, arrays[key], key);\n  });\n\n  // Ugh!\n  if (arrays.indices) {\n    buffers.numElements = arrays.indices.length;\n    buffers.elementType = getGLTypeForTypedArray(makeTypedArray(arrays.indices));\n  } else {\n    buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);\n  }\n\n  return buffers;\n}\n\nvar attributes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttribsFromArrays: createAttribsFromArrays,\n  createBuffersFromArrays: createBuffersFromArrays,\n  createBufferFromArray: createBufferFromArray,\n  createBufferFromTypedArray: createBufferFromTypedArray,\n  createBufferInfoFromArrays: createBufferInfoFromArrays,\n  setAttribInfoBufferFromArray: setAttribInfoBufferFromArray,\n  setAttributePrefix: setAttributePrefix,\n  setAttributeDefaults_: setDefaults,\n  getNumComponents_: getNumComponents,\n  getArray_: getArray\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst getArray$1 = getArray;  // eslint-disable-line\nconst getNumComponents$1 = getNumComponents;  // eslint-disable-line\n\n/**\n * @typedef {(Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array)} TypedArray\n */\n\n/**\n * Add `push` to a typed array. It just keeps a 'cursor'\n * and allows use to `push` values into the array so we\n * don't have to manually compute offsets\n * @param {TypedArray} typedArray TypedArray to augment\n * @param {number} numComponents number of components.\n * @private\n */\nfunction augmentTypedArray(typedArray, numComponents) {\n  let cursor = 0;\n  typedArray.push = function() {\n    for (let ii = 0; ii < arguments.length; ++ii) {\n      const value = arguments[ii];\n      if (value instanceof Array || isArrayBuffer(value)) {\n        for (let jj = 0; jj < value.length; ++jj) {\n          typedArray[cursor++] = value[jj];\n        }\n      } else {\n        typedArray[cursor++] = value;\n      }\n    }\n  };\n  typedArray.reset = function(opt_index) {\n    cursor = opt_index || 0;\n  };\n  typedArray.numComponents = numComponents;\n  Object.defineProperty(typedArray, 'numElements', {\n    get: function() {\n      return this.length / this.numComponents | 0;\n    },\n  });\n  return typedArray;\n}\n\n/**\n * creates a typed array with a `push` function attached\n * so that you can easily *push* values.\n *\n * `push` can take multiple arguments. If an argument is an array each element\n * of the array will be added to the typed array.\n *\n * Example:\n *\n *     const array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values\n *     array.push(1, 2, 3);\n *     array.push([4, 5, 6]);\n *     // array now contains [1, 2, 3, 4, 5, 6]\n *\n * Also has `numComponents` and `numElements` properties.\n *\n * @param {number} numComponents number of components\n * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.\n * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.\n * @return {ArrayBufferView} A typed array.\n * @memberOf module:twgl/primitives\n */\nfunction createAugmentedTypedArray(numComponents, numElements, opt_type) {\n  const Type = opt_type || Float32Array;\n  return augmentTypedArray(new Type(numComponents * numElements), numComponents);\n}\n\nfunction allButIndices(name) {\n  return name !== \"indices\";\n}\n\n/**\n * Given indexed vertices creates a new set of vertices un-indexed by expanding the indexed vertices.\n * @param {Object.<string, TypedArray>} vertices The indexed vertices to deindex\n * @return {Object.<string, TypedArray>} The deindexed vertices\n * @memberOf module:twgl/primitives\n */\nfunction deindexVertices(vertices) {\n  const indices = vertices.indices;\n  const newVertices = {};\n  const numElements = indices.length;\n\n  function expandToUnindexed(channel) {\n    const srcBuffer = vertices[channel];\n    const numComponents = srcBuffer.numComponents;\n    const dstBuffer = createAugmentedTypedArray(numComponents, numElements, srcBuffer.constructor);\n    for (let ii = 0; ii < numElements; ++ii) {\n      const ndx = indices[ii];\n      const offset = ndx * numComponents;\n      for (let jj = 0; jj < numComponents; ++jj) {\n        dstBuffer.push(srcBuffer[offset + jj]);\n      }\n    }\n    newVertices[channel] = dstBuffer;\n  }\n\n  Object.keys(vertices).filter(allButIndices).forEach(expandToUnindexed);\n\n  return newVertices;\n}\n\n/**\n * flattens the normals of deindexed vertices in place.\n * @param {Object.<string, TypedArray>} vertices The deindexed vertices who's normals to flatten\n * @return {Object.<string, TypedArray>} The flattened vertices (same as was passed in)\n * @memberOf module:twgl/primitives\n */\nfunction flattenNormals(vertices) {\n  if (vertices.indices) {\n    throw new Error('can not flatten normals of indexed vertices. deindex them first');\n  }\n\n  const normals = vertices.normal;\n  const numNormals = normals.length;\n  for (let ii = 0; ii < numNormals; ii += 9) {\n    // pull out the 3 normals for this triangle\n    const nax = normals[ii + 0];\n    const nay = normals[ii + 1];\n    const naz = normals[ii + 2];\n\n    const nbx = normals[ii + 3];\n    const nby = normals[ii + 4];\n    const nbz = normals[ii + 5];\n\n    const ncx = normals[ii + 6];\n    const ncy = normals[ii + 7];\n    const ncz = normals[ii + 8];\n\n    // add them\n    let nx = nax + nbx + ncx;\n    let ny = nay + nby + ncy;\n    let nz = naz + nbz + ncz;\n\n    // normalize them\n    const length = Math.sqrt(nx * nx + ny * ny + nz * nz);\n\n    nx /= length;\n    ny /= length;\n    nz /= length;\n\n    // copy them back in\n    normals[ii + 0] = nx;\n    normals[ii + 1] = ny;\n    normals[ii + 2] = nz;\n\n    normals[ii + 3] = nx;\n    normals[ii + 4] = ny;\n    normals[ii + 5] = nz;\n\n    normals[ii + 6] = nx;\n    normals[ii + 7] = ny;\n    normals[ii + 8] = nz;\n  }\n\n  return vertices;\n}\n\nfunction applyFuncToV3Array(array, matrix, fn) {\n  const len = array.length;\n  const tmp = new Float32Array(3);\n  for (let ii = 0; ii < len; ii += 3) {\n    fn(matrix, [array[ii], array[ii + 1], array[ii + 2]], tmp);\n    array[ii    ] = tmp[0];\n    array[ii + 1] = tmp[1];\n    array[ii + 2] = tmp[2];\n  }\n}\n\nfunction transformNormal$1(mi, v, dst) {\n  dst = dst || create();\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Reorients directions by the given matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientDirections(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformDirection);\n  return array;\n}\n\n/**\n * Reorients normals by the inverse-transpose of the given\n * matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientNormals(array, matrix) {\n  applyFuncToV3Array(array, inverse(matrix), transformNormal$1);\n  return array;\n}\n\n/**\n * Reorients positions by the given matrix. In other words, it\n * multiplies each vertex by the given matrix.\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientPositions(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformPoint);\n  return array;\n}\n\n/**\n * @typedef {(number[]|TypedArray)} NativeArrayOrTypedArray\n */\n\n/**\n * Reorients arrays by the given matrix. Assumes arrays have\n * names that contains 'pos' could be reoriented as positions,\n * 'binorm' or 'tan' as directions, and 'norm' as normals.\n *\n * @param {Object.<string, NativeArrayOrTypedArray>} arrays The vertices to reorient\n * @param {module:twgl/m4.Mat4} matrix matrix to reorient by.\n * @return {Object.<string, NativeArrayOrTypedArray>} same arrays that were passed in.\n * @memberOf module:twgl/primitives\n */\nfunction reorientVertices(arrays, matrix) {\n  Object.keys(arrays).forEach(function(name) {\n    const array = arrays[name];\n    if (name.indexOf(\"pos\") >= 0) {\n      reorientPositions(array, matrix);\n    } else if (name.indexOf(\"tan\") >= 0 || name.indexOf(\"binorm\") >= 0) {\n      reorientDirections(array, matrix);\n    } else if (name.indexOf(\"norm\") >= 0) {\n      reorientNormals(array, matrix);\n    }\n  });\n  return arrays;\n}\n\n/**\n * Creates XY quad BufferInfo\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, WebGLBuffer>} the created XY Quad BufferInfo\n * @memberOf module:twgl/primitives\n * @function createXYQuadBuffers\n */\n\n/**\n * Creates XY quad Buffers\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {module:twgl.BufferInfo} the created XY Quad buffers\n * @memberOf module:twgl/primitives\n * @function createXYQuadBufferInfo\n */\n\n/**\n * Creates XY quad vertices\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0, 0.5);\n *\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, TypedArray>} the created XY Quad vertices\n * @memberOf module:twgl/primitives\n */\nfunction createXYQuadVertices(size, xOffset, yOffset) {\n  size = size || 2;\n  xOffset = xOffset || 0;\n  yOffset = yOffset || 0;\n  size *= 0.5;\n  return {\n    position: {\n      numComponents: 2,\n      data: [\n        xOffset + -1 * size, yOffset + -1 * size,\n        xOffset +  1 * size, yOffset + -1 * size,\n        xOffset + -1 * size, yOffset +  1 * size,\n        xOffset +  1 * size, yOffset +  1 * size,\n      ],\n    },\n    normal: [\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n    ],\n    texcoord: [\n      0, 0,\n      1, 0,\n      0, 1,\n      1, 1,\n    ],\n    indices: [ 0, 1, 2, 2, 1, 3 ],\n  };\n}\n\n/**\n * Creates XZ plane BufferInfo.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {module:twgl.BufferInfo} The created plane BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createPlaneBufferInfo\n */\n\n/**\n * Creates XZ plane buffers.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, WebGLBuffer>} The created plane buffers.\n * @memberOf module:twgl/primitives\n * @function createPlaneBuffers\n */\n\n/**\n * Creates XZ plane vertices.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, TypedArray>} The created plane vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createPlaneVertices(\n    width,\n    depth,\n    subdivisionsWidth,\n    subdivisionsDepth,\n    matrix) {\n  width = width || 1;\n  depth = depth || 1;\n  subdivisionsWidth = subdivisionsWidth || 1;\n  subdivisionsDepth = subdivisionsDepth || 1;\n  matrix = matrix || identity();\n\n  const numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n\n  for (let z = 0; z <= subdivisionsDepth; z++) {\n    for (let x = 0; x <= subdivisionsWidth; x++) {\n      const u = x / subdivisionsWidth;\n      const v = z / subdivisionsDepth;\n      positions.push(\n          width * u - width * 0.5,\n          0,\n          depth * v - depth * 0.5);\n      normals.push(0, 1, 0);\n      texcoords.push(u, v);\n    }\n  }\n\n  const numVertsAcross = subdivisionsWidth + 1;\n  const indices = createAugmentedTypedArray(\n      3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);\n\n  for (let z = 0; z < subdivisionsDepth; z++) {  // eslint-disable-line\n    for (let x = 0; x < subdivisionsWidth; x++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (z + 0) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x,\n          (z + 0) * numVertsAcross + x + 1);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (z + 1) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x + 1,\n          (z + 0) * numVertsAcross + x + 1);\n    }\n  }\n\n  const arrays = reorientVertices({\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  }, matrix);\n  return arrays;\n}\n\n/**\n * Creates sphere BufferInfo.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {module:twgl.BufferInfo} The created sphere BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createSphereBufferInfo\n */\n\n/**\n * Creates sphere buffers.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, WebGLBuffer>} The created sphere buffers.\n * @memberOf module:twgl/primitives\n * @function createSphereBuffers\n */\n\n/**\n * Creates sphere vertices.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, TypedArray>} The created sphere vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createSphereVertices(\n    radius,\n    subdivisionsAxis,\n    subdivisionsHeight,\n    opt_startLatitudeInRadians,\n    opt_endLatitudeInRadians,\n    opt_startLongitudeInRadians,\n    opt_endLongitudeInRadians) {\n  if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {\n    throw new Error('subdivisionAxis and subdivisionHeight must be > 0');\n  }\n\n  opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;\n  opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;\n  opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;\n  opt_endLongitudeInRadians = opt_endLongitudeInRadians || (Math.PI * 2);\n\n  const latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;\n  const longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians;\n\n  // We are going to generate our sphere by iterating through its\n  // spherical coordinates and generating 2 triangles for each quad on a\n  // ring of the sphere.\n  const numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let y = 0; y <= subdivisionsHeight; y++) {\n    for (let x = 0; x <= subdivisionsAxis; x++) {\n      // Generate a vertex based on its spherical coordinates\n      const u = x / subdivisionsAxis;\n      const v = y / subdivisionsHeight;\n      const theta = longRange * u + opt_startLongitudeInRadians;\n      const phi = latRange * v + opt_startLatitudeInRadians;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const sinPhi = Math.sin(phi);\n      const cosPhi = Math.cos(phi);\n      const ux = cosTheta * sinPhi;\n      const uy = cosPhi;\n      const uz = sinTheta * sinPhi;\n      positions.push(radius * ux, radius * uy, radius * uz);\n      normals.push(ux, uy, uz);\n      texcoords.push(1 - u, v);\n    }\n  }\n\n  const numVertsAround = subdivisionsAxis + 1;\n  const indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);\n  for (let x = 0; x < subdivisionsAxis; x++) {  // eslint-disable-line\n    for (let y = 0; y < subdivisionsHeight; y++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (y + 0) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (y + 1) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x + 1);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Array of the indices of corners of each face of a cube.\n * @type {Array.<number[]>}\n * @private\n */\nconst CUBE_FACE_INDICES = [\n  [3, 7, 5, 1],  // right\n  [6, 2, 0, 4],  // left\n  [6, 7, 3, 2],  // ??\n  [0, 1, 5, 4],  // ??\n  [7, 6, 4, 5],  // front\n  [2, 3, 1, 0],  // back\n];\n\n/**\n * Creates a BufferInfo for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCubeBufferInfo\n */\n\n/**\n * Creates the buffers and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCubeBuffers\n */\n\n/**\n * Creates the vertices and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createCubeVertices(size) {\n  size = size || 1;\n  const k = size / 2;\n\n  const cornerVertices = [\n    [-k, -k, -k],\n    [+k, -k, -k],\n    [-k, +k, -k],\n    [+k, +k, -k],\n    [-k, -k, +k],\n    [+k, -k, +k],\n    [-k, +k, +k],\n    [+k, +k, +k],\n  ];\n\n  const faceNormals = [\n    [+1, +0, +0],\n    [-1, +0, +0],\n    [+0, +1, +0],\n    [+0, -1, +0],\n    [+0, +0, +1],\n    [+0, +0, -1],\n  ];\n\n  const uvCoords = [\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [1, 1],\n  ];\n\n  const numVertices = 6 * 4;\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2 , numVertices);\n  const indices   = createAugmentedTypedArray(3, 6 * 2, Uint16Array);\n\n  for (let f = 0; f < 6; ++f) {\n    const faceIndices = CUBE_FACE_INDICES[f];\n    for (let v = 0; v < 4; ++v) {\n      const position = cornerVertices[faceIndices[v]];\n      const normal = faceNormals[f];\n      const uv = uvCoords[v];\n\n      // Each face needs all four vertices because the normals and texture\n      // coordinates are not all the same.\n      positions.push(position);\n      normals.push(normal);\n      texcoords.push(uv);\n\n    }\n    // Two triangles make a square face.\n    const offset = 4 * f;\n    indices.push(offset + 0, offset + 1, offset + 2);\n    indices.push(offset + 0, offset + 2, offset + 3);\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Creates a BufferInfo for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created cone BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBufferInfo\n */\n\n/**\n * Creates buffers for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, WebGLBuffer>} The created cone buffers.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBuffers\n */\n\n/**\n * Creates vertices for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis. .\n *\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, TypedArray>} The created cone vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createTruncatedConeVertices(\n    bottomRadius,\n    topRadius,\n    height,\n    radialSubdivisions,\n    verticalSubdivisions,\n    opt_topCap,\n    opt_bottomCap) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (verticalSubdivisions < 1) {\n    throw new Error('verticalSubdivisions must be 1 or greater');\n  }\n\n  const topCap = (opt_topCap === undefined) ? true : opt_topCap;\n  const bottomCap = (opt_bottomCap === undefined) ? true : opt_bottomCap;\n\n  const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n\n  const numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n  const indices   = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra / 2) * 2, Uint16Array);\n\n  const vertsAroundEdge = radialSubdivisions + 1;\n\n  // The slant of the cone is constant across its surface\n  const slant = Math.atan2(bottomRadius - topRadius, height);\n  const cosSlant = Math.cos(slant);\n  const sinSlant = Math.sin(slant);\n\n  const start = topCap ? -2 : 0;\n  const end = verticalSubdivisions + (bottomCap ? 2 : 0);\n\n  for (let yy = start; yy <= end; ++yy) {\n    let v = yy / verticalSubdivisions;\n    let y = height * v;\n    let ringRadius;\n    if (yy < 0) {\n      y = 0;\n      v = 1;\n      ringRadius = bottomRadius;\n    } else if (yy > verticalSubdivisions) {\n      y = height;\n      v = 1;\n      ringRadius = topRadius;\n    } else {\n      ringRadius = bottomRadius +\n        (topRadius - bottomRadius) * (yy / verticalSubdivisions);\n    }\n    if (yy === -2 || yy === verticalSubdivisions + 2) {\n      ringRadius = 0;\n      v = 0;\n    }\n    y -= height / 2;\n    for (let ii = 0; ii < vertsAroundEdge; ++ii) {\n      const sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);\n      const cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);\n      positions.push(sin * ringRadius, y, cos * ringRadius);\n      if (yy < 0) {\n        normals.push(0, -1, 0);\n      } else if (yy > verticalSubdivisions) {\n        normals.push(0, 1, 0);\n      } else if (ringRadius === 0.0) {\n        normals.push(0, 0, 0);\n      } else {\n        normals.push(sin * cosSlant, sinSlant, cos * cosSlant);\n      }\n      texcoords.push((ii / radialSubdivisions), 1 - v);\n    }\n  }\n\n  for (let yy = 0; yy < verticalSubdivisions + extra; ++yy) {  // eslint-disable-line\n    if (yy === 1 && topCap || yy === verticalSubdivisions + extra - 2 && bottomCap) {\n      continue;\n    }\n    for (let ii = 0; ii < radialSubdivisions; ++ii) {  // eslint-disable-line\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 0) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii);\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 0 + ii);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Expands RLE data\n * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z\n * @param {number[]} [padding] value to add each entry with.\n * @return {number[]} the expanded rleData\n * @private\n */\nfunction expandRLEData(rleData, padding) {\n  padding = padding || [];\n  const data = [];\n  for (let ii = 0; ii < rleData.length; ii += 4) {\n    const runLength = rleData[ii];\n    const element = rleData.slice(ii + 1, ii + 4);\n    element.push.apply(element, padding);\n    for (let jj = 0; jj < runLength; ++jj) {\n      data.push.apply(data, element);\n    }\n  }\n  return data;\n}\n\n/**\n * Creates 3D 'F' BufferInfo.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function create3DFBufferInfo\n */\n\n/**\n * Creates 3D 'F' buffers.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function create3DFBuffers\n */\n\n/**\n * Creates 3D 'F' vertices.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color arrays.\n *\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction create3DFVertices() {\n\n  const positions = [\n    // left column front\n    0,   0,  0,\n    0, 150,  0,\n    30,   0,  0,\n    0, 150,  0,\n    30, 150,  0,\n    30,   0,  0,\n\n    // top rung front\n    30,   0,  0,\n    30,  30,  0,\n    100,   0,  0,\n    30,  30,  0,\n    100,  30,  0,\n    100,   0,  0,\n\n    // middle rung front\n    30,  60,  0,\n    30,  90,  0,\n    67,  60,  0,\n    30,  90,  0,\n    67,  90,  0,\n    67,  60,  0,\n\n    // left column back\n      0,   0,  30,\n     30,   0,  30,\n      0, 150,  30,\n      0, 150,  30,\n     30,   0,  30,\n     30, 150,  30,\n\n    // top rung back\n     30,   0,  30,\n    100,   0,  30,\n     30,  30,  30,\n     30,  30,  30,\n    100,   0,  30,\n    100,  30,  30,\n\n    // middle rung back\n     30,  60,  30,\n     67,  60,  30,\n     30,  90,  30,\n     30,  90,  30,\n     67,  60,  30,\n     67,  90,  30,\n\n    // top\n      0,   0,   0,\n    100,   0,   0,\n    100,   0,  30,\n      0,   0,   0,\n    100,   0,  30,\n      0,   0,  30,\n\n    // top rung front\n    100,   0,   0,\n    100,  30,   0,\n    100,  30,  30,\n    100,   0,   0,\n    100,  30,  30,\n    100,   0,  30,\n\n    // under top rung\n    30,   30,   0,\n    30,   30,  30,\n    100,  30,  30,\n    30,   30,   0,\n    100,  30,  30,\n    100,  30,   0,\n\n    // between top rung and middle\n    30,   30,   0,\n    30,   60,  30,\n    30,   30,  30,\n    30,   30,   0,\n    30,   60,   0,\n    30,   60,  30,\n\n    // top of middle rung\n    30,   60,   0,\n    67,   60,  30,\n    30,   60,  30,\n    30,   60,   0,\n    67,   60,   0,\n    67,   60,  30,\n\n    // front of middle rung\n    67,   60,   0,\n    67,   90,  30,\n    67,   60,  30,\n    67,   60,   0,\n    67,   90,   0,\n    67,   90,  30,\n\n    // bottom of middle rung.\n    30,   90,   0,\n    30,   90,  30,\n    67,   90,  30,\n    30,   90,   0,\n    67,   90,  30,\n    67,   90,   0,\n\n    // front of bottom\n    30,   90,   0,\n    30,  150,  30,\n    30,   90,  30,\n    30,   90,   0,\n    30,  150,   0,\n    30,  150,  30,\n\n    // bottom\n    0,   150,   0,\n    0,   150,  30,\n    30,  150,  30,\n    0,   150,   0,\n    30,  150,  30,\n    30,  150,   0,\n\n    // left side\n    0,   0,   0,\n    0,   0,  30,\n    0, 150,  30,\n    0,   0,   0,\n    0, 150,  30,\n    0, 150,   0,\n  ];\n\n  const texcoords = [\n    // left column front\n    0.22, 0.19,\n    0.22, 0.79,\n    0.34, 0.19,\n    0.22, 0.79,\n    0.34, 0.79,\n    0.34, 0.19,\n\n    // top rung front\n    0.34, 0.19,\n    0.34, 0.31,\n    0.62, 0.19,\n    0.34, 0.31,\n    0.62, 0.31,\n    0.62, 0.19,\n\n    // middle rung front\n    0.34, 0.43,\n    0.34, 0.55,\n    0.49, 0.43,\n    0.34, 0.55,\n    0.49, 0.55,\n    0.49, 0.43,\n\n    // left column back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // middle rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // top rung front\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // under top rung\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // between top rung and middle\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // top of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // front of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom of middle rung.\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // front of bottom\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // left side\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n  ];\n\n  const normals = expandRLEData([\n    // left column front\n    // top rung front\n    // middle rung front\n    18, 0, 0, 1,\n\n    // left column back\n    // top rung back\n    // middle rung back\n    18, 0, 0, -1,\n\n    // top\n    6, 0, 1, 0,\n\n    // top rung front\n    6, 1, 0, 0,\n\n    // under top rung\n    6, 0, -1, 0,\n\n    // between top rung and middle\n    6, 1, 0, 0,\n\n    // top of middle rung\n    6, 0, 1, 0,\n\n    // front of middle rung\n    6, 1, 0, 0,\n\n    // bottom of middle rung.\n    6, 0, -1, 0,\n\n    // front of bottom\n    6, 1, 0, 0,\n\n    // bottom\n    6, 0, -1, 0,\n\n    // left side\n    6, -1, 0, 0,\n  ]);\n\n  const colors = expandRLEData([\n        // left column front\n        // top rung front\n        // middle rung front\n      18, 200,  70, 120,\n\n        // left column back\n        // top rung back\n        // middle rung back\n      18, 80, 70, 200,\n\n        // top\n      6, 70, 200, 210,\n\n        // top rung front\n      6, 200, 200, 70,\n\n        // under top rung\n      6, 210, 100, 70,\n\n        // between top rung and middle\n      6, 210, 160, 70,\n\n        // top of middle rung\n      6, 70, 180, 210,\n\n        // front of middle rung\n      6, 100, 70, 210,\n\n        // bottom of middle rung.\n      6, 76, 210, 100,\n\n        // front of bottom\n      6, 140, 210, 80,\n\n        // bottom\n      6, 90, 130, 110,\n\n        // left side\n      6, 160, 160, 220,\n  ], [255]);\n\n  const numVerts = positions.length / 3;\n\n  const arrays = {\n    position: createAugmentedTypedArray(3, numVerts),\n    texcoord: createAugmentedTypedArray(2,  numVerts),\n    normal: createAugmentedTypedArray(3, numVerts),\n    color: createAugmentedTypedArray(4, numVerts, Uint8Array),\n    indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array),\n  };\n\n  arrays.position.push(positions);\n  arrays.texcoord.push(texcoords);\n  arrays.normal.push(normals);\n  arrays.color.push(colors);\n\n  for (let ii = 0; ii < numVerts; ++ii) {\n    arrays.indices.push(ii);\n  }\n\n  return arrays;\n}\n\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCresentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCrescentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCrescentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n function createCrescentVertices(\n    verticalRadius,\n    outerRadius,\n    innerRadius,\n    thickness,\n    subdivisionsDown,\n    startOffset,\n    endOffset) {\n  if (subdivisionsDown <= 0) {\n    throw new Error('subdivisionDown must be > 0');\n  }\n\n  startOffset = startOffset || 0;\n  endOffset   = endOffset || 1;\n\n  const subdivisionsThick = 2;\n\n  const offsetRange = endOffset - startOffset;\n  const numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);\n  const positions   = createAugmentedTypedArray(3, numVertices);\n  const normals     = createAugmentedTypedArray(3, numVertices);\n  const texcoords   = createAugmentedTypedArray(2, numVertices);\n\n  function lerp(a, b, s) {\n    return a + (b - a) * s;\n  }\n\n  function createArc(arcRadius, x, normalMult, normalAdd, uMult, uAdd) {\n    for (let z = 0; z <= subdivisionsDown; z++) {\n      const uBack = x / (subdivisionsThick - 1);\n      const v = z / subdivisionsDown;\n      const xBack = (uBack - 0.5) * 2;\n      const angle = (startOffset + (v * offsetRange)) * Math.PI;\n      const s = Math.sin(angle);\n      const c = Math.cos(angle);\n      const radius = lerp(verticalRadius, arcRadius, s);\n      const px = xBack * thickness;\n      const py = c * verticalRadius;\n      const pz = s * radius;\n      positions.push(px, py, pz);\n      const n = add(multiply([0, s, c], normalMult), normalAdd);\n      normals.push(n);\n      texcoords.push(uBack * uMult + uAdd, v);\n    }\n  }\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let x = 0; x < subdivisionsThick; x++) {\n    const uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;\n    createArc(outerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);\n    createArc(innerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);\n  }\n\n  // Do outer surface.\n  const indices = createAugmentedTypedArray(3, (subdivisionsDown * 2) * (2 + subdivisionsThick), Uint16Array);\n\n  function createSurface(leftArcOffset, rightArcOffset) {\n    for (let z = 0; z < subdivisionsDown; ++z) {\n      // Make triangle 1 of quad.\n      indices.push(\n          leftArcOffset + z + 0,\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 0);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 1,\n          rightArcOffset + z + 0);\n    }\n  }\n\n  const numVerticesDown = subdivisionsDown + 1;\n  // front\n  createSurface(numVerticesDown * 0, numVerticesDown * 4);\n  // right\n  createSurface(numVerticesDown * 5, numVerticesDown * 7);\n  // back\n  createSurface(numVerticesDown * 6, numVerticesDown * 2);\n  // left\n  createSurface(numVerticesDown * 3, numVerticesDown * 1);\n\n  return {\n    position: positions,\n    normal:   normals,\n    texcoord: texcoords,\n    indices:  indices,\n  };\n}\n\n/**\n * Creates cylinder BufferInfo. The cylinder will be created around the origin\n * along the y-axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of cylinder.\n * @param {number} height Height of cylinder.\n * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n * @param {boolean} [topCap] Create top cap. Default = true.\n * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCylinderBufferInfo\n */\n\n /**\n  * Creates cylinder buffers. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, WebGLBuffer>} The created buffers.\n  * @memberOf module:twgl/primitives\n  * @function createCylinderBuffers\n  */\n\n /**\n  * Creates cylinder vertices. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, TypedArray>} The created vertices.\n  * @memberOf module:twgl/primitives\n  */\nfunction createCylinderVertices(\n    radius,\n    height,\n    radialSubdivisions,\n    verticalSubdivisions,\n    topCap,\n    bottomCap) {\n  return createTruncatedConeVertices(\n      radius,\n      radius,\n      height,\n      radialSubdivisions,\n      verticalSubdivisions,\n      topCap,\n      bottomCap);\n}\n\n/**\n * Creates BufferInfo for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTorusBufferInfo\n */\n\n/**\n * Creates buffers for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createTorusBuffers\n */\n\n/**\n * Creates vertices for a torus\n *\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createTorusVertices(\n    radius,\n    thickness,\n    radialSubdivisions,\n    bodySubdivisions,\n    startAngle,\n    endAngle) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (bodySubdivisions < 3) {\n    throw new Error('verticalSubdivisions must be 3 or greater');\n  }\n\n  startAngle = startAngle || 0;\n  endAngle = endAngle || Math.PI * 2;\n  const range = endAngle - startAngle;\n\n  const radialParts = radialSubdivisions + 1;\n  const bodyParts   = bodySubdivisions + 1;\n  const numVertices = radialParts * bodyParts;\n  const positions   = createAugmentedTypedArray(3, numVertices);\n  const normals     = createAugmentedTypedArray(3, numVertices);\n  const texcoords   = createAugmentedTypedArray(2, numVertices);\n  const indices     = createAugmentedTypedArray(3, (radialSubdivisions) * (bodySubdivisions) * 2, Uint16Array);\n\n  for (let slice = 0; slice < bodyParts; ++slice) {\n    const v = slice / bodySubdivisions;\n    const sliceAngle = v * Math.PI * 2;\n    const sliceSin = Math.sin(sliceAngle);\n    const ringRadius = radius + sliceSin * thickness;\n    const ny = Math.cos(sliceAngle);\n    const y = ny * thickness;\n    for (let ring = 0; ring < radialParts; ++ring) {\n      const u = ring / radialSubdivisions;\n      const ringAngle = startAngle + u * range;\n      const xSin = Math.sin(ringAngle);\n      const zCos = Math.cos(ringAngle);\n      const x = xSin * ringRadius;\n      const z = zCos * ringRadius;\n      const nx = xSin * sliceSin;\n      const nz = zCos * sliceSin;\n      positions.push(x, y, z);\n      normals.push(nx, ny, nz);\n      texcoords.push(u, 1 - v);\n    }\n  }\n\n  for (let slice = 0; slice < bodySubdivisions; ++slice) {  // eslint-disable-line\n    for (let ring = 0; ring < radialSubdivisions; ++ring) {  // eslint-disable-line\n      const nextRingIndex  = 1 + ring;\n      const nextSliceIndex = 1 + slice;\n      indices.push(radialParts * slice          + ring,\n                   radialParts * nextSliceIndex + ring,\n                   radialParts * slice          + nextRingIndex);\n      indices.push(radialParts * nextSliceIndex + ring,\n                   radialParts * nextSliceIndex + nextRingIndex,\n                   radialParts * slice          + nextRingIndex);\n    }\n  }\n\n  return {\n    position: positions,\n    normal:   normals,\n    texcoord: texcoords,\n    indices:  indices,\n  };\n}\n\n\n/**\n * Creates a disc BufferInfo. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createDiscBufferInfo\n */\n\n/**\n * Creates disc buffers. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createDiscBuffers\n */\n\n/**\n * Creates disc vertices. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createDiscVertices(\n    radius,\n    divisions,\n    stacks,\n    innerRadius,\n    stackPower) {\n  if (divisions < 3) {\n    throw new Error('divisions must be at least 3');\n  }\n\n  stacks = stacks ? stacks : 1;\n  stackPower = stackPower ? stackPower : 1;\n  innerRadius = innerRadius ? innerRadius : 0;\n\n  // Note: We don't share the center vertex because that would\n  // mess up texture coordinates.\n  const numVertices = (divisions + 1) * (stacks + 1);\n\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n  const indices   = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);\n\n  let firstIndex = 0;\n  const radiusSpan = radius - innerRadius;\n  const pointsPerStack = divisions + 1;\n\n  // Build the disk one stack at a time.\n  for (let stack = 0; stack <= stacks; ++stack) {\n    const stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);\n\n    for (let i = 0; i <= divisions; ++i) {\n      const theta = 2.0 * Math.PI * i / divisions;\n      const x = stackRadius * Math.cos(theta);\n      const z = stackRadius * Math.sin(theta);\n\n      positions.push(x, 0, z);\n      normals.push(0, 1, 0);\n      texcoords.push(1 - (i / divisions), stack / stacks);\n      if (stack > 0 && i !== divisions) {\n        // a, b, c and d are the indices of the vertices of a quad.  unless\n        // the current stack is the one closest to the center, in which case\n        // the vertices a and b connect to the center vertex.\n        const a = firstIndex + (i + 1);\n        const b = firstIndex + i;\n        const c = firstIndex + i - pointsPerStack;\n        const d = firstIndex + (i + 1) - pointsPerStack;\n\n        // Make a quad of the vertices a, b, c, d.\n        indices.push(a, b, c);\n        indices.push(a, c, d);\n      }\n    }\n\n    firstIndex += divisions + 1;\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * creates a random integer between 0 and range - 1 inclusive.\n * @param {number} range\n * @return {number} random value between 0 and range - 1 inclusive.\n * @private\n */\nfunction randInt(range) {\n  return Math.random() * range | 0;\n}\n\n/**\n * Used to supply random colors\n * @callback RandomColorFunc\n * @param {number} ndx index of triangle/quad if unindexed or index of vertex if indexed\n * @param {number} channel 0 = red, 1 = green, 2 = blue, 3 = alpha\n * @return {number} a number from 0 to 255\n * @memberOf module:twgl/primitives\n */\n\n/**\n * @typedef {Object} RandomVerticesOptions\n * @property {number} [vertsPerColor] Defaults to 3 for non-indexed vertices\n * @property {module:twgl/primitives.RandomColorFunc} [rand] A function to generate random numbers\n * @memberOf module:twgl/primitives\n */\n\n/**\n * Creates an augmentedTypedArray of random vertex colors.\n * If the vertices are indexed (have an indices array) then will\n * just make random colors. Otherwise assumes they are triangles\n * and makes one random color for every 3 vertices.\n * @param {Object.<string, AugmentedTypedArray>} vertices Vertices as returned from one of the createXXXVertices functions.\n * @param {module:twgl/primitives.RandomVerticesOptions} [options] options.\n * @return {Object.<string, AugmentedTypedArray>} same vertices as passed in with `color` added.\n * @memberOf module:twgl/primitives\n */\nfunction makeRandomVertexColors(vertices, options) {\n  options = options || {};\n  const numElements = vertices.position.numElements;\n  const vColors = createAugmentedTypedArray(4, numElements, Uint8Array);\n  const rand = options.rand || function(ndx, channel) {\n    return channel < 3 ? randInt(256) : 255;\n  };\n  vertices.color = vColors;\n  if (vertices.indices) {\n    // just make random colors if index\n    for (let ii = 0; ii < numElements; ++ii) {\n      vColors.push(rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3));\n    }\n  } else {\n    // make random colors per triangle\n    const numVertsPerColor = options.vertsPerColor || 3;\n    const numSets = numElements / numVertsPerColor;\n    for (let ii = 0; ii < numSets; ++ii) {  // eslint-disable-line\n      const color = [rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3)];\n      for (let jj = 0; jj < numVertsPerColor; ++jj) {\n        vColors.push(color);\n      }\n    }\n  }\n  return vertices;\n}\n\n/**\n * creates a function that calls fn to create vertices and then\n * creates a buffers for them\n * @private\n */\nfunction createBufferFunc(fn) {\n  return function(gl) {\n    const arrays = fn.apply(this, Array.prototype.slice.call(arguments, 1));\n    return createBuffersFromArrays(gl, arrays);\n  };\n}\n\n/**\n * creates a function that calls fn to create vertices and then\n * creates a bufferInfo object for them\n * @private\n */\nfunction createBufferInfoFunc(fn) {\n  return function(gl) {\n    const arrays = fn.apply(null,  Array.prototype.slice.call(arguments, 1));\n    return createBufferInfoFromArrays(gl, arrays);\n  };\n}\n\nconst arraySpecPropertyNames = [\n  \"numComponents\",\n  \"size\",\n  \"type\",\n  \"normalize\",\n  \"stride\",\n  \"offset\",\n  \"attrib\",\n  \"name\",\n  \"attribName\",\n];\n\n/**\n * Copy elements from one array to another\n *\n * @param {Array|TypedArray} src source array\n * @param {Array|TypedArray} dst dest array\n * @param {number} dstNdx index in dest to copy src\n * @param {number} [offset] offset to add to copied values\n * @private\n */\nfunction copyElements(src, dst, dstNdx, offset) {\n  offset = offset || 0;\n  const length = src.length;\n  for (let ii = 0; ii < length; ++ii) {\n    dst[dstNdx + ii] = src[ii] + offset;\n  }\n}\n\n/**\n * Creates an array of the same time\n *\n * @param {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} srcArray array who's type to copy\n * @param {number} length size of new array\n * @return {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} array with same type as srcArray\n * @private\n */\nfunction createArrayOfSameType(srcArray, length) {\n  const arraySrc = getArray$1(srcArray);\n  const newArray = new arraySrc.constructor(length);\n  let newArraySpec = newArray;\n  // If it appears to have been augmented make new one augmented\n  if (arraySrc.numComponents && arraySrc.numElements) {\n    augmentTypedArray(newArray, arraySrc.numComponents);\n  }\n  // If it was a full spec make new one a full spec\n  if (srcArray.data) {\n    newArraySpec = {\n      data: newArray,\n    };\n    copyNamedProperties(arraySpecPropertyNames, srcArray, newArraySpec);\n  }\n  return newArraySpec;\n}\n\n/**\n * Concatenates sets of vertices\n *\n * Assumes the vertices match in composition. For example\n * if one set of vertices has positions, normals, and indices\n * all sets of vertices must have positions, normals, and indices\n * and of the same type.\n *\n * Example:\n *\n *      const cubeVertices = twgl.primitives.createCubeVertices(2);\n *      const sphereVertices = twgl.primitives.createSphereVertices(1, 10, 10);\n *      // move the sphere 2 units up\n *      twgl.primitives.reorientVertices(\n *          sphereVertices, twgl.m4.translation([0, 2, 0]));\n *      // merge the sphere with the cube\n *      const cubeSphereVertices = twgl.primitives.concatVertices(\n *          [cubeVertices, sphereVertices]);\n *      // turn them into WebGL buffers and attrib data\n *      const bufferInfo = twgl.createBufferInfoFromArrays(gl, cubeSphereVertices);\n *\n * @param {module:twgl.Arrays[]} arrays Array of arrays of vertices\n * @return {module:twgl.Arrays} The concatenated vertices.\n * @memberOf module:twgl/primitives\n */\nfunction concatVertices(arrayOfArrays) {\n  const names = {};\n  let baseName;\n  // get names of all arrays.\n  // and numElements for each set of vertices\n  for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n    const arrays = arrayOfArrays[ii];\n    Object.keys(arrays).forEach(function(name) {  // eslint-disable-line\n      if (!names[name]) {\n        names[name] = [];\n      }\n      if (!baseName && name !== 'indices') {\n        baseName = name;\n      }\n      const arrayInfo = arrays[name];\n      const numComponents = getNumComponents$1(arrayInfo, name);\n      const array = getArray$1(arrayInfo);\n      const numElements = array.length / numComponents;\n      names[name].push(numElements);\n    });\n  }\n\n  // compute length of combined array\n  // and return one for reference\n  function getLengthOfCombinedArrays(name) {\n    let length = 0;\n    let arraySpec;\n    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n      const arrays = arrayOfArrays[ii];\n      const arrayInfo = arrays[name];\n      const array = getArray$1(arrayInfo);\n      length += array.length;\n      if (!arraySpec || arrayInfo.data) {\n        arraySpec = arrayInfo;\n      }\n    }\n    return {\n      length: length,\n      spec: arraySpec,\n    };\n  }\n\n  function copyArraysToNewArray(name, base, newArray) {\n    let baseIndex = 0;\n    let offset = 0;\n    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n      const arrays = arrayOfArrays[ii];\n      const arrayInfo = arrays[name];\n      const array = getArray$1(arrayInfo);\n      if (name === 'indices') {\n        copyElements(array, newArray, offset, baseIndex);\n        baseIndex += base[ii];\n      } else {\n        copyElements(array, newArray, offset);\n      }\n      offset += array.length;\n    }\n  }\n\n  const base = names[baseName];\n\n  const newArrays = {};\n  Object.keys(names).forEach(function(name) {\n    const info = getLengthOfCombinedArrays(name);\n    const newArraySpec = createArrayOfSameType(info.spec, info.length);\n    copyArraysToNewArray(name, base, getArray$1(newArraySpec));\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\n/**\n * Creates a duplicate set of vertices\n *\n * This is useful for calling reorientVertices when you\n * also want to keep the original available\n *\n * @param {module:twgl.Arrays} arrays of vertices\n * @return {module:twgl.Arrays} The duplicated vertices.\n * @memberOf module:twgl/primitives\n */\nfunction duplicateVertices(arrays) {\n  const newArrays = {};\n  Object.keys(arrays).forEach(function(name) {\n    const arraySpec = arrays[name];\n    const srcArray = getArray$1(arraySpec);\n    const newArraySpec = createArrayOfSameType(arraySpec, srcArray.length);\n    copyElements(srcArray, getArray$1(newArraySpec), 0);\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\nconst create3DFBufferInfo = createBufferInfoFunc(create3DFVertices);\nconst create3DFBuffers = createBufferFunc(create3DFVertices);\nconst createCubeBufferInfo = createBufferInfoFunc(createCubeVertices);\nconst createCubeBuffers = createBufferFunc(createCubeVertices);\nconst createPlaneBufferInfo = createBufferInfoFunc(createPlaneVertices);\nconst createPlaneBuffers = createBufferFunc(createPlaneVertices);\nconst createSphereBufferInfo = createBufferInfoFunc(createSphereVertices);\nconst createSphereBuffers = createBufferFunc(createSphereVertices);\nconst createTruncatedConeBufferInfo = createBufferInfoFunc(createTruncatedConeVertices);\nconst createTruncatedConeBuffers = createBufferFunc(createTruncatedConeVertices);\nconst createXYQuadBufferInfo = createBufferInfoFunc(createXYQuadVertices);\nconst createXYQuadBuffers = createBufferFunc(createXYQuadVertices);\nconst createCrescentBufferInfo = createBufferInfoFunc(createCrescentVertices);\nconst createCrescentBuffers = createBufferFunc(createCrescentVertices);\nconst createCylinderBufferInfo = createBufferInfoFunc(createCylinderVertices);\nconst createCylinderBuffers = createBufferFunc(createCylinderVertices);\nconst createTorusBufferInfo = createBufferInfoFunc(createTorusVertices);\nconst createTorusBuffers = createBufferFunc(createTorusVertices);\nconst createDiscBufferInfo = createBufferInfoFunc(createDiscVertices);\nconst createDiscBuffers = createBufferFunc(createDiscVertices);\n\n// these were mis-spelled until 4.12\nconst createCresentBufferInfo = createCrescentBufferInfo;\nconst createCresentBuffers = createCrescentBuffers;\nconst createCresentVertices = createCrescentVertices;\n\nvar primitives = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  create3DFBufferInfo: create3DFBufferInfo,\n  create3DFBuffers: create3DFBuffers,\n  create3DFVertices: create3DFVertices,\n  createAugmentedTypedArray: createAugmentedTypedArray,\n  createCubeBufferInfo: createCubeBufferInfo,\n  createCubeBuffers: createCubeBuffers,\n  createCubeVertices: createCubeVertices,\n  createPlaneBufferInfo: createPlaneBufferInfo,\n  createPlaneBuffers: createPlaneBuffers,\n  createPlaneVertices: createPlaneVertices,\n  createSphereBufferInfo: createSphereBufferInfo,\n  createSphereBuffers: createSphereBuffers,\n  createSphereVertices: createSphereVertices,\n  createTruncatedConeBufferInfo: createTruncatedConeBufferInfo,\n  createTruncatedConeBuffers: createTruncatedConeBuffers,\n  createTruncatedConeVertices: createTruncatedConeVertices,\n  createXYQuadBufferInfo: createXYQuadBufferInfo,\n  createXYQuadBuffers: createXYQuadBuffers,\n  createXYQuadVertices: createXYQuadVertices,\n  createCresentBufferInfo: createCresentBufferInfo,\n  createCresentBuffers: createCresentBuffers,\n  createCresentVertices: createCresentVertices,\n  createCrescentBufferInfo: createCrescentBufferInfo,\n  createCrescentBuffers: createCrescentBuffers,\n  createCrescentVertices: createCrescentVertices,\n  createCylinderBufferInfo: createCylinderBufferInfo,\n  createCylinderBuffers: createCylinderBuffers,\n  createCylinderVertices: createCylinderVertices,\n  createTorusBufferInfo: createTorusBufferInfo,\n  createTorusBuffers: createTorusBuffers,\n  createTorusVertices: createTorusVertices,\n  createDiscBufferInfo: createDiscBufferInfo,\n  createDiscBuffers: createDiscBuffers,\n  createDiscVertices: createDiscVertices,\n  deindexVertices: deindexVertices,\n  flattenNormals: flattenNormals,\n  makeRandomVertexColors: makeRandomVertexColors,\n  reorientDirections: reorientDirections,\n  reorientNormals: reorientNormals,\n  reorientPositions: reorientPositions,\n  reorientVertices: reorientVertices,\n  concatVertices: concatVertices,\n  duplicateVertices: duplicateVertices\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Gets the gl version as a number\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {number} version of gl\n * @private\n */\n//function getVersionAsNumber(gl) {\n//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));\n//}\n\n/**\n * Check if context is WebGL 2.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 2.0\n * @memberOf module:twgl\n */\nfunction isWebGL2(gl) {\n  // This is the correct check but it's slow\n  //  return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0\") === 0;\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGL2RenderingContext;\n  return !!gl.texStorage2D;\n}\n\n/**\n * Check if context is WebGL 1.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 1.0\n * @memberOf module:twgl\n */\nfunction isWebGL1(gl) {\n  // This is the correct check but it's slow\n  // const version = getVersionAsNumber(gl);\n  // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGLRenderingContext;\n  return !gl.texStorage2D;\n}\n\n/**\n * Gets a string for WebGL enum\n *\n * Note: Several enums are the same. Without more\n * context (which function) it's impossible to always\n * give the correct enum. As it is, for matching values\n * it gives all enums. Checking the WebGL2RenderingContext\n * that means\n *\n *      0     = ZERO | POINT | NONE | NO_ERROR\n *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT\n *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB\n *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING\n *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING\n *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING\n *\n * It's also not useful for bits really unless you pass in individual bits.\n * In other words\n *\n *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;\n *     twgl.glEnumToString(gl, bits);  // not going to work\n *\n * Note that some enums only exist on extensions. If you\n * want them to show up you need to pass the extension at least\n * once. For example\n *\n *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');\n *     if (ext) {\n *        twgl.glEnumToString(ext, 0);  // just prime the function\n *\n *        ..later..\n *\n *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;\n *        console.log(twgl.glEnumToString(gl, internalFormat));\n *\n * Notice I didn't have to pass the extension the second time. This means\n * you can have place that generically gets an enum for texture formats for example.\n * and as long as you primed the function with the extensions\n *\n * If you're using `twgl.addExtensionsToContext` to enable your extensions\n * then twgl will automatically get the extension's enums.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object\n * @param {number} value the value of the enum you want to look up.\n * @return {string} enum string or hex value\n * @memberOf module:twgl\n * @function glEnumToString\n */\nconst glEnumToString = (function() {\n  const haveEnumsForType = {};\n  const enums = {};\n\n  function addEnums(gl) {\n    const type = gl.constructor.name;\n    if (!haveEnumsForType[type]) {\n      for (const key in gl) {\n        if (typeof gl[key] === 'number') {\n          const existing = enums[gl[key]];\n          enums[gl[key]] = existing ? `${existing} | ${key}` : key;\n        }\n      }\n      haveEnumsForType[type] = true;\n    }\n  }\n\n  return function glEnumToString(gl, value) {\n    addEnums(gl);\n    return enums[value] || (typeof value === 'number' ? `0x${value.toString(16)}` : value);\n  };\n}());\n\nvar utils = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  glEnumToString: glEnumToString,\n  isWebGL1: isWebGL1,\n  isWebGL2: isWebGL2\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nconst defaults$1 = {\n  textureColor: new Uint8Array([128, 192, 255, 255]),\n  textureOptions: {},\n  crossOrigin: undefined,\n};\nconst isArrayBuffer$1 = isArrayBuffer;\n\n// Should we make this on demand?\nconst getShared2DContext = function() {\n  let s_ctx;\n  return function getShared2DContext() {\n    s_ctx = s_ctx ||\n        ((typeof document !== 'undefined' && document.createElement)\n          ? document.createElement(\"canvas\").getContext(\"2d\")\n          : null);\n    return s_ctx;\n  };\n}();\n\n// NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but\n//       not only does Firefox NOT support it but Firefox freezes immediately\n//       if you try to create one instead of just returning null and continuing.\n//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext(\"2d\"));  // OffscreenCanvas may not support 2d\n\n// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2\n// we can use the various unpack settings. Otherwise we could try using\n// the ability of an ImageBitmap to be cut. Unfortunately cutting an ImageBitmap\n// is async and the current TWGL code expects a non-Async result though that\n// might not be a problem. ImageBitmap though is not available in Edge or Safari\n// as of 2018-01-02\n\n/* PixelFormat */\nconst ALPHA                          = 0x1906;\nconst RGB                            = 0x1907;\nconst RGBA                           = 0x1908;\nconst LUMINANCE                      = 0x1909;\nconst LUMINANCE_ALPHA                = 0x190A;\nconst DEPTH_COMPONENT                = 0x1902;\nconst DEPTH_STENCIL                  = 0x84F9;\n\n/* TextureWrapMode */\n// const REPEAT                         = 0x2901;\n// const MIRRORED_REPEAT                = 0x8370;\nconst CLAMP_TO_EDGE                  = 0x812f;\n\n/* TextureMagFilter */\nconst NEAREST                        = 0x2600;\nconst LINEAR                         = 0x2601;\n\n/* TextureMinFilter */\n// const NEAREST_MIPMAP_NEAREST         = 0x2700;\n// const LINEAR_MIPMAP_NEAREST          = 0x2701;\n// const NEAREST_MIPMAP_LINEAR          = 0x2702;\n// const LINEAR_MIPMAP_LINEAR           = 0x2703;\n\n/* Texture Target */\nconst TEXTURE_2D                     = 0x0de1;\nconst TEXTURE_CUBE_MAP               = 0x8513;\nconst TEXTURE_3D                     = 0x806f;\nconst TEXTURE_2D_ARRAY               = 0x8c1a;\n\n/* Cubemap Targets */\nconst TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;\nconst TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;\nconst TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;\nconst TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851a;\n\n/* Texture Parameters */\nconst TEXTURE_MIN_FILTER             = 0x2801;\nconst TEXTURE_MAG_FILTER             = 0x2800;\nconst TEXTURE_WRAP_S                 = 0x2802;\nconst TEXTURE_WRAP_T                 = 0x2803;\nconst TEXTURE_WRAP_R                 = 0x8072;\nconst TEXTURE_MIN_LOD                = 0x813a;\nconst TEXTURE_MAX_LOD                = 0x813b;\nconst TEXTURE_BASE_LEVEL             = 0x813c;\nconst TEXTURE_MAX_LEVEL              = 0x813d;\n\n\n/* Pixel store */\nconst UNPACK_ALIGNMENT                   = 0x0cf5;\nconst UNPACK_ROW_LENGTH                  = 0x0cf2;\nconst UNPACK_IMAGE_HEIGHT                = 0x806e;\nconst UNPACK_SKIP_PIXELS                 = 0x0cf4;\nconst UNPACK_SKIP_ROWS                   = 0x0cf3;\nconst UNPACK_SKIP_IMAGES                 = 0x806d;\nconst UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\nconst UNPACK_PREMULTIPLY_ALPHA_WEBGL     = 0x9241;\nconst UNPACK_FLIP_Y_WEBGL                = 0x9240;\n\nconst R8                           = 0x8229;\nconst R8_SNORM                     = 0x8F94;\nconst R16F                         = 0x822D;\nconst R32F                         = 0x822E;\nconst R8UI                         = 0x8232;\nconst R8I                          = 0x8231;\nconst RG16UI                       = 0x823A;\nconst RG16I                        = 0x8239;\nconst RG32UI                       = 0x823C;\nconst RG32I                        = 0x823B;\nconst RG8                          = 0x822B;\nconst RG8_SNORM                    = 0x8F95;\nconst RG16F                        = 0x822F;\nconst RG32F                        = 0x8230;\nconst RG8UI                        = 0x8238;\nconst RG8I                         = 0x8237;\nconst R16UI                        = 0x8234;\nconst R16I                         = 0x8233;\nconst R32UI                        = 0x8236;\nconst R32I                         = 0x8235;\nconst RGB8                         = 0x8051;\nconst SRGB8                        = 0x8C41;\nconst RGB565                       = 0x8D62;\nconst RGB8_SNORM                   = 0x8F96;\nconst R11F_G11F_B10F               = 0x8C3A;\nconst RGB9_E5                      = 0x8C3D;\nconst RGB16F                       = 0x881B;\nconst RGB32F                       = 0x8815;\nconst RGB8UI                       = 0x8D7D;\nconst RGB8I                        = 0x8D8F;\nconst RGB16UI                      = 0x8D77;\nconst RGB16I                       = 0x8D89;\nconst RGB32UI                      = 0x8D71;\nconst RGB32I                       = 0x8D83;\nconst RGBA8                        = 0x8058;\nconst SRGB8_ALPHA8                 = 0x8C43;\nconst RGBA8_SNORM                  = 0x8F97;\nconst RGB5_A1                      = 0x8057;\nconst RGBA4                        = 0x8056;\nconst RGB10_A2                     = 0x8059;\nconst RGBA16F                      = 0x881A;\nconst RGBA32F                      = 0x8814;\nconst RGBA8UI                      = 0x8D7C;\nconst RGBA8I                       = 0x8D8E;\nconst RGB10_A2UI                   = 0x906F;\nconst RGBA16UI                     = 0x8D76;\nconst RGBA16I                      = 0x8D88;\nconst RGBA32I                      = 0x8D82;\nconst RGBA32UI                     = 0x8D70;\n\nconst DEPTH_COMPONENT16            = 0x81A5;\nconst DEPTH_COMPONENT24            = 0x81A6;\nconst DEPTH_COMPONENT32F           = 0x8CAC;\nconst DEPTH32F_STENCIL8            = 0x8CAD;\nconst DEPTH24_STENCIL8             = 0x88F0;\n\n/* DataType */\nconst BYTE$2                         = 0x1400;\nconst UNSIGNED_BYTE$2                = 0x1401;\nconst SHORT$2                        = 0x1402;\nconst UNSIGNED_SHORT$2               = 0x1403;\nconst INT$2                          = 0x1404;\nconst UNSIGNED_INT$2                 = 0x1405;\nconst FLOAT$2                        = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4$1       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1$1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5$1         = 0x8363;\nconst HALF_FLOAT$1                   = 0x140B;\nconst HALF_FLOAT_OES               = 0x8D61;  // Thanks Khronos for making this different >:(\nconst UNSIGNED_INT_2_10_10_10_REV$1  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV$1 = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV$1     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV$1 = 0x8DAD;\nconst UNSIGNED_INT_24_8$1            = 0x84FA;\n\nconst RG                           = 0x8227;\nconst RG_INTEGER                   = 0x8228;\nconst RED                          = 0x1903;\nconst RED_INTEGER                  = 0x8D94;\nconst RGB_INTEGER                  = 0x8D98;\nconst RGBA_INTEGER                 = 0x8D99;\n\nconst formatInfo = {};\n{\n  // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle\n  // the name.\n  const f = formatInfo;\n  f[ALPHA]           = { numColorComponents: 1, };\n  f[LUMINANCE]       = { numColorComponents: 1, };\n  f[LUMINANCE_ALPHA] = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGBA]            = { numColorComponents: 4, };\n  f[RED]             = { numColorComponents: 1, };\n  f[RED_INTEGER]     = { numColorComponents: 1, };\n  f[RG]              = { numColorComponents: 2, };\n  f[RG_INTEGER]      = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGB_INTEGER]     = { numColorComponents: 3, };\n  f[RGBA]            = { numColorComponents: 4, };\n  f[RGBA_INTEGER]    = { numColorComponents: 4, };\n  f[DEPTH_COMPONENT] = { numColorComponents: 1, };\n  f[DEPTH_STENCIL]   = { numColorComponents: 2, };\n}\n\n/**\n * @typedef {Object} TextureFormatDetails\n * @property {number} textureFormat format to pass texImage2D and similar functions.\n * @property {boolean} colorRenderable true if you can render to this format of texture.\n * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.\n * @property {number[]} type Array of possible types you can pass to texImage2D and similar function\n * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element\n * @private\n */\n\nlet s_textureInternalFormatInfo;\nfunction getTextureInternalFormatInfo(internalFormat) {\n  if (!s_textureInternalFormatInfo) {\n    // NOTE: these properties need unique names so we can let Uglify mangle the name.\n    const t = {};\n    // unsized formats\n    t[ALPHA]              = { textureFormat: ALPHA,           colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };\n    t[LUMINANCE]          = { textureFormat: LUMINANCE,       colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };\n    t[LUMINANCE_ALPHA]    = { textureFormat: LUMINANCE_ALPHA, colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2, 4, 4, 8],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };\n    t[RGB]                = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 6, 6, 12, 2],    type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_5_6_5$1], };\n    t[RGBA]               = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 8, 8, 16, 2, 2], type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_4_4_4_4$1, UNSIGNED_SHORT_5_5_5_1$1], };\n    t[DEPTH_COMPONENT]    = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],              type: [UNSIGNED_INT$2, UNSIGNED_SHORT$2], };\n\n    // sized formats\n    t[R8]                 = { textureFormat: RED,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1],        type: [UNSIGNED_BYTE$2], };\n    t[R8_SNORM]           = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [1],        type: [BYTE$2], };\n    t[R16F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [4, 2],     type: [FLOAT$2, HALF_FLOAT$1], };\n    t[R32F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$2], };\n    t[R8UI]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [UNSIGNED_BYTE$2], };\n    t[R8I]                = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [BYTE$2], };\n    t[R16UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_SHORT$2], };\n    t[R16I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [SHORT$2], };\n    t[R32UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$2], };\n    t[R32I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [INT$2], };\n    t[RG8]                = { textureFormat: RG,              colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2],        type: [UNSIGNED_BYTE$2], };\n    t[RG8_SNORM]          = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [2],        type: [BYTE$2], };\n    t[RG16F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [8, 4],     type: [FLOAT$2, HALF_FLOAT$1], };\n    t[RG32F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: false, bytesPerElement: [8],        type: [FLOAT$2], };\n    t[RG8UI]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_BYTE$2], };\n    t[RG8I]               = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [BYTE$2], };\n    t[RG16UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_SHORT$2], };\n    t[RG16I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [SHORT$2], };\n    t[RG32UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_INT$2], };\n    t[RG32I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [INT$2], };\n    t[RGB8]               = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };\n    t[SRGB8]              = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };\n    t[RGB565]             = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 2],     type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_6_5$1], };\n    t[RGB8_SNORM]         = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [BYTE$2], };\n    t[R11F_G11F_B10F]     = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_10F_11F_11F_REV$1], };\n    t[RGB9_E5]            = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_5_9_9_9_REV$1], };\n    t[RGB16F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6],    type: [FLOAT$2, HALF_FLOAT$1], };\n    t[RGB32F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [FLOAT$2], };\n    t[RGB8UI]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };\n    t[RGB8I]              = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [BYTE$2], };\n    t[RGB16UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [UNSIGNED_SHORT$2], };\n    t[RGB16I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [SHORT$2], };\n    t[RGB32UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [UNSIGNED_INT$2], };\n    t[RGB32I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [INT$2], };\n    t[RGBA8]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };\n    t[SRGB8_ALPHA8]       = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };\n    t[RGBA8_SNORM]        = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [4],        type: [BYTE$2], };\n    t[RGB5_A1]            = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2, 4],  type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_5_5_1$1, UNSIGNED_INT_2_10_10_10_REV$1], };\n    t[RGBA4]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2],     type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_4_4_4_4$1], };\n    t[RGB10_A2]           = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV$1], };\n    t[RGBA16F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [16, 8],    type: [FLOAT$2, HALF_FLOAT$1], };\n    t[RGBA32F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: false, bytesPerElement: [16],       type: [FLOAT$2], };\n    t[RGBA8UI]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };\n    t[RGBA8I]             = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [BYTE$2], };\n    t[RGB10_A2UI]         = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV$1], };\n    t[RGBA16UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_SHORT$2], };\n    t[RGBA16I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [SHORT$2], };\n    t[RGBA32I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [INT$2], };\n    t[RGBA32UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [UNSIGNED_INT$2], };\n    // Sized Internal\n    t[DEPTH_COMPONENT16]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],     type: [UNSIGNED_SHORT$2, UNSIGNED_INT$2], };\n    t[DEPTH_COMPONENT24]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$2], };\n    t[DEPTH_COMPONENT32F] = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$2], };\n    t[DEPTH24_STENCIL8]   = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_24_8$1], };\n    t[DEPTH32F_STENCIL8]  = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT_32_UNSIGNED_INT_24_8_REV$1], };\n\n    Object.keys(t).forEach(function(internalFormat) {\n      const info = t[internalFormat];\n      info.bytesPerElementMap = {};\n      info.bytesPerElement.forEach(function(bytesPerElement, ndx) {\n        const type = info.type[ndx];\n        info.bytesPerElementMap[type] = bytesPerElement;\n      });\n    });\n    s_textureInternalFormatInfo = t;\n  }\n  return s_textureInternalFormatInfo[internalFormat];\n}\n\n/**\n * Gets the number of bytes per element for a given internalFormat / type\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @param {number} type The type parameter for texImage2D etc..\n * @return {number} the number of bytes per element for the given internalFormat, type combo\n * @memberOf module:twgl/textures\n */\nfunction getBytesPerElementForInternalFormat(internalFormat, type) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  const bytesPerElement = info.bytesPerElementMap[type];\n  if (bytesPerElement === undefined) {\n    throw \"unknown internal format\";\n  }\n  return bytesPerElement;\n}\n\n/**\n * Info related to a specific texture internalFormat as returned\n * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.\n *\n * @typedef {Object} TextureFormatInfo\n * @property {number} format Format to pass to texImage2D and related functions\n * @property {number} type Type to pass to texImage2D and related functions\n * @memberOf module:twgl/textures\n */\n\n/**\n * Gets the format and type for a given internalFormat\n *\n * @param {number} internalFormat The internal format\n * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,\n * @memberOf module:twgl/textures\n */\nfunction getFormatAndTypeForInternalFormat(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return {\n    format: info.textureFormat,\n    type: info.type[0],\n  };\n}\n\n/**\n * Returns true if value is power of 2\n * @param {number} value number to check.\n * @return true if value is power of 2\n * @private\n */\nfunction isPowerOf2(value) {\n  return (value & (value - 1)) === 0;\n}\n\n/**\n * Gets whether or not we can generate mips for the given\n * internal format.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number} width The width parameter from texImage2D etc..\n * @param {number} height The height parameter from texImage2D etc..\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canGenerateMipmap(gl, width, height, internalFormat) {\n  if (!isWebGL2(gl)) {\n    return isPowerOf2(width) && isPowerOf2(height);\n  }\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.colorRenderable && info.textureFilterable;\n}\n\n/**\n * Gets whether or not we can generate mips for the given format\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canFilter(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.textureFilterable;\n}\n\n/**\n * Gets the number of components for a given image format.\n * @param {number} format the format.\n * @return {number} the number of components for the format.\n * @memberOf module:twgl/textures\n */\nfunction getNumComponentsForFormat(format) {\n  const info = formatInfo[format];\n  if (!info) {\n    throw \"unknown format: \" + format;\n  }\n  return info.numColorComponents;\n}\n\n/**\n * Gets the texture type for a given array type.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @return {number} the gl texture type\n * @private\n */\nfunction getTextureTypeForArrayType(gl, src, defaultType) {\n  if (isArrayBuffer$1(src)) {\n    return getGLTypeForTypedArray(src);\n  }\n  return defaultType || UNSIGNED_BYTE$2;\n}\n\nfunction guessDimensions(gl, target, width, height, numElements) {\n  if (numElements % 1 !== 0) {\n    throw \"can't guess dimensions\";\n  }\n  if (!width && !height) {\n    const size = Math.sqrt(numElements / (target === TEXTURE_CUBE_MAP ? 6 : 1));\n    if (size % 1 === 0) {\n      width = size;\n      height = size;\n    } else {\n      width = numElements;\n      height = 1;\n    }\n  } else if (!height) {\n    height = numElements / width;\n    if (height % 1) {\n      throw \"can't guess dimensions\";\n    }\n  } else if (!width) {\n    width = numElements / height;\n    if (width % 1) {\n      throw \"can't guess dimensions\";\n    }\n  }\n  return {\n    width: width,\n    height: height,\n  };\n}\n\n/**\n * Sets the default texture color.\n *\n * The default texture color is used when loading textures from\n * urls. Because the URL will be loaded async we'd like to be\n * able to use the texture immediately. By putting a 1x1 pixel\n * color in the texture we can start using the texture before\n * the URL has loaded.\n *\n * @param {number[]} color Array of 4 values in the range 0 to 1\n * @deprecated see {@link module:twgl.setDefaults}\n * @memberOf module:twgl/textures\n */\nfunction setDefaultTextureColor(color) {\n  defaults$1.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\nfunction setDefaults$1(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$1);\n  if (newDefaults.textureColor) {\n    setDefaultTextureColor(newDefaults.textureColor);\n  }\n}\n\n/**\n * A function to generate the source for a texture.\n * @callback TextureFunc\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options the texture options\n * @return {*} Returns any of the things documented for `src` for {@link module:twgl.TextureOptions}.\n * @memberOf module:twgl\n */\n\n/**\n * Texture options passed to most texture functions. Each function will use whatever options\n * are appropriate for its needs. This lets you pass the same options to all functions.\n *\n * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,\n * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.\n *\n * @typedef {Object} TextureOptions\n * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.\n * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.\n * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.\n * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.\n * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .\n * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`\n *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.\n * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`\n * @property {number} [minMag] both the min and mag filter settings.\n * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`\n * @property {number} [format] format for texture. Defaults to `gl.RGBA`.\n * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`\n *     is ArrayBufferView defaults to type that matches ArrayBufferView type.\n * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube\n * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [minLod] TEXTURE_MIN_LOD setting\n * @property {number} [maxLod] TEXTURE_MAX_LOD setting\n * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting\n * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting\n * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.\n * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.\n *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`\n *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink\n * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and\n *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above\n *    then then `auto` is assumed to be `false` unless explicity set to `true`.\n * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is\n *\n *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]\n *\n * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture\n *\n *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable\n *    1x1 pixel texture will be returned immediately. The texture will be updated once the image has downloaded.\n *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.\n *    The pieces will be uploaded in `cubeFaceOrder`\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then each entry is a slice of the a 2d array texture\n *    and will be scaled to the specified width and height OR to the size of the first image that loads.\n *\n *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,\n *    `HTMLCanvasElement`, `HTMLVideoElement`.\n *\n *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is\n *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`\n *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided\n *    by 6. Then\n *\n *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height\n *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.\n *\n *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.\n *\n * If `number[]` will be converted to `type`.\n *\n * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.\n * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`\n * an array etc...\n *\n * If `src` is undefined then an empty texture will be created of size `width` by `height`.\n *\n * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.\n *    default: undefined. Also see {@link module:twgl.setDefaults}.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets any packing state that will be set based on the options.\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setPackState(gl, options) {\n  if (options.colorspaceConversion !== undefined) {\n    gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);\n  }\n  if (options.premultiplyAlpha !== undefined) {\n    gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);\n  }\n  if (options.flipY !== undefined) {\n    gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, options.flipY);\n  }\n}\n\n/**\n * Set skip state to defaults\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setSkipStateToDefault(gl) {\n  gl.pixelStorei(UNPACK_ALIGNMENT, 4);\n  if (isWebGL2(gl)) {\n    gl.pixelStorei(UNPACK_ROW_LENGTH, 0);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_PIXELS, 0);\n    gl.pixelStorei(UNPACK_SKIP_ROWS, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n  }\n}\n\n/**\n * Sets the parameters of a texture or sampler\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number|WebGLSampler} target texture target or sampler\n * @param {function()} parameteriFn texParameteri or samplerParameteri fn\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @private\n */\nfunction setTextureSamplerParameters(gl, target, parameteriFn, options) {\n  if (options.minMag) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.minMag);\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.minMag);\n  }\n  if (options.min) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.min);\n  }\n  if (options.mag) {\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.mag);\n  }\n  if (options.wrap) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrap);\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrap);\n    if (target === TEXTURE_3D || isSampler(gl, target)) {\n      parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrap);\n    }\n  }\n  if (options.wrapR) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrapR);\n  }\n  if (options.wrapS) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrapS);\n  }\n  if (options.wrapT) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrapT);\n  }\n  if (options.minLod) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_LOD, options.minLod);\n  }\n  if (options.maxLod) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LOD, options.maxLod);\n  }\n  if (options.baseLevel) {\n    parameteriFn.call(gl, target, TEXTURE_BASE_LEVEL, options.baseLevel);\n  }\n  if (options.maxLevel) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LEVEL, options.maxLevel);\n  }\n}\n\n/**\n * Sets the texture parameters of a texture.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureParameters(gl, tex, options) {\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  setTextureSamplerParameters(gl, target, gl.texParameteri, options);\n}\n\n/**\n * Sets the sampler parameters of a sampler.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLSampler} sampler the WebGLSampler to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setSamplerParameters(gl, sampler, options) {\n  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);\n}\n\n/**\n * Creates a new sampler object and sets parameters.\n *\n * Example:\n *\n *      const sampler = twgl.createSampler(gl, {\n *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER\n *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.\n * @return {Object.<string,WebGLSampler>} the created samplers by name\n * @private\n */\nfunction createSampler(gl, options) {\n  const sampler = gl.createSampler();\n  setSamplerParameters(gl, sampler, options);\n  return sampler;\n}\n\n/**\n * Creates a multiple sampler objects and sets parameters on each.\n *\n * Example:\n *\n *      const samplers = twgl.createSamplers(gl, {\n *        nearest: {\n *          minMag: gl.NEAREST,\n *        },\n *        nearestClampS: {\n *          minMag: gl.NEAREST,\n *          wrapS: gl.CLAMP_TO_NEAREST,\n *        },\n *        linear: {\n *          minMag: gl.LINEAR,\n *        },\n *        nearestClamp: {\n *          minMag: gl.NEAREST,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClamp: {\n *          minMag: gl.LINEAR,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClampT: {\n *          minMag: gl.LINEAR,\n *          wrapT: gl.CLAMP_TO_EDGE,\n *        },\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler\n * @private\n */\nfunction createSamplers(gl, samplerOptions) {\n  const samplers = {};\n  Object.keys(samplerOptions).forEach(function(name) {\n    samplers[name] = createSampler(gl, samplerOptions[name]);\n  });\n  return samplers;\n}\n\n/**\n * Makes a 1x1 pixel\n * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.\n * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values\n * @return {Uint8Array} Unit8Array with color.\n * @private\n */\nfunction make1Pixel(color) {\n  color = color || defaults$1.textureColor;\n  if (isArrayBuffer$1(color)) {\n    return color;\n  }\n  return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\n/**\n * Sets filtering or generates mips for texture based on width or height\n * If width or height is not passed in uses `options.width` and//or `options.height`\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @param {number} [width] width of texture\n * @param {number} [height] height of texture\n * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..\n * @memberOf module:twgl/textures\n */\nfunction setTextureFilteringForSize(gl, tex, options, width, height, internalFormat) {\n  options = options || defaults$1.textureOptions;\n  internalFormat = internalFormat || RGBA;\n  const target = options.target || TEXTURE_2D;\n  width = width || options.width;\n  height = height || options.height;\n  gl.bindTexture(target, tex);\n  if (canGenerateMipmap(gl, width, height, internalFormat)) {\n    gl.generateMipmap(target);\n  } else {\n    const filtering = canFilter(internalFormat) ? LINEAR : NEAREST;\n    gl.texParameteri(target, TEXTURE_MIN_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_MAG_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n}\n\nfunction shouldAutomaticallySetTextureFilteringForSize(options) {\n  return options.auto === true || (options.auto === undefined && options.level === undefined);\n}\n\n/**\n * Gets an array of cubemap face enums\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @return {number[]} cubemap face enums\n * @private\n */\nfunction getCubeFaceOrder(gl, options) {\n  options = options || {};\n  return options.cubeFaceOrder || [\n      TEXTURE_CUBE_MAP_POSITIVE_X,\n      TEXTURE_CUBE_MAP_NEGATIVE_X,\n      TEXTURE_CUBE_MAP_POSITIVE_Y,\n      TEXTURE_CUBE_MAP_NEGATIVE_Y,\n      TEXTURE_CUBE_MAP_POSITIVE_Z,\n      TEXTURE_CUBE_MAP_NEGATIVE_Z,\n    ];\n}\n\n/**\n * @typedef {Object} FaceInfo\n * @property {number} face gl enum for texImage2D\n * @property {number} ndx face index (0 - 5) into source data\n * @ignore\n */\n\n/**\n * Gets an array of FaceInfos\n * There's a bug in some NVidia drivers that will crash the driver if\n * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take\n * the user's desired order from his faces to WebGL and make sure we\n * do the faces in WebGL order\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundant but\n *    it's needed internally to sort the array of `ndx` properties by `face`.\n * @private\n */\nfunction getCubeFacesWithNdx(gl, options) {\n  const faces = getCubeFaceOrder(gl, options);\n  // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(\n  const facesWithNdx = faces.map(function(face, ndx) {\n    return { face: face, ndx: ndx };\n  });\n  facesWithNdx.sort(function(a, b) {\n    return a.face - b.face;\n  });\n  return facesWithNdx;\n}\n\n/**\n * Set a texture from the contents of an element. Will also set\n * texture filtering or generate mips based on the dimensions of the element\n * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will\n * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {HTMLElement} element a canvas, img, or video element.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @kind function\n */\nfunction setTextureFromElement(gl, tex, element, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  const level = options.level || 0;\n  let width = element.width;\n  let height = element.height;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP) {\n    // guess the parts\n    const imgWidth  = element.width;\n    const imgHeight = element.height;\n    let size;\n    let slices;\n    if (imgWidth / 6 === imgHeight) {\n      // It's 6x1\n      size = imgHeight;\n      slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n    } else if (imgHeight / 6 === imgWidth) {\n      // It's 1x6\n      size = imgWidth;\n      slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];\n    } else if (imgWidth / 3 === imgHeight / 2) {\n      // It's 3x2\n      size = imgWidth / 3;\n      slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];\n    } else if (imgWidth / 2 === imgHeight / 3) {\n      // It's 2x3\n      size = imgWidth / 2;\n      slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];\n    } else {\n      throw \"can't figure out cube map from element: \" + (element.src ? element.src : element.nodeName);\n    }\n    const ctx = getShared2DContext();\n    if (ctx) {\n      ctx.canvas.width = size;\n      ctx.canvas.height = size;\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);\n        gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);\n      });\n      // Free up the canvas memory\n      ctx.canvas.width = 1;\n      ctx.canvas.height = 1;\n    } else if (typeof createImageBitmap !== 'undefined') {\n      // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's\n      // note lossy? (alpha is not premultiplied? although I'm not sure what\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        // We can't easily use a default texture color here as it would have to match\n        // the type across all faces where as with a 2D one there's only one face\n        // so we're replacing everything all at once. It also has to be the correct size.\n        // On the other hand we need all faces to be the same size so as one face loads\n        // the rest match else the texture will be un-renderable.\n        gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);\n        createImageBitmap(element, xOffset, yOffset, size, size, {\n          premultiplyAlpha: 'none',\n          colorSpaceConversion: 'none',\n        })\n        .then(function(imageBitmap) {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n          gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n          }\n        });\n      });\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    const smallest = Math.min(element.width, element.height);\n    const largest = Math.max(element.width, element.height);\n    const depth = largest / smallest;\n    if (depth % 1 !== 0) {\n      throw \"can not compute 3D dimensions of element\";\n    }\n    const xMult = element.width  === largest ? 1 : 0;\n    const yMult = element.height === largest ? 1 : 0;\n    gl.pixelStorei(UNPACK_ALIGNMENT, 1);\n    gl.pixelStorei(UNPACK_ROW_LENGTH, element.width);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n    gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);\n    for (let d = 0; d < depth; ++d) {\n      const srcX = d * smallest * xMult;\n      const srcY = d * smallest * yMult;\n      gl.pixelStorei(UNPACK_SKIP_PIXELS, srcX);\n      gl.pixelStorei(UNPACK_SKIP_ROWS, srcY);\n      gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);\n    }\n    setSkipStateToDefault(gl);\n  } else {\n    gl.texImage2D(target, level, internalFormat, format, type, element);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n}\n\nfunction noop() {\n}\n\n/**\n * Checks whether the url's origin is the same so that we can set the `crossOrigin`\n * @param {string} url url to image\n * @returns {boolean} true if the window's origin is the same as image's url\n * @private\n */\nfunction urlIsSameOrigin(url) {\n  if (typeof document !== 'undefined') {\n    // for IE really\n    const a = document.createElement('a');\n    a.href = url;\n    return a.hostname === location.hostname &&\n           a.port     === location.port &&\n           a.protocol === location.protocol;\n  } else {\n    const localOrigin = (new URL(location.href)).origin;\n    const urlOrigin = (new URL(url, location.href)).origin;\n    return urlOrigin === localOrigin;\n  }\n}\n\nfunction setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {\n  return crossOrigin === undefined && !urlIsSameOrigin(url)\n     ? 'anonymous'\n     : crossOrigin;\n}\n\n/**\n * Loads an image\n * @param {string} url url to image\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @return {HTMLImageElement} the image being loaded.\n * @private\n */\nfunction loadImage(url, crossOrigin, callback) {\n  callback = callback || noop;\n  let img;\n  crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults$1.crossOrigin;\n  crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);\n  if (typeof Image !== 'undefined') {\n    img = new Image();\n    if (crossOrigin !== undefined) {\n      img.crossOrigin = crossOrigin;\n    }\n\n    const clearEventHandlers = function clearEventHandlers() {\n      img.removeEventListener('error', onError);  // eslint-disable-line\n      img.removeEventListener('load', onLoad);  // eslint-disable-line\n      img = null;\n    };\n\n    const onError = function onError() {\n      const msg = \"couldn't load image: \" + url;\n      error(msg);\n      callback(msg, img);\n      clearEventHandlers();\n    };\n\n    const onLoad = function onLoad() {\n      callback(null, img);\n      clearEventHandlers();\n    };\n\n    img.addEventListener('error', onError);\n    img.addEventListener('load', onLoad);\n    img.src = url;\n    return img;\n  } else if (typeof ImageBitmap !== 'undefined') {\n    let err;\n    let bm;\n    const cb = function cb() {\n      callback(err, bm);\n    };\n\n    const options = {};\n    if (crossOrigin) {\n      options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin\n    }\n    fetch(url, options).then(function(response) {\n      if (!response.ok) {\n        throw response;\n      }\n      return response.blob();\n    }).then(function(blob) {\n      return createImageBitmap(blob, {\n        premultiplyAlpha: 'none',\n        colorSpaceConversion: 'none',\n      });\n    }).then(function(bitmap) {\n      // not sure if this works. We don't want\n      // to catch the user's error. So, call\n      // the callback in a timeout so we're\n      // not in this scope inside the promise.\n      bm = bitmap;\n      setTimeout(cb);\n    }).catch(function(e) {\n      err = e;\n      setTimeout(cb);\n    });\n    img = null;\n  }\n  return img;\n}\n\n/**\n * check if object is a TexImageSource\n *\n * @param {Object} obj Object to test\n * @return {boolean} true if object is a TexImageSource\n * @private\n */\nfunction isTexImageSource(obj) {\n  return (typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap) ||\n         (typeof ImageData !== 'undefined'  && obj instanceof ImageData) ||\n         (typeof HTMLElement !== 'undefined'  && obj instanceof HTMLElement);\n}\n\n/**\n * if obj is an TexImageSource then just\n * uses it otherwise if obj is a string\n * then load it first.\n *\n * @param {string|TexImageSource} obj\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @private\n */\nfunction loadAndUseImage(obj, crossOrigin, callback) {\n  if (isTexImageSource(obj)) {\n    setTimeout(function() {\n      callback(null, obj);\n    });\n    return obj;\n  }\n\n  return loadImage(obj, crossOrigin, callback);\n}\n\n/**\n * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set\n * the default texture color is used which can be set by calling `setDefaultTextureColor`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction setTextureTo1PixelColor(gl, tex, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  if (options.color === false) {\n    return;\n  }\n  // Assume it's a URL\n  // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\n  const color = make1Pixel(options.color);\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, 0, RGBA, 1, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n  } else {\n    gl.texImage2D(target, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n  }\n}\n\n/**\n * The src image(s) used to create a texture.\n *\n * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}\n * you can pass in urls for images to load into the textures. If it's a single url\n * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap\n * this will be a corresponding array of images for the cubemap.\n *\n * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback TextureReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} texture the texture.\n * @param {module:twgl.TextureSrc} source image(s) used to as the src for the texture\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when all images have finished downloading and been uploaded into their respective textures\n * @callback TexturesReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.\n * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback CubemapReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each face.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback ThreeDReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each slice.\n * @memberOf module:twgl\n */\n\n/**\n * Loads a texture from an image from a Url as specified in `options.src`\n * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is\n * immediately useable. It will be updated with the contents of the image once the image has finished\n * downloading. Filtering options will be set as appropriate for image unless `options.auto === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will\n *    be non null if there was an error.\n * @return {HTMLImageElement} the image being downloaded.\n * @memberOf module:twgl/textures\n */\nfunction loadTextureFromUrl(gl, tex, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  const img = loadAndUseImage(options.src, options.crossOrigin, function(err, img) {\n    if (err) {\n      callback(err, tex, img);\n    } else {\n      setTextureFromElement(gl, tex, img, options);\n      callback(null, tex, img);\n    }\n  });\n  return img;\n}\n\n/**\n * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction loadCubemapFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  if (urls.length !== 6) {\n    throw \"there must be 6 urls for a cubemap\";\n  }\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE$2;\n  const target = options.target || TEXTURE_2D;\n  if (target !== TEXTURE_CUBE_MAP) {\n    throw \"target must be TEXTURE_CUBE_MAP\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = 6;\n  const errors = [];\n  const faces = getCubeFaceOrder(gl, options);\n  let imgs;  // eslint-disable-line\n\n  function uploadImg(faceTarget) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        if (img.width !== img.height) {\n          errors.push(\"cubemap face img is not a square: \" + img.src);\n        } else {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n\n          // So assuming this is the first image we now have one face that's img sized\n          // and 5 faces that are 1x1 pixel so size the other faces\n          if (numToLoad === 5) {\n            // use the default order\n            getCubeFaceOrder().forEach(function(otherTarget) {\n              // Should we re-use the same face or a color?\n              gl.texImage2D(otherTarget, level, internalFormat, format, type, img);\n            });\n          } else {\n            gl.texImage2D(faceTarget, level, internalFormat, format, type, img);\n          }\n\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            gl.generateMipmap(target);\n          }\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));\n  });\n}\n\n/**\n * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.\n * Will set the texture to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n *\n * If the width and height is not specified the width and height of the first\n * image loaded will be used. Note that since images are loaded async\n * which image downloads first is unknown.\n *\n * If an image is not the same size as the width and height it will be scaled\n * to that width and height.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction loadSlicesFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE$2;\n  const target = options.target || TEXTURE_2D_ARRAY;\n  if (target !== TEXTURE_3D && target !== TEXTURE_2D_ARRAY) {\n    throw \"target must be TEXTURE_3D or TEXTURE_2D_ARRAY\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = urls.length;\n  const errors = [];\n  let imgs;  // eslint-disable-line\n  const level = options.level || 0;\n  let width = options.width;\n  let height = options.height;\n  const depth = urls.length;\n  let firstImage = true;\n\n  function uploadImg(slice) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        setPackState(gl, options);\n        gl.bindTexture(target, tex);\n\n        if (firstImage) {\n          firstImage = false;\n          width = options.width || img.width;\n          height = options.height || img.height;\n          gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n\n          // put it in every slice otherwise some slices will be 0,0,0,0\n          for (let s = 0; s < depth; ++s) {\n            gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);\n          }\n        } else {\n          let src = img;\n          let ctx;\n          if (img.width !== width || img.height !== height) {\n            // Size the image to fix\n            ctx = getShared2DContext();\n            src = ctx.canvas;\n            ctx.canvas.width = width;\n            ctx.canvas.height = height;\n            ctx.drawImage(img, 0, 0, width, height);\n          }\n\n          gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src);\n\n          // free the canvas memory\n          if (ctx && src === ctx.canvas) {\n            ctx.canvas.width = 0;\n            ctx.canvas.height = 0;\n          }\n        }\n\n        if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n          gl.generateMipmap(target);\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));\n  });\n}\n\n/**\n * Sets a texture from an array or typed array. If the width or height is not provided will attempt to\n * guess the size. See {@link module:twgl.TextureOptions}.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureFromArray(gl, tex, src, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  let width = options.width;\n  let height = options.height;\n  let depth = options.depth;\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  if (!isArrayBuffer$1(src)) {\n    const Type = getTypedArrayTypeForGLType(type);\n    src = new Type(src);\n  } else if (src instanceof Uint8ClampedArray) {\n    src = new Uint8Array(src.buffer);\n  }\n\n  const bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);\n  const numElements = src.byteLength / bytesPerElement;  // TODO: check UNPACK_ALIGNMENT?\n  if (numElements % 1) {\n    throw \"length wrong size for format: \" + glEnumToString(gl, format);\n  }\n  let dimensions;\n  if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    if (!width && !height && !depth) {\n      const size = Math.cbrt(numElements);\n      if (size % 1 !== 0) {\n        throw \"can't guess cube size of array of numElements: \" + numElements;\n      }\n      width = size;\n      height = size;\n      depth = size;\n    } else if (width && (!height || !depth)) {\n      dimensions = guessDimensions(gl, target, height, depth, numElements / width);\n      height = dimensions.width;\n      depth = dimensions.height;\n    } else if (height && (!width || !depth)) {\n      dimensions = guessDimensions(gl, target, width, depth, numElements / height);\n      width = dimensions.width;\n      depth = dimensions.height;\n    } else {\n      dimensions = guessDimensions(gl, target, width, height, numElements / depth);\n      width = dimensions.width;\n      height = dimensions.height;\n    }\n  } else {\n    dimensions = guessDimensions(gl, target, width, height, numElements);\n    width = dimensions.width;\n    height = dimensions.height;\n  }\n  setSkipStateToDefault(gl);\n  gl.pixelStorei(UNPACK_ALIGNMENT, options.unpackAlignment || 1);\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP) {\n    const elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;\n    const faceSize = numElements / 6 * elementsPerElement;\n\n    getCubeFacesWithNdx(gl, options).forEach(f => {\n      const offset = faceSize * f.ndx;\n      const data = src.subarray(offset, offset + faceSize);\n      gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);\n    });\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);\n  }\n  return {\n    width: width,\n    height: height,\n    depth: depth,\n    type: type,\n  };\n}\n\n/**\n * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.\n * You must set `options.width` and `options.height`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setEmptyTexture(gl, tex, options) {\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);\n  }\n}\n\n/**\n * Creates a texture based on the options passed in.\n *\n * Note: may reset UNPACK_ALIGNMENT, UNPACK_ROW_LENGTH, UNPACK_IMAGE_HEIGHT, UNPACK_SKIP_IMAGES\n * UNPACK_SKIP_PIXELS, and UNPACK_SKIP_ROWS\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.\n * @return {WebGLTexture} the created texture.\n * @memberOf module:twgl/textures\n */\nfunction createTexture(gl, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  const tex = gl.createTexture();\n  const target = options.target || TEXTURE_2D;\n  let width  = options.width  || 1;\n  let height = options.height || 1;\n  const internalFormat = options.internalFormat || RGBA;\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP) {\n    // this should have been the default for cubemaps :(\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n  let src = options.src;\n  if (src) {\n    if (typeof src === \"function\") {\n      src = src(gl, options);\n    }\n    if (typeof (src) === \"string\") {\n      loadTextureFromUrl(gl, tex, options, callback);\n    } else if (isArrayBuffer$1(src) ||\n               (Array.isArray(src) && (\n                    typeof src[0] === 'number' ||\n                    Array.isArray(src[0]) ||\n                    isArrayBuffer$1(src[0]))\n               )\n              ) {\n      const dimensions = setTextureFromArray(gl, tex, src, options);\n      width  = dimensions.width;\n      height = dimensions.height;\n    } else if (Array.isArray(src) && (typeof (src[0]) === 'string' || isTexImageSource(src[0]))) {\n      if (target === TEXTURE_CUBE_MAP) {\n        loadCubemapFromUrls(gl, tex, options, callback);\n      } else {\n        loadSlicesFromUrls(gl, tex, options, callback);\n      }\n    } else { // if (isTexImageSource(src))\n      setTextureFromElement(gl, tex, src, options);\n      width  = src.width;\n      height = src.height;\n    }\n  } else {\n    setEmptyTexture(gl, tex, options);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n  return tex;\n}\n\n/**\n * Resizes a texture based on the options passed in.\n *\n * Note: This is not a generic resize anything function.\n * It's mostly used by {@link module:twgl.resizeFramebufferInfo}\n * It will use `options.src` if it exists to try to determine a `type`\n * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided\n * for the texture. Texture parameters will be set accordingly\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the texture to resize\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {number} [width] the new width. If not passed in will use `options.width`\n * @param {number} [height] the new height. If not passed in will use `options.height`\n * @param {number} [depth] the new depth. If not passed in will use `options.depth`\n * @memberOf module:twgl/textures\n */\nfunction resizeTexture(gl, tex, options, width, height, depth) {\n  width = width || options.width;\n  height = height || options.height;\n  depth = depth || options.depth;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  let type;\n  const src = options.src;\n  if (!src) {\n    type = options.type || formatType.type;\n  } else if (isArrayBuffer$1(src) || (Array.isArray(src) && typeof (src[0]) === 'number')) {\n    type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  } else {\n    type = options.type || formatType.type;\n  }\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);\n  }\n}\n\n/**\n * Check if a src is an async request.\n * if src is a string we're going to download an image\n * if src is an array of strings we're going to download cubemap images\n * @param {*} src The src from a TextureOptions\n * @returns {bool} true if src is async.\n * @private\n */\nfunction isAsyncSrc(src) {\n  return typeof src === 'string' ||\n         (Array.isArray(src) && typeof src[0] === 'string');\n}\n\n/**\n * Creates a bunch of textures based on the passed in options.\n *\n * Example:\n *\n *     const textures = twgl.createTextures(gl, {\n *       // a power of 2 image\n *       hftIcon: { src: \"images/hft-icon-16.png\", mag: gl.NEAREST },\n *       // a non-power of 2 image\n *       clover: { src: \"images/clover.jpg\" },\n *       // From a canvas\n *       fromCanvas: { src: ctx.canvas },\n *       // A cubemap from 6 images\n *       yokohama: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: [\n *           'images/yokohama/posx.jpg',\n *           'images/yokohama/negx.jpg',\n *           'images/yokohama/posy.jpg',\n *           'images/yokohama/negy.jpg',\n *           'images/yokohama/posz.jpg',\n *           'images/yokohama/negz.jpg',\n *         ],\n *       },\n *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)\n *       goldengate: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: 'images/goldengate.jpg',\n *       },\n *       // A 2x2 pixel texture from a JavaScript array\n *       checker: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         src: [\n *           255,255,255,255,\n *           192,192,192,255,\n *           192,192,192,255,\n *           255,255,255,255,\n *         ],\n *       },\n *       // a 1x2 pixel texture from a typed array.\n *       stripe: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         format: gl.LUMINANCE,\n *         src: new Uint8Array([\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *         ]),\n *         width: 1,\n *       },\n *     });\n *\n * Now\n *\n * *   `textures.hftIcon` will be a 2d texture\n * *   `textures.clover` will be a 2d texture\n * *   `textures.fromCanvas` will be a 2d texture\n * *   `textures.yohohama` will be a cubemap texture\n * *   `textures.goldengate` will be a cubemap texture\n * *   `textures.checker` will be a 2d texture\n * *   `textures.stripe` will be a 2d texture\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.\n * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.\n * @return {Object.<string,WebGLTexture>} the created textures by name\n * @memberOf module:twgl/textures\n */\nfunction createTextures(gl, textureOptions, callback) {\n  callback = callback || noop;\n  let numDownloading = 0;\n  const errors = [];\n  const textures = {};\n  const images = {};\n\n  function callCallbackIfReady() {\n    if (numDownloading === 0) {\n      setTimeout(function() {\n        callback(errors.length ? errors : undefined, textures, images);\n      }, 0);\n    }\n  }\n\n  Object.keys(textureOptions).forEach(function(name) {\n    const options = textureOptions[name];\n    let onLoadFn;\n    if (isAsyncSrc(options.src)) {\n      onLoadFn = function(err, tex, img) {\n        images[name] = img;\n        --numDownloading;\n        if (err) {\n          errors.push(err);\n        }\n        callCallbackIfReady();\n      };\n      ++numDownloading;\n    }\n    textures[name] = createTexture(gl, options, onLoadFn);\n  });\n\n  // queue the callback if there are no images to download.\n  // We do this because if your code is structured to wait for\n  // images to download but then you comment out all the async\n  // images your code would break.\n  callCallbackIfReady();\n\n  return textures;\n}\n\nvar textures = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  setTextureDefaults_: setDefaults$1,\n  createSampler: createSampler,\n  createSamplers: createSamplers,\n  setSamplerParameters: setSamplerParameters,\n  createTexture: createTexture,\n  setEmptyTexture: setEmptyTexture,\n  setTextureFromArray: setTextureFromArray,\n  loadTextureFromUrl: loadTextureFromUrl,\n  setTextureFromElement: setTextureFromElement,\n  setTextureFilteringForSize: setTextureFilteringForSize,\n  setTextureParameters: setTextureParameters,\n  setDefaultTextureColor: setDefaultTextureColor,\n  createTextures: createTextures,\n  resizeTexture: resizeTexture,\n  canGenerateMipmap: canGenerateMipmap,\n  canFilter: canFilter,\n  getNumComponentsForFormat: getNumComponentsForFormat,\n  getBytesPerElementForInternalFormat: getBytesPerElementForInternalFormat,\n  getFormatAndTypeForInternalFormat: getFormatAndTypeForInternalFormat\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level shader program related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.programs` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/programs\n */\n\nconst error$1 = error;\nconst warn$1 = warn;\nfunction getElementById(id) {\n  return (typeof document !== 'undefined' && document.getElementById)\n      ? document.getElementById(id)\n      : null;\n}\n\nconst TEXTURE0                       = 0x84c0;\nconst DYNAMIC_DRAW                   = 0x88e8;\n\nconst ARRAY_BUFFER$1                   = 0x8892;\nconst ELEMENT_ARRAY_BUFFER$1           = 0x8893;\nconst UNIFORM_BUFFER                 = 0x8a11;\nconst TRANSFORM_FEEDBACK_BUFFER      = 0x8c8e;\n\nconst TRANSFORM_FEEDBACK             = 0x8e22;\n\nconst COMPILE_STATUS                 = 0x8b81;\nconst LINK_STATUS                    = 0x8b82;\nconst FRAGMENT_SHADER                = 0x8b30;\nconst VERTEX_SHADER                  = 0x8b31;\nconst SEPARATE_ATTRIBS               = 0x8c8d;\n\nconst ACTIVE_UNIFORMS                = 0x8b86;\nconst ACTIVE_ATTRIBUTES              = 0x8b89;\nconst TRANSFORM_FEEDBACK_VARYINGS    = 0x8c83;\nconst ACTIVE_UNIFORM_BLOCKS          = 0x8a36;\nconst UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER   = 0x8a44;\nconst UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46;\nconst UNIFORM_BLOCK_DATA_SIZE                     = 0x8a40;\nconst UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES        = 0x8a43;\n\nconst FLOAT$3                         = 0x1406;\nconst FLOAT_VEC2                    = 0x8B50;\nconst FLOAT_VEC3                    = 0x8B51;\nconst FLOAT_VEC4                    = 0x8B52;\nconst INT$3                           = 0x1404;\nconst INT_VEC2                      = 0x8B53;\nconst INT_VEC3                      = 0x8B54;\nconst INT_VEC4                      = 0x8B55;\nconst BOOL                          = 0x8B56;\nconst BOOL_VEC2                     = 0x8B57;\nconst BOOL_VEC3                     = 0x8B58;\nconst BOOL_VEC4                     = 0x8B59;\nconst FLOAT_MAT2                    = 0x8B5A;\nconst FLOAT_MAT3                    = 0x8B5B;\nconst FLOAT_MAT4                    = 0x8B5C;\nconst SAMPLER_2D                    = 0x8B5E;\nconst SAMPLER_CUBE                  = 0x8B60;\nconst SAMPLER_3D                    = 0x8B5F;\nconst SAMPLER_2D_SHADOW             = 0x8B62;\nconst FLOAT_MAT2x3                  = 0x8B65;\nconst FLOAT_MAT2x4                  = 0x8B66;\nconst FLOAT_MAT3x2                  = 0x8B67;\nconst FLOAT_MAT3x4                  = 0x8B68;\nconst FLOAT_MAT4x2                  = 0x8B69;\nconst FLOAT_MAT4x3                  = 0x8B6A;\nconst SAMPLER_2D_ARRAY              = 0x8DC1;\nconst SAMPLER_2D_ARRAY_SHADOW       = 0x8DC4;\nconst SAMPLER_CUBE_SHADOW           = 0x8DC5;\nconst UNSIGNED_INT$3                  = 0x1405;\nconst UNSIGNED_INT_VEC2             = 0x8DC6;\nconst UNSIGNED_INT_VEC3             = 0x8DC7;\nconst UNSIGNED_INT_VEC4             = 0x8DC8;\nconst INT_SAMPLER_2D                = 0x8DCA;\nconst INT_SAMPLER_3D                = 0x8DCB;\nconst INT_SAMPLER_CUBE              = 0x8DCC;\nconst INT_SAMPLER_2D_ARRAY          = 0x8DCF;\nconst UNSIGNED_INT_SAMPLER_2D       = 0x8DD2;\nconst UNSIGNED_INT_SAMPLER_3D       = 0x8DD3;\nconst UNSIGNED_INT_SAMPLER_CUBE     = 0x8DD4;\nconst UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\n\nconst TEXTURE_2D$1                    = 0x0DE1;\nconst TEXTURE_CUBE_MAP$1              = 0x8513;\nconst TEXTURE_3D$1                    = 0x806F;\nconst TEXTURE_2D_ARRAY$1              = 0x8C1A;\n\nconst typeMap = {};\n\n/**\n * Returns the corresponding bind point for a given sampler type\n * @private\n */\nfunction getBindPointForSamplerType(gl, type) {\n  return typeMap[type].bindPoint;\n}\n\n// This kind of sucks! If you could compose functions as in `var fn = gl[name];`\n// this code could be a lot smaller but that is sadly really slow (T_T)\n\nfunction floatSetter(gl, location) {\n  return function(v) {\n    gl.uniform1f(location, v);\n  };\n}\n\nfunction floatArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1fv(location, v);\n  };\n}\n\nfunction floatVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2fv(location, v);\n  };\n}\n\nfunction floatVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3fv(location, v);\n  };\n}\n\nfunction floatVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4fv(location, v);\n  };\n}\n\nfunction intSetter(gl, location) {\n  return function(v) {\n    gl.uniform1i(location, v);\n  };\n}\n\nfunction intArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1iv(location, v);\n  };\n}\n\nfunction intVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2iv(location, v);\n  };\n}\n\nfunction intVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3iv(location, v);\n  };\n}\n\nfunction intVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4iv(location, v);\n  };\n}\n\nfunction uintSetter(gl, location) {\n  return function(v) {\n    gl.uniform1ui(location, v);\n  };\n}\n\nfunction uintArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1uiv(location, v);\n  };\n}\n\nfunction uintVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2uiv(location, v);\n  };\n}\n\nfunction uintVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3uiv(location, v);\n  };\n}\n\nfunction uintVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4uiv(location, v);\n  };\n}\n\nfunction floatMat2Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2fv(location, false, v);\n  };\n}\n\nfunction floatMat3Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3fv(location, false, v);\n  };\n}\n\nfunction floatMat4Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4fv(location, false, v);\n  };\n}\n\nfunction floatMat23Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x3fv(location, false, v);\n  };\n}\n\nfunction floatMat32Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x2fv(location, false, v);\n  };\n}\n\nfunction floatMat24Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x4fv(location, false, v);\n  };\n}\n\nfunction floatMat42Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x2fv(location, false, v);\n  };\n}\n\nfunction floatMat34Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x4fv(location, false, v);\n  };\n}\n\nfunction floatMat43Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x3fv(location, false, v);\n  };\n}\n\nfunction samplerSetter(gl, type, unit, location) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  return isWebGL2(gl) ? function(textureOrPair) {\n    let texture;\n    let sampler;\n    if (isTexture(gl, textureOrPair)) {\n      texture = textureOrPair;\n      sampler = null;\n    } else {\n      texture = textureOrPair.texture;\n      sampler = textureOrPair.sampler;\n    }\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n    gl.bindSampler(unit, sampler);\n  } : function(texture) {\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n  };\n}\n\nfunction samplerArraySetter(gl, type, unit, location, size) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  const units = new Int32Array(size);\n  for (let ii = 0; ii < size; ++ii) {\n    units[ii] = unit + ii;\n  }\n\n  return isWebGL2(gl) ? function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(textureOrPair, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      let texture;\n      let sampler;\n      if (isTexture(gl, textureOrPair)) {\n        texture = textureOrPair;\n        sampler = null;\n      } else {\n        texture = textureOrPair.texture;\n        sampler = textureOrPair.sampler;\n      }\n      gl.bindSampler(unit, sampler);\n      gl.bindTexture(bindPoint, texture);\n    });\n  } : function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(texture, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      gl.bindTexture(bindPoint, texture);\n    });\n  };\n}\n\ntypeMap[FLOAT$3]                         = { Type: Float32Array, size:  4, setter: floatSetter,      arraySetter: floatArraySetter, };\ntypeMap[FLOAT_VEC2]                    = { Type: Float32Array, size:  8, setter: floatVec2Setter,  cols: 2, };\ntypeMap[FLOAT_VEC3]                    = { Type: Float32Array, size: 12, setter: floatVec3Setter,  cols: 3, };\ntypeMap[FLOAT_VEC4]                    = { Type: Float32Array, size: 16, setter: floatVec4Setter,  cols: 4, };\ntypeMap[INT$3]                           = { Type: Int32Array,   size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[INT_VEC2]                      = { Type: Int32Array,   size:  8, setter: intVec2Setter,    cols: 2, };\ntypeMap[INT_VEC3]                      = { Type: Int32Array,   size: 12, setter: intVec3Setter,    cols: 3, };\ntypeMap[INT_VEC4]                      = { Type: Int32Array,   size: 16, setter: intVec4Setter,    cols: 4, };\ntypeMap[UNSIGNED_INT$3]                  = { Type: Uint32Array,  size:  4, setter: uintSetter,       arraySetter: uintArraySetter, };\ntypeMap[UNSIGNED_INT_VEC2]             = { Type: Uint32Array,  size:  8, setter: uintVec2Setter,   cols: 2, };\ntypeMap[UNSIGNED_INT_VEC3]             = { Type: Uint32Array,  size: 12, setter: uintVec3Setter,   cols: 3, };\ntypeMap[UNSIGNED_INT_VEC4]             = { Type: Uint32Array,  size: 16, setter: uintVec4Setter,   cols: 4, };\ntypeMap[BOOL]                          = { Type: Uint32Array,  size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[BOOL_VEC2]                     = { Type: Uint32Array,  size:  8, setter: intVec2Setter,    cols: 2, };\ntypeMap[BOOL_VEC3]                     = { Type: Uint32Array,  size: 12, setter: intVec3Setter,    cols: 3, };\ntypeMap[BOOL_VEC4]                     = { Type: Uint32Array,  size: 16, setter: intVec4Setter,    cols: 4, };\ntypeMap[FLOAT_MAT2]                    = { Type: Float32Array, size: 32, setter: floatMat2Setter,  rows: 2, cols: 2, };\ntypeMap[FLOAT_MAT3]                    = { Type: Float32Array, size: 48, setter: floatMat3Setter,  rows: 3, cols: 3, };\ntypeMap[FLOAT_MAT4]                    = { Type: Float32Array, size: 64, setter: floatMat4Setter,  rows: 4, cols: 4, };\ntypeMap[FLOAT_MAT2x3]                  = { Type: Float32Array, size: 32, setter: floatMat23Setter, rows: 2, cols: 3, };\ntypeMap[FLOAT_MAT2x4]                  = { Type: Float32Array, size: 32, setter: floatMat24Setter, rows: 2, cols: 4, };\ntypeMap[FLOAT_MAT3x2]                  = { Type: Float32Array, size: 48, setter: floatMat32Setter, rows: 3, cols: 2, };\ntypeMap[FLOAT_MAT3x4]                  = { Type: Float32Array, size: 48, setter: floatMat34Setter, rows: 3, cols: 4, };\ntypeMap[FLOAT_MAT4x2]                  = { Type: Float32Array, size: 64, setter: floatMat42Setter, rows: 4, cols: 2, };\ntypeMap[FLOAT_MAT4x3]                  = { Type: Float32Array, size: 64, setter: floatMat43Setter, rows: 4, cols: 3, };\ntypeMap[SAMPLER_2D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[SAMPLER_CUBE]                  = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[SAMPLER_3D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };\ntypeMap[SAMPLER_2D_SHADOW]             = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[SAMPLER_2D_ARRAY]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\ntypeMap[SAMPLER_2D_ARRAY_SHADOW]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\ntypeMap[SAMPLER_CUBE_SHADOW]           = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[INT_SAMPLER_2D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[INT_SAMPLER_3D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };\ntypeMap[INT_SAMPLER_CUBE]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[INT_SAMPLER_2D_ARRAY]          = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[UNSIGNED_INT_SAMPLER_3D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };\ntypeMap[UNSIGNED_INT_SAMPLER_CUBE]     = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\n\nfunction floatAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      switch (b.value.length) {\n        case 4:\n          gl.vertexAttrib4fv(index, b.value);\n          break;\n        case 3:\n          gl.vertexAttrib3fv(index, b.value);\n          break;\n        case 2:\n          gl.vertexAttrib2fv(index, b.value);\n          break;\n        case 1:\n          gl.vertexAttrib1fv(index, b.value);\n          break;\n        default:\n          throw new Error('the length of a float constant value must be between 1 and 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribPointer(\n          index, b.numComponents || b.size, b.type || FLOAT$3, b.normalize || false, b.stride || 0, b.offset || 0);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction intAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4iv(index, b.value);\n      } else {\n        throw new Error('The length of an integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || INT$3, b.stride || 0, b.offset || 0);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction uintAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4uiv(index, b.value);\n      } else {\n        throw new Error('The length of an unsigned integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || UNSIGNED_INT$3, b.stride || 0, b.offset || 0);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction matAttribSetter(gl, index, typeInfo) {\n  const defaultSize = typeInfo.size;\n  const count = typeInfo.count;\n\n  return function(b) {\n    gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n    const numComponents = b.size || b.numComponents || defaultSize;\n    const size = numComponents / count;\n    const type = b.type || FLOAT$3;\n    const typeInfo = typeMap[type];\n    const stride = typeInfo.size * numComponents;\n    const normalize = b.normalize || false;\n    const offset = b.offset || 0;\n    const rowOffset = stride / count;\n    for (let i = 0; i < count; ++i) {\n      gl.enableVertexAttribArray(index + i);\n      gl.vertexAttribPointer(\n          index + i, size, type, normalize, stride, offset + rowOffset * i);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index + i, b.divisor);\n      }\n    }\n  };\n}\n\n\n\nconst attrTypeMap = {};\nattrTypeMap[FLOAT$3]             = { size:  4, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC2]        = { size:  8, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC3]        = { size: 12, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC4]        = { size: 16, setter: floatAttribSetter, };\nattrTypeMap[INT$3]               = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC2]          = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC3]          = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC4]          = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[UNSIGNED_INT$3]      = { size:  4, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC2] = { size:  8, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC3] = { size: 12, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC4] = { size: 16, setter: uintAttribSetter,  };\nattrTypeMap[BOOL]              = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC2]         = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC3]         = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC4]         = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[FLOAT_MAT2]        = { size:  4, setter: matAttribSetter,   count: 2, };\nattrTypeMap[FLOAT_MAT3]        = { size:  9, setter: matAttribSetter,   count: 3, };\nattrTypeMap[FLOAT_MAT4]        = { size: 16, setter: matAttribSetter,   count: 4, };\n\nconst errorRE = /ERROR:\\s*\\d+:(\\d+)/gi;\nfunction addLineNumbersWithError(src, log = '', lineOffset = 0) {\n  // Note: Error message formats are not defined by any spec so this may or may not work.\n  const matches = [...log.matchAll(errorRE)];\n  const lineNoToErrorMap = new Map(matches.map((m, ndx) => {\n    const lineNo = parseInt(m[1]);\n    const next = matches[ndx + 1];\n    const end = next ? next.index : log.length;\n    const msg = log.substring(m.index, end);\n    return [lineNo - 1, msg];\n  }));\n  return src.split('\\n').map((line, lineNo) => {\n    const err = lineNoToErrorMap.get(lineNo);\n    return `${lineNo + 1 + lineOffset}: ${line}${err ? `\\n\\n^^^ ${err}` : ''}`;\n  }).join('\\n');\n}\n\n/**\n * Error Callback\n * @callback ErrorCallback\n * @param {string} msg error message.\n * @param {number} [lineOffset] amount to add to line number\n * @memberOf module:twgl\n */\n\n/**\n * Program Callback\n * @callback ProgramCallback\n * @param {string} [err] error message, falsy if no error\n * @param {WebGLProgram|module:twgl.ProgramInfo} [result] the program or programInfo\n */\n\nconst spaceRE = /^[ \\t]*\\n/;\n\n/**\n * Remove the first end of line because WebGL 2.0 requires\n * #version 300 es\n * as the first line. No whitespace allowed before that line\n * so\n *\n * <script>\n * #version 300 es\n * </script>\n *\n * Has one line before it which is invalid according to GLSL ES 3.00\n *\n * @param {string} shaderSource The source of the shader\n * @returns {{shaderSource: string, lineOffset: number}}\n * @private\n */\nfunction prepShaderSource(shaderSource) {\n  let lineOffset = 0;\n  if (spaceRE.test(shaderSource)) {\n    lineOffset = 1;\n    shaderSource = shaderSource.replace(spaceRE, '');\n  }\n  return {lineOffset, shaderSource};\n}\n\n/**\n * @param {module:twgl.ProgramOptions} progOptions\n * @param {string} msg\n * @return null\n * @private\n */\nfunction reportError(progOptions, msg) {\n  progOptions.errorCallback(msg);\n  if (progOptions.callback) {\n    setTimeout(() => {\n      progOptions.callback(`${msg}\\n${progOptions.errors.join('\\n')}`);\n    });\n  }\n  return null;\n}\n\n/**\n * Loads a shader.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} shaderSource The shader source.\n * @param {number} shaderType The type of shader.\n * @param {module:twgl.ProgramOptions} progOptions\n * @return {WebGLShader} The created shader.\n * @private\n */\nfunction loadShader(gl, shaderSource, shaderType, progOptions) {\n  // Create the shader object\n  const shader = gl.createShader(shaderType);\n\n  // Load the shader source\n  gl.shaderSource(shader, prepShaderSource(shaderSource).shaderSource);\n\n  // Compile the shader\n  gl.compileShader(shader);\n\n  if (!progOptions.callback && !checkShaderStatus(gl, shaderType, shader, progOptions.errorCallback)) {\n    gl.deleteShader(shader);\n    return null;\n  }\n\n  return shader;\n}\n\n/**\n * Check Shader status\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {number} shaderType The shader type\n * @param {WebGLShader} shader The shader\n * @param {ErrorCallback} [errFn] function to receive error message.\n * @return {bool} true if shader is ok.\n * @private\n */\nfunction checkShaderStatus(gl, shaderType, shader, errFn) {\n  errFn = errFn || error$1;\n  // Check the compile status\n  const compiled = gl.getShaderParameter(shader, COMPILE_STATUS);\n  if (!compiled) {\n    // Something went wrong during compilation; get the error\n    const lastError = gl.getShaderInfoLog(shader);\n    const {lineOffset, shaderSource} = prepShaderSource(gl.getShaderSource(shader));\n    errFn(`${addLineNumbersWithError(shaderSource, lastError, lineOffset)}\\nError compiling ${glEnumToString(gl, shaderType)}: ${lastError}`);\n  }\n  return compiled;\n}\n\n/**\n * @typedef {Object} ProgramOptions\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>} [attribLocations] a attribute name to location map\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @property {ProgramCallback} [callback] callback for async program compilation.\n * @memberOf module:twgl\n */\n\n/**\n * Gets the program options based on all these optional arguments\n * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments passed in\n * @private\n */\nfunction getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {\n  let transformFeedbackVaryings;\n  let transformFeedbackMode;\n  let callback;\n  if (typeof opt_locations === 'function') {\n    opt_errorCallback = opt_locations;\n    opt_locations = undefined;\n  }\n  if (typeof opt_attribs === 'function') {\n    opt_errorCallback = opt_attribs;\n    opt_attribs = undefined;\n  } else if (opt_attribs && !Array.isArray(opt_attribs)) {\n    // If we have an errorCallback we can just return this object\n    // Otherwise we need to construct one with default errorCallback\n    if (opt_attribs.errorCallback && opt_attribs.errors) {\n      return opt_attribs;\n    }\n    const opt = opt_attribs;\n    opt_errorCallback = opt.errorCallback;\n    opt_attribs = opt.attribLocations;\n    transformFeedbackVaryings = opt.transformFeedbackVaryings;\n    transformFeedbackMode = opt.transformFeedbackMode;\n    callback = opt.callback;\n  }\n\n  const errorCallback = opt_errorCallback || error$1;\n  const errors = [];\n  const options = {\n    errorCallback(msg, ...args) {\n      errors.push(msg);\n      errorCallback(msg, ...args);\n    },\n    transformFeedbackVaryings,\n    transformFeedbackMode,\n    callback,\n    errors,\n  };\n\n  if (opt_attribs) {\n    let attribLocations = {};\n    if (Array.isArray(opt_attribs)) {\n      opt_attribs.forEach(function(attrib,  ndx) {\n        attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;\n      });\n    } else {\n      attribLocations = opt_attribs;\n    }\n    options.attribLocations = attribLocations;\n  }\n\n  return options;\n}\n\nconst defaultShaderType = [\n  \"VERTEX_SHADER\",\n  \"FRAGMENT_SHADER\",\n];\n\nfunction getShaderTypeFromScriptType(gl, scriptType) {\n  if (scriptType.indexOf(\"frag\") >= 0) {\n    return FRAGMENT_SHADER;\n  } else if (scriptType.indexOf(\"vert\") >= 0) {\n    return VERTEX_SHADER;\n  }\n  return undefined;\n}\n\nfunction deleteShaders(gl, shaders) {\n  shaders.forEach(function(shader) {\n    gl.deleteShader(shader);\n  });\n}\n\nconst wait = (ms = 0) => new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the\n * program.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgram(gl, [vs, fs], options);\n *     twgl.createProgram(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error of a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgram(\n    gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n  // This code is really convoluted, because it may or may not be async\n  // Maybe it would be better to have a separate function\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const realShaders = [];\n  const newShaders = [];\n  for (let ndx = 0; ndx < shaders.length; ++ndx) {\n    let shader = shaders[ndx];\n    if (typeof (shader) === 'string') {\n      const elem = getElementById(shader);\n      const src = elem ? elem.text : shader;\n      let type = gl[defaultShaderType[ndx]];\n      if (elem && elem.type) {\n        type = getShaderTypeFromScriptType(gl, elem.type) || type;\n      }\n      shader = loadShader(gl, src, type, progOptions);\n      newShaders.push(shader);\n    }\n    if (isShader(gl, shader)) {\n      realShaders.push(shader);\n    }\n  }\n\n  if (realShaders.length !== shaders.length) {\n    deleteShaders(gl, newShaders);\n    return reportError(progOptions, \"not enough shaders for program\");\n  }\n\n  const program = gl.createProgram();\n  realShaders.forEach(function(shader) {\n    gl.attachShader(program, shader);\n  });\n  if (progOptions.attribLocations) {\n    Object.keys(progOptions.attribLocations).forEach(function(attrib) {\n      gl.bindAttribLocation(program, progOptions.attribLocations[attrib], attrib);\n    });\n  }\n  let varyings = progOptions.transformFeedbackVaryings;\n  if (varyings) {\n    if (varyings.attribs) {\n      varyings = varyings.attribs;\n    }\n    if (!Array.isArray(varyings)) {\n      varyings = Object.keys(varyings);\n    }\n    gl.transformFeedbackVaryings(program, varyings, progOptions.transformFeedbackMode || SEPARATE_ATTRIBS);\n  }\n\n  gl.linkProgram(program);\n  if (progOptions.callback) {\n    checkForProgramLinkCompletionAsync(gl, program, progOptions);\n    return null;\n  } else {\n    if (!checkProgramStatus(gl, program, progOptions.errorCallback)) {\n      gl.deleteProgram(program);\n      deleteShaders(gl, newShaders);\n      return null;\n    }\n    return program;\n  }\n}\n\n/**\n * Same as createProgram but returns a promise\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramAsync(gl, [vs, fs], options);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {Promise<WebGLProgram>} The created program\n * @memberOf module:twgl/programs\n */\nfunction createProgramAsync(gl, shaders, ...args) {\n  return new Promise((resolve, reject) => {\n    const programOptions = getProgramOptions(...args);\n    programOptions.callback = (err, program) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(program);\n      }\n    };\n    createProgram(gl, shaders, programOptions);\n  });\n}\n\n/**\n * Same as createProgramInfo but returns a promise\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {Promise<module:twgl.ProgramInfo>} The created ProgramInfo\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfoAsync(gl, shaders, ...args) {\n  return new Promise((resolve, reject) => {\n    const programOptions = getProgramOptions(...args);\n    programOptions.callback = (err, programInfo) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(programInfo);\n      }\n    };\n    createProgramInfo(gl, shaders, programOptions);\n  });\n}\n\n\n/**\n * Asynchronously wait for program to link.\n * Note: if 'KHR_parallel_shader_compile' extension does not\n * exist then compilation will not be truly async.\n * @param {WebGLRenderingContext} gl The context\n * @param {WebGLProgram} program The program\n * @param {module:twgl.ProgramOptions} progOptions Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @private\n */\nasync function checkForProgramLinkCompletionAsync(gl, program, progOptions) {\n  const ext = gl.getExtension('KHR_parallel_shader_compile');\n  const checkFn = ext\n      ? (gl, program) => gl.getProgramParameter(program, ext.COMPLETION_STATUS_KHR)\n      : () => true;\n\n  let waitTime = 0;\n  do {\n    await wait(waitTime);  // must wait at least once\n    waitTime = 1000 / 60;\n  } while (!checkFn(gl, program));\n\n  const success = checkProgramStatus(gl, program, progOptions.errorCallback);\n  const err = success ? undefined : progOptions.errors.join('\\n');\n  if (!success) {\n    const errFn = progOptions.errorCallback || error$1;\n    errFn(err);\n    gl.deleteProgram(program);\n    // TODO: delete shaders, but only shaders that were created newly for this\n    // program\n    program = null;\n  }\n  progOptions.callback(err, program);\n}\n\n/**\n * Check a program's link status\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program Program to check\n * @param {ErrorCallback} [errFn] func for errors\n * @return {bool} true if program is ok\n * @private\n */\nfunction checkProgramStatus(gl, program, errFn) {\n  errFn = errFn || error$1;\n  // Check the link status\n  const linked = gl.getProgramParameter(program, LINK_STATUS);\n  if (!linked) {\n    // something went wrong with the link\n    const lastError = gl.getProgramInfoLog(program);\n    errFn(`Error in program linking: ${lastError}`);\n  }\n  return linked;\n}\n\n/**\n * Loads a shader from a script tag.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} scriptId The id of the script tag.\n * @param {number} [opt_shaderType] The type of shader. If not passed in it will\n *     be derived from the type of the script tag.\n * @param {module:twgl.ProgramOptions} [progOptions] callback for errors.\n * @return {WebGLShader?} The created shader or null if error.\n * @private\n */\nfunction createShaderFromScript(\n    gl, scriptId, opt_shaderType, progOptions) {\n  let shaderSource = \"\";\n  const shaderScript = getElementById(scriptId);\n  if (!shaderScript) {\n    return reportError(progOptions, `unknown script element: ${scriptId}`);\n  }\n  shaderSource = shaderScript.text;\n\n  const shaderType = opt_shaderType || getShaderTypeFromScriptType(gl, shaderScript.type);\n  if (!shaderType) {\n    return reportError(progOptions, 'unknown shader type');\n  }\n\n  return loadShader(gl, shaderSource, shaderType, progOptions);\n}\n\n/**\n * Creates a program from 2 script tags.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderScriptIds Array of ids of the script\n *        tags for the shaders. The first is assumed to be the\n *        vertex shader, the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromScripts(\n    gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (let ii = 0; ii < shaderScriptIds.length; ++ii) {\n    const shader = createShaderFromScript(\n        gl, shaderScriptIds[ii], gl[defaultShaderType[ii]], progOptions);\n    if (!shader) {\n      return null;\n    }\n    shaders.push(shader);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Creates a program from 2 sources.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromSources(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (let ii = 0; ii < shaderSources.length; ++ii) {\n    const shader = loadShader(gl, shaderSources[ii], gl[defaultShaderType[ii]], progOptions);\n    if (!progOptions.callback && !shader) {\n      return null;\n    }\n    shaders.push(shader);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Returns true if attribute/uniform is a reserved/built in\n *\n * It makes no sense to me why GL returns these because it's\n * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`\n * with names that start with `gl_` (and `webgl_` in WebGL)\n *\n * I can only assume they are there because they might count\n * when computing the number of uniforms/attributes used when you want to\n * know if you are near the limit. That doesn't really make sense\n * to me but the fact that these get returned are in the spec.\n *\n * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or\n *    `gl.getActiveAttrib`.\n * @return {bool} true if it's reserved\n * @private\n */\nfunction isBuiltIn(info) {\n  const name = info.name;\n  return name.startsWith(\"gl_\") || name.startsWith(\"webgl_\");\n}\n\nconst tokenRE = /(\\.|\\[|]|\\w+)/g;\nconst isDigit = s => s >= '0' && s <= '9';\nfunction addSetterToUniformTree(fullPath, setter, node, uniformSetters) {\n  const tokens = fullPath.split(tokenRE).filter(s => s !== '');\n  let tokenNdx = 0;\n  let path = '';\n\n  for (;;) {\n    const token = tokens[tokenNdx++];  // has to be name or number\n    path += token;\n    const isArrayIndex = isDigit(token[0]);\n    const accessor = isArrayIndex\n        ? parseInt(token)\n        : token;\n    if (isArrayIndex) {\n      path += tokens[tokenNdx++];  // skip ']'\n    }\n    const isLastToken = tokenNdx === tokens.length;\n    if (isLastToken) {\n      node[accessor] = setter;\n      break;\n    } else {\n      const token = tokens[tokenNdx++];  // has to be . or [\n      const isArray = token === '[';\n      const child = node[accessor] || (isArray ? [] : {});\n      node[accessor] = child;\n      node = child;\n      uniformSetters[path] = uniformSetters[path] || function(node) {\n        return function(value) {\n          setUniformTree(node, value);\n        };\n      }(child);\n      path += token;\n    }\n  }\n}\n\n/**\n * Creates setter functions for all uniforms of a shader\n * program.\n *\n * @see {@link module:twgl.setUniforms}\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @returns {Object.<string, function>} an object with a setter by name for each uniform\n * @memberOf module:twgl/programs\n */\nfunction createUniformSetters(gl, program) {\n  let textureUnit = 0;\n\n  /**\n   * Creates a setter for a uniform of the given program with it's\n   * location embedded in the setter.\n   * @param {WebGLProgram} program\n   * @param {WebGLUniformInfo} uniformInfo\n   * @returns {function} the created setter.\n   */\n  function createUniformSetter(program, uniformInfo, location) {\n    const isArray = uniformInfo.name.endsWith(\"[0]\");\n    const type = uniformInfo.type;\n    const typeInfo = typeMap[type];\n    if (!typeInfo) {\n      throw new Error(`unknown type: 0x${type.toString(16)}`); // we should never get here.\n    }\n    let setter;\n    if (typeInfo.bindPoint) {\n      // it's a sampler\n      const unit = textureUnit;\n      textureUnit += uniformInfo.size;\n      if (isArray) {\n        setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n      } else {\n        setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);\n      }\n    } else {\n      if (typeInfo.arraySetter && isArray) {\n        setter = typeInfo.arraySetter(gl, location);\n      } else {\n        setter = typeInfo.setter(gl, location);\n      }\n    }\n    setter.location = location;\n    return setter;\n  }\n\n  const uniformSetters = {};\n  const uniformTree = {};\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    if (isBuiltIn(uniformInfo)) {\n      continue;\n    }\n    let name = uniformInfo.name;\n    // remove the array suffix.\n    if (name.endsWith(\"[0]\")) {\n      name = name.substr(0, name.length - 3);\n    }\n    const location = gl.getUniformLocation(program, uniformInfo.name);\n    // the uniform will have no location if it's in a uniform block\n    if (location) {\n      const setter = createUniformSetter(program, uniformInfo, location);\n      uniformSetters[name] = setter;\n      addSetterToUniformTree(name, setter, uniformTree, uniformSetters);\n    }\n  }\n\n  return uniformSetters;\n}\n\n/**\n * @typedef {Object} TransformFeedbackInfo\n * @property {number} index index of transform feedback\n * @property {number} type GL type\n * @property {number} size 1 - 4\n * @memberOf module:twgl\n */\n\n/**\n * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {Object<string, module:twgl.TransformFeedbackInfo>}\n * @memberOf module:twgl\n */\nfunction createTransformFeedbackInfo(gl, program) {\n  const info = {};\n  const numVaryings = gl.getProgramParameter(program, TRANSFORM_FEEDBACK_VARYINGS);\n  for (let ii = 0; ii < numVaryings; ++ii) {\n    const varying = gl.getTransformFeedbackVarying(program, ii);\n    info[varying.name] = {\n      index: ii,\n      type: varying.type,\n      size: varying.size,\n    };\n  }\n  return info;\n}\n\n/**\n * Binds buffers for transform feedback.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @memberOf module:twgl\n */\nfunction bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {\n  if (transformFeedbackInfo.transformFeedbackInfo) {\n    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\n  }\n  if (bufferInfo.attribs) {\n    bufferInfo = bufferInfo.attribs;\n  }\n  for (const name in bufferInfo) {\n    const varying = transformFeedbackInfo[name];\n    if (varying) {\n      const buf = bufferInfo[name];\n      if (buf.offset) {\n        gl.bindBufferRange(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);\n      } else {\n        gl.bindBufferBase(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);\n      }\n    }\n  }\n}\n\n/**\n * Creates a transform feedback and sets the buffers\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @return {WebGLTransformFeedback} the created transform feedback\n * @memberOf module:twgl\n */\nfunction createTransformFeedback(gl, programInfo, bufferInfo) {\n  const tf = gl.createTransformFeedback();\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, tf);\n  gl.useProgram(programInfo.program);\n  bindTransformFeedbackInfo(gl, programInfo, bufferInfo);\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, null);\n  return tf;\n}\n\n/**\n * @typedef {Object} UniformData\n * @property {string} name The name of the uniform\n * @property {number} type The WebGL type enum for this uniform\n * @property {number} size The number of elements for this uniform\n * @property {number} blockNdx The block index this uniform appears in\n * @property {number} offset The byte offset in the block for this uniform's value\n * @memberOf module:twgl\n */\n\n/**\n * The specification for one UniformBlockObject\n *\n * @typedef {Object} BlockSpec\n * @property {number} index The index of the block.\n * @property {number} size The size in bytes needed for the block\n * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices\n *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.\n * @property {bool} usedByVertexShader Self explanatory\n * @property {bool} usedByFragmentShader Self explanatory\n * @property {bool} used Self explanatory\n * @memberOf module:twgl\n */\n\n/**\n * A `UniformBlockSpec` represents the data needed to create and bind\n * UniformBlockObjects for a given program\n *\n * @typedef {Object} UniformBlockSpec\n * @property {Object.<string, module:twgl.BlockSpec>} blockSpecs The BlockSpec for each block by block name\n * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a UniformBlockSpec for the given program.\n *\n * A UniformBlockSpec represents the data needed to create and bind\n * UniformBlockObjects\n *\n * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context\n * @param {WebGLProgram} program A WebGLProgram for a successfully linked program\n * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockSpecFromProgram(gl, program) {\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n  const uniformData = [];\n  const uniformIndices = [];\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    uniformIndices.push(ii);\n    uniformData.push({});\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    uniformData[ii].name = uniformInfo.name;\n  }\n\n  [\n    [ \"UNIFORM_TYPE\", \"type\" ],\n    [ \"UNIFORM_SIZE\", \"size\" ],  // num elements\n    [ \"UNIFORM_BLOCK_INDEX\", \"blockNdx\" ],\n    [ \"UNIFORM_OFFSET\", \"offset\", ],\n  ].forEach(function(pair) {\n    const pname = pair[0];\n    const key = pair[1];\n    gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function(value, ndx) {\n      uniformData[ndx][key] = value;\n    });\n  });\n\n  const blockSpecs = {};\n\n  const numUniformBlocks = gl.getProgramParameter(program, ACTIVE_UNIFORM_BLOCKS);\n  for (let ii = 0; ii < numUniformBlocks; ++ii) {\n    const name = gl.getActiveUniformBlockName(program, ii);\n    const blockSpec = {\n      index: gl.getUniformBlockIndex(program, name),\n      usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n      usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n      size: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_DATA_SIZE),\n      uniformIndices: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),\n    };\n    blockSpec.used = blockSpec.usedByVertexShader || blockSpec.usedByFragmentShader;\n    blockSpecs[name] = blockSpec;\n  }\n\n  return {\n    blockSpecs: blockSpecs,\n    uniformData: uniformData,\n  };\n}\n\nconst arraySuffixRE = /\\[\\d+\\]\\.$/;  // better way to check?\n\nconst pad = (v, padding) => ((v + (padding - 1)) / padding | 0) * padding;\n\nfunction createUniformBlockUniformSetter(view, isArray, rows, cols) {\n  if (isArray || rows) {\n    cols = cols || 1;\n    const numElements = view.length;\n    const totalRows = numElements / 4;\n    return function(value) {\n      let dst = 0;\n      let src = 0;\n      for (let row = 0; row < totalRows; ++row) {\n        for (let col = 0; col < cols; ++col) {\n          view[dst++] = value[src++];\n        }\n        dst += 4 - cols;\n      }\n    };\n  } else {\n    return function(value) {\n      if (value.length) {\n        view.set(value);\n      } else {\n        view[0] = value;\n      }\n    };\n  }\n}\n\n/**\n * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values\n * and a corresponding WebGLBuffer to hold those values on the GPU\n *\n * @typedef {Object} UniformBlockInfo\n * @property {string} name The name of the block\n * @property {ArrayBuffer} array The array buffer that contains the uniform values\n * @property {Float32Array} asFloat A float view on the array buffer. This is useful\n *    inspecting the contents of the buffer in the debugger.\n * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.\n * @property {number} [offset] offset into buffer\n * @property {Object<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.\n *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset\n *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`\n *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an\n *   `Int32Array` view, etc.\n * @property {Object<string, function>} setters A setter for this uniform.\n *   The reason to use setters is elements of arrays are padded to vec4 sizes which\n *   means if you want to set an array of 4 floats you'd need to set 16 values\n *   (or set elements 0, 4, 8, 12). In other words\n *   `someBlockInfo.uniforms.some4FloatArrayUniform.set([0, , , , 1, , , , 2, , , , 3])`\n *   where as the setter handles just passing in [0, 1, 2, 3] either directly as in\n *   `someBlockInfo.setter.some4FloatArrayUniform.set([0, 1, 2, 3])` (not recommended)\n *   or via {@link module:twgl.setBlockUniforms}\n * @memberOf module:twgl\n */\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {WebGLProgram} program A WebGLProgram\n * @param {module:twgl.UniformBlockSpec} uniformBlockSpec. A UniformBlockSpec as returned\n *     from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {\n  const blockSpecs = uniformBlockSpec.blockSpecs;\n  const uniformData = uniformBlockSpec.uniformData;\n  const blockSpec = blockSpecs[blockName];\n  if (!blockSpec) {\n    warn$1(\"no uniform block object named:\", blockName);\n    return {\n      name: blockName,\n      uniforms: {},\n    };\n  }\n  const array = new ArrayBuffer(blockSpec.size);\n  const buffer = gl.createBuffer();\n  const uniformBufferIndex = blockSpec.index;\n  gl.bindBuffer(UNIFORM_BUFFER, buffer);\n  gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);\n\n  let prefix = blockName + \".\";\n  if (arraySuffixRE.test(prefix)) {\n    prefix = prefix.replace(arraySuffixRE, \".\");\n  }\n  const uniforms = {};\n  const setters = {};\n  const setterTree = {};\n  blockSpec.uniformIndices.forEach(function(uniformNdx) {\n    const data = uniformData[uniformNdx];\n    let name = data.name;\n    if (name.startsWith(prefix)) {\n      name = name.substr(prefix.length);\n    }\n    const isArray = name.endsWith('[0]');\n    if (isArray) {\n      name = name.substr(0, name.length - 3);\n    }\n    const typeInfo = typeMap[data.type];\n    const Type = typeInfo.Type;\n    const byteLength = isArray\n        ? pad(typeInfo.size, 16) * data.size\n        : typeInfo.size * data.size;\n    const uniformView = new Type(array, data.offset, byteLength / Type.BYTES_PER_ELEMENT);\n    uniforms[name] = uniformView;\n    // Note: I'm not sure what to do here. The original\n    // idea was to create TypedArray views into each part\n    // of the block. This is useful, for example if you have\n    // a block with { mat4: model; mat4 view; mat4 projection; }\n    // you'll get a Float32Array for each one suitable for\n    // passing to most JS math libraries including twgl's and glMatrix.js.\n    //\n    // But, if you have a an array of structures, especially if that\n    // array is large, you get a whole bunch of TypedArray views.\n    // Every one of them has overhead and switching between them all\n    // is probably a cache miss. In that case it would really be better\n    // to just have one view (asFloat) and have all the setters\n    // just reference the correct portion. But, then you can't easily\n    // treat a matrix, or a vec4, as a standalone thing like you can\n    // with all the views.\n    //\n    // Another problem with the views is they are not shared. With\n    // uniforms you have one set of setters. With UniformBlockInfo\n    // you have a set of setters *pre block instance*. That's because\n    // TypedArray views can't be mapped to different buffers.\n    //\n    // My gut right now is if you really want the speed and compactness\n    // then you should probably roll your own solution. TWGL's goal\n    // here is ease of use as AFAICT there is no simple generic efficient\n    // solution.\n    const setter = createUniformBlockUniformSetter(uniformView, isArray, typeInfo.rows, typeInfo.cols);\n    setters[name] = setter;\n    addSetterToUniformTree(name, setter, setterTree, setters);\n  });\n  return {\n    name: blockName,\n    array,\n    asFloat: new Float32Array(array),  // for debugging\n    buffer,\n    uniforms,\n    setters,\n  };\n}\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo}\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfo(gl, programInfo, blockName) {\n  return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);\n}\n\n/**\n * Binds a uniform block to the matching uniform block point.\n * Matches by blocks by name so blocks must have the same name not just the same\n * structure.\n *\n * If you have changed any values and you upload the values into the corresponding WebGLBuffer\n * call {@link module:twgl.setUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name\n *     no buffer is bound.\n * @memberOf module:twgl/programs\n */\nfunction bindUniformBlock(gl, programInfo, uniformBlockInfo) {\n  const uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;\n  const blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];\n  if (blockSpec) {\n    const bufferBindIndex = blockSpec.index;\n    gl.bindBufferRange(UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Uploads the current uniform values to the corresponding WebGLBuffer\n * and binds that buffer to the program's corresponding bind point for the uniform block object.\n *\n * If you haven't changed any values and you only need to bind the uniform block object\n * call {@link module:twgl.bindUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @memberOf module:twgl/programs\n */\nfunction setUniformBlock(gl, programInfo, uniformBlockInfo) {\n  if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {\n    gl.bufferData(UNIFORM_BUFFER, uniformBlockInfo.array, DYNAMIC_DRAW);\n  }\n}\n\n/**\n * Sets values of a uniform block object\n *\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.\n * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given\n *    type of uniform. So for example given a block like\n *\n *       uniform SomeBlock {\n *         float someFloat;\n *         vec2 someVec2;\n *         vec3 someVec3Array[2];\n *         int someInt;\n *       }\n *\n *  You can set the values of the uniform block with\n *\n *       twgl.setBlockUniforms(someBlockInfo, {\n *          someFloat: 12.3,\n *          someVec2: [1, 2],\n *          someVec3Array: [1, 2, 3, 4, 5, 6],\n *          someInt: 5,\n *       }\n *\n *  Arrays can be JavaScript arrays or typed arrays\n *\n *  You can also fill out structure and array values either via\n *  shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *       float nearFar[2];\n *     };\n *     uniform Lights {\n *       Light lights[2];\n *     };\n *\n *     // in JavaScript\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[0].nearFar\": [0.1, 10],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *       \"lights[1].nearFar\": [0.2, 15],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\n *     });\n *\n *   But you can not specify leaf array indices.\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\n *       'lights[1].nearFar': [0.2, 15], // GOOD\n *     });\n *\n *  **IMPORTANT!**, packing in a UniformBlock is unintuitive.\n *  For example the actual layout of `someVec3Array` above in memory\n *  is `1, 2, 3, unused, 4, 5, 6, unused`. twgl takes in 6 values\n *  as shown about and copies them, skipping the padding. This might\n *  be confusing if you're already familiar with Uniform blocks.\n *\n *  If you want to deal with the padding yourself you can access the array\n *  buffer views directly. eg:\n *\n *      someBlockInfo.someVec3Array.set([1, 2, 3, 0, 4, 5, 6, 0]);\n *\n *  Any name that doesn't match will be ignored\n * @memberOf module:twgl/programs\n */\nfunction setBlockUniforms(uniformBlockInfo, values) {\n  const setters = uniformBlockInfo.setters;\n  for (const name in values) {\n    const setter = setters[name];\n    if (setter) {\n      const value = values[name];\n      setter(value);\n    }\n  }\n}\n\nfunction setUniformTree(tree, values) {\n  for (const name in values) {\n    const prop = tree[name];\n    if (typeof prop === 'function') {\n      prop(values[name]);\n    } else {\n      setUniformTree(tree[name], values[name]);\n    }\n  }\n}\n\n/**\n * Set uniforms and binds related textures.\n *\n * example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\"]);\n *\n *     const tex1 = gl.createTexture();\n *     const tex2 = gl.createTexture();\n *\n *     ... assume we setup the textures with data ...\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the textures AND set the\n * uniforms.\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *\n * For the example above it is equivalent to\n *\n *     var texUnit = 0;\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n *     gl.uniformMatrix4fv(u_someMatrix, false, [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ]);\n *\n * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *     };\n *\n *     const moreUniforms {\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *     twgl.setUniforms(programInfo, moreUniforms);\n *\n * You can also add WebGLSamplers to uniform samplers as in\n *\n *     const uniforms = {\n *       u_someSampler: {\n *         texture: someWebGLTexture,\n *         sampler: someWebGLSampler,\n *       },\n *     };\n *\n * In which case both the sampler and texture will be bound to the\n * same unit.\n *\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n *        uniforms.\n *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example\n *\n *     const sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     const localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, sharedUniforms);\n *     twgl.setUniforms(programInfo, localUniforms};\n *\n *   You can also fill out structure and array values either via\n *   shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *       float nearFar[2];\n *     };\n *     uniform Light lights[2];\n *\n *     // in JavaScript\n *\n *     twgl.setUniforms(programInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setUniforms(programInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[0].nearFar\": [0.1, 10],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *       \"lights[1].nearFar\": [0.2, 15],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\n *     });\n *\n *   But you can not specify leaf array indices\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\n *       'lights[1].nearFar': [0.2, 15], // GOOD\n *     });\n *\n * @memberOf module:twgl/programs\n */\nfunction setUniforms(setters, ...args) {  // eslint-disable-line\n  const actualSetters = setters.uniformSetters || setters;\n  const numArgs = args.length;\n  for (let aNdx = 0; aNdx < numArgs; ++aNdx) {\n    const values = args[aNdx];\n    if (Array.isArray(values)) {\n      const numValues = values.length;\n      for (let ii = 0; ii < numValues; ++ii) {\n        setUniforms(actualSetters, values[ii]);\n      }\n    } else {\n      for (const name in values) {\n        const setter = actualSetters[name];\n        if (setter) {\n          setter(values[name]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Alias for `setUniforms`\n * @function\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n * @memberOf module:twgl/programs\n */\nconst setUniformsAndBindTextures = setUniforms;\n\n/**\n * Creates setter functions for all attributes of a shader\n * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.\n *\n * @see {@link module:twgl.setAttributes} for example\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @return {Object.<string, function>} an object with a setter for each attribute by name.\n * @memberOf module:twgl/programs\n */\nfunction createAttributeSetters(gl, program) {\n  const attribSetters = {\n  };\n\n  const numAttribs = gl.getProgramParameter(program, ACTIVE_ATTRIBUTES);\n  for (let ii = 0; ii < numAttribs; ++ii) {\n    const attribInfo = gl.getActiveAttrib(program, ii);\n    if (isBuiltIn(attribInfo)) {\n      continue;\n    }\n    const index = gl.getAttribLocation(program, attribInfo.name);\n    const typeInfo = attrTypeMap[attribInfo.type];\n    const setter = typeInfo.setter(gl, index, typeInfo);\n    setter.location = index;\n    attribSetters[attribInfo.name] = setter;\n  }\n\n  return attribSetters;\n}\n\n/**\n * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})\n *\n * Example:\n *\n *     const program = createProgramFromScripts(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const attribSetters = createAttributeSetters(program);\n *\n *     const positionBuffer = gl.createBuffer();\n *     const texcoordBuffer = gl.createBuffer();\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setAttributes(attribSetters, attribs);\n *\n * Properties of attribs. For each attrib you can add\n * properties:\n *\n * *   type: the type of data in the buffer. Default = gl.FLOAT\n * *   normalize: whether or not to normalize the data. Default = false\n * *   stride: the stride. Default = 0\n * *   offset: offset into the buffer. Default = 0\n * *   divisor: the divisor for instances. Default = undefined\n *\n * For example if you had 3 value float positions, 2 value\n * float texcoord and 4 value uint8 colors you'd setup your\n * attribs like this\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *       a_color: {\n *         buffer: colorBuffer,\n *         numComponents: 4,\n *         type: gl.UNSIGNED_BYTE,\n *         normalize: true,\n *       },\n *     };\n *\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.\n * @memberOf module:twgl/programs\n * @deprecated use {@link module:twgl.setBuffersAndAttributes}\n * @private\n */\nfunction setAttributes(setters, buffers) {\n  for (const name in buffers) {\n    const setter = setters[name];\n    if (setter) {\n      setter(buffers[name]);\n    }\n  }\n}\n\n/**\n * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n *\n * Example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *     };\n *\n *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setBuffersAndAttributes(gl, programInfo, bufferInfo);\n *\n * For the example above it is equivalent to\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n *     gl.enableVertexAttribArray(a_positionLocation);\n *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n *     gl.enableVertexAttribArray(a_texcoordLocation);\n *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgramInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.\n *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}\n * @memberOf module:twgl/programs\n */\nfunction setBuffersAndAttributes(gl, programInfo, buffers) {\n  if (buffers.vertexArrayObject) {\n    gl.bindVertexArray(buffers.vertexArrayObject);\n  } else {\n    setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);\n    if (buffers.indices) {\n      gl.bindBuffer(ELEMENT_ARRAY_BUFFER$1, buffers.indices);\n    }\n  }\n}\n\n/**\n * @typedef {Object} ProgramInfo\n * @property {WebGLProgram} program A shader program\n * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,\n * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,\n * @property {module:twgl.UniformBlockSpec} [uniformBlockSpec] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..\n * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks\n * @memberOf module:twgl\n */\n\n/**\n * Creates a ProgramInfo from an existing program.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {module:twgl.ProgramInfo} The created ProgramInfo.\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfoFromProgram(gl, program) {\n  const uniformSetters = createUniformSetters(gl, program);\n  const attribSetters = createAttributeSetters(gl, program);\n  const programInfo = {\n    program,\n    uniformSetters,\n    attribSetters,\n  };\n\n  if (isWebGL2(gl)) {\n    programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);\n    programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);\n  }\n\n  return programInfo;\n}\n\nconst notIdRE = /\\s|{|}|;/;\n\n/**\n * Creates a ProgramInfo from 2 sources.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramInfo(gl, [vs, fs], options);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfo(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const errors = [];\n  shaderSources = shaderSources.map(function(source) {\n    // Lets assume if there is no \\n it's an id\n    if (!notIdRE.test(source)) {\n      const script = getElementById(source);\n      if (!script) {\n        const err = `no element with id: ${source}`;\n        progOptions.errorCallback(err);\n        errors.push(err);\n      } else {\n        source = script.text;\n      }\n    }\n    return source;\n  });\n  if (errors.length) {\n    return reportError(progOptions, '');\n  }\n  const origCallback = progOptions.callback;\n  if (origCallback) {\n    progOptions.callback = (err, program) => {\n      let programInfo;\n      if (!err) {\n        programInfo = createProgramInfoFromProgram(gl, program);\n      }\n      origCallback(err, programInfo);\n    };\n  }\n  const program = createProgramFromSources(gl, shaderSources, progOptions);\n  if (!program) {\n    return null;\n  }\n  return createProgramInfoFromProgram(gl, program);\n}\n\nvar programs = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttributeSetters: createAttributeSetters,\n  createProgram: createProgram,\n  createProgramAsync: createProgramAsync,\n  createProgramFromScripts: createProgramFromScripts,\n  createProgramFromSources: createProgramFromSources,\n  createProgramInfo: createProgramInfo,\n  createProgramInfoAsync: createProgramInfoAsync,\n  createProgramInfoFromProgram: createProgramInfoFromProgram,\n  createUniformSetters: createUniformSetters,\n  createUniformBlockSpecFromProgram: createUniformBlockSpecFromProgram,\n  createUniformBlockInfoFromProgram: createUniformBlockInfoFromProgram,\n  createUniformBlockInfo: createUniformBlockInfo,\n  createTransformFeedback: createTransformFeedback,\n  createTransformFeedbackInfo: createTransformFeedbackInfo,\n  bindTransformFeedbackInfo: bindTransformFeedbackInfo,\n  setAttributes: setAttributes,\n  setBuffersAndAttributes: setBuffersAndAttributes,\n  setUniforms: setUniforms,\n  setUniformsAndBindTextures: setUniformsAndBindTextures,\n  setUniformBlock: setUniformBlock,\n  setBlockUniforms: setBlockUniforms,\n  bindUniformBlock: bindUniformBlock\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst TRIANGLES                      = 0x0004;\nconst UNSIGNED_SHORT$3                 = 0x1403;\n\n/**\n * Drawing related functions\n *\n * For backward compatibility they are available at both `twgl.draw` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/draw\n */\n\n/**\n * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n *\n * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n * but calling this means if you switch from indexed data to non-indexed\n * data you don't have to remember to update your draw call.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or\n *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`\n * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n * @param {number} [offset] An optional offset. Defaults to 0.\n * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called\n * @memberOf module:twgl/draw\n */\nfunction drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {\n  type = type === undefined ? TRIANGLES : type;\n  const indices = bufferInfo.indices;\n  const elementType = bufferInfo.elementType;\n  const numElements = count === undefined ? bufferInfo.numElements : count;\n  offset = offset === undefined ? 0 : offset;\n  if (elementType || indices) {\n    if (instanceCount !== undefined) {\n      gl.drawElementsInstanced(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset, instanceCount);\n    } else {\n      gl.drawElements(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset);\n    }\n  } else {\n    if (instanceCount !== undefined) {\n      gl.drawArraysInstanced(type, offset, numElements, instanceCount);\n    } else {\n      gl.drawArrays(type, offset, numElements);\n    }\n  }\n}\n\n/**\n * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.\n *\n * You need either a `BufferInfo` or a `VertexArrayInfo`.\n *\n * @typedef {Object} DrawObject\n * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In other words `undefined` = `true`\n * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...\n * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}\n * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @property {Object<string, ?>} uniforms The values for the uniforms.\n *   You can pass multiple objects by putting them in an array. For example\n *\n *     var sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     var localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     var drawObj = {\n *       ...\n *       uniforms: [sharedUniforms, localUniforms],\n *     };\n *\n * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.\n * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to bufferInfo.numElements.\n * @property {number} [instanceCount] the number of instances. Defaults to undefined.\n * @memberOf module:twgl\n */\n\n/**\n * Draws a list of objects\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n * @memberOf module:twgl/draw\n */\nfunction drawObjectList(gl, objectsToDraw) {\n  let lastUsedProgramInfo = null;\n  let lastUsedBufferInfo = null;\n\n  objectsToDraw.forEach(function(object) {\n    if (object.active === false) {\n      return;\n    }\n\n    const programInfo = object.programInfo;\n    const bufferInfo = object.vertexArrayInfo || object.bufferInfo;\n    let bindBuffers = false;\n    const type = object.type === undefined ? TRIANGLES : object.type;\n\n    if (programInfo !== lastUsedProgramInfo) {\n      lastUsedProgramInfo = programInfo;\n      gl.useProgram(programInfo.program);\n\n      // We have to rebind buffers when changing programs because we\n      // only bind buffers the program uses. So if 2 programs use the same\n      // bufferInfo but the 1st one uses only positions the when the\n      // we switch to the 2nd one some of the attributes will not be on.\n      bindBuffers = true;\n    }\n\n    // Setup all the needed attributes.\n    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {\n        gl.bindVertexArray(null);\n      }\n      lastUsedBufferInfo = bufferInfo;\n      setBuffersAndAttributes(gl, programInfo, bufferInfo);\n    }\n\n    // Set the uniforms.\n    setUniforms(programInfo, object.uniforms);\n\n    // Draw\n    drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);\n  });\n\n  if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject) {\n    gl.bindVertexArray(null);\n  }\n}\n\nvar draw = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  drawBufferInfo: drawBufferInfo,\n  drawObjectList: drawObjectList\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst FRAMEBUFFER                    = 0x8d40;\nconst RENDERBUFFER                   = 0x8d41;\nconst TEXTURE_2D$2                     = 0x0de1;\n\nconst UNSIGNED_BYTE$3                  = 0x1401;\n\n/* PixelFormat */\nconst DEPTH_COMPONENT$1                = 0x1902;\nconst RGBA$1                           = 0x1908;\nconst DEPTH_COMPONENT24$1              = 0x81a6;\nconst DEPTH_COMPONENT32F$1             = 0x8cac;\nconst DEPTH24_STENCIL8$1               = 0x88f0;\nconst DEPTH32F_STENCIL8$1              = 0x8cad;\n\n/* Framebuffer Object. */\nconst RGBA4$1                          = 0x8056;\nconst RGB5_A1$1                        = 0x8057;\nconst RGB565$1                         = 0x8D62;\nconst DEPTH_COMPONENT16$1              = 0x81A5;\nconst STENCIL_INDEX                  = 0x1901;\nconst STENCIL_INDEX8                 = 0x8D48;\nconst DEPTH_STENCIL$1                  = 0x84F9;\nconst COLOR_ATTACHMENT0              = 0x8CE0;\nconst DEPTH_ATTACHMENT               = 0x8D00;\nconst STENCIL_ATTACHMENT             = 0x8D20;\nconst DEPTH_STENCIL_ATTACHMENT       = 0x821A;\n\n/* TextureWrapMode */\nconst CLAMP_TO_EDGE$1                  = 0x812F;\n\n/* TextureMagFilter */\nconst LINEAR$1                         = 0x2601;\n\n/**\n * The options for a framebuffer attachment.\n *\n * Note: For a `format` that is a texture include all the texture\n * options from {@link module:twgl.TextureOptions} for example\n * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}\n * `auto` defaults to `false` for attachment textures but `min` and `mag` default\n * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`\n *\n * @typedef {Object} AttachmentOptions\n * @property {number} [attachmentPoint] The attachment point. Defaults\n *   to `gl.COLOR_ATTACHMENT0 + ndx` unless type is a depth or stencil type\n *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending\n *   on the format or attachment type.\n * @property {number} [format] The format. If one of `gl.RGBA4`,\n *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,\n *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a\n *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`\n * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.\n * @property {number} [target] The texture target for `gl.framebufferTexture2D`.\n *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.\n * @property {number} [samples] The number of samples. Default = 1\n * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.\n * @property {number} [layer] layer for `gl.framebufferTextureLayer`. Defaults to undefined.\n *   If set then `gl.framebufferTextureLayer` is called, if not then `gl.framebufferTexture2D`\n * @property {(WebGLRenderbuffer | WebGLTexture)} [attachment] An existing renderbuffer or texture.\n *    If provided will attach this Object. This allows you to share\n *    attachments across framebuffers.\n * @memberOf module:twgl\n * @mixes module:twgl.TextureOptions\n */\n\nconst defaultAttachments = [\n  { format: RGBA$1, type: UNSIGNED_BYTE$3, min: LINEAR$1, wrap: CLAMP_TO_EDGE$1, },\n  { format: DEPTH_STENCIL$1, },\n];\n\nconst attachmentsByFormat = {};\nattachmentsByFormat[DEPTH_STENCIL$1] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT16$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT24$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT32F$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH24_STENCIL8$1] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH32F_STENCIL8$1] = DEPTH_STENCIL_ATTACHMENT;\n\nfunction getAttachmentPointForFormat(format, internalFormat) {\n  return attachmentsByFormat[format] || attachmentsByFormat[internalFormat];\n}\n\nconst renderbufferFormats = {};\nrenderbufferFormats[RGBA4$1] = true;\nrenderbufferFormats[RGB5_A1$1] = true;\nrenderbufferFormats[RGB565$1] = true;\nrenderbufferFormats[DEPTH_STENCIL$1] = true;\nrenderbufferFormats[DEPTH_COMPONENT16$1] = true;\nrenderbufferFormats[STENCIL_INDEX] = true;\nrenderbufferFormats[STENCIL_INDEX8] = true;\n\nfunction isRenderbufferFormat(format) {\n  return renderbufferFormats[format];\n}\n\nconst MAX_COLOR_ATTACHMENT_POINTS = 32;  // even an 3090 only supports 8 but WebGL/OpenGL ES define constants for 32\n\nfunction isColorAttachmentPoint(attachmentPoint) {\n  return attachmentPoint >= COLOR_ATTACHMENT0 && attachmentPoint < COLOR_ATTACHMENT0 + MAX_COLOR_ATTACHMENT_POINTS;\n}\n\n/**\n * @typedef {Object} FramebufferInfo\n * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo\n * @property {Array.<(WebGLRenderbuffer | WebGLTexture)>} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.\n * @property {number} width The width of the framebuffer and its attachments\n * @property {number} height The width of the framebuffer and its attachments\n * @memberOf module:twgl\n */\n\n/**\n * Creates a framebuffer and attachments.\n *\n * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.\n * It also leaves the framebuffer it just created as the currently bound `FRAMEBUFFER`.\n * Note: If this is WebGL2 or if you called {@link module:twgl.addExtensionsToContext} then it will set the drawBuffers\n * to `[COLOR_ATTACHMENT0, COLOR_ATTACHMENT1, ...]` for how ever many color attachments were created.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n * Passing in a specific size\n *\n *     const width = 256;\n *     const height = 256;\n *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);\n *\n * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.\n * [WebGL1 only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an\n *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.\n * @memberOf module:twgl/framebuffers\n */\nfunction createFramebufferInfo(gl, attachments, width, height) {\n  const target = FRAMEBUFFER;\n  const fb = gl.createFramebuffer();\n  gl.bindFramebuffer(target, fb);\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  attachments = attachments || defaultAttachments;\n  const usedColorAttachmentsPoints = [];\n  const framebufferInfo = {\n    framebuffer: fb,\n    attachments: [],\n    width: width,\n    height: height,\n  };\n\n  attachments.forEach(function(attachmentOptions, i) {\n    let attachment = attachmentOptions.attachment;\n    const samples = attachmentOptions.samples;\n    const format = attachmentOptions.format;\n    let attachmentPoint = attachmentOptions.attachmentPoint || getAttachmentPointForFormat(format, attachmentOptions.internalFormat);\n    if (!attachmentPoint) {\n      attachmentPoint = COLOR_ATTACHMENT0 + i;\n    }\n    if (isColorAttachmentPoint(attachmentPoint)) {\n      usedColorAttachmentsPoints.push(attachmentPoint);\n    }\n    if (!attachment) {\n      if (samples !== undefined || isRenderbufferFormat(format)) {\n        attachment = gl.createRenderbuffer();\n        gl.bindRenderbuffer(RENDERBUFFER, attachment);\n        if (samples > 1) {\n          gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);\n        } else {\n          gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n        }\n      } else {\n        const textureOptions = Object.assign({}, attachmentOptions);\n        textureOptions.width = width;\n        textureOptions.height = height;\n        if (textureOptions.auto === undefined) {\n          textureOptions.auto = false;\n          textureOptions.min = textureOptions.min || textureOptions.minMag || LINEAR$1;\n          textureOptions.mag = textureOptions.mag || textureOptions.minMag || LINEAR$1;\n          textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || CLAMP_TO_EDGE$1;\n          textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || CLAMP_TO_EDGE$1;\n        }\n        attachment = createTexture(gl, textureOptions);\n      }\n    }\n    if (isRenderbuffer(gl, attachment)) {\n      gl.framebufferRenderbuffer(target, attachmentPoint, RENDERBUFFER, attachment);\n    } else if (isTexture(gl, attachment)) {\n      if (attachmentOptions.layer !== undefined) {\n        gl.framebufferTextureLayer(\n          target,\n          attachmentPoint,\n          attachment,\n          attachmentOptions.level || 0,\n          attachmentOptions.layer);\n      } else {\n        gl.framebufferTexture2D(\n            target,\n            attachmentPoint,\n            attachmentOptions.target || TEXTURE_2D$2,\n            attachment,\n            attachmentOptions.level || 0);\n      }\n    } else {\n      throw new Error('unknown attachment type');\n    }\n    framebufferInfo.attachments.push(attachment);\n  });\n  if (gl.drawBuffers) {\n    gl.drawBuffers(usedColorAttachmentsPoints);\n  }\n  return framebufferInfo;\n}\n\n/**\n * Resizes the attachments of a framebuffer.\n *\n * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}\n * because TWGL has no idea the format/type of each attachment.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments\n *         twgl.resizeFramebufferInfo(gl, fbi);\n *       }\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments to match\n *         twgl.resizeFramebufferInfo(gl, fbi, attachments);\n *       }\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @memberOf module:twgl/framebuffers\n */\nfunction resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  framebufferInfo.width = width;\n  framebufferInfo.height = height;\n  attachments = attachments || defaultAttachments;\n  attachments.forEach(function(attachmentOptions, ndx) {\n    const attachment = framebufferInfo.attachments[ndx];\n    const format = attachmentOptions.format;\n    const samples = attachmentOptions.samples;\n    if (samples !== undefined || isRenderbuffer(gl, attachment)) {\n      gl.bindRenderbuffer(RENDERBUFFER, attachment);\n      if (samples > 1) {\n        gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);\n      } else {\n        gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n      }\n    } else if (isTexture(gl, attachment)) {\n      resizeTexture(gl, attachment, attachmentOptions, width, height);\n    } else {\n      throw new Error('unknown attachment type');\n    }\n  });\n}\n\n/**\n * Binds a framebuffer\n *\n * This function pretty much solely exists because I spent hours\n * trying to figure out why something I wrote wasn't working only\n * to realize I forget to set the viewport dimensions.\n * My hope is this function will fix that.\n *\n * It is effectively the same as\n *\n *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\n *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo|null} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n *   If falsy will bind the canvas.\n * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\n * @memberOf module:twgl/framebuffers\n */\n\nfunction bindFramebufferInfo(gl, framebufferInfo, target) {\n  target = target || FRAMEBUFFER;\n  if (framebufferInfo) {\n    gl.bindFramebuffer(target, framebufferInfo.framebuffer);\n    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\n  } else {\n    gl.bindFramebuffer(target, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  }\n}\n\nvar framebuffers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  bindFramebufferInfo: bindFramebufferInfo,\n  createFramebufferInfo: createFramebufferInfo,\n  resizeFramebufferInfo: resizeFramebufferInfo\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * vertex array object related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/vertexArrays\n */\n\nconst ELEMENT_ARRAY_BUFFER$2           = 0x8893;\n\n/**\n * @typedef {Object} VertexArrayInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object\n * @memberOf module:twgl\n */\n\n/**\n * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects\n *   assign buffers to specific attributes at creation time. That means they can only be used with programs\n *   who's attributes use the same attribute locations for the same purposes.\n *\n * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}\n *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.\n *\n * also\n *\n * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object\n *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**\n *   will affect the Vertex Array Object state.\n *\n * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n *\n *    You need to make sure every attribute that will be used is bound. So for example assume shader 1\n *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo\n *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't\n *    now attribute D's location.\n *\n *    So, you can pass in both shader 1 and shader 2's programInfo\n *\n * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVertexArrayInfo(gl, programInfos, bufferInfo) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  if (!programInfos.length) {\n    programInfos = [programInfos];\n  }\n  programInfos.forEach(function(programInfo) {\n    setBuffersAndAttributes(gl, programInfo, bufferInfo);\n  });\n  gl.bindVertexArray(null);\n  return {\n    numElements: bufferInfo.numElements,\n    elementType: bufferInfo.elementType,\n    vertexArrayObject: vao,\n  };\n}\n\n/**\n * Creates a vertex array object and then sets the attributes on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n *\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOAndSetAttributes(gl, setters, attribs, indices) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  setAttributes(setters, attribs);\n  if (indices) {\n    gl.bindBuffer(ELEMENT_ARRAY_BUFFER$2, indices);\n  }\n  // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n  // like when creating buffers for other stuff will mess up this VAO's binding\n  gl.bindVertexArray(null);\n  return vao;\n}\n\n/**\n * Creates a vertex array object and then sets the attributes\n * on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n *\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n  return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n}\n\nvar vertexArrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createVertexArrayInfo: createVertexArrayInfo,\n  createVAOAndSetAttributes: createVAOAndSetAttributes,\n  createVAOFromBufferInfo: createVAOFromBufferInfo\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nconst defaults$2 = {\n  addExtensionsToContext: true,\n};\n\n/**\n * Various default settings for twgl.\n *\n * Note: You can call this any number of times. Example:\n *\n *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });\n *     twgl.setDefaults({ attribPrefix: 'a_' });\n *\n * is equivalent to\n *\n *     twgl.setDefaults({\n *       textureColor: [1, 0, 0, 1],\n *       attribPrefix: 'a_',\n *     });\n *\n * @typedef {Object} Defaults\n * @property {string} [attribPrefix] The prefix to stick on attributes\n *\n *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n *   as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n *   In other words I'll create arrays of geometry like this\n *\n *       const arrays = {\n *         position: ...\n *         normal: ...\n *         texcoord: ...\n *       };\n *\n *   But need those mapped to attributes and my attributes start with `a_`.\n *\n *   Default: `\"\"`\n *\n * @property {number[]} [textureColor] Array of 4 values in the range 0 to 1\n *\n *   The default texture color is used when loading textures from\n *   urls. Because the URL will be loaded async we'd like to be\n *   able to use the texture immediately. By putting a 1x1 pixel\n *   color in the texture we can start using the texture before\n *   the URL has loaded.\n *\n *   Default: `[0.5, 0.75, 1, 1]`\n *\n * @property {string} [crossOrigin]\n *\n *   If not undefined sets the crossOrigin attribute on images\n *   that twgl creates when downloading images for textures.\n *\n *   Also see {@link module:twgl.TextureOptions}.\n *\n * @property {bool} [addExtensionsToContext]\n *\n *   If true, then, when twgl will try to add any supported WebGL extensions\n *   directly to the context under their normal GL names. For example\n *   if ANGLE_instances_arrays exists then twgl would enable it,\n *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,\n *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`\n *   to the `WebGLRenderingContext`.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets various defaults for twgl.\n *\n * In the interest of terseness which is kind of the point\n * of twgl I've integrated a few of the older functions here\n *\n * @param {module:twgl.Defaults} newDefaults The default settings.\n * @memberOf module:twgl\n */\nfunction setDefaults$2(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$2);\n  setDefaults(newDefaults);  // eslint-disable-line\n  setDefaults$1(newDefaults);  // eslint-disable-line\n}\n\nconst prefixRE = /^(.*?)_/;\nfunction addExtensionToContext(gl, extensionName) {\n  glEnumToString(gl, 0);\n  const ext = gl.getExtension(extensionName);\n  if (ext) {\n    const enums = {};\n    const fnSuffix = prefixRE.exec(extensionName)[1];\n    const enumSuffix = '_' + fnSuffix;\n    for (const key in ext) {\n      const value = ext[key];\n      const isFunc = typeof (value) === 'function';\n      const suffix = isFunc ? fnSuffix : enumSuffix;\n      let name = key;\n      // examples of where this is not true are WEBGL_compressed_texture_s3tc\n      // and WEBGL_compressed_texture_pvrtc\n      if (key.endsWith(suffix)) {\n        name = key.substring(0, key.length - suffix.length);\n      }\n      if (gl[name] !== undefined) {\n        if (!isFunc && gl[name] !== value) {\n          warn(name, gl[name], value, key);\n        }\n      } else {\n        if (isFunc) {\n          gl[name] = function(origFn) {\n            return function() {\n              return origFn.apply(ext, arguments);\n            };\n          }(value);\n        } else {\n          gl[name] = value;\n          enums[name] = value;\n        }\n      }\n    }\n    // pass the modified enums to glEnumToString\n    enums.constructor = {\n      name: ext.constructor.name,\n    };\n    glEnumToString(enums, 0);\n  }\n  return ext;\n}\n\n/*\n * If you're wondering why the code doesn't just iterate\n * over all extensions using `gl.getExtensions` is that it's possible\n * some future extension is incompatible with this code. Rather than\n * have thing suddenly break it seems better to manually add to this\n * list.\n *\n */\nconst supportedExtensions = [\n  'ANGLE_instanced_arrays',\n  'EXT_blend_minmax',\n  'EXT_color_buffer_float',\n  'EXT_color_buffer_half_float',\n  'EXT_disjoint_timer_query',\n  'EXT_disjoint_timer_query_webgl2',\n  'EXT_frag_depth',\n  'EXT_sRGB',\n  'EXT_shader_texture_lod',\n  'EXT_texture_filter_anisotropic',\n  'OES_element_index_uint',\n  'OES_standard_derivatives',\n  'OES_texture_float',\n  'OES_texture_float_linear',\n  'OES_texture_half_float',\n  'OES_texture_half_float_linear',\n  'OES_vertex_array_object',\n  'WEBGL_color_buffer_float',\n  'WEBGL_compressed_texture_atc',\n  'WEBGL_compressed_texture_etc1',\n  'WEBGL_compressed_texture_pvrtc',\n  'WEBGL_compressed_texture_s3tc',\n  'WEBGL_compressed_texture_s3tc_srgb',\n  'WEBGL_depth_texture',\n  'WEBGL_draw_buffers',\n];\n\n/**\n * Attempts to enable all of the following extensions\n * and add their functions and constants to the\n * `WebGLRenderingContext` using their normal non-extension like names.\n *\n *      ANGLE_instanced_arrays\n *      EXT_blend_minmax\n *      EXT_color_buffer_float\n *      EXT_color_buffer_half_float\n *      EXT_disjoint_timer_query\n *      EXT_disjoint_timer_query_webgl2\n *      EXT_frag_depth\n *      EXT_sRGB\n *      EXT_shader_texture_lod\n *      EXT_texture_filter_anisotropic\n *      OES_element_index_uint\n *      OES_standard_derivatives\n *      OES_texture_float\n *      OES_texture_float_linear\n *      OES_texture_half_float\n *      OES_texture_half_float_linear\n *      OES_vertex_array_object\n *      WEBGL_color_buffer_float\n *      WEBGL_compressed_texture_atc\n *      WEBGL_compressed_texture_etc1\n *      WEBGL_compressed_texture_pvrtc\n *      WEBGL_compressed_texture_s3tc\n *      WEBGL_compressed_texture_s3tc_srgb\n *      WEBGL_depth_texture\n *      WEBGL_draw_buffers\n *\n * For example if `ANGLE_instanced_arrays` exists then the functions\n * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`\n * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the\n * `WebGLRenderingContext`.\n *\n * Note that if you want to know if the extension exists you should\n * probably call `gl.getExtension` for each extension. Alternatively\n * you can check for the existence of the functions or constants that\n * are expected to be added. For example\n *\n *    if (gl.drawBuffers) {\n *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2\n *      ....\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @memberOf module:twgl\n */\nfunction addExtensionsToContext(gl) {\n  for (let ii = 0; ii < supportedExtensions.length; ++ii) {\n    addExtensionToContext(gl, supportedExtensions[ii]);\n  }\n}\n\n/**\n * Creates a webgl context.\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n * @private\n */\nfunction create3DContext(canvas, opt_attribs) {\n  const names = [\"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults$2.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL1 context.\n *\n * Note: Will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n * @deprecated\n * @private\n */\nfunction getWebGLContext(canvas, opt_attribs) {\n  const gl = create3DContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Creates a webgl context.\n *\n * Will return a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *     twgl.isWebGL2(gl);\n *\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n */\nfunction createContext(canvas, opt_attribs) {\n  const names = [\"webgl2\", \"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults$2.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL context.  Will create a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *    function isWebGL2(gl) {\n *      return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0 \") == 0;\n *    }\n *\n * Note: For a WebGL1 context will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\nfunction getContext(canvas, opt_attribs) {\n  const gl = createContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Resize a canvas to match the size it's displayed.\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.\n * @return {boolean} true if the canvas was resized.\n * @memberOf module:twgl\n */\nfunction resizeCanvasToDisplaySize(canvas, multiplier) {\n  multiplier = multiplier || 1;\n  multiplier = Math.max(0, multiplier);\n  const width  = canvas.clientWidth  * multiplier | 0;\n  const height = canvas.clientHeight * multiplier | 0;\n  if (canvas.width !== width || canvas.height !== height) {\n    canvas.width = width;\n    canvas.height = height;\n    return true;\n  }\n  return false;\n}\n\nexport { addExtensionsToContext, attributes, bindFramebufferInfo, bindTransformFeedbackInfo, bindUniformBlock, canFilter, canGenerateMipmap, createAttribsFromArrays, createAttributeSetters, createBufferFromArray, createBufferFromTypedArray, createBufferInfoFromArrays, createBuffersFromArrays, createFramebufferInfo, createProgram, createProgramAsync, createProgramFromScripts, createProgramFromSources, createProgramInfo, createProgramInfoAsync, createProgramInfoFromProgram, createSampler, createSamplers, createTexture, createTextures, createTransformFeedback, createTransformFeedbackInfo, createUniformBlockInfo, createUniformBlockInfoFromProgram, createUniformBlockSpecFromProgram, createUniformSetters, createVAOAndSetAttributes, createVAOFromBufferInfo, createVertexArrayInfo, draw, drawBufferInfo, drawObjectList, framebuffers, getArray as getArray_, getBytesPerElementForInternalFormat, getContext, getFormatAndTypeForInternalFormat, getGLTypeForTypedArray, getGLTypeForTypedArrayType, getNumComponentsForFormat, getNumComponents as getNumComponents_, getTypedArrayTypeForGLType, getWebGLContext, glEnumToString, isArrayBuffer, isWebGL1, isWebGL2, loadTextureFromUrl, m4, primitives, programs, resizeCanvasToDisplaySize, resizeFramebufferInfo, resizeTexture, setAttribInfoBufferFromArray, setDefaults as setAttributeDefaults_, setAttributePrefix, setAttributes, setBlockUniforms, setBuffersAndAttributes, setDefaultTextureColor, setDefaults$2 as setDefaults, setEmptyTexture, setSamplerParameters, setDefaults$1 as setTextureDefaults_, setTextureFilteringForSize, setTextureFromArray, setTextureFromElement, setTextureParameters, setUniformBlock, setUniforms, setUniformsAndBindTextures, textures, typedarrays, utils, v3, vertexArrays };\n",null,null,null,null,null,null,null,null,null,null,null,null,null],"names":["ByteArray","constructor","this","pageSize","allocSize","realSize","pages","numPages","pageIdx","pagePtr","realPtr","newPage","pointer","ptr","setPointer","Uint8Array","length","Math","floor","writeByte","value","writeBytes","bytes","srcPtr","l","i","writeChars","str","charCodeAt","writeU8","writeU16","writeU32","getBytes","page","set","slice","getBuffer","buffer","DataStream","arrayBuffer","data","DataView","byteLength","seek","offset","whence","readUint8","val","getUint8","writeUint8","setUint8","readInt8","getInt8","writeInt8","setInt8","readUint16","littleEndian","getUint16","writeUint16","setUint16","readInt16","getInt16","writeInt16","setInt16","readUint32","getUint32","writeUint32","setUint32","readInt32","getInt32","writeInt32","setInt32","readBytes","count","forEach","byte","readHex","reverse","hex","push","toString","padStart","join","toUpperCase","readChars","chars","char","String","fromCharCode","string","readWideChars","Uint16Array","ADPCM_INDEX_TABLE_2BIT","Int8Array","ADPCM_INDEX_TABLE_4BIT","ADPCM_STEP_TABLE","Int16Array","clamp","n","h","pcmGetSample","src","srcSize","pcmGetClippingRatio","numSamples","numClippedSamples","sample","pcmGetRms","rms","pow","sqrt","assert","condition","errMsg","Error","assertRange","min","max","name","dynamicRequire","nodeModule","p","require","getGlobalObject","isNode","global","window","self","isBrowser","document","assertBrowserEnv","process","versions","node","assertNodeEnv","isWebWorker","SUBTLE_CRYPTO","crypto","msCrypto","subtle","module","webcrypto","ALGORITHM","async","rsaLoadPublicKey","pemKey","hashType","lines","split","filter","line","startsWith","endsWith","keyPlaintext","atob","keyBytes","map","_","importKey","hash","rsaVerify","key","signature","verify","dateFromNintendoTimestamp","timestamp","Date","timeGetNoteDuration","frameCount","framerate","FlipnoteRegion","exports","REGEX_PPM_FSID","REGEX_KWZ_FSID","REGEX_KWZ_DSI_LIBRARY_FSID","PPM_FSID_SPECIAL_CASE","KWZ_DSI_LIBRARY_FSID_SPECIAL_CASE_SUFFIX","id","convertPpmFsidToKwzFsidSuffix","isPpmFsid","fsid","test","includes","isKwzFsid","isKwzDsiLibraryFsid","suffix","getPpmFsidRegion","charAt","JPN","USA","EUR","UNKNOWN","getKwzFsidRegion","convertKwzFsidToPpmFsid","toLowerCase","FlipnoteFormat","FlipnoteThumbImageFormat","FlipnoteStereoscopicEye","FlipnoteAudioTrack","FlipnoteSoundEffectTrack","kwzIdSuffix","kwzFsid","ppmFsid","createElement","FlipnoteParserBase","_a","titleFormats","COMMENT","FLIPNOTE","ICON","soundMeta","Map","layerVisibility","isFolderIcon","isComment","isDsiLibraryNote","getTitle","formats","replace","meta","current","username","Symbol","toStringTag","iterator","getLayerPixels","frameIndex","layerIndex","imageBuffer","imageWidth","imageHeight","depthStrength","depthEye","Left","numLayers","palette","getFramePaletteIndices","palettePtr","numLayerColors","layerBuffer","decodeFrame","depth","getFrameLayerDepths","depthShift","srcStride","srcWidth","dstStride","width","height","xOffs","imageOffsetX","yOffs","imageOffsetY","fill","srcY","dstY","srcX","dstX","dstPtr","pixel","getLayerPixelsRgba","Uint32Array","paletteBuffer","getFramePaletteUint32","getFramePixels","layerOrder","getFrameLayerOrder","layerDepth","layers","getFramePixelsRgba","colors","getFramePalette","r","g","b","a","getSoundEffectFlagsForTrack","trackId","getSoundEffectFlags","flags","isSoundEffectUsedOnFrame","soundEffectTracks","getFrameSoundEffectFlags","hasAudioTrack","has","get","PPM_FRAMERATES","PPM_PALETTE","WHITE","BLACK","RED","BLUE","PPM_THUMB_PALETTE","PPM_PUBLIC_KEY","PpmParser","settings","super","format","PPM","aspect","publicKey","audioTracks","rawSampleRate","sampleRate","globalPalette","prevDecodedFrame","decodeHeader","decodeAnimationHeader","decodeSoundHeader","version","decodeMeta","layerBuffers","prevLayerBuffers","lineEncodingBuffers","frameDataLength","soundDataLength","soundDataOffset","readFilename","lock","thumbIndex","rootAuthorName","parentAuthorName","currentAuthorName","parentAuthorId","currentAuthorId","parentFilename","currentFilename","rootAuthorId","thumbFrameIndex","isSpinoff","loop","frameSpeed","bgmSpeed","duration","root","region","filename","parent","offsetTableLength","numOffsets","frameOffsets","bgmLen","se1Len","se2Len","se3Len","bgmrate","BGM","SE1","SE2","SE3","isKeyFrame","getThumbnailImage","pixels","tileY","tileX","x","y","Rgba","header","isTranslated","translateX","translateY","lineEncodingBuffer","pixelBuffer","pixelBufferPtr","lineHeader","chunk","layer1","layer2","layer1Prev","layer2Prev","w","startX","startY","endX","endY","shift","dest","size","isInverted","penMap","colorIndex","getIsKeyFrame","flag","getFrameAuthor","getFrameCameraFlags","decodeSoundFlags","undefined","soundFlags","numFlags","Array","frameFlags","SE4","getAudioTrackRaw","trackMeta","decodeAudioTrack","dst","stepIndex","predictor","lowNibble","step","diff","getAudioTrackPcm","dstFreq","srcPcm","srcFreq","bgmAdjust","srcLength","dstLength","adjFreq","pcmResampleNearestNeighbour","pcmAudioMix","dstOffset","dstSize","samp","getAudioMasterPcm","ceil","master","hasBgm","hasSe1","hasSe2","hasSe3","bgmPcm","samplesPerFrame","se1Pcm","se2Pcm","se3Pcm","seFlags","frame","seOffset","audioClipRatio","getBody","bodyEnd","subarray","getSignature","defaultSettings","KWZ_FRAMERATES","KWZ_PALETTE","YELLOW","GREEN","NONE","KWZ_PUBLIC_KEY","BITMASKS","KWZ_LINE_TABLE","KWZ_LINE_TABLE_SHIFT","c","d","e","f","KWZ_LINE_TABLE_COMMON","KWZ_LINE_TABLE_COMMON_SHIFT","lineTablePtr","shiftPixels","KwzParser","KWZ","bitIndex","bitValue","buildSectionMap","sectionMap","getFrameOffsets","dsiLibraryNote","borderCrop","fileSize","sectionCount","magic","substring","bodyEndOffset","readBits","num","nextBits","result","readFsid","mac","random","edits","quickMeta","decodeMetaQuick","creationTime","modifiedTime","rootFilename","layerFlags","creationTimestamp","isDsiFilename","numFrames","kmiSection","kmcSection","frameMetaOffsets","frameDataOffsets","frameLayerSizes","frameMetaPtr","frameDataPtr","layerASize","layerBSize","layerCSize","trackSizes","ktn","Jpeg","getFrameDiffingFlag","cameraFlags","depths","sort","diffingFlag","isPrevFrame","framePtr","layerSizes","layerSize","skipTileCounter","tileOffsetY","tileOffsetX","subTileOffsetY","subTileOffsetX","tileType","linePtr","mask","pattern","linePtrA","linePtrB","decodeFrameSoundFlags","decodeAdpcm","currByte","currBit","doGuess","initialBgmPredictor","initialBgmStepIndex","guessInitialBgmState","bestRms","bestStepIndex","trackIndex","indexOf","isArray","initialSePredictors","initialSeStepIndices","adj","weight","pcmResampleLinear","hasSe4","se4Pcm","soundEffectFlags","DEFAULT_LOADERS","matches","source","resolve","reject","xhr","XMLHttpRequest","open","responseType","onreadystatechange","readyState","status","response","type","statusText","send","res","chunks","on","Buffer","concat","err","File","FileReader","reader","onload","event","onerror","readAsArrayBuffer","Blob","Response","then","catch","ArrayBuffer","loadSource","loaders","Promise","loader","load","PlayerEvent","supportedEvents","Play","Pause","CanPlay","CanPlayThrough","SeekStart","SeekEnd","Duration","Loop","Ended","VolumeChange","Progress","TimeUpdate","FrameUpdate","FrameNext","FramePrev","FrameFirst","FrameLast","Ready","Load","LoadStart","LoadedData","LoadedMeta","Emptied","Close","createTimeRanges","ranges","start","end","padNumber","strLength","formatTime","seconds","CanvasStereoscopicMode","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","tt","Int32Array","Float32Array","getGLTypeForTypedArray","typedArray","Uint8ClampedArray","isArrayBuffer","SharedArrayBuffer","isTexture","gl","t","WebGLTexture","STATIC_DRAW","ARRAY_BUFFER","defaults","createBufferFromTypedArray","drawType","WebGLBuffer","createBuffer","array","bindBuffer","bufferData","setBufferFromTypedArray","isIndices","texcoordRE","colorRE","guessNumComponentsFromName","numComponents","makeTypedArray","Type","positionKeys","isWebGL2","texStorage2D","TEXTURE0","ARRAY_BUFFER$1","TEXTURE_2D$1","TEXTURE_CUBE_MAP$1","TEXTURE_3D$1","TEXTURE_2D_ARRAY$1","typeMap","getBindPointForSamplerType","bindPoint","intSetter","location","v","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","samplerSetter","unit","textureOrPair","texture","sampler","activeTexture","bindTexture","bindSampler","samplerArraySetter","units","ii","textures","index","floatAttribSetter","disableVertexAttribArray","vertexAttrib4fv","vertexAttrib3fv","vertexAttrib2fv","vertexAttrib1fv","enableVertexAttribArray","vertexAttribPointer","normalize","stride","divisor","vertexAttribDivisor","intAttribSetter","vertexAttrib4iv","vertexAttribIPointer","uintAttribSetter","vertexAttrib4uiv","matAttribSetter","typeInfo","defaultSize","rowOffset","FLOAT$3","setter","uniform1f","arraySetter","uniform1fv","uniform2fv","cols","uniform3fv","uniform4fv","INT$3","UNSIGNED_INT$3","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","rows","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","attrTypeMap","isBuiltIn","info","tokenRE","isDigit","s","addSetterToUniformTree","fullPath","uniformSetters","tokens","tokenNdx","path","token","isArrayIndex","accessor","parseInt","child","setUniformTree","tree","values","prop","setUniforms","setters","args","actualSetters","numArgs","aNdx","numValues","WebglCanvas","isSupported","testCanvas","testCtx","getContext","supported","options","supportedStereoscopeModes","None","Dual","stereoscopeMode","stereoscopeStrength","textureTypes","textureSizes","frameBufferTextures","applyFirefoxFix","refs","programs","shaders","buffers","frameBuffers","isCtxLost","handleContextLoss","destroy","preventDefault","onlost","handleContextRestored","init","onrestored","defaultOptions","canvas","addEventListener","className","antialias","alpha","appendChild","setCanvasSize","checkContextLoss","layerProgram","createProgram","upscaleProgram","quadBuffer","createScreenQuad","setBuffersAndAttribs","layerTexture","createTexture","RGBA","LINEAR","CLAMP_TO_EDGE","frameTexture","frameBuffer","createFramebuffer","debugInfo","getExtension","renderer","getParameter","UNMASKED_RENDERER_WEBGL","userAgent","navigator","isMacFirefox","vertexShaderSource","fragmentShaderSource","vert","createShader","VERTEX_SHADER","frag","FRAGMENT_SHADER","program","attachShader","linkProgram","getProgramParameter","LINK_STATUS","log","getProgramInfoLog","deleteProgram","programInfo","textureUnit","createUniformSetter","uniformInfo","uniformTree","numUniforms","getActiveUniform","substr","getUniformLocation","createUniformSetters","attribSetters","numAttribs","attribInfo","getActiveAttrib","getAttribLocation","createAttributeSetters","uniformBlockSpec","uniformData","uniformIndices","pair","pname","getActiveUniforms","ndx","blockSpecs","numUniformBlocks","getActiveUniformBlockName","blockSpec","getUniformBlockIndex","usedByVertexShader","getActiveUniformBlockParameter","usedByFragmentShader","used","createUniformBlockSpecFromProgram","transformFeedbackInfo","numVaryings","varying","getTransformFeedbackVarying","createTransformFeedbackInfo","createProgramInfoFromProgram","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","x0","y0","xSubdivs","ySubdivs","numVerts","numVertsAcross","positions","texCoords","positionPtr","texCoordPtr","u","indices","indicesPtr","bufferInfo","arrays","srcBufferInfo","newAttribs","attribs","Object","keys","arrayName","attribName","attrib","normalization","arrayType","numBytes","BYTES_PER_ELEMENT","typedArrayType","getGLTypeForTypedArrayType","getNormalizationForTypedArray","getArray","getNumComponents","createAttribsFromArrays","assign","newIndices","numElements","elementType","getBufferParameter","totalElements","getNumElementsFromAttributes","createBufferInfoFromArrays","position","texcoord","vertexArrayObject","bindVertexArray","setAttributes","minMag","wrap","tex","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","texImage2D","resizeTexture","textureType","fb","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","useFramebuffer","viewX","viewY","viewWidth","viewHeight","srcHeight","sx","drawingBufferWidth","sy","drawingBufferHeight","viewport","resizeFramebuffer","dpi","useDpi","devicePixelRatio","internalWidth","internalHeight","dstWidth","dstHeight","style","setNote","note","layerTexturePixelBuffer","layerTexturePixels","title","clear","color","paperColor","clearColor","COLOR_BUFFER_BIT","drawFrame","mode","strength","drawLayers","upscale","Right","useProgram","u_tex","u_textureSize","u_screenSize","drawElements","TRIANGLES","requestStereoScopeMode","forceUpdate","isErrorState","getError","NO_ERROR","shouldClear","layerDepths","u_flipY","u_3d_mode","u_3d_eye","u_3d_depth","u_3d_strength","isLost","getDataUrl","quality","toDataURL","getBlob","toBlob","deleteTexture","deleteBuffer","deleteFramebuffer","parentElement","parentNode","removeChild","Html5Canvas","ctx","srcCanvas","srcCtx","frameImage","createImageData","clearRect","fillStyle","fillRect","useSmoothing","imageSmoothingEnabled","putImageData","drawImage","UniversalCanvas","isReady","isHtml5","rendererStack","rendererStackIdx","setSubRenderer","Canvas","immediateLoss","fallbackIfPossible","switchToHtml5","_AudioContext","AudioContext","webkitAudioContext","WebAudioPlayer","useEq","useAnalyser","eqSettings","_volume","_loop","_startTime","_ctxStartTime","nodeRefs","volume","setVolume","getCtx","setBuffer","inputBuffer","audioBuffer","channelData","getChannelData","connectEqNodesTo","inNode","lastNode","frequency","gain","createBiquadFilter","connect","initNodes","createBufferSource","gainNode","createGain","analyserNode","createAnalyser","analyser","destination","setAnalyserEnabled","playFrom","currentTime","stop","getCurrentTime","disconnect","state","close","Player","parserSettings","autoplay","_src","_muted","_frame","_hasEnded","isNoteLoaded","events","playbackStartTime","playbackTime","playbackLoopId","showThumbnail","hasPlaybackStarted","isPlaying","wasPlaying","isSeeking","lastParser","lastLoaders","playbackLoop","now","currAudioTime","audio","currPlaybackTime","abs","pause","emit","setCurrentTime","requestAnimationFrame","mountPoint","querySelector","reload","el","paused","isPaused","play","currentFrame","setCurrentFrame","progress","setProgress","getVolume","muted","getMuted","setMuted","getLoop","setLoop","buffered","seekable","currentSrc","videoWidth","videoHeight","getParser","closeNote","openNote","promise","error","until","message","updateSettings","noteFormat","assertNoteLoaded","getTimeCounter","getFrameCounter","getProgress","performance","playAudio","cancelAnimationFrame","stopAudio","togglePlay","getPaused","getDuration","toggleLoop","newFrameValue","newFrameIndex","nextFrame","prevFrame","lastFrame","firstFrame","thumbnailFrame","startSeek","endSeek","resize","console","warn","setLayerVisibility","layer","getLayerVisibility","toggleLayerVisibility","toggleAudioEq","setAudioEq","mute","unmute","isMute","toggleMuted","seekToNextFrame","fastSeek","time","canPlayType","mediaType","getVideoPlaybackQuality","droppedVideoFrames","corruptedVideoFrames","totalVideoFrames","requestPictureInPicture","captureStream","eventType","listener","off","callback","callbackList","splice","__Any","apply","listenerName","thisAsAny","clearEvents","Destroy","supports","isEvent","isMethod","EncoderBase","dataUrl","from","getArrayBuffer","mimeType","getUrl","URL","createObjectURL","revokeUrl","revokeObjectURL","HSIZE","masks","LzwCompressor","colorDepth","accum","htab","codetab","cur_accum","cur_bits","curPixel","free_ent","clear_flg","g_init_bits","ClearCode","EOFCode","reset","initCodeSize","maxcode","char_out","outs","a_count","flush_char","cl_block","cl_hash","output","hsize","compress","init_bits","fcode","ent","disp","hsize_reg","hshift","n_bits","get_maxcode","nextPixel","outer_loop","encode","remaining","code","GifImage","compressor","fromFlipnote","flipnote","gif","delay","repeat","writeFrame","finish","fromFlipnoteFrame","writeFirstFrame","writeAdditionalFrame","writeHeader","writeLogicalScreenDescriptor","writeColorTable","writeNetscapeExt","writeGraphicControlExt","writeImageDescriptor","writePixels","fields","colorTableSize","colorTableLength","log2","getImage","img","Image","WavAudio","channels","bitsPerSample","headerBuffer","pcmData","wav","pcm","writeSamples","fromFlipnoteTrack","headerBytes","pcmBytes","resultBytes","Target","PlayerMixinClass","player","canvasEl","Reflect","ownKeys","prototype","desc","getOwnPropertyDescriptor","defineProperty","parserConfig","magicBytes"],"mappings":"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","x_google_ignoreList":[22]}